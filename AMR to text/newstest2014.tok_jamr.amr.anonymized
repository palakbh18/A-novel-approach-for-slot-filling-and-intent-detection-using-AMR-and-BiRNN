gutach :arg0-of ( increase :arg1 ( safe :arg1 pedestrian )  )
view :arg0 they :arg0-of ( operate :arg1 ( light :arg1-of ( exist :op1-of apart :op1-of ( location :name ( name :op1 b )  :wiki - )  :op1-of 33 :polarity - )  )  :arg2-of ( become :arg1 ( light :location ( country :name ( name :op1 dorfparkplatz )  )  :location ( country :name ( name :op1 gutach )  )  :mod new :mod pedestrian )  )  )  :arg1 traffic :location ( organization :name ( name :op1 town :op2 hall )  )  :op1-of tuesday :op1-of ( 100 :quant-of ( metr :mod even )  )
intend :arg0 ( light :consist ( set :quant 2 )  )  :arg1 another :op1-of ( or :mode interrogative :op2 ( error :mod just :mod silly )  )
answer :arg1 ( give :arg0 yesterday :arg1 gutacht :arg1-of clear :arg1-of ( have-org-role :arg0 ' :arg2 mayor )  :arg2 ( question :arg1 this )  )
cause :arg0 light :arg1 ( explain :arg0 ( school :mod-of route )  :arg1 yesterday :arg1-of ( install :arg0 ( organization :name ( name :op1 &quot; )  :op1-of traffic )  :arg2 this :time ( time :mod at )  )  :mod-of ( person :name ( name :op1 &quot; )  )  )
and :arg0-of ( travel :arg1 klus )  :op1 ( protect :arg0 light :arg1 cyclist )  :op2 bus :op3 ( person :arg0-of ( reside :arg1 ( country :name ( name :op1 bergle )  )  )  )
become :arg0 system :arg1 ( country :mod-of ( junction :beneficiary-of important :op2-of ( slash :op1 ( country :name ( name :op1 sulzbachweg )  )  )  )  :name ( name :op1 kirchstrasse )  )  :arg2 operate :manner official :time yesterday
and :op1 doctor :op2 ( practice :arg0 ( we :arg0-of ( stop :arg1 ( garden :quant spa )  :mod bus )  )  :arg1 ( mention :arg0 museum :arg1 traffic :arg1-of ( reside :arg0 grub :arg3 area )  :arg3 - )  )  :op3 bank :quant ( 2 :quant-of church )
say :arg0 additional :arg1 ( person :arg1-of safe :name ( name :op1 &quot; )  :op5-of ( and :arg1-of ( high :arg0 at )  :op1 of :op2 road :op3 pedestrian :op4 traffic )  )  :arg1-of ( ensure :arg0 light :arg1-of require )
confirm :arg0 ( person :name ( name :op1 peter :op2 arnold )  )  :arg1 this :arg2 ( organization :name ( name :op1 offenburg :op2 district :op3 office )  )  :mod also
say :arg0 ( country :name ( name :op1 &quot; )  )  :arg1 ( travel :arg0 vehicle :arg1 ( location :mod-of 33 :name ( name :op1 b )  :wiki - )  :arg1-of ( measure :arg0 current :op1-of around )  :arg2 daily :op1-of ( through :mod-of ( town :op1-of ( around :op2 ( good :mod-of traffic :mod-of account :op1-of heavy )  :op3 ten :op4 ( monetary-quantity :op1-of arnold :unit cent )  )  :op1-of of )  )  )
say :arg0 arnold :arg1 ( construct :arg0 additional :arg1 light :arg1-of ( come :degree more :location here )  :arg1-of safe :arg1-of ( simple :arg0 it )  )
and :arg0-of total :op1 ( carry-out :arg0 ( slash :op1 ( country :name ( name :op1 sulzbachweg )  )  :op2 ( junction :mod ( country :name ( name :op1 kirchstrasse )  )  :poss-of ( narrownes :mod-of ( account :arg2-of ( reject :arg0 4 :arg1 ( idea :mod this )  )  )  )  )  )  :arg1 ( inspect :arg0 ( safe :arg1 road )  )  )  :op2 ( consider :arg1 roundabout :mod also )
say :arg0 ( we :arg0-of ( test :arg1 vehicle :mod also )  :arg0-of ( carry-out :arg1 prior :arg1-of test :arg1-of possible :arg2-of ( select :arg1 ( of :arg0 location :arg1 traffic )  )  )  :arg0-of ( load :arg1 particular )  :arg0-of ( use :arg1 good :arg1-of ( post :arg0 ( possible :arg1 ( access :arg1 ( location :name ( name :op1 b )  :wiki - )  )  )  :arg1-of ( light :arg0 such )  )  :arg2-of ( mean :arg1 vehicle )  )  :arg0-of ( long :arg1 tree )  :arg0-of ( light :arg1 ( post :arg1 ( traffic :arg1-of ( knock-down :arg0 33 )  )  )  )  )  :arg1 every
explain :arg0 ( market :arg0-of ( light :arg1 traffic :mod-of system )  :arg1-of ( cost :op1-of around )  :arg1-of ( modern :mod-of ( system :mod that :mod most )  )  :arg1-of ( available :time current )  )
possible :arg1 ( see :arg0 ( person :arg0-of drive )  :arg1 light :concession ( low :arg1 sun :location sky :mod even )  )  :arg2-of ( bright :degree enough :time-of ( fit :arg1 system :instrument led )  )
and :arg0-of ( consume :arg1 ( one :arg2-of ( consume :arg0 ( system :mod old :mod light )  :arg1 ( around :op1 100 :quant-of ( person :name ( name :op1 watts )  :wiki anthony_watts_[blogger] )  )  )  :mod new )  :arg3 just )  :op1 ( efficient :arg0 8 :arg1 ( they :domain-of ( energy :mod also )  )  )
set :consist-of ( travel :arg1 direction )  :consist-of light :quant 3
sensor :arg2-of ( fit :arg0 ( person :arg0-of ( explain :arg1 ( technology :arg1-of ( use :arg0 ( system :mod new )  )  )  )  :name ( name :op1 arnold )  )  :arg1 it )  :mod radar :quant 2
check :arg0 ( sensor :mod radar :mod top )  :arg1 ( status :mod traffic )  :time ( button :location light :location traffic :op1-of ( press :mod pedestrian )  )
pedestrian :arg0-of ( obtain :arg1 ( light :arg1-of ( green :arg0 ( delay :arg1 ( temporal-quantity :op1-of around :quant 15 :unit second )  )  )  )  :condition ( clear :arg0 - :arg1 street )  :time immediate )
possible :arg1 ( end :arg1 ( phase :arg1-of green )  :arg2 ( check :arg1 sensor :arg2 ( radar :mod additional )  :duration pedestrian )  )
cause :arg0 ( or :op1 group :op2 of :op3 ( person :arg0-of ( disable :arg1 ( person :arg0-of ( cross :arg2 street )  :arg0-of ( green :arg1 phase )  )  )  :arg0-of ( extend :arg1 ( explain :arg0 street :arg1 ( person :name ( name :op1 &quot; )  )  )  )  )  )  :arg1 ( get :arg0 ( everyone :mod that )  :arg1 safe :arg1-of ( ensure :arg0 thus-far )  :arg2 across )
and :op1 ( play :arg0 ( person :arg0-of ( drive :arg1 road )  )  :mod also )  :op2 ( keep :arg1 eye )
green :arg2 ( pedestrian :arg1-of ( speed :arg0 ( vehicle :mod luxury )  :arg2 yesterday )  )  :arg2-of ( turn :arg0 red :arg1 light :arg1-of ( case :domain this :polarity - )  :degree bare )
write :arg0 ( person :arg0-of ( tell :arg1 ( hardship :poss ( childhood :op1-of ( and :op2 youth )  )  )  )  :name ( name :op1 josef :op2 winkler )  )  :arg1 ( more :op1 ( temporal-quantity :quant 30 :unit year )  )  :source heart
and :op1 ( force :mod brute )  :op2 ( sexuality :arg1-of ( dull :arg0 many )  )  :op3 ( lack :arg0 ( village :mod-of ( upbringing :mod ( religious-group :name ( name :op1 catholic )  :wiki catholicism )  :mod-of catastrophe )  )  :arg1 joy :op3-of ( and :op1 speechlessnes :op2 ( confinement :arg2-of ( describe :arg0 ( poet :arg1-of bear :wiki william_shakespeare )  :arg1 ( all :mod-of this )  )  )  )  )  :topic-of tendency
rarity :mod-of ( something :arg0-of ( text :arg1 theatre :arg3-of ( know :arg1 ( prizewinn :mod b√ºchn )  :arg2 ( person :arg0-of ( write :arg1 prose )  )  :mod primary )  )  )
possible :arg1 ( see :arg0 ( he :arg0-of ( text :arg1 ( create :arg0 ( person :name ( name :op1 in )  )  :arg1 x )  )  :arg0-of ( tip :arg1 ( lightning :mod summer )  )  :arg0-of ( perform :arg1 piece :time ( text :arg0 collage :arg1 prose )  )  )  :arg1 ( thing :name ( name :op1 in )  )  :arg1-of ( garage :arg0 tongue )  :time now )
feature :arg0 bondsman :arg1 ( prose :mod-of miniatur )  :arg2-of ( inspire :arg0 ( he :arg0-of ( stalk :arg1 corpse :arg2 family )  :poss-of ( 2003 :year-of date-entity )  )  :arg1 novel :arg2-of ( combine :arg0 thus-far :arg1 element :arg1-of ( produce :arg0 theatre )  )  :time ( date-entity :year 1987 )  )
and :op1 ( person :arg0-of ( work :arg1 ( way :poss ensemble :poss material )  :arg1-of ( cast :arg1-of ( have-org-role :arg0 ( person :arg0-of ( allude :arg1 ( sofa :arg1-of ( crumple :arg0 text )  )  :arg1-of ( empty :degree predominant :mod-of ( stage :arg1-of ( require :mod important )  )  )  )  )  :arg2 member )  )  )  :quant 8 )
seem :arg1 ( trust :arg0 ( person :arg0-of ( have-org-role :arg2 director )  :name ( name :op1 fresacher )  )  :arg1 text :manner little )
host :arg1 ( of :arg1-of ( have-org-role :arg2 director )  )  :manner-of ( know :arg0 addition :arg1 repertoire :manner ( perform :arg0 70 :arg1 script :arg1-of gloss :op1-of over :op1-of ( post :op2 dramatic )  :op1-of ( minute :unit-of temporal-quantity )  )  :mod well :time ( style :arg1 theater )  )
actress :arg0-of ( stage :arg1-of ( dubious :mod sometimes )  )  :arg0-of ( play :arg1 ( role :arg1-of major :mod particular )  )
manhandle :arg0 ( gown :time evening )  :arg1 ( they :arg0-of ( hold :arg1 ( person :arg0-of head )  :prep-under water )  )  :arg2 ( wall :arg2-of tack )
or :op1 ( monologu :arg1-of ( deliver :arg2 ( top :part-of voice )  :op1-of either )  )  :op2 ( lie :arg1 ( silent :arg1-of ( complete :arg1-of ( heel :arg1-of ( high :degree dangerous )  :arg1-of ( stumble :arg0 ( they :arg0-of ( wrap :manner ( or :op1 cellophane :op2 girdle )  )  )  )  :location ( across :op1 set )  )  )  )  :time stage )
make :arg0 ( text :arg0-of ( reference :arg1 ( deliver :arg1-of intense :mod this )  :mod any )  :mod source )  :degree bare
thing :arg0-of ( range :arg1 ( song :mod tradition :mod folk )  :arg1-of ( track :manner ( start :arg0 sing :arg1 ( moment :mod ( good :degree most )  :time-of evening )  )  )  )  :name ( name :op1 deep :op2 purple )
sense :arg0 ( we :arg0-of ( see :arg1 flash :op1-of ( and :arg2-of ( charge :arg0 end :arg1 ( perform :arg1 wind :arg1-of ( start :arg0 down )  )  :mod high :mod only )  )  )  )  :arg1 absurd :arg2 humour :mod somewhat
box :arg1-of ( black :arg0 interrogative )  :location car
plan :arg0 ( person :arg0-of ( crumble :arg1 ( highway :mod-of system )  )  :arg0-of ( find :arg1 car :manner ( begin :arg1-of ( see :arg0 many :arg1-of ( fit :arg0 box :arg2 dashboard :manner neat )  :arg1-of ( black :arg0 little )  :mode solution )  )  )  :arg0-of ( mend :arg1 cash )  :arg1-of ( struggle :arg0 ( country :name ( name :op1 america )  :wiki united_states )  )  )  :arg1 road
and :op1 ( drive :arg0 device :arg1 ( information :mod-of bureaucrat )  :mod motorist :op1-of ( and :op2 ( attempt :arg1 ( center :arg0-of ( major :arg1 road )  :mod-of of )  :manner controversy )  :op3 ( city :name ( name :op1 washington )  :wiki washington,_d.c. )  :op4 ( plan :arg0 state :arg1 ( thing :arg1-of overhaul :arg1-of ( fund :arg0 ( country :name ( name :op1 america )  :wiki united_states )  )  :degree-of outdated :mod-of system )  :time office )  )  :op1-of ( distance-quantity :quant every :quant track :unit mile )  )  :op2 ( transmit :arg1 that )
allianc :mod colorful :op2-of ( and :arg1-of ( spawn :manner sudden )  :op1 ( debate :arg1 ( arena :arg1-of ( dull :time usual )  :mod ( plan :arg1 highway )  )  :arg1-of intense )  )
and :arg0-of ( join :arg1 ( group :mod environment )  :purpose ( lobby :arg0 libertarian :arg1 ( allow :arg1 ( use :arg0 ( government-organization :arg0-of govern :arg0-of ( use :arg1 information :arg2 ( draw :arg1 ( bill :topic tax )  )  :time then )  )  :arg1 ( box :mod little )  :arg2 ( keep :arg1 track )  )  )  )  )  :op1 ( possible :arg1 ( you :arg0-of ( drive :arg1 ( you :arg0-of drive )  :arg2 ( distance-quantity :unit mile )  )  )  )
political-party :name ( name :op1 tea :op2 party )  :wiki tea_party_movement
concern :arg1 ( organization :arg0-of ( raise :arg1 ( variety :quant-of ( issue :arg0 privacy )  )  )  :name ( name :op1 american :op2 civil :op3 liberties :op4 union )  )  :arg1-of deep :degree too
state :arg0 ( government-organization :name ( name :op1 congress )  :wiki united_states_congress )  :arg1 ( and :arg1-of ( agree :polarity - )  :op1 while )  :arg1-of wait :arg1-of proceed :location - :mod several
roll :arg0 ( distance-quantity :manner-of ( pay :arg0 ( person :arg0-of drive )  :arg1 ( next :mod-of ( temporal-quantity :unit decade )  )  :arg3 ( system :arg2-of ( move :arg1 they :arg1-of ( possible :arg1-of ( explore :arg0 they )  )  )  )  )  :unit mile )  :arg1 road
take :arg0 ( thousand :mod motorist )  :arg1 ( box :arg1-of black )  :purpose ( drive :arg0 ( gp :arg1-of monitor )  :arg1 ( test :arg1 some )  )  :time already
nation :mod ( this :degree-of really )  :poss we
say :arg0 ( we :arg0-of ( do :arg1 ( something :mod of )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( organization :arg0-of ( plan :arg1 ( drive :arg0 it :arg1 ( state :name ( name :op1 california )  :wiki california )  :arg1-of ( track :arg0 ( state :arg0-of ( start :time ( date-entity :year 2025 )  )  )  )  :arg2 motorist :op1-of ( distance-quantity :quant every :unit mile )  :op1-of by )  )  :name ( name :op1 &quot; )  )  :arg2 director )  :name ( name :op1 &quot; )  )  :polarity - )  :arg0-of ( choose :arg1 matter :arg1-of possible )  )  :arg1 executive
tax :arg1-of ( pay :arg0 we :arg1-of change )  :mod this
do :arg0 technology :arg1 there
pump :arg1 ( gas :arg1-of ( pay :arg0 ( person :arg1-of finance :arg1-of tax :arg1-of ( come :arg1-of ( push :arg0 country :arg2 ( fund :arg0 trust :arg1 highway )  )  )  :mod ( country :name ( name :op1 america )  :wiki united_states )  )  )  :arg1-of break-up )
use :arg0 they :arg1 gas :arg2 ( buy :arg0 ( person :mod ( country :name ( name :op1 america )  :wiki united_states )  )  :arg1 much :polarity - )
more :degree-of ( many :quant-of ( mile :unit-of distance-quantity )  )  :op1-of ( gallon :mod car )
tax :arg0 federal :arg1 ( go :arg0 gallon :arg1 ( monetary-quantity :unit cent )  :polarity - :time ( 20 :quant-of ( temporal-quantity :unit year )  )  )
loath :domain ( person :arg0-of ( have-org-role :arg2 politician )  :arg0-of ( raise :arg1 ( penny :mod even )  :arg2 tax :condition ( high :arg1 ( price :arg1 gas )  )  )  )
say :arg0 gas :arg1 ( policy :arg0-of ( expert :arg1 ( state :name ( name :op1 minnesota )  :wiki minnesota )  :arg2 of )  :arg1-of ( transport :arg0 ( person :arg1-of ( sustain :arg0 just :polarity - )  :name ( name :op1 &quot; )  )  )  :arg1-of tax )
put :arg0 ( state :poss he )  :arg1 ( device :arg0-of ( test :arg1 ( system :mod ( distance-quantity :arg1-of pay :unit mile )  )  )  :arg0-of track )  :arg2 ( car :quant 500 )  :time recent
say :arg0 ( he :arg1-of ( work :arg0 this :arg2 out )  :arg2-of ( long :arg1 term :degree most )  )  :arg1 ( alternative :op2-of ( over :op1 logical )  )
call :arg0 wonk :arg1 ( base :arg1 ( person :arg0-of use )  :location mileage )  :arg2 fee
and :op1 ( reduce :arg1 gas :arg1-of ( help :arg0 ( pattern :arg1-of drive :arg1-of ( change :arg0 tax :arg1-of ( rig :arg1-of ( possible :condition-of ( appeal :arg0 idea :arg1 it :arg1-of ( surprise :polarity - )  :arg2 ( person :arg1-of liberal :mod urban )  :mod example )  )  )  )  )  :arg1-of possible :manner way )  )  :op2 congest :op3 greenhouse
devise :arg0 they :arg1 ( look :arg0 ( state :name ( name :op1 california )  :wiki california )  :arg1 strategy :arg1-of ( plan :arg0 ( person :arg0-of ( meet :arg1 ( goal :arg1-of ( lay :arg0 ( state :arg0-of ( warm :arg1 ( globe :mod ambitious :mod-of law )  )  )  :op1-of out )  )  )  )  )  :mod-of system )
contrast :arg0-of ( long :arg1 alternative :arg1-of ( see :arg0 he :manner too )  :degree ( viable :degree most )  )  :arg1 ( say :arg0 ( organization :name ( name :op1 r-pa )  )  )  :arg2 ( have-org-role :arg0 ( person :name ( name :name-of ( organization :name ( name :op1 rep. )  )  :op1 bill :op2 shuster )  )  :arg1 ( thing :mod ( government-organization :name ( name :op1 house )  :wiki united_states_house_of_representatives )  :name ( name :op1 transportation :op2 committee )  )  :arg2 chairman )
free :arg0 ( distance-quantity :unit mile )  :arg1 ( market :arg0 person :arg2 ( thing :arg1-of ( drive :arg0 ( person :arg0-of ( pay :arg1 also )  )  )  :name ( name :op1 reason :op2 foundation )  )  )
say :arg0 ( hole :arg1-of ( black :arg0 into )  )  :arg1 ( policy :arg1-of ( tax :mod just )  :arg1-of ( reason :arg0 ( person :arg0-of ( have-org-role :arg1 of :arg2 ( president :mod vice )  :polarity - )  :mod this :name ( name :op1 &quot; )  )  )  )
pay :arg0 person :arg1 ( more :arg1-of direct )  :arg2 they
bolster :arg0 ( secretari :arg1-of ( move :arg0 ( government-organization :name ( name :op1 congress )  :wiki united_states_congress )  :arg2 ( direction :arg1-of ( pay :arg0 former )  :mod ( distance-quantity :unit mile )  )  :arg2-of ( urge :arg0 ( report :source ( date-entity :year 2011 )  )  :arg1 government-organization )  )  :mod transportation :mod ( country :name ( name :op1 u.s. )  :wiki united_states )  :quant 2 )  :arg1 movement :mod also
approve :arg0 ( government-organization :mod ( country :name ( name :op1 u.s. )  :wiki united_states )  :name ( name :op1 senate )  :wiki united_states_senate )  :arg1 ( project :arg1-of ( pilot :arg0 90 )  :arg1-of ( involve :arg0 ( last :mod-of year )  )  )  :op1-of ( about :quant-of car )
contrast :arg1 ( work :arg1 ( distance-quantity :quant ( lot :arg1-of ( log :arg1-of ( involve :arg0 life :frequency often )  )  )  :unit mile )  :op1-of ( or :op2 town )  )  :arg2 ( kill :arg0 ( government-organization :name ( name :op1 house )  :wiki united_states_house_of_representatives )  :arg1 ( propose :arg0 ( leadership :arg0-of ( act :arg1 ( concern :arg1 ( lawmaker :arg0-of ( represent :arg1 constituent )  :mod rural )  )  )  )  )  )
move :arg0 ( and :op1 ( state :quant several )  )  :arg1 city :arg2 nonetheles :direction ahead
eager :arg1 most :arg1-of ( drive :arg1-of ( experiment :arg0 country :mod ( big :degree most )  )  :arg1-of enlist )
pay :arg0 ( person :arg0-of drive :mod that )  :arg1 ( fee :mod mileage )  :arg1-of ( instead-of :arg2 ( tax :arg1 state :arg3 gas )  )  :time soon
complete :arg0 ( country :name ( name :op1 nevada )  )  :arg1 pilot :time already
look :arg0 ( country :name ( name :op1 new :op2 york :op3 city )  )
try :arg0 ( state :arg2-of limit :name ( name :op1 illinois )  :wiki illinois )  :duration truck
and :op1 ( state :name ( name :op1 maryland )  :wiki maryland )  :op2 ( state :arg0-of ( implement :arg1 change :arg1-of ( go :arg0 ( they :arg0-of ( include :arg1 ( department :location ( along :op1 ( seaboard :location ( world-region :name ( name :op1 east )  :wiki eastern_world )  )  )  :mod transport :mod state :quant 17 )  )  )  :arg1-of ( possible :arg1-of ( study :op2-of ( and :op1 ( organization :name ( name :op1 i-95 :op2 coalition )  )  )  )  )  )  )  :name ( name :op1 virginia )  :wiki virginia )  :op3 ( state :name ( name :op1 florida )  :wiki florida )
hit :arg0 concept :mod universal :polarity -
equip :arg0 ( person :arg0-of ( volunteer :arg1 50 )  :arg0-of ( drive :arg1 ( long :arg1 device )  :arg1-of uneasy :arg1-of ( monitor :arg0 ( government-organization :arg0-of ( move :arg1 every :arg1-of ( possible :polarity - )  )  :arg0-of govern )  )  )  )  :arg1 car
say :arg0 ( thing :arg0-of ( major :arg1 problem )  :arg1-of ( concern :op1-of ( and :op2 about :op3 ( broadcast-program :mod-of ( sort :mod that )  :name ( name :op1 big :op2 brother )  :wiki big_brother_[tv_series] )  )  )  :mod of )  :arg1 ( and :op1 strategy :op2 ( perform :arg0 amr-unknown :arg1 ( manage :arg1 ( organization :name ( name :op1 &quot; )  )  )  :arg1-of ( direct :arg0 ( person :name ( name :op1 &quot; )  )  )  )  )
something :arg1-of ( want :arg0 person :polarity - )  :domain it
mean :arg0 website :arg1 ( it :arg0-of ( easy :arg0-of ( turn :arg1 ( get :arg1 underway :arg1-of warn )  :arg1-of ( fledge :arg0 ( device :mod this )  :arg1-of ( track :arg0 full :arg2 device )  )  )  :arg1 fair )  )
and :mod going :op1 ( individual :arg2-of ( keep :arg1 ( expand :arg1 record :arg1-of ( technology :mod infrastructure )  :arg1-of ( need :arg1-of ( build :location enormous :location unwieldy )  :arg1-of - )  :arg1-of inevitable )  )  )  :op2 everyday :op3 coming
contrast :arg1 exact :arg2 and :arg2-of ( find :arg0 ( state :arg1-of afford :quant ( several :mod - )  )  :arg1 ( technology :arg0-of ( allow :arg1 ( keep :arg0 state :arg1 track )  )  )  :arg1-of ( scramble :arg0 ( country :name ( name :op1 nevada )  )  :arg2 ( drive :arg0 time :arg1 car :arg2 ( distance-quantity :unit ( mile :quant many )  )  )  :time now )  )
comfortable :arg1 ( say :arg0 ( person :name ( name :op1 khan )  )  )  :arg2-of ( get :arg1 public :time ( do :arg0 you :arg1 that :arg1-of possible )  )  :degree more
true :op1-of ( name :arg2-of ( call :arg0 some :arg1 ( startup :arg3-of ( lead :arg0 ( hunt :arg1 ( technology :mod that )  )  :arg2 ( agency :mod state )  )  :mod ( state :name ( name :op1 california )  :wiki california )  :mod small )  )  :name-of thing :op2 mileage )
tax :arg0 state :arg1-of ( drive :arg0 ( person :arg1-of ( help :arg4 firm :mod-of ( business :location-of ( original :polarity - )  )  )  )  )
seek :arg0 it :arg1 ( break-up :arg1 ( market :arg0-of emerge :arg1-of ( pay :arg0 ( person :arg0-of drive )  :arg1-of ( base :arg2 mileage )  )  :arg2-of ( insure :arg1 auto )  )  :arg0 it )
contrast :arg1 device :arg2 ( and :arg1-of ( plan :arg0 ( person :arg0-of ( use :arg1 ( information :arg0-of modem :arg0-of ( upload :arg1 periodic )  )  :arg2 ( amount :arg1-of limit )  :time - )  :arg0-of ( appeal :arg1-of ( test :arg0 it )  )  )  :time highway )  :arg1-of ( cause :arg0 they )  :op1 deliver )
say :arg0 you :arg1 ( thing :arg1-of ( true :arg0 of )  :arg1-of ( do :arg0 ( person :arg0-of ( will :arg1 track :degree more )  :op1-of ( and :op2 track :op3 speed :op4 location )  )  :arg0-of ( cause :arg1 you :polarity - )  :arg2 this )  :name ( name :op1 &quot; )  :polarity - )  :arg2 ( person :arg0-of ( have-org-role :arg1 executive :arg2 chief )  :name ( name :op1 &quot; )  )
pilot :arg1 ( program :arg1-of ( mistake :arg0 some :mod big :quant some )  :mod this :mod state )
and :mod lot :op1 ( expensive :degree less :degree ( less :degree-of intrusive )  :mod-of ( way :manner-of ( do :arg1 this )  )  )
experiment :arg0 ( person :arg0-of ( give :arg1 ( choices :arg1-of differ )  :arg2 ( person :arg0-of drive )  )  :arg0-of plan )  :location ( country :name ( name :op1 oregon )  )
possible :arg1 ( choose :arg0 ( they :poss-of gp )  :arg1 device :op1-of or )
possible :arg0 flat :arg1 ( choose :arg0 ( they :arg0-of ( opt :arg1-of instead-of :purpose ( pay :arg1 ( fee :arg1-of ( base :arg2 ( number :arg1-of ( average :arg0 all )  :quant-of ( distance-quantity :arg1-of ( drive :arg0 ( person :arg0-of ( reside :arg1 state )  :quant all )  :arg2 - )  :unit mile )  )  )  )  )  )  )  :arg1 device )  :op1-of or
hope :arg0 ( place :mod ( other :mod-of ( device :arg0-of ( do :arg1 ( less :polarity - )  :extent more )  )  )  )  :arg1 ( sell :arg1 concept :arg2 ( public :mod wary )  )
equip :arg0 also :arg1 device :arg1-of ( pay :arg0 ( person :arg0-of ( have-org-role :arg2 official )  :arg0-of ( pay :arg1 ( fee :arg0-of ( provide :arg1 ( and :op1 ( create :arg1 pool :arg1-of ( speed :arg0 ( time :mod real )  )  )  :op2 ( drive :arg0 other :arg1 data :arg1-of ( use :arg0 motorist :arg1-of possible )  )  )  :arg1-of ( drive :arg0 ( you :arg0-of ( avoid :arg1 traffic )  )  :arg1-of insure )  )  :op1-of ( distance-quantity :unit meter )  )  )  :arg1-of develop :arg1-of ( seek :arg0 ( country :name ( name :op1 in )  )  :arg1-of tax )  :arg1-of transport )  :arg1-of park )
say :arg0 ( they :arg1-of ( offer :arg0 ( it :arg1-of ( benefit :arg0 ( participate :arg0 motorist :arg0-of ( cause :arg1 of )  :arg1 value :arg1-of attract )  )  )  )  )  :arg1 ( city :arg0-of ( plan :arg1 document )  )
wonder :arg0 ( person :arg0-of ( plan :arg1 ( transport :condition ( distract :mod giant :mod just )  )  )  :quant some )  :arg1 ( talk :arg1 all :arg2 ( pay :arg0 ( distance-quantity :unit mile )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( government-organization :arg0-of ( deal :arg1 ( country :location-of ( organization :location ( city :name ( name :op1 san :op2 francisco )  :wiki san_francisco )  :name ( name :op1 metropolitan :op2 transportation :op3 commission )  )  :name ( name :op1 bay :op2 area )  )  :arg2 ( organization :arg1-of bankrupt :name ( name :op1 highway :op2 trust :op3 fund )  )  :mod ( simple :degree very )  )  :arg0-of ( raise :arg1 ( tax :arg3 gas )  )  :name ( name :op1 congress )  :wiki united_states_congress )  :arg2 official )  )  :arg1 possible
cause :arg0 ( or :arg0-of ( impose :arg1 ( drive :arg0 ( extra :quant 1 )  :arg1 of :arg3-of ( do :arg0 other :arg1 vehicle :polarity - :time ( use :arg1 much :arg1-of ( pay :arg0 ( they :arg0-of ( share :arg1 fair )  )  )  )  )  :op1-of ( and :op2 hybrid )  )  )  :arg1-of possible :arg1-of ( levy :arg0 time )  )  :arg1 gas
say :arg0 ( you :arg0-of ( do :arg1 rentschl )  :arg0-of ( need :arg1 commission :arg1-of ( surgery :arg0 radical :arg1-of ( need :arg0 there )  )  :mod all )  :arg0-of ( take :arg1 aspirin :polarity - )  )  :arg1 ( and :op1 ( of :arg1-of ( have-org-role :arg0 ' :arg2 director )  )  :op2 legislation :op3 public :op4 affair )
concern :arg0 ( privacy :op1-of ( and :op2 ( host :arg0 this :arg1 ( thing :mod other )  )  )  )  :arg1 we :domain ( hundred :mod ( million :poss ( person :arg0-of drive )  )  )
give :arg1 ( perform :arg0 ( team :mod small :mod ( country :name ( name :op1 k√∂nigsfeld )  )  )  :arg1-of spirit )
come :arg1 ( bravely :arg1-of voluntary :mod service )  :manner ( run :arg1 ( test :arg1 ( fire :arg1 autumn )  :mod main )  :arg1-of ( have-org-role :arg0 ( person :arg1-of lack )  :arg2 personnel )  :location spite )
exercise :arg0 ( man :mod only )
choose :arg0 ( person :arg0-of ( have-org-role :arg1 department :arg2 commander )  :name ( name :op1 hans :op2 kammerer )  )  :arg1 ( premise :mod ( country :name ( name :op1 feder )  )  )  :arg2 ( country :name ( name :op1 burgberger :op2 strasse )  )  :purpose ( exercise :mod train )
report :arg1 ( occur :arg0 circuit :arg1 short :location there :time saw )
smoke :arg1-of ( spread :op2-of ( and :arg0-of ( injure :arg1 ( person :arg0-of ( call :arg1-of possible :mod emergency )  :quant 2 )  )  :op1 ( fire :arg1-of result )  )  )
prepare :arg1 ( enter :arg0 ( person :arg0-of ( fight :arg2 fire )  :arg1-of ( equip :arg2 ( gear :mod respiratory )  )  )  :arg1 ( build :arg1 2 )  :arg1-of ( follow :arg2 ( inspect :arg0 ( person :name ( name :op1 hans :op2 kammerer )  )  :arg1 situation :mod initial )  )  )
manage :arg0 they :arg1 ( find :arg1 person :op1-of ( and :arg1-of build :op2 direct )  :arg0 they )  :time ( after :op1 ( time :mod short )  )
carry-out :arg1 person
narrow :arg0 ( this :arg1-of ( simple :arg0 also :polarity - )  )  :arg1 ( stairwell :arg1-of ( negotiate :arg0 they )  )
integrate :arg1 ( stable :arg1 ( workshop :beneficiary ( horse :quant 2 )  )  :purpose ( secure :arg1 build :arg1-of ( easy :polarity - )  )  )
store :arg0 straw :arg1 bale :arg2 inside :op2-of ( and :op1 wood :quant ( quantity :mod large )  )
addition :arg2-of ( process :arg1 wood :purpose-of ( machine :mod electricity )  )  :topic ( this :op1 also )
extinguish :arg1 ( fire :arg1-of ( fire :mod-of engine )  )  :arg1-of ( attempt :arg2-of ( use :arg1 tank )  )
metr :quant ( around :domain-of ( line :arg1-of ( take :arg0 away :arg3 surface )  :mod another )  :op1 100 )
possible :arg1 ( extinguish :arg0 ( attempt :arg1 only :quant 3 )  :arg1 blaze )
use :arg1 ( nozzle :arg0-of ( stream :arg1 hollow )  :arg0-of build )  :mod also
possible :arg1 ( achieve :arg1 ( few :mod just :quant-of ( person :arg2-of staff :arg2-of available )  )  )  :arg1-of ( show :arg0 ( person :name ( name :op1 hans :op2 kammerer )  )  :arg1-of ( chance :arg0 exercise :mod also )  )
provide :arg0 ( force :mod task :mod ( country :name ( name :op1 k√∂nigsfeld )  )  :mod daytime )  :arg1 support :time ( case :arg1 emergency )
express :arg1 ( satisfy :arg1 ( have-org-role :arg2 commander )  )  :arg1-of ( follow :arg2 exercise )
and :op1 university :op2 company :op3 ( important :domain network )
explain :arg1 ( thing :arg0-of ( have-org-role :arg2 president )  :name ( name :op1 guido :op2 wolf )  )  :purpose ( visit :arg1 ( district :location ( country :arg0-of ( work :arg1 tomorrow :arg1-of come )  :name ( name :op1 breisgau-hochschwarzwald )  )  )  )
address :arg0 ( he :arg0-of ( support :arg1 centre )  :arg0-of ( question :arg1 alongside )  :arg1-of ( have-rel-role :arg0 ( person :op2-of ( and :op1 chair :op3 council :quant school )  :op3-of ( and :op1 district :op2 grammar :quant college )  )  :arg2 parent )  :poss-of ( executive :op1 principal )  :poss-of important :poss-of vocation )  :arg1 this
highlight :arg0 location :arg1 ( person :arg0-of ( have-org-role :arg1 of :arg2 director )  :name ( name :op1 &quot; )  )  :arg2 ( person :arg0-of ( introduce :arg1 ( network :arg1 ( organization :name ( name :op1 &quot; )  )  )  )  :mod ( important :mod education :mod-of factor )  :name ( name :op1 &quot; )  )
seem :arg1 ( impress :arg1 ( person :arg1-of educate :name ( name :op1 wolf )  )  )  :time presentation :time ( project :arg1-of pilot )
collaborate :arg0 ( centre :arg0-of support :op1-of ( and :op2 ( organization :name ( name :op1 vocational :op2 school :op3 complex )  )  )  )  :arg1 ( organization :name ( name :op1 district :op2 grammar :op3 school )  )  :arg1-of succeed :time ( since :op1 ( date-entity :year 2011 )  )
praise :arg0 he :arg1 ( approach :arg0 district :arg1-of ( friendly :arg2 family )  )  :mod also
contrast :arg1 of :arg2 ( change :arg0 demography :arg1 period :op1-of ( and :arg1-of ( provide :arg0 it :arg1-of spend )  :op2 ( care :arg0 ( term :arg1-of long )  :arg1 ( explain :arg0 well :arg1-of ( wolf :arg0 ( family :poss-of ( life :arg1-of ( keep :arg0 important :mod only )  :mod ( stage :mod-of mind )  )  )  )  )  :polarity - )  :op3 ( support :arg0 account :arg1 ( person :arg0-of ( have-rel-role :arg2 relative )  )  )  )  )
state :arg0 he :arg1 ( look :arg0 ( person :arg1-of employ :quant ( number :arg1-of increase )  )  :time ( after :op1 ( and :op1 ( care :arg1-of long )  :op2 ( support :arg1 ( person :arg0-of ( have-rel-role :arg2 relative )  )  )  )  )  )  :mod also
say :arg0 ( person :arg0-of ( terminate :arg1 of :arg1-of ( result :arg1-of possible )  )  :arg1-of ( place :arg0 employ :arg1-of result )  :arg1-of employ :arg1-of ( support :arg0 without )  :arg1-of ( burden :arg2 employ )  )  :arg1 wolf :arg1-of contract
add :arg1 ( he :arg0-of ( lose :arg1 ( qualify :arg1 ( person :arg0-of work )  )  :arg2-of ( afford :arg0 nobody :arg1-of possible )  )  )
factor :domain-of that :mod important :mod ( particular :arg1-of ( network :arg0 another :arg2 ( and :op1 university :op2 company )  )  )
say :arg0 ( study :arg0 during :arg0-of ( remain :arg1 region :op1-of within :op1-of ( and :arg0-of ( strengthen :arg1 region :arg1-of ( contribute :arg0 region )  )  :op2 ( acquire :arg0 along :arg1 skill )  :op3 knowledge )  :op2-of ( after :op1 all )  )  :arg1 often :arg1-of ( merit :arg0 amr-unknown )  )  :arg1 ( president :arg2-of ( have-org-role :arg0 ( person :arg0-of ( express :arg1 ( he :arg0-of ( convict :arg1 thorough )  )  )  :arg0-of ( learn :arg1 of )  )  :arg1 ( organization :name ( name :op1 &quot; )  )  )  )
need :arg0 ( person :arg0-of work :mod skill )  :arg1 ( number :arg0-of suffice :arg1-of educate :mod only :quant-of place )  :arg1-of ( cover :arg1-of ( possible :arg1-of ( provide :arg1-of possible )  )  )
opine :arg0 ( he :poss-of advantage :poss-of ( advantage :op1 location :poss ( south :part-of west :part-of ( country :location-of ( and :op1 ( country :name ( name :op1 switzerland )  :wiki switzerland )  :quant proximity )  :name ( name :op1 france )  :wiki france )  )  :poss ( country :name ( name :op1 germany )  :poss-of immediate :wiki germany )  :poss location )  )  :arg1 district
experience :arg0 ( he :arg0-of ( journey :mod train :source ( country :name ( name :op1 titisee-neustadt )  )  )  :poss-of ( addition :topic this )  )  :arg1 ( effort :arg0-of ( develop :arg1 ( transport :arg0 public )  :arg1-of ( undertake :time already )  )  :domain-of hand )
address :arg0 ( he :arg0-of explain :arg1-of ( become :arg2 even )  :arg1-of ( local :arg2 ( transport :arg0 public :arg1 good )  )  )  :arg1 ( give :arg0 ( you :arg0-of ( sure :arg1 that )  )  :arg1 ( politician :arg1-of local )  :arg2 attendance )  :arg1-of ( continue :arg0 must :op1-of ( and :op2 tenaciou )  )
make :arg0 music :arg1 ( afternoon :arg1-of entertain )
snack :arg0 it :arg1 ( thing :mod-of ( temporal-quantity :quant 15 :unit year )  :name ( name :op1 dietingen )  )  :arg1-of ( follow :arg2-of ( invite :arg0 family :arg1 ( citizen :mod senior )  :purpose ( and :op1 coffee :op2 cake )  )  )
host :arg0 ( canteen :mod station :mod service )  :arg1 ( citizen :mod elderly )  :time previous
hold :arg1 ( afternoon :mod ( coffee :arg0-of ( nurse :arg1 ( country :name ( name :op1 st. :op2 josef )  )  :mod-of home )  )  )  :time now
delight :arg0 ( person :arg0-of ( reside :arg1 home )  )  :arg2 ( and :op1 ( cake :mod delicious )  :op2 tart )
provide :arg1 ( salad :mod sausage )  :time late
attendance :arg1-of ( tune :arg1-of ( popular :op4-of ( and :arg0-of entertain :op1 ( person :name ( name :op1 silvia :op2 kimmich-bantle )  )  :op2 ( person :arg0-of ( have-rel-role :arg2 father )  )  :op3 ( thing :name ( name :op1 karl :op2 kimmich )  )  )  )  )
feature :arg1 ( plan :arg0 ( wall :arg1-of ( serve :arg2 ( boundary :mod foremost )  )  :arg1-of ( natural :mod-of ( stone :mod ( old :quant ( temporal-quantity :degree ( more :degree-of 100 )  :unit year )  )  )  )  )  :arg1 renovate :arg1-of ( renovate :arg0 ( yard :mod school :op1-of and )  )  :mod ( cost :arg1 old )  )  :arg2 town :mod ( again :mod once )
and :arg1-of ( install :arg0 ( wall :mod corner :mod small )  )  :condition ( carry :arg0 front :arg1 ( work :arg0 old :arg1 renovate :arg3 ( organization :name ( name :op1 kilbig :op2 autumn :op3 folk :op4 festival )  :op1-of ( before :time-of ( temporal-quantity :unit day )  )  )  )  :time ( yard :mod school )  )  :op1 ( relieve :arg0 balustrad :arg1 ( load :mod static )  )  :op2 ( wall :arg1-of ( natural :arg0 more :mod-of ( stone :mod old )  )  :age ( temporal-quantity :unit year )  )
say :arg0 ( person :name ( name :op1 alexander :op2 misok )  )  :arg1 ( plan :arg0 ( procedure :mod ongo )  :arg1 ( and :op1 ( involve :arg1 ( organization :name ( name :op1 regional :op2 memorial :op3 authority )  )  :arg2 ( stage :arg1-of ( plan :arg0 ( organization :name ( name :op1 br√§unlingen :op2 municipal :op3 planning :op4 and :op5 building :op6 control :op7 authority )  )  )  )  )  :op2 ( draw :arg1 ( concept :purpose renovate )  :arg3 ( wall :mod old )  )  )  )
determine :arg0 ( organization :arg2-of ( submit :arg1 professional :time then )  :name ( name :op1 town :op2 council )  )  :arg1 ( procedure :mod ongo )  :prep-with ( and :op1 ( decide :arg1 ( perform :arg0 team :arg1 ( calculation :mod cost )  )  )  )
expect :arg1 ( decide :arg1 ( come :arg1 year )  )
refurbishment :arg1-of ( need :op3-of ( and :op1 ( renovate :arg1 ( tree :arg1-of plant )  :arg2-of ( follow :arg1 ( renovate :arg1 ( wall :arg1-of ( measure :arg0 ( school :time ( date-entity :year 1912 )  )  :arg2 ( foresee :arg1 future )  :mod subsequent )  :mod boundary )  :arg2 ground )  )  )  :op2 ( plaster :arg0 ( old :mod-of ( yard :arg1-of internal :mod school )  )  :arg1 ( wing :quant 2 )  )  )  )
and :op1 water :op2 ( frost :arg1 primary :arg2-of ( lack :arg1 drainage :op1-of ( and :op2 ( lean :arg0 ( wall :arg0-of ( need :arg1 ( and :op1 school :op2 yard :op3 ( renovate :arg0 history :arg1 ( old :quant ( temporal-quantity :unit year )  )  )  )  )  :mod boundary )  :arg1 forward )  )  :topic-of account )  )  :op3 ( damage :arg1 old :arg1-of result )
testify :arg0 ( crack :arg1 danger :arg1-of ( deep :arg0 - )  )  :arg1 ( stone :mod individual :quant number )  :arg2 ( damage :arg0 present :arg1 weather :arg1-of ( collapse :arg0 wall )  )
and :op1 ( essential :domain ( wall :arg1-of secure )  )  :op2 ( purpose :domain ( this :arg2-of ( use :arg0 pupil :arg1 ( yard :mod school )  )  )  :poss ( work :arg1 fortification :time current )  )
mean :arg1 ( expend :arg0 ( unplann :arg1-of high )  :arg0-of ( push :arg1 ( work :arg1 ( slash :op1 ( date-entity :year 2009 )  )  )  :direction back )  :arg1 ( plan :arg1 ( renovate :arg1 yard :mod school )  :direction back :mod original :time ( date-entity :year 2008 )  )  )
say :arg0 ( organization :arg0-of ( renovate :arg1 wall :arg1-of ( use :arg2 film :mod even )  :mod ( history :mod-of school )  )  :name ( name :op1 regional :op2 memorial :op3 authority )  )  :arg1-of major
hope :arg1 ( receive :arg0 ( authority :arg0-of ( impose :arg1 ( thing :arg1-of require )  )  :mod this )  :arg1 ( subsidize :arg0 ( preservationist :mod monument )  )  :domain-of ( town :name ( country :name ( name :op1 br√§unlingen )  )  :time then )  )
possible :arg1 ( use :arg0 ( pupil :poss ( organization :arg1-of ( teach :arg0 old :time now :time ( build :arg1 school :arg1-of renovate :arg2 ( hall :mod new )  :mod old )  )  :name ( name :op1 br√§unlingen :op2 primary :op3 school )  )  )  :arg1 ( yard :mod school )  )  :time soon
want :arg0 ( person :name ( name :op1 √∂zdemir )  )  :arg1 ( train :arg1 jazz :location ( country :name ( name :op1 stuttgart )  )  )
engage :arg1 ( person :arg0-of ( have-org-role :arg1 ( political-party :name ( name :op1 green :op2 party )  :wiki green_party_of_the_united_states )  :arg2 ( chairman :mod federal )  )  :name ( name :op1 cem :op2 √∂zdemir )  )  :arg2 ( discuss :arg0-of ( regard :arg1 ( future :poss ( organization :name ( name :op1 baden-wuerttemberg :op2 music :op3 academy )  )  )  )  :arg1-of ongo )  :time now
say :arg0 college :arg1 ( thing :arg1-of ( speak :arg0 ( person :arg2-of ( train :arg0 ( comprehensive :arg1-of ( abandon :mod right )  )  :arg1 music )  :name ( name :op1 &quot; )  )  )  :arg1-of ( do :arg0 ( i :arg0-of ( think :arg1 it )  )  :polarity - )  :name ( name :op1 &quot; )  )
classics :mod-of ( music :arg1-of ( belong :arg0 ( and :op1 jazz )  :location ( location :location-of ( country :name ( name :op1 stuttgart )  )  :mod jazz )  :manner together )  )
favor :arg0 ( mandate :arg1-of direct )  :arg1 22 :location ( country :location-of ( elect :arg0 such :arg1 ( person :arg0-of ( disagree :arg1 ( organization :name ( name :op1 green-red :op2 state :op3 government )  )  )  :name ( name :op1 √∂zdemir )  )  :mod parliament )  :name ( name :op1 stuttgart )  )  :op1-of 9
urge :arg0 ( government-organization :arg0-of govern :arg0-of ( reorganize :arg1 ( music :quant 5 )  :arg1-of ( study :arg0 ( person :arg1-of expert :mod-of college )  )  )  :mod this )  :arg1 ( country :name ( name :op1 baden-wuerttemberg )  )
and :arg1-of ( plan :arg0 ( organization :name ( name :op1 mannheim :op2 music :op3 college )  )  :manner-of accord :mod this )  :op1 jazz :op2 ( course :arg0-of ( relocate :arg1 other :arg2 ( organization :name ( name :op1 stuttgart :op2 music :op3 college )  )  )  :mod pop )
tunnel :mod ( super :arg0-of ( smuggle :arg1 drug :arg2 ( discover :arg0 ( country :name ( name :op1 us )  :wiki united_states )  :arg1 border )  )  )
shut-down :arg0 ( person :arg0-of ( investigate :arg1 ( country :arg1-of border :name ( name :op1 mexico )  :wiki mexico )  )  :arg1-of discover :op2-of ( and :op1 ( country :name ( name :op1 usa )  :wiki united_states )  )  )  :arg1 ( and :op1 down :op2 ( intend :arg0 super-power :arg1 tunnel :arg1-of ( smuggle :arg0 drug )  )  )
equip :arg0 ( system :mod ventilation :op2-of ( and :op1 ( track :mod railway )  )  )  :arg1 pipe :arg1-of ( announce :arg0 ( organization :name ( name :op1 us :op2 customs :op3 authorities )  )  :arg2 500 )  :manner electricity :manner ( and :op1 ( country :name ( name :op1 tijuana )  )  :op2 ( city :name ( name :op1 san :op2 diego )  :wiki san_diego )  )  :purpose ( measure :arg1 metr :location ( length :quant more )  )
detain :arg1 ( person :arg1-of ( relate :arg2 discover )  :arg2-of ( suspect :arg1 ( and :op1 ( volume-quantity :quant 8 :unit tonne )  :op2 marijuana :op3 ( cocaine :arg1-of seize :quant ( mass-quantity :op1-of almost :quant 150 :unit kilogram )  )  )  )  :quant 3 )
say :arg0 ( detail :arg1-of provide )  :arg1 ( put :arg1 tunnel :arg2 use :mod yet :polarity - )
say :arg0 radar :arg1 ( country :arg0-of ( have-org-role :arg1 ( organization :arg0-of ( hold :arg1 conference :arg2 ( front :arg0-of ( warehouse :arg1 ( city :arg0-of ( end :arg1 ( tunnel :arg1-of ( discover :arg0 ( person :name ( name :op1 &quot; )  )  )  )  )  :name ( name :op1 san :op2 diego )  :wiki san_diego )  )  )  :mod press :mod that )  :name ( name :op1 &quot; )  )  :arg2 attorney )  :name ( name :op1 us )  :wiki united_states )  :arg2-of ( dig :arg0 they :arg1 ( through :op1-of under )  :arg1-of ( possible :arg1-of ( think :arg0 they :arg1-of ( cause :arg0 ( stupid :mod ( cartel :mod this )  )  )  )  )  )
determine :arg0 ( we :arg0-of ( dirty :arg1 ( money :arg1-of ( waste :arg0 ( you :arg0-of ( continue :arg1 gang :arg1-of refer :arg1-of ( assure :arg0 drug )  )  :arg0-of ( build :arg1 ( and :arg1-of attempt :op1 ( use :arg1 this :arg2 tunnel )  )  )  )  :mod big )  )  )  )  :arg1 this
engage :arg0 ( authority :mod ( country :mod-of ( force :mod security :mod ( country :name ( name :op1 mexico )  :wiki mexico )  )  :name ( name :op1 us )  :wiki united_states )  )  :arg1 and :arg2 ( battle :arg0 both :arg1 ( cartel :mod drug )  :mod ongo )
kill :arg1 ( person :quant more )  :location ( conjunction :arg2-of ( crime :location ( country :name ( name :op1 mexico )  :wiki mexico )  :mod drug )  )  :time ( since :op1 ( date-entity :year 2006 )  )
build :arg0 ( person :arg1-of expert )
and :arg0-of ( build :arg1 ( person :arg0-of ( work :arg1 assumption :arg2 ( configuration :arg1-of ( elaborate :arg2 around )  :poss tunnel )  :time year )  :arg0-of investigate )  :arg2 ( and :op1 ( construct :arg1 due )  )  )  :op1 architect :op2 ( person :arg0-of engineer )
equip :arg0 electrically :arg1 ( system :mod railway )  :manner ( way :manner-of ( use :arg1 ( cart :arg1-of power )  :arg1-of possible )  :mod such )
locate :arg0-of ( locate :arg1 ( build :arg0 ( country :arg2-of border :mod-of side :name ( name :op1 mexico )  :wiki mexico )  :arg1 ( metr :quant 80 )  )  )  :arg1 entrance
say :arg0 authority :arg1 ( run :arg0 ladder :arg1 ( metr :quant 20 )  :arg2 ( entrance :arg1-of ( actual :arg0 underground )  :poss tunnel )  )
tunnel :arg0-of ( cross :arg1 90 :arg1-of ( measure :arg0 section :manner across )  :op1-of ( and :op2 ( high :arg1 metr )  :op3 centimetr )  )
thus-far :arg1-of ( immigrate :arg1-of ( assist :arg2-of ( suitable :arg0 it )  )  :arg2 ( country :name ( name :op1 usa )  :wiki united_states )  :mod ( law :polarity - )  )
detain :arg1 ( person :arg2-of ( suspect :quant 2 )  )  :arg2 ( find :arg0 cocaine )  :location conjunction
detain :arg0 ( marijuana :arg1-of seize )  :arg1 ( country :name ( name :op1 mexico )  :wiki mexico )
say :arg0 authority :arg1 ( face :arg0 3 :arg1 ( penalize :arg2 ( imprison :arg1 all :mod life )  :manner maximum )  )
discover :arg1 ( tunnel :arg0-of ( continue :arg1 ( conference :location ( city :name ( name :op1 san :op2 diego )  :poss-of 8 :wiki san_diego )  :mod press )  :arg2 this )  :poss type )  :time ( since :op1 ( date-entity :year 2006 )  )
tunnel :arg1-of ( construct :location-of ( find :arg0 ( time :domain this )  :arg1 cocaine )  :mod such )
and :manner-of ( smuggle :arg0 - :arg1 ( cocaine :arg1-of ( normal :arg0 tunnel )  )  :manner ( quantity :quant small )  )
say :arg0 ( person :arg0-of ( show :arg1 gang :arg1-of ( despair :arg0 of :arg2 drug )  :mod this )  :name ( name :op1 this )  :poss ( organization :name ( name :op1 this )  )  )  :arg1 ( off :arg2-of ( cut :arg0 ( route :mod tradition )  :arg1 ( city :name ( name :op1 san :op2 diego )  :wiki san_diego )  :arg3 now )  )
do :arg0 they :arg1 anything :arg2 ( country :name ( name :op1 usa )  :wiki united_states )
contrast :arg1 ( give :arg1 ( detail :arg1-of specific )  :polarity - :time ( regard :arg1 detain )  )  :arg2 ( report :arg1 ( country :name ( name :op1 mexico )  :wiki mexico )  )
possible :arg1 ( expect :arg0 they :arg1 ( term :mod prison :op1 ( temporal-quantity :unit year )  )  )
celebrate :arg1 ( date-entity :year 2014 )  :mod-of ( year :location ( country :name ( name :op1 geisingen )  )  )
celebration :location ( town :name ( country :name ( name :op1 geisingen )  )  )  :purpose ( mark :arg0 anniversary )
draw :arg0 ( anniversary :topic ( mention :arg1 town :arg1-of document )  )  :arg1 close
end :arg0 8 :arg1 ( year :arg1-of ( come :arg0 ( year :mod anniversary )  )  )  :source ( just :mod-of ( temporal-quantity :unit week )  )
document :arg1 ( and :op1 ( country :name ( name :op1 geisingen )  )  :op2 ( country :name ( name :op1 kirchen-hausen )  )  )  :manner together :time year
draft :arg1 de :location ( country :name ( name :op1 kirchen )  )  :time-of ( mention :arg1 ( town :mod both )  )
and :op1 ( launch :arg0 ( temporal-quantity :unit year )  :arg1 ( year :mod anniversary )  :mod official :time 15 )  :op2 ( take :arg0 ( event :arg1-of ( launch :time ( date-entity :month 3 )  )  :mod this )  :arg1 place :arg1-of ( cause :arg0 ( venu :arg1-of suitable )  )  :condition ( country :name ( name :op1 geisingen )  )  :location ( location :arg0-of ( document :arg1 ( town :quant 2 )  )  )  :location ( country :name ( name :op1 kirchen-hausen )  )  :polarity - :time current )
and :arg1-of ( plan :arg0 both :arg2 ( number :quant-of event )  :op1-of ( anniversary :mod-of celebration )  )  :op1 ( country :name ( name :op1 geisingen )  )  :op2 ( country :name ( name :op1 kirchen-hausen )  )
celebrate :arg0 ( country :name ( name :op1 kirchen-hausen )  :poss 20 )  :arg1 anniversary :arg2 ( weekend :mod celebratory )  :op1-of 18
7
and :arg2-of ( hold :arg0 ceremony :arg1 party :location ( thing :name ( name :op1 kirchtalhalle )  )  :op1-of ( and :location friday )  )  :op1 saturday :op2 sunday
hold :arg1 ( festival :mod ( thing :name ( name :op1 kirchen-hausen :op2 kirchenfest )  )  )  :mod also :time ( weekend :mod celebratory :mod this )
compose :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 town :op2 musical )  )  :arg2 director )  :name ( name :op1 rudolf :op2 barth )  )  :arg1 ( piece :arg1-of commission :beneficiary town )  :arg2-of ( occasion :arg1 anniversary :arg1-of ( perform :arg2 ( date :quant 3 )  )  )
and :location firework :op1 13 :op2 12 :op3 ( put :arg0 ( mid :arg1-of summer :arg1-of ( black :arg0 conjunction :arg1-of ( forest :arg0 21 :arg1-of association )  :time ( date-entity :month 6 )  )  :poss-of festival )  :arg1 concert :arg1-of ( accompany :arg0 12 )  :arg1-of ( society :location-of ( hall :location new )  )  :arg2 musical )
and :op1 ( and :manner ( anniversary :mod-of year )  :op1 ( complete :arg1 ( venue :arg1-of ( inaugurate :arg2 28 :op1-of 9 :op1-of ( weekend :location 9 :mod last )  )  :mod this )  :arg2 ( date :mod official )  :op1-of 27 )  )
publish :arg1 ( chronicle :mod new )  :arg2-of ( occasion :arg0 anniversary :arg1 ( town :location ( country :name ( name :op1 geisingen )  )  )  )  :mod also
contrast :arg1 ( work :arg0 ( country :arg2-of ( chronicle :arg0 mere :arg1 of :polarity - )  :mod-of itself :name ( name :op1 &quot; )  )  :arg1 today :arg1-of ( print :arg0 it )  :op1-of ( and :arg0-of ( say :arg1 hengstl )  :arg2-of ( consist :arg0 howev :arg1 ( country :arg0-of ( have-org-role :arg1 walt :arg2 mayor )  :name ( name :op1 &quot; )  )  :time now )  :op2 gutmadingen )  )  :arg2 rather
form :arg0 ( incorporation :arg1-of ( complete :arg0 ( country :arg0-of ( celebrate :arg1 birthday :mod also :op1-of and :time ( date-entity :year 2014 )  )  :consist-of today :name ( name :op1 geisingen )  )  )  )  :arg1 ( region :time current )  :time ( date-entity :year 1974 )
chronicle :arg1 ( country :name ( name :op1 geisingen )  )  :arg1-of ( present :location ( country :mod new :name ( name :op1 festival :op2 hall )  )  :op1-of ( or :op2 22 )  :time ( date-entity :month 11 )  :time 21 )  :mod new
date-entity :domain-of ( year :mod ( anniversari :arg1-of ( respect :arg0 also :mod other )  :quant many )  )  :year 2014
and :op1 ( hold :arg0 ( 60 :op3-of ( slash :op1 ( begin :arg1 8 :arg1-of ( celebrate :arg0 guild )  :arg1-of fool )  :op2 ( occasion :arg0 ( customs :mod ( tradition :mod-of ( of :mod evening )  )  )  :arg1 it )  :op4 anniversary )  :quant-of ( temporal-quantity :unit year )  )  :arg1 ( district :arg1-of ( celebrate :arg0 4 )  :mod bezirksf :mod-of festival )  :op3-of ( and :mod old :op1 ( turn :arg1 ( 90 :quant-of ( temporal-quantity :quant 1 :unit year )  )  :arg1-of ( associate :arg0 music )  )  :op2 29 )  :time ( date-entity :month 3 )  :time ( date-entity :month 5 )  )  :op2 celebratory :op3 banquet :op4 then
and :op1 ( and :op1 ( turn :arg0 ( nurse :arg1 home )  :arg1 school :time now )  :op2 ( location :mod new )  :op3 ( 50 :quant-of ( temporal-quantity :mod old :quant 40 :unit year )  :quant-of ( temporal-quantity :quant 10 :unit year )  )  :op4 ( celebrate :arg0 it :arg1 this :time ( date-entity :month 5 )  )  )  :op1-of ( and :mod old :op2 ( associate :arg0 music :arg1 7 )  :op3 ( 150 :mod-of ( temporal-quantity :quant 7 :quant 4 :unit year )  )  :op4 ( celebrate :arg1 of :mod this )  :op5 ( fountain :mod brunnenf )  )
document :arg1 ( town :name ( country :arg0-of ( possess :arg1 ( country :name ( name :op1 st. :op2 gallen :op3 monastery )  )  :arg1-of ( donate :mod-of de )  :time now )  :name ( name :op1 geisingen )  )  )  :manner official :time year
draw :arg0 ( country :name ( name :op1 kirchen )  )  :arg1 de :arg2 ( country :name ( name :op1 hausen )  )  :op1-of ( courthouse :part location )  :op1-of time
mention :arg1 community :manner thus-far :medium ( de :arg1-of ( same :arg0 both )  )
coincide :arg0-of ( celebrate :arg1 ( anniversary :mod ( temporal-quantity :unit year )  )  :arg1-of ( choose :time ( date-entity :year 2014 )  :topic-of ( reason :quant 1 )  )  :manner ( way :mod this )  )  :arg2 ( anniversary :mod 40th :poss ( thing :name ( name :op1 community :op2 reform )  )  )  :mod also
set :arg0 council :arg1 ( sight :arg1 ( system :mod rail )  :arg0 council )
recommend :arg0 railway :arg1 ( thing :name ( name :op1 should )  )  :arg4 ( cross :arg1 ( reconstruct :arg1 ( cost :arg1 ( traffic :arg1-of ( increase :arg0 safe :mode interrogative )  )  )  :mod great )  )
answer :arg1 ( organization :arg0-of ( decide :arg1 yes )  :name ( name :op1 town :op2 councils )  )
contribute :arg0 ( country :name ( name :op1 schiltach )  )  :arg1 ( organization :name ( name :op1 eur )  )  :arg4 project
hope :arg0 ( organization :arg0-of ( come :arg1 year )  :name ( name :op1 deutsche :op2 bahn )  )  :arg1 ( improve :arg1 ( line :mod railway :mod ( thing :name ( name :op1 kinzigtal )  )  )  )
and :arg1-of ( safe :arg0-of ( increase :arg1 ( crossing :mod railway )  )  )  :op1 train :op2 ( vehicle :mod other )  :op3 ( country :mod particular :op1-of across )  :source-of ( occur :arg0 collision :arg1 this :arg1-of frequent )
and :arg2-of ( divide :arg1 remainder :arg1-of ( cost :arg1-of ( contribute :arg0 ( they :arg0-of ( agree :arg1 ( measure :arg1 ( reconstruct :arg1 federal )  )  :arg2 municipality )  )  :arg1-of require )  )  )  :op1 ( organization :name ( name :op1 deutsche :op2 bahn )  )  :op2 ( government-organization :arg0-of govern )
explain :arg0 ( master :mod-of mason :mod-of ( town :mod ( country :name ( name :op1 schiltach )  )  )  )  :arg1 grie√ühab :arg1-of ( be :arg0 of )  :mod-of peculiariti :purpose-of ( cross :arg0 council :arg1 railway :arg2 town )
plan :arg0 town :arg1 ( increase :arg1 ( height :poss ( mouth :poss tunnel )  )  )  :arg1-of ( cross :arg2 west :mod ( railway :mod-of line )  )
possible :arg1 ( wait :arg0 ( vehicle :mod large )  :arg1 ( example :arg1-of ( log :arg1-of ( long :arg0 ( transport :arg1 ( block :arg1 ( line :mod railway )  )  :mod that )  )  )  )  :location there :manner ( event :mod ( traffic :mod oncom )  )  )
suggest :arg0 ( person :name ( name :op1 grie√ühaber )  )  :arg1 ( construct :arg1 ( wall :arg1-of ( support :arg1-of require )  )  :arg2 ( widen :arg0 town :arg1 ( street :arg2-of adjoin )  :arg1-of possible :purpose ( guarantee :arg1 ( flow :arg1 traffic :arg1-of smooth )  )  )  :manner ( way :mod such )  )
state :arg0 ( person :arg2-of ( mean :arg1 ( need :arg0 ( we :arg0-of ( do :arg1 ( money :arg1-of ( cause :arg0 account :mode interrogative )  :arg1-of ( cause :arg0 hand )  )  :arg3 critic )  )  :arg1 road :arg1-of ( cast :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :arg0-of ( discuss :arg1 controversy :arg1-of ( subject :arg0 of :arg2 this )  )  :name ( name :op1 this )  )  :arg2 member )  :mod some :poss-of over )  )  :arg1-of ( doubt :arg0 council )  :arg1-of widen )  )  :name ( name :op1 this )  :poss-of perspective :poss-of ( vehicle :poss few )  :poss-of summarise )  :arg1 much :mod this
of :arg1-of ( long :arg1-of log :arg2 ( use :arg1 ( thing :arg1-of ( retort :arg0 ( person :arg0-of ( have-org-role :arg2 mayor )  :name ( name :op1 mayor )  )  )  :name ( name :op1 mayor )  )  :arg1-of transport :arg1-of ( cross :arg0 railway )  :arg1-of regular )  )
possible :arg1 ( use :arg0 ( length :mod metr :mod 20 )  :arg1 ( vehicle :arg0-of measure )  :arg1-of ( bridge :arg0 they )  :arg1-of ( possible :polarity - )  :arg2-of ( transport :arg0 occasional :arg1 ( area :mod-of ( route :mod this :mod ( even :mod-of wood )  )  )  )  :mod-of route )  :polarity -
permit :arg0 ( vehicle :arg2-of ( serve :arg0 route :arg1 bypass :arg1-of ( argue :arg0 ( person :name ( name :op1 haas )  )  )  :condition ( block :arg0 - :arg1 ( country :name ( name :op1 hauptstrasse )  )  )  :mod also )  )  :arg1 ( use :arg0 furthermore :arg1 tunnel )
and :op1 ( reconstruct :arg1 ( thing :arg1-of case :name ( name :op1 given )  )  )  :op2 ( renovate :arg1 current )  :op2-of ( and :arg1-of give :arg1-of likely :op1 tunnel )  :op3 ( become :arg1 ( of :arg1 ( traffic :arg1-of major )  )  :arg1-of ( possible :arg1-of ( cross :arg0 railway )  )  :arg2 ( long :arg1 ( period :arg1-of significant )  :degree time )  )
plan :arg1 ( widen :arg0-of ( incur :arg2-of ( conduct :arg1 ( investigate :arg0 ( councillor :arg0-of agree )  )  )  )  :arg1 road )  :arg1-of cost
possible :arg1 ( town :arg0-of ( require :arg1 ( connect :arg1 ( direction :arg1-of ( consent :arg0 ( railway :arg0-of ( cross :arg1 ( reconstruct :arg1 nevertheles )  :arg2 ( build :arg0 such :arg1 way :arg2-of ( provision :arg0 majority :arg1-of ( require :arg0-of ( support :arg1 wall )  )  )  )  )  )  )  :arg1-of ( accommodate :arg0 ( metr :mod ( 5.5 :op1-of around )  )  :arg2 ( oncom :mod-of traffic )  )  )  :arg1-of extend :arg2 road )  )  )
possible :arg0-of ( steep :arg1 ( person :arg2-of ( regard :arg0 ( other :arg0-of ( bring :arg1 hand )  )  :arg1 access :arg2-of ( differ :arg0 it :arg1 problem :mod entire )  )  :name ( name :op1 the )  )  )  :arg1 tannery :arg1-of ( cross :arg0 ( of :arg1-of reconstruct )  :mod railway )
investigate :arg0 ( plan :arg1 ( connect :arg1 of :arg1-of doubt :arg1-of ( plan :arg0 they :time straightforward )  :arg2 geroltzh√§us :mod wheth )  :time breinling :time office )  :arg1 engineering :arg1-of reconstruct :arg1-of administrate
stick :arg2-of ( become :arg0 ( inclination :arg1-of ( result :arg0 road :arg1-of ( possible :arg1-of ( rule :arg1-of ( possible :arg2-of ( come :arg1 investigate :arg4 conclude )  :polarity - )  )  )  )  )  :arg1 ( vehicle :arg1-of long )  )
responsible :arg0 authority :arg1 ( construct :arg1 road )  :purpose-of ( bear :arg1 ( responsible :arg0 town :arg1 this )  :time then )
result :arg1 reconstruct :arg1-of possible :arg2 ( dispute :arg1 liability )
and :arg1-of ( transport :arg1-of ( possible :arg0-of ( cause :arg1 ( recommend :arg1 ( consent :arg1 ( reconstruct :arg1 ( railway :arg1-of cross )  )  :polarity - )  :arg1-of ( argue :arg0 ( person :name ( name :op1 haas )  )  )  )  )  :concession thing )  )  :mod both :op1 both :op2 wood :op3 turn
midpoint :arg0-of ( position :arg1 ( vehicle :arg1-of ( collide :arg2 ( point :mod this )  :arg2-of ( risk :arg1-of ( low :arg1-of ( direct :arg2 ( alongside :op1 ( point :mod ( stop :arg1 account )  :part-of ( line :consist-of ( sight :arg1 fact )  :mod good )  )  )  )  :degree considerable )  )  :mod train )  )  :arg2 ( cross :arg1 ( railway :mod other :mod-of crossing )  )  )
come :arg1 ( train :arg1-of ( slow :arg0-of ( suffice :arg1-of ( collide :arg1-of threaten )  )  :mod also :polarity - )  )  :arg3 ( station :mod central )
say :arg0 ( line :arg0-of ( of :arg1 this )  :arg0-of ( reconstruct :arg1 railway )  :arg0-of ( bear :arg1 problem :location brunt :location town )  :arg0-of ( reject :arg1 majority )  )  :arg1 ( construct :arg1 ( work :arg0 ( organization :name ( name :op1 according )  )  )  :arg1-of ( become :arg2 vehicle )  :arg1-of follow :arg1-of cost :arg1-of deny :arg1-of ( responsible :arg0 any )  :arg1-of possible :arg1-of ( stick :arg0 since )  :arg1-of complete )
and :op1 ( reconstruct :arg1 of :arg1-of ( consider :arg0 committee )  )  :op2 ( agree :arg1 unproblematic :arg1-of ( cross :arg0 ( crossing :mod railway )  )  :arg1-of reach :time already )
make :arg0 ( government-organization :arg0-of ( decide :arg1 ( mission :arg1-of ( major :arg2 ( mission :arg1-of ( cost :arg2 billion )  )  )  :mod space )  )  :name ( name :op1 esa )  :wiki european_space_agency )
come :arg1 ( person :arg1-of ( expert :arg2 ( organization :name ( name :op1 european :op2 space :op3 agency )  :wiki european_space_agency )  )  :domain-of ( or :arg0-of ( agree :arg1 ( project :arg1-of launch :quant 2 )  :time now )  :op1 ( planet :mod distant )  :op2 ( wave :mod gravitational )  :op3 ( hole :arg1-of ( black :arg0 ( temporal-quantity :unit year )  :arg1-of major )  )  )  )
propose :arg1 ( thing :quant ( 30 :arg1-of ( run :arg0 5 )  )  )  :purpose ( choose :arg0 still )
distant :mod-of world
find :arg0 astronomer :arg1 ( near :arg1 planet :arg2 ( star :mod other :quant more )  )  :time already
or :arg0-of ( exist :arg1 ( life :polarity - )  :arg1-of ( know :arg0 ( one :polarity - )  :op1-of some )  :arg2 wheth )  :domain this
difficult :domain ( choose :arg1 ( recommend :arg1 ( search :arg0 we :arg1 interrogative :arg2 ( wave :mod gravitational )  )  )  )
or :arg0-of ( conduct :arg1 ( research :arg1 interrogative )  :arg1-of instead-of :arg2 ( originate :arg1 cosmo )  )
and :mode interrogative :op1 ( search :arg2 planet )  :op1-of or :op2 ( planet :arg2-of resemble :name ( name :op1 earth )  :wiki earth )  :op3 thus-far :op4 ( discover :arg1 ( life :mod extraterrestrial )  :manner perhaps )
responsible :arg1 ( question :arg1 this :arg1-of ( ask :arg0 ( organization :name ( name :op1 european :op2 space :op3 agency )  :wiki european_space_agency )  :arg2 ( government-organization :name ( name :op1 esa )  :wiki european_space_agency )  :time current )  )
recommend :arg0 ( space :mod-of project )  :arg1 ( look :arg0 they :arg1 ( thing :mod-of program :name ( name :op1 for )  :topic-of idea )  :arg1-of ( major :arg0 2 )  :arg1-of ( advance :arg0 great :arg0-of research )  )
lie :arg1 ( thing :domain budget :mod such :name ( name :op1 the )  )  :mod this :op1-of ( around :op2 1 :op3 euro )
plan :arg1 ( start :arg1 ( and :op1 ( date-entity :year 2034 )  )  :time ( date-entity :year 2028 )  )  :arg2 project
meet :arg0 space :arg1 research :location ( city :name ( name :op1 paris )  :wiki paris )  :purpose ( discuss :arg0 ( elite :location field )  :arg1 ( thing :arg1-of ( propose :arg0 ( mission :mod such )  )  :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :time ( begin :arg1 9 )
idea :arg1-of ( debate :arg1-of ( list :arg0 5 :duration short :op1-of onto :time now )  )  :quant 30
assess :arg0 ( panel :arg0-of ( pose :arg1 ( question :arg1 ( person :arg0-of research )  )  )  :mod numerou )  :arg1 ( thing :arg1-of propose )
decide :arg0 ( organization :name ( name :op1 scientific :op2 programme :op3 committee )  )  :arg1 ( come :arg1 ( day :unit-of ( temporal-quantity :op1-of over )  )  )  :mod final
answer :arg0 ( government-organization :arg0-of ( initiate :arg1 program )  :arg0-of ( find :arg1 ( thing :name ( name :op1 in )  )  :time ( date-entity :year 2007 )  :time mission )  :name ( name :op1 esa )  :wiki european_space_agency )  :arg1 ( choose :arg1 4 :arg1-of total :arg1-of ( question :arg0 main )  )
condition :arg1-of ( require :arg0 life :arg2 ( form :arg0 interrogative :arg1 ( and :op1 planet )  )  )  :domain amr-unknown
thus-far :time-of ( lie :arg0 ( and :op1 ( process :arg1 ( form :arg1 star :arg1-of form :arg2 ( cloud :arg1 gas :mod large )  )  :manner precise )  )  :arg1 ( star :arg1-of ( orbit :arg0 planet )  :mod this )  :arg2 ( darkness :mod proverbial )  )
possible :arg1 ( penetrate :arg0 ( telescope :location space :mod ( red :mod infra )  :mod large )  :arg1 ( darkness :mod this )  )
circumstance :arg1-of ( exist :arg0 life :arg1-of ( possible :mode interrogative :op3-of ( and :op1 star :op2 planet )  )  )  :location there
investigate :arg0 ( pursue :arg0-of ( question :arg1 this )  :arg0-of ( know :arg1 500 :manner ( planetary :mod-of system )  :time ( date-entity :year 2017 )  )  :arg1 ( space :arg1-of ( launch :arg0 telescope )  )  )  :arg1 ( detail :arg1 great )  :arg1-of ( will :arg0 proximity )
limit :arg0 ( small :mod-of ( mission :domain ( person :name ( name :op1 cheops )  )  :poss ( budget :poss ( thing :name ( name :op1 euro :op2 . )  )  )  )  )  :arg1 ( thing :arg1-of possible )  :arg2 150
indicate :arg1 ( search :arg0 atmospher :arg1 ( planet :arg0-of compose :name ( name :op1 earth )  :wiki earth )  :arg1-of ( serve :arg0 gas )  :arg1-of ( activity :arg0 biology )  :arg1-of ( mean :arg0 biomarker )  :op2-of ( and :op1 thus-far )  :op3-of ( and :arg2-of ( resemble :arg1 ( planet :arg1-of ( map :arg0 ( possible :arg0 astronomer :arg1 ( large :mod-of instrument )  )  )  )  )  :op1 even :op2 analyse )  )
function :arg0 ( system :mod solar )  :manner amr-unknown :mode interrogative
recommend :arg1 ( provide :arg1 ( information :arg0-of ( regard :arg1 ( precondition :mod ( origin :mod life )  )  )  )  :mod also )  :arg2 ( question :arg1 this )
magnet :mod-of ( field :arg1-of ( interact :op2-of ( and :op1 ( star :arg0-of ( activity :arg0-of ( play :arg1 ( role :mod important )  )  :arg1 magnet )  )  :op3 ( radiation :arg1-of emit :mod particle )  )  )  )
possible :arg1 ( investigate :arg0 ( it :arg0-of ( serve :arg1 ( example :arg1-of ( apply :location elsewhere )  )  )  )  :arg1 ( process :arg0 ( we :poss-of ( system :mod solar )  )  :mod this )  )
address :arg0 ( government-organization :arg0-of ( approve :arg1 ( vehicle :name ( name :op1 m1 )  :wiki m1_abrams )  :time already )  :arg0-of ( budget :arg1 mission :time-of ( stand :arg0 class :arg1 ( half :op1-of around )  )  )  :arg1-of orbit :name ( name :op1 esa )  :wiki european_space_agency )  :arg1 euro :arg1-of ( matter :mod this )
and :op1 ( observe :arg0 ( probe :arg1-of launch )  :arg1 ( and :op1 surface :op2 ( activity :arg1 sun )  )  :arg2 ( date-entity :year 2017 )  :manner close )
and :op1 ( moon :arg1 ( planet :arg0-of ( interest :arg1 ( person :arg0-of research )  :mod great :mod also )  :name ( name :op1 jupiter )  :wiki jupiter )  )
solar :mod-of ( system :arg1-of ( develop :arg2-of ( play :arg0 ( planet :mod giant )  :arg1 ( role :mod amr-unknown )  :arg1-of ( want :arg0 ( they :arg0-of ( find :arg1 we )  )  )  )  )  )
address :arg0 ( government-organization :arg0-of ( plan :arg1 that :time of :time 3 )  :name ( name :op1 esa )  :wiki european_space_agency )  :arg1 ( program :mod vision :poss ( organization :arg1-of total :mod-of cosmic :name ( name :op1 the )  )  )  :arg1-of ( subject :mod this )
plan :arg1 ( planet :arg1-of probe :arg1-of ( begin :mod-of ( journey :arg1 it )  )  :arg1-of explore :mod-of icy :name ( name :op1 jupiter )  :wiki jupiter )  :mod juice :time ( date-entity :year 2022 )
and :arg0-of ( moon :arg1 ( planet :poss-of ( atmosphere :arg1-of ( investigate :op2-of ( and :op1 ( reach :arg1 ( planet :name ( name :op1 jupiter )  :wiki jupiter )  :time ( late :op1 ( temporal-quantity :quant eight :unit year )  )  )  )  )  )  )  :mod icy )  :op1 ( country :name ( name :op1 europa )  )  :op2 ( person :name ( name :op1 callisto )  )  :op3 ( organization :name ( name :op1 ganymede )  )
law :domain amr-unknown :mod physical :mod basic :mode interrogative :poss universe
valid :arg0 ( and :manner-of ( offer :arg0 ( space :arg1-of out )  :arg1 ( thing :arg1-of possible :quant many )  )  :op1 study :op2 ( condition :mod extreme )  :op3 ( examine :arg1 substance :manner thus-far )  )  :arg1 ( law :arg1-of know :poss nature )  :degree there :mod still
possible :arg1 ( show :arg0 deviation :arg1 path :arg1-of possible :arg2 ( theory :mod new )  :instrument physician :time ( umbrella :arg0-of ( unite :arg1 ( law :arg1-of ( natural :arg0 also )  :arg1-of know :quant all )  :arg1-of possible )  )  )
and :mode interrogative :op1 ( come :arg1 universe :manner amr-unknown )  :op2 consist
create :arg0 ( organization :name ( name :op1 big :op2 bang )  )  :arg1 ( cosmo :op1-of ( temporal-quantity :unit year )  :poss we )
compose :arg0 ourselv :arg1 ( star :op1-of ( and :op2 planet :op3 ( life :mod-of form )  :op4 ( and :arg0-of ( hold :arg1 galaxy :manner together :topic-of ( force :mod gravitational :op1-of ( and :arg1-of ( exist :arg2 ( matter :arg1-of ( dark :arg2 ( accelerate :arg0 effect :arg1 ( expand :arg1 universe )  )  )  )  )  :op2 ( energy :arg1-of ( dark :arg0 such )  )  )  )  )  :op1 ( familiarize :arg1 ( material :op1-of alongside )  )  :op2 ( cluster :mod galaxy )  )  )  )
consist :arg0 ( and :arg0-of ( apply :arg1 ( law :mod physical )  :arg1-of ( know :arg0 ( person :arg0-of research )  :degree far :op1-of thu )  :arg2 ( moment :mod initial )  :time ( after :op1 ( organization :name ( name :op1 big :op2 bang )  )  )  )  :op1 ( energy :arg1-of dark )  )  :arg1 ( matter :arg1-of dark )
plan :arg0 ( government-organization :arg0-of ( approve :arg1 already )  :name ( name :op1 esa )  :wiki european_space_agency )  :arg0-of ( commence :arg1 mission )  :arg1 ( vehicle :name ( name :op1 m1 )  :wiki m1_abrams )  :time ( date-entity :year 2020 )
and :op1 ( matter :arg1-of dark :mod-of ( property :arg1-of ( regard :time-of ( draw :arg1 ( thing :arg1-of conclude )  :arg1-of ( enable :arg0 ( probe :arg0-of ( examine :arg1 ( distribute :arg1 material )  )  :arg1 ( telescope :arg1-of special )  )  :arg4 ( sky :mod entire :op1-of ( across :location-of universe )  )  :time thus-far )  )  )  )  )  :op2 ( energy :arg1-of dark )
proposal :arg1-of run
remain :arg0 ( only :op1 2 )  :arg1 ( thing :arg1-of propose :quant 30 )  :time ( end :arg1 ( procedure :instrument-of select )  )
opine :arg0 ( person :arg0-of ( aim :arg1 ( concept :arg1-of demand :mod that :mod ( good :degree most :manner-of ( approve :arg1 ( chance :arg1 of :arg1-of propose )  :arg2 l )  )  )  :arg1-of prove :arg1-of ( wave :arg0 gravitational )  :arg1-of exist )  :arg1-of expert :quant many )  :arg1 mission
perceive :arg0 ( physician :quant many )  :arg1 this :arg2 ( entail :arg1 ( change :arg1 ( structure :arg1-of ( predict :arg0 ( person :name ( name :op1 albert :op2 einstein )  :wiki albert_einstein )  :arg3 ( almost :op1 ( temporal-quantity :quant 100 :unit year )  )  )  :mod ( time :mod space )  )  )  )
prove :arg1 ( exist :arg0 they )  :arg2 date
hope :arg0 scientist :arg1 ( possible :arg0 ( project :op1-of behind )  :arg1 ( achieve :arg0 ( person :name ( name :op1 elisa )  )  :arg1 this )  )
or :arg0-of ( place :arg1 ( thing :arg0-of ( detect :location ( space :mod outer )  )  )  :arg1-of ( involve :arg0 2 :arg2 ( mission :arg0-of ( consist :arg1 ( probe :quant 3 )  )  )  )  )
prove :arg1 ( wave :mod gravitational )  :mod also :op1-of ( and :arg0-of ( regard :arg1 ( originate :arg1 cosmo )  )  :arg1-of possible :arg1-of ( create :time ( organization :name ( name :op1 big :op2 bang )  )  )  :op2 ( provide :arg1 ( knowledge :arg1-of fresh )  :manner thus-far )  )  :time ( unlike :op1 ( system :location ( planet :name ( name :op1 earth )  :wiki earth )  )  )
mean :arg1 ( large :mod-of x )  :arg2 ( l :arg2-of ( compete :arg0 ( thing :arg1-of propose :mod other :quant 4 )  :arg1 ( planet :arg1-of ( black :op1-of hole )  :arg1-of ( research :arg0 ( thing :arg1-of ( call :arg0 telescope :arg2 icy :op1-of athena :op1-of ( and :op2 ( mission :mod another )  :op3 prism :op4 cosmic :op5 background :op6 radiation )  :op1-of ( and :op2 ( find :arg0 planet :arg1 ( planet :arg1-of resemble :name ( name :op1 earth )  :wiki earth )  )  :op3 ( investigate :arg1 ( planet :arg1-of ( find :arg0 ( system :mod solar :mod outer )  )  :arg1-of ( measure :arg0 mission )  )  )  )  )  :mod other :mod among )  )  )  :mod still )  )  :mod place :mod mission
include :arg1 ( thing :arg1-of ( propose :arg2 ( bring :arg0 other :arg1 ( thing :arg1-of sample )  :arg2 ( country :name ( name :op1 mars )  )  :location back )  )  )  :arg2 ( thing :arg1-of propose :arg1-of ( rule :time already )  )  :purpose ( conduct :arg1 ( research :arg1 ( moon :op1-of ( and :op2 ( person :arg0-of ( propose :arg1 thing :location ( area :mod ( physics :mod solar )  )  )  :name ( name :op1 venus )  )  :op3 asteroid )  )  )  )
cooperate :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 ( country :arg1-of surveil :name ( name :op1 us )  :wiki united_states )  :arg1-of ready
answer :arg0 ( country :mod-of ( intelligence :mod-of whistleblow )  :name ( name :op1 us )  :wiki united_states )  :arg1 ( activity :arg0 ( country :name ( name :op1 germany )  :wiki germany )  )  :arg1-of ( provide :arg2-of ( fail :arg0 ( and :op1 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 us )  :wiki united_states )  :arg2 director )  :name ( name :op1 keith :op2 alexander )  )  )  :arg1 ( government-organization :name ( name :op1 national :op2 security :op3 agency )  :wiki national_security_agency )  :purpose-of ( give :arg1 evidence :arg2 parliament :purpose-of ( travel :arg1-of ( will :arg0 he :arg1-of ( declare :arg0 ( person :name ( name :op1 edward :op2 snowden )  )  )  )  :arg4 ( city :name ( name :op1 berlin )  :wiki berlin )  )  )  )  )
meet :arg0 ( person :name ( name :op1 hans-christian :op2 str√∂bele )  )  :arg1 ( thing :name ( name :op1 mr :op2 snowden )  )  :location ( country :arg0-of ( grant :arg1 asylum :arg2 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2 mp )  )  :domain he :time thursday )  :name ( name :op1 russia )  :wiki russia )  :purpose ( discuss :arg1 ( testify :arg1 ( country :name ( name :op1 germany )  :wiki germany )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg2 mp )  :arg1-of ( charge :arg0 felony :arg2 ( provide :arg0 media :arg1 ( and :op1 ( seek :arg0 ( government-organization :arg0-of ( govern :arg1 ( continue :arg0 i :arg1 ( effort :mod of )  :arg1-of ( treat :arg1-of dissent :arg2 defection )  )  )  :poss-of ( positive :mod demonstrable )  )  :arg2 ( politics :arg1-of ( speak :arg0 i )  :arg1-of criminalize )  )  )  :arg2 defend :mod that :polarity - )  )  :poss-of though :poss-of ( friday :poss ( city :name ( name :op1 berlin )  :wiki berlin )  )  )  :arg1 ( present :arg1 letter )  :arg2-of ( mean :arg1 outcome )
crime :arg1 ( speak :arg1 truth )  :polarity -
say :arg0 ( thing :name ( name :op1 mr :op2 snowden )  )  :arg1 ( believe :arg0 he :arg1 ( possible :arg1 ( persuade :arg0 ( support :arg1 ( community :mod international )  )  :arg2 ( abandon :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 us )  :wiki united_states )  )  )  :arg1 ( charge :mod criminal )  )  )  )  )  :time letter
include :arg1 ( and :op1 espionage :op2 theft )  :arg2 ( charge :arg1-of ( file :arg0 ( department :mod justice :mod ( country :arg1-of ( govern :arg0 ( government-organization :mod-of property )  )  :name ( name :op1 us )  :wiki united_states )  )  )  )
tell :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2 official )  :arg0-of ( speak :arg1 ( we :arg0-of ( find :arg1 this :arg1-of possible :manner way )  )  )  :arg1-of ( ready :arg0 mr )  )  :arg1 online :arg2 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2 ( minister :mod interior )  )  :name ( name :op1 hans-peter )  )
and :op1 ( between :mod relation )  :op2 ( country :name ( name :op1 us )  :wiki united_states )  :op3 ( country :name ( name :op1 germany )  :wiki germany )  :op4 ( come :arg1 ( claim :arg1 that :arg1-of ( bug :arg0-of ( have-org-role :arg1 ( angela_merkel :mod-of phone )  :arg2 chancellor )  )  :arg1-of ( follow :arg0 ( strain :wiki influenza_a_virus_subtype_h5n1 )  )  )  :op1-of under )
say :arg0 ( person :arg0-of ( oversee :arg1 intelligence :mod that )  :arg0-of ( head :arg1 ( parliament :mod-of panel )  )  )  :arg1 ( hear :arg0 ( person :name ( name :op1 thomas )  )  :arg1 there :arg2 opportunity :op1-of ( and :arg1-of ( bring :arg0 ( person :arg0-of witness )  )  :arg1-of complete :op2 into :op3 danger :op4 ( ruin :arg1 ( relation :arg0 ( country :name ( name :op1 us )  :wiki united_states )  )  )  :op5 ( take :arg0 ( person :arg0-of ( have-org-role :arg2 mp )  )  :arg1 it :arg1-of ( recommend :arg0 ( person :name ( name :op1 thomas )  )  )  )  )  :op1-of mr )
publish :arg0 ( political-party :arg0-of ( feed :arg1 ( product :name ( name :op1 twitter )  :wiki twitter )  :arg2 he )  :mod ( country :arg1-of ( have-org-role :arg0 ( person :mod mr )  :arg2 mp )  :name ( name :op1 germany )  :wiki germany )  :name ( name :op1 green :op2 party )  :wiki the_greens_[france] )  :arg1 ( picture :mod-of of )
accompany :arg1 he :purpose ( visit :arg0 ( journalist :mod ( country :name ( name :op1 germany )  :wiki germany )  :quant 2 )  :arg1 ( country :name ( name :op1 russia )  :wiki russia )  )
say :arg0 ( he :arg0-of ( say :arg1 mr )  :arg2-of ( return :arg1 ( country :name ( name :op1 russia )  :wiki russia )  :arg1-of ( possible :polarity - )  :purpose-of ( contractor :mod-of lawyer )  )  :mod-of left )  :arg1 former :mod that
say :arg0 ( person :arg0-of ( have-org-role :arg2 mp )  )  :arg1 ( need :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 ( he :arg0-of safe )  :arg1-of ( assure :arg0 ( he :arg0-of testify )  )  )
say :arg0 ( person :mod mr :name ( name :op1 mr )  )  :arg1 ( and :arg1-of ( face :arg0 ( he :arg0-of campaign :arg0-of ( persecute :arg1 of )  )  :arg2 letter :mod that )  :arg1-of sustain :arg2-of ( force :arg0 he :arg1 home )  :op1 severe )
say :arg0 ( he :arg0-of ( respond :arg1 worldwide )  )  :arg1 ( he :arg0-of ( express :arg1 politics )  :arg0-of hearten :arg0-of ( act :arg1 i )  )
judge :arg0 ( citizen :location ( around :op1 world :op2 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 united :op2 states )  :wiki united_states )  :arg2 official )  :arg1-of high )  )  )  :arg1 ( revelation :mod-of ( system :arg1-of account :mod ( surveil :mod pervasive )  )  )  :arg2 ( service :mod public )
difficulty :mod-of ( of :arg1-of ( cooperate :arg0 ( authority :arg0-of ( resolve :arg1 ( situation :mod humanitarian :mod this )  )  :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg1-of extend :arg1-of ( offer :arg0 letter )  )  )
charge :arg0 ( organization :name ( name :op1 frontier :op2 airlines )  )  :arg2 ( baggage :arg0-of carry )
plan :arg0 ( organization :name ( name :op1 frontier :op2 airlines )  )  :arg1 ( charge :arg1 board :purpose ( store :arg0 passenger :arg1 ( luggage :arg0-of carry )  :arg2 ( flight :arg1 100 )  )  :arg0 organization )
and :op1 ( bag :arg1-of carry )  :op2 ( possible :arg1 ( or :op1 coffee :op2 soda )  :arg1-of ( keep :arg0 ( passenger :arg0-of ( start :arg1 ( charge :arg1 2 )  :arg1-of ( plan :arg0 ( organization :arg0-of ( say :arg1 ( announce :arg1 wednesday )  :arg2 100 )  :name ( name :op1 frontier :op2 airlines )  )  )  )  )  )  :degree whole )
cause :arg0 ( fee :arg3-of ( carry :arg0 seat :arg1 ( bin :arg1 bag :mod overhead )  )  )  :arg1 ( free :arg0 new :arg1 ( bag :mod small )  :mod still )
say :arg0 ( organization :arg0-of ( charge :arg1 ( person :arg0-of ( pay :arg1 until :arg2 they )  :arg0-of ( pay :arg1 fee )  :arg0-of travel :arg1-of gate :arg1-of ( wait :arg2 100 )  :arg1-of advance )  :arg2 25 )  :name ( name :op1 frontier )  )  :arg1 it
say :arg0 ( person :arg0-of ( have-org-role :arg2 spokeswoman )  :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )  :arg1 ( take :arg0 ( person :arg0-of travel :arg1-of ( charge :arg0 fronti :arg2 ( fee :op1-of 100 )  )  )  :arg1 of :arg1-of care :arg1-of advance )
say :arg0 she :arg1 ( want :arg0 ( we :arg0-of do )  :arg0-of ( charge :arg1 that )  :polarity - )
check :arg1 bag :op2-of ( and :op1 ( charge :arg1-of ( begin :arg0 ( organization :name ( name :op1 airlines )  )  )  )  )  :time ( date-entity :year 2008 )
mean :arg0 ( stash :arg0 baggage :arg1 ( bin :arg0 ( they :arg0-of ( stuff :arg1 ( try :arg0 passenger :arg1 ( avoid :arg1 fee )  :location much )  :arg2-of possible )  :arg2-of carry )  :mod overhead )  )  :arg1 ( run :arg0 space :arg1 bin :frequency often )
way :arg3-of ( bring :arg0 passenger :arg1 less :arg2 board )  :domain fee
say :arg0 ( person :arg1-of ( charge :arg0 about :arg2 really :mod new :polarity - )  :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )  :arg1 ( money :arg1-of raise )
difficult :arg1-of ( increase :arg0 it )  :arg2-of ( become :arg1 ( space :arg1-of ( bin :arg0 about )  :manner-of ( find :arg0 loyal :arg1 ( clear :arg0 customer :arg1 fronti :degree very )  :manner overhead :manner most )  )  )
their :op1 ( buy :arg0 airline :arg1 amr-unknown :arg1-of ( pay :arg0 website :polarity - )  :op1-of ' :op1-of passenger :op1-of ticket )
mean :arg0 line :arg1 that :arg2 ( possible :arg1 ( owe :arg0 passenger :arg1 ( person :arg0-of ( bring :arg1 ( bag :part line )  :arg2 ( gate :arg1 fronti )  )  :mod next )  :arg1-of possible :arg2 ( bag :arg1-of ( resemble :arg1-of ( free :arg0 100 )  )  )  )  )
say :arg0 ( person :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )  :arg1 ( and :op1 website :op2 ( check :arg0 fronti :arg1 procedure :arg2 ( change :arg1 ( know :arg1 passenger :arg1-of ( gate :arg0 they )  :arg1-of sure )  )  )  :op3 ( fee :mod about :op1-of before )  )
carry :arg0 fronti :arg1 ( fee :arg0-of ( start :arg1 ( though :mod summer :mod-of date )  :polarity - :time until )  :polarity - )  :mod new
contrast :arg1 ( grumble :arg0 passenger :arg1 ( and :op1 ( charge :arg2 baggage )  :op2 ( fee :mod other )  )  :frequency often )  :arg2 ( love :arg0 airlin )
argue :arg0 they :arg1 ( cost :arg1 ( handle :arg1 luggage )  :op1-of ( and :op2 recommend :op3 ( pay :arg0 ( passenger :arg0-of ( want :arg1 service )  )  :arg1 money )  )  )
travel :arg0 air :arg1 ( temporal-quantity :unit year )  :arg2-of ( cost :arg0 many :arg1 ( airlin :arg0-of ( charge :arg1 ( money :arg1-of ( cover :time ( after :op1 loss )  )  :quant enough )  :arg1-of ( sign :arg2-of ( view :arg0 ( company :name ( name :op1 wall :op2 street )  :wiki wall_street )  :arg1 ( addition :mod ( fee :mod baggage )  )  )  )  )  )  )
carry :arg1-of ( touch :arg0 though :arg2 ( fee :op1-of bag )  :degree most )  :polarity -
and :op1 ( follow :arg0 ( organization :arg0-of ( start :arg1 ( fee :arg0-of carry )  )  :name ( name :op1 spirit :op2 airlines :op3 inc. )  )  :arg1 ( air :mod allegiant :mod ( fellow :arg1-of ( discount :arg0 ( 3 :quant-of ( temporal-quantity :unit year )  )  )  )  )  :time late )
say :arg0 ( person :arg0-of ( consult :arg1 ( jay :mod-of sorensen )  )  :arg0-of ( track :arg1 ( add :arg0 ( country :mod-of ( fee :mod ( other :mod-of ( airline :mod only )  )  :mod such )  :name ( name :op1 hungary )  :poss-of air :wiki hungary )  :arg1 fee :arg2 close )  )  )  :arg1 airline
report :arg0 ( he :arg0-of estimate :arg0-of ( spirit :arg1 ( carry :arg0 year )  )  :arg0-of ( bring :arg1 fee :arg2 50 )  )  :arg1 12 :time ( date-entity :year 2011 )
wonder :arg0 ( he :arg0-of fly :arg0-of ( find :arg1 ( former :mod-of executive )  :manner amr-unknown )  :arg0-of ( encounter :arg1 ( carry :arg0 ( usual :polarity - )  :arg1 bag :arg1-of spirit )  )  :arg0-of ( gate :arg1 passenger )  )  :op3-of ( and :op1 ( person :name ( name :op1 sorensen )  )  :op2 ( recent :arg1-of ( spirit :arg0 airlin )  )  :op4 fee )
say :arg0 ( he :poss-of career )  :arg1 ( see :arg0 ( i :arg1-of ( smooth :arg0 ( process :arg1 i :arg1-of board )  )  )  :arg1 airline )
expect :arg0 ( i :arg0-of ( gnash :arg1 tooth )  )  :arg1 ( see :arg1 ( and :op1 ( fight :arg1-of ( break :arg2 gate )  )  )  :arg0 i )
say :arg0 ( he :arg0-of ( board :arg1 it )  )  :arg1 ( and :arg1-of split :op1 ( plane :mod-of full )  )
charge :arg0 tea :arg1 ( or :arg1-of ( spirit :arg1-of ( follow :arg0 fronti :mod also )  )  :op1 soda :op2 juice )  :arg2 coffee :manner 2
say :arg0 ( organization :name ( name :op1 frontier )  )  :arg1 ( and :op1 ( keep :arg0 passenger :arg1 ( possible :arg1 ( or :op1 soda :op2 juice )  :degree whole )  :arg1-of possible )  :op2 ( give :arg1 ( refill :arg1 coffee )  :arg1-of free )  )
give :arg0 it :arg1 water :direction away :mod still
contrast :arg1 ( try :arg0 ( organization :name ( name :op1 us :op2 airways )  )  :arg1 ( charge :arg1 beverage :arg0 organization )  :time briefly :time ( date-entity :year 2008 )  )  :arg2 ( back :arg1 - :time ( after :op1 ( and :op1 ( complain :arg0 passenger )  :op2 ( follow :arg1 ( airline :arg1-of major :mod other )  )  )  )  :time ( late :op1 ( temporal-quantity :quant 7 :unit month )  )  :arg0 organization )
charge :arg0 website :arg1 ( carry :arg1 ( buy :arg0 passenger :arg1 airline :arg1-of direct :polarity - :purpose-of ( steer :arg0 it :arg1 customer :arg2 toward )  :purpose-of ( effort :mod ( late :degree most )  )  )  :arg1-of ( move :arg2 fronti )  )  :arg2 fee
pay :arg0 ( organization :name ( name :op1 airlines )  )  :arg1 25 :arg2 ( person :arg0-of ( sell :arg1 ( online :mod-of ( travel :arg1 10 )  )  )  :example ( organization :name ( name :op1 orbitz )  )  )  :arg3 ( sell :arg0 such :arg1 ( ticket :mod each )  )
travel :arg1 ( steer :arg1 passenger :arg1-of ( incentivize :arg1-of ( give :arg0 that :arg2 ( airlin :quant all )  )  )  :purpose ( buy :arg1-of instead-of :arg1-of direct )  )  :mod-of ( agency :mod online )
fronti :arg0-of ( go :arg1 furthest :location ( area :mod this )  )
travel :arg1 many :mod-of ( agency :manner-of ( buy :arg0 ( customer :arg2-of ( give :arg1 ( distance-quantity :arg1-of frequent :mod half :unit ( mile :mod fli )  )  :arg1-of ( begin :arg2 9 )  )  )  )  :mod online )
slash :arg1 ( award :arg1 wednesday :mod mileage )  :arg1-of ( trip :subevent ( distance-quantity :unit mile )  )  :arg3 ( percentage-entity :value 25 )
cause :arg1 ( earn :arg0 ( trip :arg1 fronti :arg1-of ( purchase :arg2 ( agency :mod travel :mod online )  )  :mod ( distance-quantity :unit mile )  )  :arg1 ( distance-quantity :quant 250 :unit mile )  )
allow :arg0 it :arg1 ( choose :arg0 passenger :arg1 seat :manner advance :purpose ( buy :arg0 they :arg1 ( website :poss ( organization :name ( name :op1 frontier )  )  )  :arg1-of direct :mod only )  )  :mod also
contrast :arg1 ( base :mod loyal :poss ( customer :location ( city :mod home :name ( name :name-of ( city :wiki denver )  :op1 denver )  )  )  )  :arg2 ( shrink :arg0 ( organization :name ( name :op1 frontier )  )  :arg1 business :op1-of ( and :op2 ( lose :arg1 money )  )  )
say :arg0 ( thing :arg1-of ( release :arg0 ( organization :mod parent :mod corporation :name ( name :op1 republic :op2 airways :op3 holdings :op4 inc )  )  :medium wednesday )  :arg2-of result :mod finance )  :arg1 ( shrink :arg0 ( percentage-entity :value 9 )  :arg1 ( and :arg1-of ( drop :arg0 revenue )  :op1 ( capacity :arg1-of quarter :mod ( fly :arg1 ( percentage-entity :value 13 )  )  )  )  :mod almost )
try :arg0 republic :arg0-of ( fix :arg1 fronti :arg2 ( sell :arg0 ( part :mod-of of )  :arg1 airline )  )  :arg1 ( ' :mod-of finance )
come :arg1 saying :arg3 ( book :name ( name :op1 bible )  :wiki bible )
attend :arg0 40 :arg1 woman :mod ( last :mod-of ( woman :location-of ( breakfast :location ( evangelical :mod-of parish )  )  )  :mod-of year )
age :arg1 middle_east :arg2 ( and :op1 theme :op2 ( hall :mod parish :mod ( day :mod of )  )  :op3 ( book :name ( name :op1 bible )  :poss saying :wiki bible )  :op4 expression )
agree :arg0 ( person :name ( name :op1 zita :op2 k√∂hler )  )  :arg1 ( give :arg1 ( talk :arg0 ( organization :name ( name :op1 chairperson :op2 of :op3 the :op4 parish :op5 council )  )  :arg1 ( proverb :mod ( thing :name ( name :op1 biblical )  )  )  )  :time ( after :op1 breakfast )  )
warn :arg0 ( or :arg1-of ( contain :arg0 proverb :arg0-of ( pearl :arg1 of :arg2 wisdom )  )  :op1 commandment )  :arg1 ( explain :arg0 she )
and :op1 ( compare :arg0 ( she :arg0-of ( verse :arg1 ( book :name ( name :op1 bible )  :wiki bible )  :arg1-of correspond )  )  :arg1 ( saying :mod ( country :name ( name :op1 germany )  :wiki germany )  :quant several )  )  :op2 ( explain :arg1 mean )
mean :arg0 ( she :arg0-of ( fall :arg1 den :arg1-of ( resemble :arg2 ( scale :arg0-of ( fall :arg1 eye )  )  )  )  :arg0-of ( cast :arg1 ( eye :mod-of someone )  )  :arg0-of ( keep :arg1 ( thing :arg1-of ( come :arg0 herr :op1-of ( and :arg2-of ( sleep :arg0 ( they :arg0-of ( wash :arg1 something )  )  :arg1 some )  :op2 seine :op3 hand )  )  :mod good )  :arg1-of ( peel :arg0 eye )  )  :arg0-of ( refer :arg1 saying )  )  :arg1 such
base :arg0 ( person :arg0-of speak :arg0-of ( ask :arg1 ( guess :arg1 proverb )  :arg1-of ( occasion :quant several )  :arg2 listen )  )  :arg1 they
age :arg0 middle_east :arg1 ( person :arg2-of ( mean :arg0 ( person :arg0-of ( work :arg1 etwa :location ( something :arg1-of ( wallop :arg0 verhauen )  )  :op3-of ( slash :op1 ( thing :arg1-of ( come :purpose thre )  :mod good :quant all )  :op2 ( skip :arg0 ( machen :mod blau )  :arg1 school )  )  )  :name ( name :op1 expressions )  )  :arg1 ( organization :mod-of ( guten :mod-of ( dinge :mod-of ( sind :mod-of drei )  )  )  :name ( name :op1 expressions )  )  )  :arg2-of ( address :arg1 by )  :name ( name :op1 expressions )  )  :arg2 ( from :mod expression )
mean :arg1 ( explain :arg0 she :arg1 past )  :op1-of ( and :op2 ( originate :arg0 ( she :arg0-of ( refer :arg1 bridge )  )  :arg1 expression )  )
round :arg0 morning :arg1 tombola
and :op1 ( place :arg1 ( prize :arg1 ( present :arg1 prior :arg2 winner )  :arg1-of cover )  :arg2 table )  :op2 ( paraphrase :degree humorously )
mayoral :mod-of ( candidate :arg1-of ( breakfast :arg2-of ( find :arg0 ( person :name ( name :op1 roman :op2 waizenegger )  )  :arg1 ( person :arg0-of visit )  :mod also )  :manner joint )  )
learn :arg0 ( project :arg1-of ( pilot :arg0 ( untrain :arg1-of ( employ :polarity - )  )  )  :mod tourism )
tour :arg0 ( person :mod-of ( industry :prep-for-of ( project :arg1-of ( launch :location ( district :mod ( country :name ( name :op1 mecklenburg )  )  :mod lake )  :time today )  :arg1-of pilot )  )  )
untrain :mod-of ( person :arg0-of work :arg2-of ( train :arg0 ( hotel :arg1-of ( qualify :arg0 winter )  )  :arg1 ( and :op1 ( man :quant 49 )  :op2 ( work :arg0 woman :arg1 ( manage :arg1 ( organization :name ( name :op1 federal :op2 employment :op3 agency )  )  :op1-of under )  :arg2 3 :location industry :time already )  :op3 ( person :arg2-of ( staff :arg1 restaurant )  )  )  :op1-of and )  )
say :arg0 diploma :arg1 wiechert :arg2 ( employ :arg0 of :arg1 agency )  :arg2-of ( end :arg0 ( 6 :mod that :quant-of ( temporal-quantity :unit month )  )  :op1-of course )  :arg2-of ( innovate :arg0 ( ' :op1 amr-unknown )  :arg1 it :op1-of about )
and :arg1-of ( demand :arg1-of ( increase :manner ( continue :arg1 - )  )  :location hotel )  :op1 restaurant :op2 ( and :op1 ( benefit :quant many )  :op2 ( employ :arg1 ( person :arg0-of participate )  :polarity - )  :op3 ( receive :arg0 company :arg1 ( person :arg0-of ( work :arg1-of train )  :mod skill )  )  )  :op3 ( agency :arg0-of ( fund :arg1 ( employ :polarity - )  )  )
and :op1 ( hotel :location ( country :name ( name :op1 germany )  :wiki germany )  :op2-of ( and :op1 ( country :name ( name :op1 neubrandenburg )  :op3-of ( and :op1 ( organization :arg1-of ( involve :arg0 restaurant :arg2 project :mod also )  :name ( name :op1 chamber :op2 of :op3 industry )  )  :op2 commerce )  )  :op3 ( thing :name ( name :op1 mecklenburg :op2 - :op3 western :op4 pomerania )  )  )  )  :op2 ( organization :name ( name :op1 association :op2 deutsche :op3 hotel- :op4 und :op5 gastst√§tte )  )
crash :arg0 ( person :arg0-of ( hack :arg1 error :polarity - )  :arg2-of ( blame :arg0 ( organization :name ( name :op1 nsa )  )  :arg1 internal )  )  :arg1 website
say :arg0 ( government-organization :arg0-of ( claim :arg1 ( person :arg0-of ( hack :arg1 some :polarity - )  )  :medium online )  :mod shadow :name ( name :op1 national :op2 security :op3 agency )  :wiki national_security_agency )  :arg1 ( glitch :arg0-of ( bring :arg1 ( website :mod public )  :duration ( temporal-quantity :op1-of few :unit hour )  )  )  :time ( friday :mod late )
state :arg0 ( email :arg0 ( several :arg1-of ( access :polarity - )  :quant-of ( temporal-quantity :unit hour )  )  :arg1-of spy :arg1-of ( update :arg1-of ( schedule :arg0 ( during :arg1-of ( occur :arg0 ( error :arg1-of ( internal :arg0 ( of :arg1-of ( cause :arg0 tonight )  )  )  )  )  )  )  )  :arg1-of ( say :arg0 agency )  )  :arg1 that
resolve :arg1 issue :time ( evening :mod this )
cause :arg0 outage :arg1 ( by :arg0-of ( distribute :arg1 ( denial :mod-of ( of :mod-of service )  )  )  :arg2-of ( claim :arg1 that )  :op1 ( true :arg1-of attack :mod ddo :polarity - )  )
note :arg0 tracker :op1-of ( and :op2 ' :op3 website :op4 ( 6 :quant-of at :quant-of least :quant-of ( temporal-quantity :unit hour )  )  :op5 ( continue :arg0 down :arg1 site :arg1-of ( access :arg0 ( user :mod some )  )  )  )  :time ( early :mod-of evening :mod-of this )  :time ( server :mod-of online )  :time nsa
tell :arg0 ( person :arg0-of ( have-org-role :arg2 spokesperson )  )  :arg1 agency :arg2 ( organization :arg0-of ( compromise :arg1 all :polarity - )  :arg0-of ( internal :arg1 ( sensitive :arg1 network )  )  :name ( name :op1 abc :op2 news )  :wiki abc_news )  :time early
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( information :arg1-of ( classify :polarity - )  )  :arg2 spokesperson )  )  :arg1 danger
claim :arg0 ( online :poss group )  :arg1 ( responsible :arg1 ( they :arg0-of ( bring :arg1 ( site :mod ( organization :name ( name :op1 nsa )  )  )  :manner ( attack :arg1 ddo )  )  )  )
and :op1 ( overload :arg0 ( attack :arg1-of ( design :arg3 ( flood :arg1 ( website :arg1-of target :topic traffic )  :time until )  )  :mod ddo )  :arg1 server )  :op2 ( collapse :arg0 site )
tactic :arg0-of ( penetrate :arg1 ( network :arg1-of ( internal :arg0 relative )  :consist-of ( system :arg1-of target )  )  :arg1-of ( mean :op1-of and :polarity - )  :arg2 attack )  :domain-of ( sophisticated :polarity - )  :mod cyber
reveal :arg1 former :arg1-of ( stream :arg2-of ( follow :arg0 vast :arg1 ( temporal-quantity :arg1-of ( surveil :arg0 ( program :mod domestic :op3-of ( and :op1 ( find :arg0 ( organization :arg1-of ( nickname :arg2 ( organization :name ( name :op1 no :op2 such :op3 agency )  )  :time once )  :mod secretive :mod super-power :name ( name :op1 nsa )  )  :arg1 ( and :op1 ( criticize :arg0 vicious :arg1 former )  )  :location ( light :mod ( public :degree very )  )  )  :op2 foreign :poss ( file :arg1-of ( steal :arg2 agency :op1-of ( and :op2 ( leak :arg0 ( person :arg1-of disenchant :mod contractor :name ( name :op1 edward :op2 snowden )  )  :arg1 collective )  )  )  :mod secret :mod-of product )  )  )  )  :op1-of past :unit month )  )  )
prompt :arg0 agency :arg1 ( cyber :arg1-of ( target :arg0 of )  :arg2-of ( result :arg1 incident )  :mod-of operation )  :arg1-of surround :time ( early :time-of ( speculate :arg1 ( that :mod-of tonight )  :arg1-of ( grow :op1-of controversy :op1-of such )  )  )
jobless :arg0-of ( fall :arg1 number :arg2 slight :arg4 ( total :arg1 22 )  :time ( date-entity :month 10 )  )
say :arg0 ( person :arg0-of ( act :arg1 ( branch :mod-of ( manage :arg1 ( employ :arg1 agency )  )  )  )  :name ( name :op1 the )  )  :arg1 ( hope :arg0 we :arg1 more :op5-of ( and :op1 ( rate :mod-of of )  :op2 ( good :mod ( indeed :mod-of ( temporal-quantity :unit year )  )  :poss ( monetary-quantity :unit cent )  )  :op3 previous :op4 ( good :mod also )  :time ( date-entity :month 9 )  )  )
hire :arg1-of ( come :time-of ( react :arg0 ( company :quant several )  :degree far :manner cautious :time thus-far )  )
state :arg0 ( person :arg0-of ( say :arg1 ( and :op1 craft :op2 trade :op3 ( and :op1 ( person :arg0-of ( work :arg1 ( field :arg1-of of )  :mod any )  )  :op2 healthcare :op3 geriatric :op4 care )  )  :arg2-of ( mean :arg1 we )  :degree bare )  :mod this :name ( name :op1 stating )  )  :arg1 reason
and :arg1-of ( staff :arg2 ( person :arg0-of ( offer :arg1 job :arg1-of ( come :time ( since :op1 9 )  )  :mod seasonal )  )  )  :op1 hotel :op2 restaurant :poss-of business
begin :arg0 ( season :mod winter )  :arg1 industry :location 12 :location mid
report :arg0 background :arg1 this :arg1-of complete :manner-of ( find :arg1 ( thing :name ( name :op1 the )  :op1-of ( slash :op2 ( date :arg0 newspaper )  :op3 31 )  :op1-of ( slash :op2 10 :op3 page :op4 33 :time ( date-entity :year 2013 )  )  )  :arg1-of possible )
plane :arg1-of ( deliver :prep-as-of ( dip :arg1 profit :arg2-of ( fall :arg1 order )  )  )
report :arg1 ( fall :arg0 ( and :op1 ( organization :arg0-of ( make :arg1 train )  :name ( name :op1 bombardier :op2 inc )  )  )  :arg1 ( profit :arg1 thursday :mod net )  :arg2 ( percentage-entity :value 15 )  )  :purpose ( pressure :arg0 ( and :op1 ( order :mod aircraft )  :op2 ( deliver :arg1 ( and :arg1-of ( issue :arg1-of contract )  :op1 ( quarter :arg1 ( unit :mod train )  )  )  )  :quant few )  :arg1 ( plane :mod ( country :name ( name :op1 canada )  :wiki canada )  )  )
schedule :arg0 plane :arg1 ( service :mod commerce )  :arg1-of ( meet :arg1-of ( update :arg1-of ( offer :arg0 ( thing :arg0-of ( release :arg1 ( data :purpose ( test :arg1 ( cseri :mod-of ( aircraft :mod brand :mod new )  )  )  :source ( flight :arg1 ( next :mod-of 9 )  )  )  :mod also :polarity - )  :name ( name :op1 montreal :op2 - :op3 based :op4 bombardier )  )  :op1-of ( or :quant any )  )  )  )  :mod ambitious
phase :op4-of ( and :op1 half :op2 ( fly :arg0 only :arg1 it )  :op3 ( raise :arg0 3 :arg0-of ( test :arg1 track )  :arg1 more :arg1-of question )  :quant ( temporal-quantity :unit month )  :time ( after :time-of ( test :arg1 ( plane :arg0-of ( flight :arg1 inaugural )  )  )  )  )
and :op1 ( send :arg0 ( result :arg1-of ( fall :mod short )  )  :arg1 ( share :arg0-of ( slide :arg1 more )  :arg2-of ( forecast :arg0 ( organization :name ( name :op1 toronto :op2 stock :op3 exchange )  )  )  )  :source ( percentage-entity :value 8 )  )
or :arg1-of ( view :arg0 ( he :arg0-of ( perform :arg1 sector :arg1-of outperform )  :arg0-of ( limit :arg1 ( upside :mod-of over )  )  :arg1-of ( lower :arg0 ( organization :name ( name :op1 cameron )  )  )  :arg1-of ( analyze :arg0 ( person :name ( name :op1 cameron )  )  )  :arg1-of rate )  :arg2 stock :mod that :mod thursday )  :op1 next :op2 1 :op3 2 :op4 quarter
say :arg0 ( person :arg1-of ( perform :arg0 ( margin :arg1-of ( clear :arg0 ( we :arg0-of ( disappoint :arg1 by )  :arg0-of ( transport :arg1 note )  :arg1-of ( anticipate :arg0 most )  :arg1-of ( deliver :arg0 ( aircraft :arg1-of ( weak :arg1-of while )  )  )  )  )  )  )  :name ( name :op1 &quot; )  )  :arg1 client
believe :arg0 we :arg1 ( receive :arg0 ( organization :name ( name :op1 bombardier )  )  :arg1 ( order :mod new )  :time ( progress :arg1 ( program :arg1-of flight :topic test )  )  )
suspect :arg0 ( we :arg0-of ( announce :arg1 ( order :mod new )  :polarity - :time ( month :arg1-of come :unit-of temporal-quantity )  )  )  :arg1 ( become :arg1 market :arg2 ( skeptical :degree more :topic program )  )
hope :arg0 ( organization :name ( name :op1 bombardier )  )  :arg1 ( possible :arg1 ( catapult :arg0 family :arg2 ( end :arg1 ( market :arg1-of ( dominate :arg0 ( and :op1 ( company :name ( name :op1 boeing )  :wiki boeing )  :op2 ( company :name ( name :op1 airbus )  :wiki airbus )  )  :time now )  )  :arg1-of low )  )  )  :arg2 ( aircraft :mod ( thing :name ( name :op1 cseries )  )  )
unveil :arg1 ( plane :mod ( test :arg1 time )  )  :op1-of ( and :op2 ( flight :arg1 9 )  :time ( after :op1 ( delay :duration ( temporal-quantity :unit month )  )  )  )  :time ( date-entity :month 3 )
contrast :arg1 ( order :arg0 firm :arg1 ( far :arg1-of ( cause :arg0 177 )  :arg1-of moderate )  )  :arg2 ( and :op1 ( efficient :arg0 fuel :arg1 ( potential :arg1-of cost :mod savings )  :arg2-of ( claim :arg0 ( person :arg0-of flight :arg0-of ( buy :arg1 potential )  :arg0-of ( test :arg1 ( result :arg1 ( validate :arg0 company )  )  )  :arg1-of wait )  :arg1 ( jetlin :mod new )  )  )  )
commit :arg2 ( customer :op1-of ( and :op2 ( person :arg0-of ( operate :quant 15 )  )  )  )  :op2-of ( and :op1 ( order :arg2-of total )  :time current )
use :arg0 firm :arg1 300 :arg2-of ( put :arg1 jet :time ( time :arg1-of ( meet :arg0 ( organization :arg0-of target :name ( name :op1 bombardier )  )  :arg2-of ( confident :arg1 ( person :arg0-of ( have-org-role :arg1 ( executive :mod chief )  :arg2 officer )  :name ( name :op1 pierre :op2 beaudoin )  )  )  )  )  )  :mod commerce
say :arg0 ( schedule :arg1 thursday )  :arg1 ( progress :arg1 ( and :op1 ( person :arg0-of analyze :arg1-of ( reassure :arg0 executiv :mod also :prep-with program )  )  :op2 media )  )
say :arg0 beaudoin :arg1 ( and :arg1-of add :op1 ( call :arg0 conference :arg1 that :arg1-of ( anticipate :arg0 ( ground :arg1-of ( stay :arg1-of test :arg1-of ( do :arg0 plane :polarity - )  )  )  :arg1-of long )  :arg2 downtime )  :op2 ( test :arg0 ground :arg1 ' )  :op3 ( software :arg0-of ( update :arg1 ( schedule :arg1 during :arg2 plane )  )  )  )
schedule :arg0 ( manufacture :mod every )  :arg1 ( way :arg1-of differ )
and :arg1-of ( decide :arg0 ( we :arg0-of ( flight :arg1 and )  :arg0-of ( update :arg1 ( period :arg1-of ( do :arg0 we )  )  )  )  )
that :arg0-of ( flight :arg1 all :topic-of program )
say :arg0 company :arg1 ( expect :arg1 ( take :arg1 ( flight :arg1 ( plane :purpose test :quant 5 )  )  :condition ( follow :arg1 remainder :time ( after :op1-of short )  )  :time ( week :arg1-of come :unit-of temporal-quantity )  )  )
maiden :arg1-of ( flight :arg0 ( temporal-quantity :quant 12 :unit month )  :op1-of ( after :time-of ( operate :arg0 ( person :arg0-of analyze :domain-of ( skeptical :mod still )  )  :arg1 ( plane :mod ( thing :name ( name :op1 cseries )  )  )  :arg1-of ( begin :arg0 customer :arg1-of possible )  )  )  )
say :arg0 ( organization :arg0-of ( schedule :arg1 ( next :mod-of ( month :unit-of ( temporal-quantity :op1-of few )  )  )  )  :name ( name :op1 bombardier )  )  :arg1 ( and :op1 evaluate :op2 ( provide :arg0 ( service :mod ( into :mod entry )  )  :arg1 ( update :arg1 ei )  )  )
say :arg0 ( slash :arg2-of ( push :arg0 ( line :arg0-of ( schedule :arg1 ( apparent :mod-of ( view :arg0 ( we :arg1-of reinforce )  :arg1 into :arg2 service :mod that :mod entry :mod this :mod slow )  )  :arg1-of ( internal :arg0 ' )  )  :arg1-of ( test :arg0 pace :arg1-of ( flight :arg0 of )  )  )  )  :op1 q :op2 1 :op3 15 )  :arg1 doerksen
or :arg0-of ( share :arg1 ( or :arg1-of ( share :arg0 ( year :mod early )  )  :op1 9 :op2 ( monetary-quantity :unit cent )  )  )  :arg1-of ( quarter :arg1-of ( end :arg0-of ( fall :arg1 ( profit :arg0 30 :arg1 net :time ( date-entity :month 9 )  )  )  )  )  :op1 8 :op2 ( monetary-quantity :unit cent )
change :arg1 ( earn :arg1 ( share :arg1 9 )  :arg1-of adjust )  :arg3 ( monetary-quantity :unit cent )  :polarity -
dip :arg0 ( revenue :mod 4.2 )  :arg2 4.1 :manner marginally
say :arg0 ( thing :name ( name :op1 thomson :op2 reuters :op3 i )  )  :arg1 ( expect :arg0 ( person :arg0-of ( earn :arg1 ( monetary-quantity :quant 10 :unit cent )  )  :arg0-of analyze :op1-of slash :op1-of ( slash :op2 e :op3 slash )  )  :arg1 ( and :op1 ( share :arg1 ( location :name ( name :op1 b )  :wiki - )  )  :op2 revenue )  )
say :arg0 ( fourth :mod world )  :arg1 ( large :degree most :mod-of ( aircraft :mod 45 :mod during )  :mod-of planemak )  :arg1-of ( deliver :arg0 it )  :time ( early :time-of ( temporal-quantity :unit year )  :time-of ( quarter :arg1 57 :time down )  )
fall :arg1 ( order :mod net )  :arg4 ( aircraft :quant ( 26 :op1 83 )  )
backlog :location ( division :mod ( aerospace :op1 ( change :arg0 9 :arg1 30 :arg2 12 :polarity - )  )  )  :poss 31
contrast :arg2 ( and :arg1-of ( say :arg0 ( person :arg1-of ( disappoint :arg0 in )  :name ( name :op1 &quot; )  )  )  :op1 ( take :arg0 aerospace :arg1 ( market :mod-of condition )  :arg1-of ( low :arg0 line )  :arg1-of ( guide :arg0 ( we :arg1-of result )  )  :arg2 overall )  )
fall :arg0 2 :arg1 ( revenue :mod aerospace )  :arg2 ( percentage-entity :value 13 )
say :arg0 ( organization :mod-of world :name ( name :op1 bombardier )  )  :arg1 ( large :degree most :mod-of trainmak )  :arg2 revenue :arg2-of ( rise :arg1 ( nearly :mod-of 11 )  :arg3 percentage-entity :mod ( that :mod-of division )  )
backlog :location ( unit :mod ( transport :arg1 9 :op1-of 30 :op1-of 31 :op1-of 12 :op1-of marginally )  )
affect :arg0 margin :arg1 ( execute :arg1 ( large :mod-of contract :mod-of few )  :arg1-of issue :time-of ( transport :arg1 division )  )
say :arg0 executiv :arg1 ( provide :arg1 ( guide :arg1-of ( quarter :mod fourth )  :mod new )  )
announce :arg0 ( organization :name ( name :op1 bombardier )  )  :arg1 ( join :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :arg2-of ( trade :arg0 thursday :arg1 afternoon )  :name ( name :op1 google :op2 inc )  )  :arg2 ( officer :mod financial :mod chief )  )  :name ( name :op1 patrick :op2 pichette )  )  :arg1 board :arg2 ( percentage-entity :value ( 8.5 :op1-of down )  )  )  :arg2 c :mod also :op1-of mid :time share
and :op1 ( commerce :mod ( large :degree most )  )  :op2 planemak :op3 bombardi :op4 ( rival :arg0 ( country :mod-of world :name ( name :op1 sa )  :wiki south_africa )  :arg1 ( report :arg0 ( country :mod-of ( company :name ( name :op1 embraer )  :wiki embraer )  :name ( name :op1 brazil )  :wiki brazil )  :arg1 ( percentage-entity :value 10 )  :arg1-of fall )  :arg2 ( close :degree most )  )  :op5 ( profit :arg0 quarterly :arg2 thursday )
shot :arg1-of ( fire :arg0 ( country :name ( name :op1 usa )  :wiki united_states )  :location ( airport :mod ( city :name ( name :op1 los :op2 angeles )  :wiki los_angeles )  )  )
fire :arg0 ( suspect :arg1 ( local :arg1 time )  :arg1-of ( know :arg0 friday :polarity - )  )  :arg1 ( shot :location ( country :name ( name :op1 lax :op2 airport )  )  )  :dayperiod morning
announce :arg0 ( person :arg0-of ( shoot :arg1 ( product :name ( name :op1 twitter )  :wiki twitter )  )  :arg0-of ( report :arg1 man :time ( newspaper :name ( name :op1 los :op2 angeles :op3 times )  :wiki los_angeles_times )  )  :poss-of custody )  :arg1 short :arg1-of ( manage :arg0 airport )  :arg1-of ( while :arg0 ( message :mod-of service )  )
kill :arg1 ( person :arg0-of ( have-org-role :arg2 member )  :arg2-of ( staff :mod security )  )  :mod also
report :arg0 media :arg1 ( injure :arg1 ( person :quant several )  )  :mod also
say :arg0 ( person :name ( name :op1 jay :op2 carney )  )  :arg1 ( keep :arg0 ( government-organization :arg1-of ( have-org-role :arg0 person :arg2 spokesperson )  :name ( name :op1 white :op2 house )  :wiki white_house )  :arg1 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 us )  :wiki united_states )  :arg2 president )  :arg1-of ( inform :arg2 situation )  :name ( name :op1 barack :op2 obama )  :wiki barack_obama )  )
report :arg0 ( person :arg0-of ( witness :arg1 3 )  :arg0-of ( eye :arg1 ( organization :location-of place :name ( name :op1 terminal )  )  )  )  :arg1 ( see :arg1 ( person :arg0-of ( shoot :arg1 ( gun :op1 ( lounge :arg1 several :arg1-of ( report :arg0 media )  :arg2 ( depart :arg0 incident )  )  )  )  )  )
tell :arg0 ( travell :quant 1 )  :arg1 ( seek :arg0 ( person :quant many )  :arg1 ( protect :arg1 panic )  )  :arg2 ( publication :arg0-of broadcast :name ( name :op1 cnn )  :wiki cnn )
and :op1 ( scream :arg0 traveller )  :op2 ( cry :arg0 child )
break-up :arg0 ( panic :arg1 ( fear :arg1 wait )  )  :arg2 ( hide :location ( behind :op1 seat )  :quant many )
tell :arg0 ( person :arg1-of employ :arg1-of of )  :arg1 amr-unknown :arg2 ( he :arg0-of ( hear :arg1 2 )  :arg0-of ( fire :arg1 shot )  :arg0-of ( travel :arg1 ( newspaper :name ( name :op1 los :op2 angeles :op3 times )  :wiki los_angeles_times )  )  )  :degree time
suffer :arg0 ( person :arg1-of ( employ :arg0 ( organization :mod ( company :mod security )  :name ( name :op1 tsa )  )  )  )  :arg1 ( wound :arg1 foot :mod gunshot )
resemble :arg1 ( something :mod ( of :mod-of movie )  :mod scene )
report :arg0 man :arg1 ( that :arg0-of ( take :arg1 he :arg3 ( area :mod safe )  :time then )  )
say :arg1 ( fire :arg1 shot :arg1-of ( near :arg2 ( area :purpose ( inspect :mod security )  )  )  )
evacuate :arg1 ( build :mod airport )
reveal :arg0 ( footage :mod television )  :arg1 ( arrive :arg0 ( and :op1 ( ambulanc :quant numerous )  :op2 police :op3 car )  :arg4 terminal )
bring :arg1 ( person :arg1-of ( safe :arg1-of build )  :quant 1 )
publish :arg0 user :arg1 ( and :domain ( product :name ( name :op1 twitter )  :wiki twitter )  :op1 ( weapon :arg0-of ( have-org-role :arg1-of swat :arg2 officer )  :arg1-of ( lie :arg2 ground )  )  )  :medium photo
say :arg0 ( message :arg1-of ( share :arg0 ( manage :arg1 airport :purpose ( local :arg1 time )  )  :arg2 ( product :name ( name :op1 twitter )  :wiki twitter )  )  )  :arg1 ( begin :arg0 incident )
say :arg0 ( publication :name ( name :op1 cnn )  :wiki cnn )  :arg1 ( block :arg1 ( cause :arg1 ( tailback :arg1-of ( long :arg1-of access )  )  )  :arg2 road )
report :arg1 ( suspend :arg0 ( land :arg0 except :arg1 ( aircraft :arg1-of arrive )  )  :arg1 ( traffic :mod flight )  :duration temporary )
possible :arg1 ( see :arg1 ( plane :arg0-of ( take :manner ( publication :name ( name :op1 cnn )  :wiki cnn )  )  :quant several )  )
serve :arg0 ( organization :name ( name :op1 terminal )  )  :arg1 ( airlin :mod ( country :name ( name :op1 us )  :wiki united_states )  :mod small )  :arg2 3 :mod main
airport :mod ( thing :domain ( country :location-of ( airport :mod ( large :degree most )  )  :name ( name :op1 usa )  :wiki united_states )  :name ( name :op1 angeles :op2 lax )  )
investigate :arg1 police :arg2-of ( tip :arg0 ( lawyer :arg1-of jail :topic ( addict :arg1 cocaine )  )  :arg1 ( thing :name ( name :op1 mr :op2 big )  )  )
feed :arg0 ( person :name ( name :op1 basharat :op2 ditta )  )  :arg1 ( information :arg0-of ( crime :arg1 42 :mod-of lord )  )  :arg2 ( person :name ( name :op1 neil :op2 scarbrough )  )
fear :arg0 solicitor :arg1 ( expose :arg1 ( addict :arg2 drug :mod secret )  )
be :arg2 ( give :arg1 ( sentence :arg0 court :arg2 ( temporal-quantity :quant 3 :unit year )  :location ( city :arg1-of crown :name ( name :op1 liverpool )  :wiki liverpool )  :mod prison )  )
cause :arg0 ( fear :arg0 he :arg1 ( expose :arg1 ( addict :arg1 top :arg2 drug :mod secret )  :arg1-of major )  )  :arg1 ( tell :arg0 ( lawyer :arg0-of defend :arg1-of ( jail :arg2 ( temporal-quantity :quant 3 :unit year )  )  )  :arg1 ( thing :name ( name :op1 mr :op2 big )  :topic ( investigate :arg1 police )  )  :arg2 drug )
feed :arg0 ( person :name ( name :op1 basharat :op2 ditta )  )  :arg1 ( intelligence :arg0-of ( crime :arg1 42 :mod-of lord )  :arg1-of sensitive )  :arg2 ( person :name ( name :op1 neil :op2 scarbrough )  )  :time ( after :op1 ( become :arg1 ( he :poss-of cocaine )  :arg2 ( compromise :arg0 habit :arg1 ( activity :arg1 ( traffic :arg1 drug )  :arg1-of inquire )  )  )  )
and :arg1-of bash :op1 ( hail :arg0 ( he :arg0-of ( surveil :arg1 into :mod-of operation )  :arg0-of ( follow :arg1 home )  :poss-of ( 2011 :year-of date-entity )  )  :arg1 ( brief :mod top )  )  :op2 ( person :arg0-of ( represent :arg1 he :time ( previous :mod narcotic )  )  :arg1-of arrest :arg1-of ( nickname :arg0 solicitor )  :arg2-of criminal )  :op3 police
dinner :mod-of ( society :mod law :mod ( he :arg0-of ( spot :arg1 sarborough :arg2 ( off :arg2-of ( drop-out :arg0 32 )  :mod-of ( bag :mod 3 :mod-of ( of :mod-of ( cocaine :mod-of ( at :mod-of ( lawyer :mod-of ( ' :mod-of home )  )  )  )  )  )  )  :mod officer )  :mod-of out :part ( while :mod ( lancashire :mod blackburn )  )  )  )  :mod-of colleagu :mod-of with
trace :mod ( test :arg0 ( person :arg1-of reveal :mod inquiri :name ( name :op1 inquiries )  )  :arg1 hair :manner-of ( find :arg0 he :arg1 ( thing :arg1-of ( use :arg0 ( person :arg1-of regular :op1-of ( and :op2 he :op3 wallet :op4 ( he :arg0-of ( credit :arg1 card )  )  )  )  )  :mod of :name ( name :op1 inquiries )  )  :manner drug :manner cocaine )  :op1-of after )
seek :arg0 he :arg1 ( obtain :arg1 ( information :topic ( arrest :arg1 ( man :quant 2 )  )  )  :manner illicitly :arg0 he )  :arg1-of ( associate :arg0 ( date-entity :year 2011 )  :arg2 ( organization :name ( name :op1 scarborough )  :poss-of behalf )  )  :arg2 ( period :mod ( temporal-quantity :quant 8 :unit month )  :op1-of over :time-of ( and :op1 1 :op2 8 )  )
and :arg1-of ( operate :arg0 ( person :arg1-of ( watch :arg0 police :time time )  :arg2-of suspect :quant all )  :arg1-of racket :location ( across :op1 ( organization :name ( name :op1 lancashire )  :op1-of ( and :op2 ( organization :name ( name :op1 cumbria )  )  :op3 ( country :name ( name :op1 merseyside )  )  :op4 ( country :name ( name :op1 berkshire )  )  :op5 ( country :name ( name :op1 west :op2 yorkshire )  )  )  )  )  )  :arg2-of ( investigate :arg1 4 :arg1-of major )  :op1 heroin :op2 cocaine
seize :arg0 other :arg1 cash :arg1-of ( jail :arg0 late )  :degree more :op1-of after :op2-of ( and :op1 police :op3 ( heroin :arg0-of ( raid :arg1 series )  )  :op4 cocaine :op5 worth :op6 along )  :op4-of ( and :op1 they :op2 32 :op3 man )
feed-up :arg0 ( person :name ( name :op1 ditta )  )  :arg1 information :arg1-of ( cause :arg0 ( fear :arg1 ( cocaine :arg2-of ( addict :arg1 42 :arg1-of expose )  )  )  )  :arg2 ( person :arg2-of criminal )
trial :arg2-of ( follow :arg1 ( find :arg0 ( today :arg0-of ( work :arg1 ( organization :name ( name :op1 liverpool :op2 crown :op3 court :op4 ditta )  )  :arg2 ( organization :name ( name :name-of ( firm :mod ( law :purpose-of ( base :arg2 ( organization :name ( name :op1 blackburn )  )  )  )  )  :op1 forbes :op2 solicitors )  )  )  )  :arg1 ( guilty :arg2 ( count :arg1 justice :quant 2 )  )  :op1-of ( after :time-of ( face :arg1 ( disgrace :arg1 3 )  )  )  )  )  :location ( organization :name ( name :op1 liverpool :op2 crown :op3 court )  )  :mod week
admit :arg0 he :arg1 ( possess :mod cocaine )  :time ( hear :arg1 early )
investigate :arg0 police :arg1 ( contact :arg0 phone :arg1 lawyer :arg1-of regular )  :arg1-of ( discover :arg0 he :time ( date-entity :year 2011 )  )  :time ( after :time-of ( come :arg1 downfall )  )
and :op1 2 :op2 ( trail :arg0 detective )  :op3 ( suspect :arg1 ( spot :arg1 drug :op1-of ( and :op2 arrive :op3 house :op4 ( see :arg1 ( place :arg0-of ( glove :arg1 purity :arg1-of ( golf :arg0 ( 60 :op1-of ( under :op2 ( monetary-quantity :unit cent )  )  )  :arg1-of ( black :arg1-of ( bin :arg0 lawyer )  )  )  )  )  )  )  )  )
stadium :location-of dinner :mod football :mod ( organization :name ( name :op1 blackburn :op2 rovers )  )  :poss ( person :arg1-of ( contact :arg0 ( organization :name ( name :op1 scarborough )  )  :mod ( phone :arg1-of ( regular :purpose ( drop :arg1 off :op1-of ( after :op1-of soon )  )  )  )  )  :mod ( country :name ( name :op1 ewood :op2 park )  )  :name ( name :op1 ditta )  )
and :op1 ( return :arg1 lawyer :arg4 home :purpose ( discover :arg0 9 :arg1 drug )  )  :op2 communicate
trace :mod ( test :arg0 ( person :arg0-of ( use :arg1 drug )  :arg1-of ( hear :arg0 court )  :arg1-of regular )  :arg1 of :manner-of ( find :arg0 ( he :arg0-of ( credit :arg1 card )  :poss-of hair )  :arg1 ( thing :name ( name :op1 the )  :op1-of ( and :op2 wallet )  )  :manner cocaine :time after )  )
contrast :arg1 late :arg2 ( and :op1 cocaine :op1-of ( and :arg1-of ( say :arg0 ( he :arg0-of ( speak :arg1 ( argue :arg1-of ( discuss :arg0 he )  :arg1-of ( use :arg1-of ( deny :arg0 ( person :arg1-of arrest :name ( name :op1 ditta )  )  )  )  :arg1-of ( cause :arg0 he )  :arg1-of ( deal :arg0 person )  :arg1-of ( legal :op1-of privilege )  :arg1-of suspect :domain-of subject :op2-of ( and :op1 client )  )  )  )  )  )  )
contrast :arg1 ( pick-up :arg0 ( person :arg0-of ( try :arg1 ( remove :arg1 ( card :instrument-of credit :quant several )  )  )  :name ( name :op1 ditta )  )  :arg1 wallet :op1-of ( and :op2 seize )  :time arrest )  :arg2 ( seize :arg1 ( they :quant all )  :op1-of ( and :op2 ( take :arg1 ( sample :arg1 hair )  )  )  )
say :arg0 he :arg1 ( and :op1 ( call :arg0 address :arg1 ( client :arg2-of ( have-rel-role :arg1 ( legal :arg1 business )  )  )  :location house )  )  :arg2 ( run :arg1 office :condition-of ( work :arg1 place )  :location home )  :time ( interview :arg1 police )
contrast :arg2 ( hear :arg0 court :arg1 ( call :arg0 ( he :arg0-of ( tell :arg1 ( know :arg0 detective :arg1 some )  :arg1-of ( arrest :arg1-of key )  :op1-of after )  )  :arg1 ( person :arg0-of ( play :arg1 ( chain :arg0-of ( supply :arg1 drug )  )  )  :arg0-of ( represent :time previous )  :arg1-of major )  )  )
say :arg0 ( person :arg0-of ( know :arg1 ( recommend :arg0 ( anyone :arg0-of ( criminal :arg1 solicitor )  )  :arg1 it )  :polarity - )  :arg1-of prosecute :name ( name :op1 prosecuting )  )  :arg1 law
accuse :arg1 ( thing :name ( name :op1 mr :op2 ditta )  )  :arg2 ( abuse :arg1 ( position :arg0-of ( become :arg1 too :arg2 ( involve :arg2 ( have-rel-role :arg1-of specific :arg2 client )  )  )  )  :arg2 ( solicitor :arg2-of criminal )  )
contrast :arg1 simple :arg2 ( provide :arg0 ( person :arg0-of ( deal :arg1 drug )  )  :arg1 lawyer :arg2 drug )  :mod ( person :arg0-of ( relation :arg1-of ( talk :arg0 we )  )  :arg0-of ( deal :arg1 drug :polarity - )  )
cause :arg0 he :arg1 ( one :arg1-of ( legitimate :arg1-of ( doubt :polarity - )  )  :arg1-of ( communicate :quant some )  )  :condition-of lawyer
contrast :arg1 lawyer :arg2 ( go :arg0 this :arg4 way :time ( beyond :op1 ( confine :arg1 ( relation :arg1 client )  :mod ordinary )  )  )
investigate :arg0 police :arg1 much :arg1-of possible :arg1-of ( thwart :arg0 he )  :arg1-of ( continue :arg1-of enable :arg1-of activity :arg1-of criminal )
contrast :arg2 ( dishonour :arg1 ( thing :name ( name :op1 mr :op2 ditta )  :poss-of profession )  :op1-of - )
and :op1 ( get :arg0 ( he :domain-of ( close :degree too :op1 ( have-rel-role :arg2 client :mod certain )  )  )  :arg1 ( organization :mod particular :name ( name :op1 scarborough )  )  )  :op2 ( allow :arg0 ( he :arg1-of ( depend :polarity - )  )  :arg1 compromise )
wrong :arg1 i :op1-of ( and :op2 ( claim :arg0 ( person :arg0-of ( deny :arg1 ( it :mod-of immediate )  )  :name ( name :op1 ditta )  )  :arg1 ( corrupt :arg1 lawyer )  :arg2 i :op1-of ( and :arg1-of ( want :arg0-of ( wait :arg1 i :arg2 ( 15 :quant-of ( temporal-quantity :unit hour )  )  :polarity - )  :arg0-of ( feed :arg1 information :arg2 i )  :polarity - )  :op2 i :op3 ( organization :mod mr :name ( name :op1 ditta )  )  )  )  )
contrast :arg1 ( hear :arg0 ( he :arg0-of criminal :arg0-of turn :arg0-of ( obtain :arg1 drug )  :arg0-of criminal :arg0-of ( start :time moment )  :arg0-of ( organize :arg1 ( person :arg2-of criminal )  )  )  :arg1 ( person :name ( name :op1 but )  )  )  :arg2 ( say :arg0 police :arg1 solicitor :time after )
investigate :arg1 police :arg1-of ( regard :arg2 ( obtain :arg1 ( information :arg1-of value )  :arg1-of ( task :arg0 ( group :arg0-of crime :arg1-of organize :arg1-of ( have-org-role :arg0 ( person :arg0-of lead :poss-of ( motive :prep-to-of ( vulnerable :op2-of ( and :arg1-of ( leave :arg0 ( addict :arg0 he :arg1 cocaine )  )  :op1 ( compromise :manner hopelessly )  )  )  )  )  :arg2 member )  )  )  )  )
recommend :arg1 ( and :op1 ( uphold :arg0 ( person :name ( name :op1 solicitors )  )  :arg1 ( standard :arg1-of ( high :degree most )  :mod integrity )  )  :op2 ( recommend :op1-of ( and :op2 trust :op3 ( confidence :location public )  )  )  )
betray :arg0 ( thing :name ( name :op1 mr :op2 ditta )  )  :arg1 ( trust :mod this )  :op1-of ( and :op2 ( attempt :arg1 ( hide :arg1 ( veneer :arg1 profession )  )  :mod behind )  )
commit :arg0 ( we :arg1-of ( demonstrate :arg0 justice )  )  :arg1 ( person :arg0-of ( bring :arg1 justice )  :arg2-of criminal )  :op6-of ( and :arg1-of ( see :arg1-of ( convict :arg0 of )  :mod also )  :op1 ( investigate :arg0 mr :arg1 into :arg1-of ( lead :arg0 ( and :op1 ( organization :name ( name :op1 lancashire )  )  :op2 serious :op3 organise )  )  :arg1-of crime )  :op2 ( possess :arg0 3 :arg1 course :arg1-of count )  :op3 cocaine :op4 now :op5 pervert )
let :arg1 ( serve :arg0 ( case :mod this )  :arg1 ( warn :arg2 ( person :arg2-of criminal )  :location ( beyond :op1 ( reach :arg0 ( one :polarity - )  :arg1 law )  )  )  )
and :op1 ( put :arg0 ( we :arg0-of ( find :arg1 you )  )  :arg1 you :time ( before :op1 court )  )
and :arg2-of ( supply :arg0 ( conspiracy :arg1-of ( guilty :arg1-of ( plead :op1-of ( after :time-of ( jail :arg1 ( organization :name ( name :op1 scarborough )  )  :arg2 ( temporal-quantity :quant 14 :unit year )  )  )  )  )  )  :arg1 heroin )  :op1 cocaine :op2 cannabis
jail :arg1 ( man :arg1-of ( involve :arg2 ( racket :arg0 thirty :arg1 ( offence :mod drug )  )  )  :arg1-of total :mod other :quant 5 )  :arg2 ( temporal-quantity :quant 153 :unit year )
motivate :arg1 ( work :arg0 ( country :arg1-of ( question :op2-of ( and :op1 ( give :arg0 ( person :arg0-of ( have-rel-role :arg1 ( thing :name ( name :op1 death :op2 row )  )  :arg2 client )  :arg2-of ( say :arg0 ( he :arg0-of ( represent :arg1 lawyer )  :poss-of fantasy )  :arg1 job )  :name ( name :op1 ditta )  :poss-of website )  :arg1 session )  :op3 answer )  )  :location-of ( guest :mod ultimate :poss dinner )  :name ( name :op1 america )  :wiki united_states )  )  :arg2 inequality :op2-of ( and :op1 ( person :name ( name :op1 mohammed :op2 ali )  )  )
organization :name ( name :op1 revolutionary :op2 sacred :op3 music :op4 factory )
cause :arg0 ( or :degree glee )  :arg1 ( perform :arg2 schubert :arg2-of ( occasion :arg0 ( celebration :quant-of ( close :degree the )  )  :arg1 ( anniversary :degree-of 160th )  :arg3 it :condition ( liederkranz :degree dunningen )  :manner of )  :arg2-of ( club :arg0 ( choir :degree-of amateur )  :arg1 you )  :arg2-of ( resemble :arg1 deutsche )  :arg3 messe :condition ( mass :arg0 ( country :arg0-of ( accompany :arg1 2 :arg2 church )  :name ( name :op1 germany )  :wiki germany )  :arg2 service )  :manner franz :manner ' )
enthuse :arg0 ( past :arg0-of ( close :arg1 anniversary :arg1-of ( perform :arg0 ( company :name ( name :op1 northern :op2 rock )  :wiki northern_rock )  :op1-of service )  )  :arg0-of ( spring :arg1 ( bless :arg0 church :arg1 2 )  :mod this )  )  :arg1 audience :arg1-of ( live :arg1-of ( of :arg0 music :arg1-of ( succeed :arg1-of follow :mod great )  )  )
p.m. :mod-of ( and :op1 ( country :location-of ( mass :time evening :time-of ( hear :arg1 ( mass :mod exceptional :mod ( this :mod-of ( date-entity :month 10 )  :mod-of 27 )  )  :arg2 ( service :time-of saturday )  :time ( date-entity :month 10 :quant 26 )  )  )  :name ( name :op1 st. :op2 marinuskirche :op3 dunningen )  )  :op2 sunday :op3 ( country :name ( name :op1 st. :op2 johannes :op3 baptistkirche )  )  :op4 ( country :name ( name :op1 lackendorf )  )  )
cause :arg0 ( title :mod original )  :arg1 ( call :arg1 ( country :arg0-of ( sacrifice :arg1 of :arg1-of ( celebrate :arg0 song )  :arg2 d :mod ( holy :mod-of mass )  )  :arg0-of ( work :arg1 schubert :arg1-of compose :arg1-of ( date :time ( date-entity :year 1826 )  :time ( time :arg0-of ( consider :arg1 ( almost :arg0-of ( revolutionary :arg1 ( write :arg0 it )  )  )  )  )  )  :mod spiritual )  :arg0-of ( mass :arg1 fei )  :name ( name :op1 germany )  :wiki germany )  :arg2 heilig )
church :mod-of ( service :mod-of ( mass :arg1-of ( perform :arg0 ( person :mod patron :name ( name :op1 johan :op2 philipp :op3 neumann )  :poss-of mind )  )  )  )
accompany :arg0 ( ensemble :mod wind :op2-of ( and :op1 ( person :name ( name :op1 hermann :op2 schneider )  )  :op3 ( person :name ( name :op1 noemi :op2 lokodi )  :prep-on organ )  )  :poss ( organization :name ( name :op1 frohsinn :op2 tennenbronn :op3 music :op4 society )  )  )  :arg1 choir :location ( under :op1 directorship )
scepticism :arg0-of ( give :arg1 way :arg2 confidence :manner visibly )
bring :arg0 ( elect :arg0 ( organization :name ( name :op1 parish :op2 council )  :part-of ( organization :name ( name :op1 se )  )  )  :time ( date-entity :year 2015 )  )  :arg1 ( change :arg1 ( organization :name ( name :op1 seelsorgeeinheit :op2 haslach )  )  :mod fundamental :mod about )  :purpose ( example :location ( organization :name ( name :op1 haslach :op2 pastoral :op3 care :op4 unit )  )  )
organization :beneficiary ( parish :quant 6 :quant all )  :mod joint :name ( name :op1 parish :op2 council )  :time ( then :op1 only )
prepare :arg0 ( and :arg0-of ( meet :manner joint )  :arg1-of change :op1 ( country :name ( name :op1 haslach )  )  :op2 ( country :name ( name :op1 hofstetten )  )  :op3 ( country :name ( name :op1 m√ºhlenbach )  )  :op4 ( country :name ( name :op1 fischerbach )  )  :op5 ( country :name ( name :op1 steinach )  )  :op6 ( country :name ( name :op1 welschensteinach )  )  )  :arg1 committe :arg2 saturday
possible :arg1 ( manner :domain-of satisfactory :location-of ( implement :arg0 ( organization :name ( name :op1 parish :op2 councils )  )  :arg1 this :op2-of ( and :arg0-of ( cause :arg1 this )  :arg3-of ( decide :arg1 diocese :mod fundamental )  :op1 ( change :mod further :polarity - )  )  )  )
become :arg0 ( new :mod-of system )  :arg1 thing :arg2 ( clear :arg0 ( confidence :arg2-of ( give :arg0 scepticism :arg1 way :manner ( reluctant :mod-of yet )  )  )  :arg1 day :mod particular )
address :arg2 ( topic :arg1-of ( range :arg0 ( discuss :arg0 ( committe :quant 6 )  :arg1-of ( constructive :degree extreme )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( team :arg0-of care :mod pastoral )  :arg2 member )  :mod ( time :mod full )  :op1-of and )  )  :arg3 perception :arg4 ( and :op1 ( expect :arg0-of ( regard :arg1 ( reform :time ( date-entity :year 2015 )  )  )  :arg1 ( and :op1 ( regard :arg0 ( thing :arg1-of propose :arg1-of concrete )  :arg2 ( compose :time future )  )  :op2 ( size :poss ( thing :name ( name :op1 parish :op2 council )  )  )  )  )  )  )  )
explain :arg0 ( person :arg0-of ( draw :time newly )  :mod ( dean :mod region )  :name ( name :op1 georg :op2 schmitt )  )  :arg1 ( guideline :arg1-of ( help :arg0 presentation :part ( arch-rival :mod-of diocese )  )  :beneficiary ( unit :arg0-of ( care :arg1 pastoral )  )  )
obligate :arg2 ( thing :op3-of ( and :arg1-of ( assume :arg0 ( corporation :arg1-of ( say :arg0 guideline )  :domain ( organization :name ( name :op1 se :op2 haslach )  )  :mod ( law :mod public )  )  )  :op1 ( community :mod church )  :op2 ( right :poss ( individual :mod-of ( church :mod-of ( community :quant 6 )  )  )  )  )  )
and :mod then :op1 ( organization :mod joint :name ( name :op1 parish :op2 council )  )  :op2 ( organization :name ( name :op1 foundation :op2 council )  )  :op3 ( represent :arg0 ( virtue :poss ( office :mod-of only )  )  :arg1 rector )
cause :arg0 community :arg1 ( team :arg1-of ( call :arg0 ( person :arg0-of ( have-org-role :arg2 member )  :arg0-of ( represent :arg1 ( parish :mod each )  )  :arg1-of ( elect :arg0 ( 6 :quant-of parish )  )  :quant 2 )  :arg2 church )  :quant site )
task :arg0-of ( promote :arg1 ( life :mod church )  )  :arg2-of ( local :arg0 future )
evident :arg2-of ( become :arg1 ( need :arg1 ( discuss :arg1 ( issue :arg0 finance )  :arg1-of extensive )  )  :arg1-of ( regard :arg0 ( parish :mod individual )  )  )
plan :arg0 reform :arg1 ( asset :arg1-of accumulate :arg1-of ( retain :arg0 parish :arg2 ( purpose :arg1-of specify )  )  )
pass :arg0 other :arg1 hand :arg2 ( community :arg2-of ( account :arg0 whole :arg1 payable )  :mod church )  :op1-of over
cause :arg0 ( invest :arg0 particular :arg1 ( affect :arg0 debt :arg1 ( parish :quant all )  :manner thus-far )  :arg1-of plan :arg1-of major )  :arg1 ( concern :mod great )
say :arg0 themselv :arg2 ' :time ( by :arg1-of ( manage :arg0 in :arg1-of ( possible :arg1-of ( invest :arg2 ( project :mod only )  :time past )  )  :arg2 ( individual :arg0-of ( have-org-role :arg1 ( bruno :mod-of prinzbach )  :arg2 ( chairman :mod parish )  )  :op1-of parish )  :mod that )  )
pastoral :arg1-of ( care :arg0 ( unit :location-of ( chair :arg1 committee :arg2 5 :op1-of parish )  )  :manner ( experience :arg0 ( person :name ( name :op1 barbar :op2 ritter )  )  :arg1 ( committee :mod joint )  :location ( thing :name ( name :op1 schutterwald-neuried )  )  :mod practical )  )
realize :arg0 ( she :arg0-of ( task :arg1 really )  :arg0-of set :arg1-of task :arg1-of ( become :time ( date-entity :year 2006 )  )  )  :arg1 ( and :op1 ( come :arg1 ( remain :arg1 5 )  )  )  :arg1-of ( simple :polarity - )
compose :arg0 ( organization :name ( name :op1 parish :op2 council )  )  :arg1 ( community :mod church )  :arg2-of ( regard :arg1 ( question :arg1-of ( answer :arg0 ( organization :name ( name :op1 committees )  :poss ( unit :arg0-of ( care :arg1 ( country :name ( name :op1 haslach )  )  )  :mod pastoral )  )  :op1-of ( and :op2 ( work :arg0 team :arg1 joint :mod practical )  )  )  )  )  :op1-of ( and :op2 size )  :time future
and :op1 ( confirm :arg1 ( detail :arg1 all :arg1-of specific )  :arg2 ( meet :time subsequent )  )  :op2 ( decide :time ( meet :arg0 ( committe :quant 6 )  :manner joint :mod additional )  )  :op3 ( come :arg1 spring )
present :arg0 ( person :name ( name :op1 michael :op2 sch√∂ner )  :source ( country :name ( name :op1 steinach )  )  )  :arg1 ( logo :arg1-of ( agree :arg0 ( majority :arg1-of clear )  )  :mod new :poss ( unit :arg0-of ( care :arg1 pastoral :mod ( organization :name ( name :op1 parish )  )  :mod counsellor )  )  )  :time end
become :arg1 electricity :arg2 ( expensive :degree more )  :location ( country :name ( name :op1 pfullendorf )  )
electricity :arg1-of ( cost :arg1-of ( adjust :arg0 ( citizen :poss ( country :name ( name :op1 pfullendorf )  )  )  )  )  :arg1-of high
s√ºdkuri :arg2-of ( confirm :arg0 ( company :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 j√∂rg-arne :op2 bias )  )  :arg2 ( director :arg0-of ( manage :arg1 ( receive :arg0 90 :arg1 70 :arg2-of ( end :arg1 ( increase :arg1 eur :arg2 ( price :arg0 4 :arg1 year )  )  )  )  )  )  )  :mod energy :mod municipality )  :arg1 family )
rise :arg1 ( levy :arg0 ( organization :name ( name :op1 eec )  :wiki european_economic_community )  :arg1 ( increase :arg0 6.3 :arg1 price :time upcoming )  :arg1-of call :arg1-of ( cause :arg0 ( reason :arg1-of ( major :arg0 ( kilowatt :mod-of ( temporal-quantity :unit hour )  )  )  :quant 1 )  )  :quant cent )
levy :arg1 ( year :mod each :mod-of ( date-entity :month 10 )  )  :arg1-of ( reset :arg0 ( person :arg0-of ( operate :arg1 ( grid :mod power :mod large )  )  :quant 4 )  )  :mod this
levy :arg0 turnaround :arg1 ( price :arg1 electricity :arg1-of ( recover :arg0 ( they :arg0-of ( incur :arg1 ( result :arg1 energy )  )  :arg1-of ( cost :arg0 additional :arg1-of ( estimate :arg0 they )  )  )  :arg1-of mean :arg1-of possible )  )
form :arg0 ( company :arg0-of ( link :arg1 ( chain :mod this )  :mod last )  :mod energy :mod municipality :mod ( country :name ( name :op1 pfullendorf )  )  )
levy :arg1 ( report :arg0 ( organization :name ( name :op1 j√∂rg-arne :op2 bias )  )  :arg1 that )  :arg1-of ( assume :arg0 ( council :mod supervisory :part-of ( company :mod energy )  )  :arg2 projection :mod ( even :arg1-of high )  )
calculate :arg1 ( figure :arg1-of specific )  :time ( before :op1 ( inform :arg0 ( cmpany :mod energy :mod municipality )  :arg1 customer :arg1-of possible :arg2 ( increase :arg1 ( price :arg0 precise )  )  :time ( week :mod next )  )  )  :time now
say :arg0 ( we :arg0-of ( increase :arg1 ( monetary-quantity :quant 1 :unit cent )  :arg2 plus :mod of )  :arg0-of ( work :arg2 assumption )  )  :arg1 ( bias :arg0 x :arg2 ( close :arg2-of ( likely :arg0 figure :arg1 ( monetary-quantity :quant 2 :unit cent )  )  )  )
light :mod ( permanent :arg1-of ( wait :duration ( time :arg1-of ( observe :arg0 traffic )  )  )  )  :mod red
turn :arg0 light :arg1 traffic :arg2 ( green :arg1 sometimes )  :mod simple
or :op1 road :op2 ( react :arg0 ( loop :arg1-of contact )  :arg1 light :polarity - )  :op3 defective
recommend :arg1 ( do :arg0 ( you :arg0-of ( drive :arg2 red )  )  :arg1 amr-unknown )  :mode interrogative
affect :arg1 ( person :arg0-of ( suffice :arg1 ( long :arg1 period )  )  :arg0-of ( explain :arg1 ( drive :arg0 they )  :arg1-of ( base :location beck :location lawyer )  :arg1-of ( motorcycle :arg0 ( magazine :wiki time_[magazine] )  )  )  :arg0-of ( cross :arg1 ( provide :arg0 ( red :arg1-of ( light :arg0 time )  )  :arg1 ( and :arg1-of clear :arg1-of possible )  )  )  :arg1-of wait )
possible :arg1 ( interpret :arg1-of case :arg1-of case :arg1-of ( wait :time time )  :arg1-of appropriate :arg1-of differ )
possible :arg1 ( assume :arg1 light )  :purpose-of ( wait :arg1 you :arg1-of ( advise :arg0 ( person :name ( name :op1 becker )  )  )  :time ( before :op1 ( fault :arg1 traffic )  :time-of ( temporal-quantity :quant 5 :unit minute )  )  )
result :arg1 ( accident :compared-to-of ( liable :arg0 ( he :poss-of slash )  :arg2 she :manner full )  :mod any )  :arg1-of ( drive :arg0 anyone :manner ( spite :poss ( light :mod red )  )  )
warn :arg0 ( person :name ( name :op1 becker )  )  :arg1 ( wait :arg0 ( anyone :arg0-of ( wait :arg1 ( less :op1 ( temporal-quantity :quant 5 :unit minute )  )  )  )  :arg1 ( circumstance :mod certain )  :arg1-of long :polarity - :quant enough )  :condition ( refer :arg1 ( rule :arg0 ( organization :name ( name :op1 hamm :op2 higher :op3 regional :op4 court )  )  )  )
and :op1 ( hold :arg1 ( responsible :arg0 ( person :arg0-of ( case :arg1 red :arg1-of question )  :arg0-of drive :arg0-of ( ignore :arg1 ( light :mod ( red :mod permanent )  )  )  )  :arg1 ( jump :manner negligently )  )  )  :op2-of ( after :op1 ( and :op1 ( minute :unit-of ( temporal-quantity :op1-of around :quant 3 )  )  )  )
contrast :arg1 ( defective :domain light :mod actual :polarity - )  :arg2 ( turn :arg1 ( green :arg1 traffic )  :manner ( just :mod-of ( few :op1 ( temporal-quantity :unit minute )  :op1-of late )  )  )
contrast :arg1 ( spare :arg0 he :arg1 ( ban :arg1 account :arg1-of drive )  )  :arg2 ( spare :arg1 fine :polarity - )  :manner ( special :arg1 circumstance )
delight :arg0 ( organization :name ( name :op1 town :op2 council )  )  :arg1 ( budget :arg1-of solid )
turn :arg1 ( discuss :arg0 ( meet :arg0 ( organization :arg1-of ( have-org-role :arg0 ( person :arg0-of ( smile :purpose-of ( reason :mod good )  )  :name ( name :op1 ralph :op2 gerster )  )  :arg2 mayor )  :name ( name :op1 town :op2 council )  )  )  :arg1 time :mod every )  :arg2 budget
and :op1 ( stock :arg1 ( coffer :mod municipality )  )  :op2 debt :op3 ( free :arg1 administrate :time ( since :op1 ( date-entity :year 2005 )  )  )
possible :arg1 ( record :arg1 ( year :arg1-of ( sense :degree this )  :mod ( this :arg1-of budget )  )  :mod also :prep-as ( succeed :arg1-of ( complete :arg0 ( date-entity :year 2012 )  )  )  )
become :arg1 this :arg2 clear :time ( presentation :poss account )  :time ( date-entity :year 2012 )
plan :arg0 ( organization :name ( name :op1 eur )  )  :arg1 ( person :arg0-of ( explain :arg1 ( budget :arg0-of ( administrate :arg1 more )  :arg1-of come )  )  :name ( name :op1 andrea :op2 rothmund )  )  :arg2-of ( high :arg1 ( thing :name ( name :op1 euro :op2 . )  :quant ( around :op1 7.6 )  )  )  :mod original
stand :arg0 around :arg1 ( surplus :mod ( budget :mod ( administrate :arg0 ( organization :name ( name :op1 eur )  )  :arg2 1.8 )  )  )  :mod also :path ( above :op1 projection )  :time around
and :op1 surplus :op2 ( due :mod primary )  :op3 income :op4 ( authority :arg0-of ( contribute :arg1 income )  :arg1-of tax :arg1-of local :arg1-of tax :arg1-of ( trade :arg1-of high )  )
stand :arg1 ( budget :mod capital )  :arg2 ( above :op1 ( value :arg1-of project )  )  :mod also
value :arg1 ( year :arg1-of ( instead-of :arg2 ( euro :arg0-of ( project :arg1 ( organization :name ( name :op1 eur )  )  :arg2 2.5 )  :quant 1.5 )  )  :mod last )
say :arg0 this :arg1 ( person :name ( name :op1 &quot; )  )  :arg2-of ( contribute :arg0 ( due :mod main )  :arg1 ( budget :arg1-of high :arg1-of administrate )  )
plan :arg0 ( year :arg0-of ( cause :arg1 ( come :arg1 reserve :arg2 ( high :arg1 ( date-entity :year 2012 )  :arg1-of budget )  :mod also )  )  )  :arg1 ( invest :arg1 few )
manage :arg0 they :arg1 ( increase :arg1 ( reserve :arg1-of ( general :arg2 around )  :mod contingency )  :arg4 ( total :arg1 ( organization :arg1-of total :name ( name :op1 eur )  )  )  :arg0 they )
thank :arg0 ( person :arg0-of ( work :mod good )  :arg0-of ( have-org-role :arg2 mayor )  :name ( name :op1 ralph :op2 gerster )  )  :arg1 ( person :name ( name :op1 rothmund )  :op1-of and :poss-of team )
state :arg0 ( person :arg0-of ( praise :arg1 of )  :name ( name :op1 &quot; )  )  :arg1 finance :arg1-of ( say :arg0 ( you :arg0-of ( achieve :arg1 ( something :arg1-of ( resemble :arg0 job :arg2 this )  :polarity - )  :op1-of overnight )  )  )
delight :arg1 ( figure :mod good )  :arg1-of clear :arg2 ( and :op1 he :op2 ( organization :name ( name :op1 town :op2 councillors )  )  )
contrast :arg1 ( possible :arg1 ( sound :arg1 ( it :arg1-of ( resemble :arg2 paradox )  )  )  )  :arg2 ( figure :arg1-of ( work :arg1-of possible :arg2 expensive :arg3 citizen :time soon )  :manner precise :mod good :mod this )
mean :arg0 ( situation :mod good :mod finance )  :arg1 ( possible :arg1 ( do :arg0 ( authority :arg1-of local )  :arg1 past :arg2 ( rate :arg1-of high :mod municipality )  :direction away )  )
say :arg0 ( person :name ( name :op1 gerster )  )  :arg1 ( result :arg0 this :arg1 time :arg2 ( subsidize :arg1-of ( reduce :arg2 state )  )  :arg3 time )
fulfill :arg1 prerequisit :arg2 ( receive :arg1 ( subsidize :arg2 ( compensate :arg1 ( element :mod various )  )  :mod this )  )
levy :arg0 ( and :arg0-of ( apply :arg1 subsidize )  :op1 town :op2 municipality :poss-of ( rate :mod municipality :mod certain )  )  :arg1 ( thing :arg1-of require :mod other )
address :arg0 ( we :arg0-of ( comment :arg1 ( matter :arg1-of ( do :arg0 ( we :arg1-of ( come :duration ( temporal-quantity :unit year )  )  )  :arg1-of possible :arg2-of ( invest :arg0 there )  )  :arg2-of ( regard :arg0 ( person :arg1-of subsidize :name ( name :op1 &quot; )  )  :arg1 this )  )  )  )  :arg1 ( subject :op1-of ( of :mod-of municipality )  )  :arg2 rate
nagold :mod-of ( 60 :quant-of ( temporal-quantity :purpose-of ( person :arg0-of ( have-org-role :arg1 choir :arg2 member )  :name ( name :op1 hugo :op2 wermter )  )  :unit year )  )
of :arg0 story :arg1 ( he :arg0-of ( have :arg1 ( person :arg0-of ( sing :arg1 ( 60 :mod-of ( temporal-quantity :unit year )  )  )  )  )  )  :arg1-of ( long :op1-of almost )
stand :arg0 usual :arg1 ( person :name ( name :op1 hubert :op2 wermter )  )  :arg3 ( stage :location ( person :location-of ( choir :mod ( voice :mod male )  )  :mod colour )  )
popularity :compared-to-of ( more :extent-of ( achieve :arg0 ( temporal-quantity :unit year )  :arg1 ( choir :arg1-of ( sing :arg0 ( pleasure :arg1-of ( find :arg0 he :mod still :time ( after :op1 60 :op1-of even )  )  :mod great )  )  )  :time ( period :mod this )  )  :mod much )
activity :arg0 ( person :arg0-of ( have-org-role :arg1 committee :arg2 member )  :arg0-of ( serve :arg1 ( role :mod other )  )  :name ( name :op1 wermter )  )  :arg1 ( associate :arg1 ( 28 :quant-of ( temporal-quantity :unit year )  )  )  :mod also
and :arg2-of ( serve :arg0 choir :arg1 ( choir :mod church )  :mod also )  :op1 ( present :arg0 ( person :name ( name :op1 j√∂rg :op2 kohr )  :op3-of ( and :op1 ( commit :arg1 ( he :arg0-of ( receive :arg1 ( thing :arg1-of award :quant several )  :mod also )  )  :arg2 ( organize :arg1 ( act :arg0 ( behalf :poss ( organization :name ( name :op1 c√§cilian :op2 association :op3 of :op4 rottenburg-stuttgart )  )  )  :arg1 ( thing :name ( name :op1 lay :op2 pastor )  )  )  )  )  :op2 loyal )  )  :arg1 ( thing :name ( name :op1 association :op2 certificate )  )  )  :op2 ( letter :arg1-of ( sign :arg0 commendation )  )  :op3 ( thing :name ( name :op1 bishop :op2 gebhard )  )
engrave :arg1 ( pewt :mod-of ( plate :op1-of ( and :arg1-of ( present :arg0 ( colleagu :mod choir :poss he )  :arg2 ( certificate :mod ( organization :mod ( country :name ( name :op1 germany )  :wiki germany )  :name ( name :op1 choral :op2 association )  )  )  )  )  )  )
and :arg1-of ( differ :arg0 aside )  :op1 ( deliver :arg0 ( person :arg0-of ( sing :arg1 ( thing :name ( name :op1 vollmaringen )  )  )  )  :arg1 ( blend :arg0 400 :arg1 choral :mod colourful )  :op6-of ( and :op1 ( person :arg0-of ( progress :arg1 ( thing :name ( name :op1 autumn :op2 festival )  )  :arg2 usual :arg4 thing )  :name ( name :op1 hugo )  )  :op2 ( organization :name ( name :op1 betra :op2 male :op3 voice :op4 choir )  :op1-of alongside )  :op3 ( organization :name ( name :op1 salzstetten :op2 choral :op3 club )  )  :op4 ( organization :name ( name :op1 baisingen :op2 choral :op3 division )  )  :op5 ( organization :name ( name :op1 local :op2 music :op3 society )  )  )  )  :op2 ( style :arg1 song )  :op3 ( person :arg0-of visit :arg1-of entertain :quant or )
and :op1 ( thing :arg0-of ( run :arg1 atmosphere )  :arg1-of ( get :arg0 ( organization :name ( name :op1 the )  )  )  )  :op2 song :op3 ( thing :mod such :name ( name :op1 the )  )  :op4 br√ºd
amadeu :mod-of ( person :arg0-of ( serenade :arg1 tribute :manner-of ( prepare :arg0 they :arg1 ( person :arg0-of ( sing :arg1 wermt )  :mod honorary )  :arg2 short :mod also )  )  :name ( name :op1 mozart )  :poss-of bundesli :wiki wolfgang_amadeus_mozart )
and :op1 ( piece :arg1-of ( sing :arg0 ( organization :name ( name :op1 the )  )  :mod also :mod-of classic :time-of choral )  :mod such )  :op2 ( person :name ( name :op1 the )  )  :op3 ( person :name ( name :op1 the )  )  :op4 folk :op5 song :op6 ( thing :mod-of durch :name ( name :op1 the )  )
fulfill :arg0 ( female :mod-of quota )  :arg1 festival :op4-of ( and :arg1-of ( mix :arg0 choir )  :op1 lady :op2 ensemble :op3 ( ensure :arg1 ( club :arg1 impulse )  )  )
mean :arg1 while :arg2 ( and :arg1-of include :op1 ( thing :arg1-of ( draw :arg0 ( person :arg0-of ( carry-out :arg1 land :arg1-of mix :mod choir :time ( away :mod listener :mod foreign )  )  :name ( name :op1 the )  :op3-of ( and :op1 ( organization :mod folksong :name ( name :op1 the )  )  :op2 ( organization :name ( name :op1 the )  )  )  )  :mod also )  :name ( name :op1 the )  )  :op2 program )  :op1-of ( language :mod foreign )
conclude :arg0 music :arg1 ( provide :arg0 while :arg1 ( and :op1 hans_blix :op2 ( person :arg1-of ( return :arg1-of ( club :arg0 it )  :arg1-of ( sport :arg0 ( of :mod division )  )  :arg1-of ( be :arg0 ground :time interrogative )  :arg4 home )  :name ( name :op1 robert )  :wiki - )  :op3 bierli )  :arg1-of crown :mod music )
read :arg1 some :op1-of ( and :op1-of ( and :arg1-of ( punch :arg0 theater )  :arg2-of ( resemble :arg1 ( perform :arg0 child :arg1 ( program :mod small :op1-of auxiliary )  :time stollsteim )  )  )  :op2 ( keep :arg0 story :arg1 ( child :arg0-of ( entertain :arg1 afternoon )  :location-of throughout )  )  )
come :arg1 ( thing :arg1-of ( dream :arg0 child )  :mod-of true )
receive :arg0 ( and :op1 school :op2 ( centre :arg0-of ( care :arg1 day :arg2 nursery )  )  :op3 ( country :mod-of district :name ( name :op1 zollernalb )  )  )  :arg1 mail :time ( few :op1 ( temporal-quantity :unit ( day :mod next )  )  :op1-of over )
wish :arg0 ( country :name ( name :op1 black :op2 forest :op3 herald )  )  :arg1 renovate :op1-of ( and :arg3-of ( grant :arg1 construct :arg2-of ( support :arg0 ( person :arg0-of ( collaborate :arg1 ( person :name ( name :op1 bauhaus )  :op1-of ( and :op2 ( organization :mod ( organization :name ( name :op1 sparkasse :op2 zollernalb )  )  :name ( name :op1 savings :op2 bank )  )  )  )  )  :name ( name :op1 schwarzw√§lder :op2 bote )  )  :arg1 institution :arg1-of like )  )  )
need :arg0 ( school :arg1-of do :mod nursery )  :arg1 ( box :arg1-of sand :mod new )  :mode interrogative
possible :arg1 ( become :arg1 ( and :op1 cr√©ch :quant all )  :arg2 ( involve :arg1 ( centre :arg0-of ( care :arg1 day )  )  )  :time ( campaign :arg0 ( district :mod ( country :name ( name :op1 zollernalb )  )  :mod entire :op1-of across )  :arg1 nurseri )  )
possible :arg1 ( register :arg0 ( they :arg1-of ( construct :op1-of ( or :op2 ( request :arg1 institution :purpose renovate )  )  )  )  :arg1 this :arg3 ( person :name ( name :op1 schwarzw√§lder :op2 bote )  )  )
and :op1 get :op2 ( creative :compared-to child )  :op3 ( surprise :arg1 ( panel :arg0-of ( campaign :arg1 ( thing :name ( name :op1 kindergarten-baustelle )  )  )  :arg0-of judge )  )  :op4 ( construct :arg1 ( thing :name ( name :op1 nursery :op2 school :op3 - )  )  :arg1-of site )
and :arg0-of submit :op1 ( person :arg0-of represent :arg2-of ( consist :arg1 ( panel :arg0-of ( select :arg1 ( wish :quant 3 )  )  )  )  )  :op2 ( person :name ( name :op1 schwarzw√§lder :op2 bote )  )  :op3 ( person :name ( name :op1 bauhaus )  )  :op4 ( organization :name ( name :op1 sparkasse :op2 zollernalb )  )
require :arg1 ( thing :domain amr-unknown )  :mode interrogative :purpose participate
and :op1 ( possible :arg1 ( fulfill :arg0 it :arg1 ( wish :arg0-of ( use :arg1 ( material :arg2-of ( construct :arg1-of campaign )  )  )  :arg1 day )  )  )  :op2 ( value :arg1 ( organization :mod maximum :name ( name :op1 eur )  )  )
provide :arg0 winn :arg1 ( number :arg1-of ( work :arg1-of hard )  :quant-of ( helper :arg1-of build )  )  :mod furthermore
deal :arg1 amr-unknown :arg2 ( and :op1 ( day :time-of campaign )  :op2 helper )  :mode interrogative
provide :arg0 ( person :arg1-of ( support :arg0 ( organization :name ( name :op1 sparkasse :op2 zollernalb )  )  )  :name ( name :op1 bauhaus )  )  :arg1 material
and :op1 ( deliver :arg1 they :arg2 school )  :op2 ( day :arg1-of agree )  :op3 ( recommend :arg1 ( assemble :arg1 ( slash :arg1-of ( use :arg0 helper :arg1-of ( direct :arg0 nursery )  )  )  :location there )  )
possible :arg1 ( include :arg1 ( and :op1 ( person :arg0-of ( have-rel-role :arg2 parent )  :op1-of ( and :op2 grandparent :op3 ( person :arg0-of teach )  )  )  :op2 ( person :arg0-of ( have-rel-role :arg1 child :arg2 friend )  )  :op3 organization )  :arg2 helper )
outrage :arg0 ( press :mod ( country :name ( name :op1 kenya )  :wiki kenya )  )  :arg1 ( law :mod controversy :topic media )
say :arg0 ( paper :arg0-of ( challenge :arg1 ( constitution :polarity - )  )  :arg1-of ( mean :arg2 ( amr-unknown :arg1-of ( ask :arg0 ( place :arg1-of ( frighten :arg0 it )  :op1-of and )  :arg2 ( there :arg0-of ( prevent :arg1 parliament :arg2 ( simple :arg0-of ( sweep :arg2 tomorrow )  :mod-of ( away :arg0-of ( depend :arg1 of :arg2 judiciary :polarity - )  )  )  )  )  )  :arg1-of ( valid :arg0 it )  )  )  )  :arg1 bill :mode interrogative
say :arg0 ( we :arg0-of ( reject :arg1 it )  :arg0-of ( have-org-role :arg1 ( group :mod capital )  :arg2 director :arg2-of ( manage :arg0 kamau :arg1 ( respect :arg0 ( country :name ( name :op1 kenya )  :wiki kenya )  :arg1 ( depend :arg0 ' :arg1 radio :polarity - )  :degree most :op3-of ( and :op1 home :op2 ( of :op1 1 )  :op4 station :op5 news :op6 website )  )  )  )  :op3-of ( and :op1 ( and :op1 ( law :mod this )  :op2 draconian :op3 very )  :op2 punitive )  )
advertise :arg0 content :arg1 ( and :op1 ( damage :arg0 ( country :arg1-of ( govern :arg0 ( government-organization :arg0-of ( restrict :arg1 ( and :arg1-of ( extend :arg0 ( he :arg0-of ( say :arg1 new )  :arg0-of ( bias :arg1 tribunal :arg1-of ( cause :arg0 media )  :time always )  )  )  )  )  )  )  :name ( name :op1 kenya )  :wiki kenya )  :arg1 ( economy :mod globe )  )  :op2 place )
say :arg0 he :arg1 ( return :arg1 it :arg1-of ( appeal :arg0 ( we :arg0-of ( reject :arg1 this )  )  )  :arg1-of ( listen :arg0 ( i :arg0-of ( have-org-role :arg2 president )  :arg0-of ( hope :arg1 and )  )  )  :arg2 mp :op2-of ( and :op1 bill )  )
say :arg0 ( government-organization :arg0-of ( star :arg1 newspaper )  :arg0-of ( govern :arg1 ( country :arg0-of ( deal :arg1 ( blow :arg1 ( and :op1 ( lambaste :arg1 bill )  )  :arg1-of major )  )  :arg1-of ( free :arg1-of ( speak :arg0 media )  :arg1-of effective :op2-of ( and :arg1-of ( say :arg0 ( organization :name ( name :op1 according )  )  )  :op1 democracy )  )  :name ( name :op1 kenya )  :wiki kenya )  )  )  :arg1 ( bill :mod new )
measure :arg0 string :arg1 ( reinforce :arg1 ( wake-up :arg0 ( security :mod-of nation )  :arg1 ( shop :arg0 gunman :arg1 ( religious-group :name ( name :op1 islamism )  :wiki islam )  :op1-of ( mall :arg1-of attack )  )  )  :accompanier-of ( come :arg1 bill :arg2-of ( pass :arg1 of )  :time ( date-entity :month 9 )  )  )
dispatch :arg1 ( troop :consist ( footage :arg1-of ( broadcast :manner-of ( draw :arg0 ( media :mod ( country :name ( name :op1 kenya )  :wiki kenya )  )  :arg1 ( ire :mod-of authority )  )  )  :mod ( camera :mod security )  )  )  :arg2 ( scene :topic ( attack :arg0-of ( rob :arg1 ( mall :mod upmarket )  :arg1-of purport )  )  )
question :arg0 ( person :arg0-of ( summon :arg1 ( and :op1 ( journalist :quant 2 )  :op2 ( executive :mod media )  )  )  :arg0-of ( have-org-role :arg1 police :arg2 chief )  :arg0-of ( react :arg1-of ( follow :arg2 ( outcry :mod media )  :time-of ( retract :arg1 summon )  )  )  :name ( name :op1 david :op2 kimaiyo )  )
list :arg1 ( or :arg1-of ( bar :arg0 ( media :arg0-of ( fine :arg1 ( possible :arg1 house )  )  )  )  :arg1-of receive :arg2-of ( risk :arg0 ( individual :op1-of ( and :location ( country :name ( name :op1 kenya )  :wiki kenya )  :op2 journalist :quant shilling :quant 20 )  )  :arg1 ( bill :mod new :op1-of under )  :time additional )  :op1 ( person :arg0-of ( have-org-role :arg1 press :arg2 official )  :poss-of accreditation )  )
seize :arg0 ( tribunal :arg1-of ( pay :arg2 ( fine :polarity also )  :polarity - )  )  :arg1 ( property :poss ( person :arg0-of offend )  )  :purpose-of power
say :arg0 nation :arg1 ( enough :arg0-of ( fine :arg1 ( cripple :arg0 most :arg1 station )  :mod even )  )
say :arg0 also :arg1 ( effect :arg0 lively :arg1-of measure :arg1-of ( devastate :arg0 it )  :arg1-of possible :arg1-of ( describe :arg0 ( country :name ( name :op1 kenya )  :wiki kenya )  )  )
know :arg0 politician :arg1 ( possible :arg1 ( do :arg0 they :arg1 ( whatever :arg1-of resemble )  :arg3 impunity )  )  :manner ( silence :arg1 media )
and :arg1-of ( know :arg0 1 :arg0-of ( write :arg1 journalist )  :polarity - :time ever )  :op1 ( person :arg0-of describe :mod nation :name ( name :op1 &quot; )  )  :op2 ( source :arg1-of ( key :arg0 media )  )  :op3 ( check :arg0 of :arg1 ( life :arg1-of ( balance :arg0 ( country :name ( name :op1 kenya )  :wiki kenya )  )  )  :arg2 public )
and :op1 ( take :arg0 country :arg1 ( he :arg0-of write :arg1-of ( gather :arg0 themselv )  )  :arg1-of ( bankrupt :arg0 ( politician :arg1-of leave )  )  :arg2 back :op1-of ( and :op2 hunt )  )
target :arg0 ( anger :arg1 public :manner past )  :arg1 ( lawmaker :mod ( country :name ( name :op1 kenya )  :wiki kenya )  )
shilling :arg0-of ( free :arg1 world :arg2 ( tax :arg1 ( cut :arg0 ( temporal-quantity :unit month )  :arg1 around :arg1-of ( overturn :arg0 they :arg1-of ( vote :time ( date-entity :month 5 )  )  :op1-of ( and :op2 ( reinstate :arg1 salary )  )  )  :arg2-of ( order :arg0 ( commission :mod ( salary :mod nation )  )  )  )  )  :arg2-of ( rank :arg1-of ( high :arg0 hefty :degree most )  )  )
true :arg2-of ( come :arg1 bad :arg1-of dream )
wane :arg1 ( ceremony :arg0-of ( significant :arg1 town :op1-of ( and :op1-of ( and :op2 ( weather :mod cold )  :op3 ( rain :arg1 ( turf :mod astro )  )  :poss-of spite )  :op2 club )  )  :mod official :mod inaugural :poss-of football :purpose ( field :source-of sport )  )  :polarity -
hope :arg0 everyone :arg1 ( condition :arg1-of ( pleasant :degree more )  :beneficiary ceremony :mod-of saturday )  :arg1-of ( cooperate :arg0 last :arg1-of ( choose :arg0 ( god :mod weather )  )  :polarity - )
or :op1 ( come :arg0 ( anyone :arg0-of ( draw :arg0-of cause :arg1 ( straw :mod short )  )  )  :arg1 umbrella )  :op2 ( possible :arg1 ( hold :arg0 ( reason :mod whatever )  :polarity - :time onto )  )
speaker :arg0-of ( case :arg1 ( musician :arg0-of ( accompany :arg1 ceremony )  )  :domain this )  :quant number
wet :arg1-of ( get :arg0 ( person :arg0-of ( speak :arg1 ( fulfill :arg1 ( dream :arg1 thu )  )  )  :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 fc )  )  :arg2 chairman )  :name ( name :op1 albrecht :op2 schlenker )  )  :frequency also )  :degree fair
and :op1 ( go :arg0 ( thank :arg0 he )  :arg4 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 town :op2 council )  )  :arg2 mayor )  :arg1-of ( involve :arg2 ( realize :arg1 ( project :op1-of ( and :op2 ( involve :arg1 company )  :op3 ( person :arg0-of play :arg0-of ( have-org-role :arg1 club :arg2 member )  )  )  )  )  :manner heavy )  :name ( name :op1 walter :op2 klumpp )  )  )  :op2 foremost
mention :arg1-of ( go :arg0 ( person :name ( name :op1 lothar :op2 held )  :op1-of ( and :op2 ( person :name ( name :op1 paul :op2 weizenegger )  )  :op3 ( person :name ( name :op1 heiner :op2 gail )  )  :op4 ( person :name ( name :op1 peter :op2 graf )  )  )  )  )  :mod particular
lay :arg0 ( pensioner :mod spry )  :arg1 ( metr :mod square )  :purpose ( path :arg0-of ( flag :arg1 400 )  :mod new )
commit :arg1 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 state :op2 parliament )  )  :arg2 member )  :mod also :name ( name :op1 karl :op2 rombach )  )  :arg1-of remarkable :arg1-of voluntary :mod this
announce :arg0 amr-unknown :arg1 ( donate :arg1 club )  :op4-of ( and :op1 ( town :arg0-of ( sport :arg1 ( district :arg1-of ( have-org-role :arg2 commissioner )  :mod-of chairperson :quant bai )  )  :arg1-of ( issue :arg1-of ( greet :arg2 ( word :arg0 further :arg1 of )  )  )  )  :op2 ( association :mod football )  :op3 ( plan :arg1 office )  :op5 ( division :mod youth )  )
recall :arg0 ( thing :name ( name :op1 mayor :op2 klumpp )  )  :arg1 ( afflict :arg1 ( field :mod original :source-of sport )  :arg1-of ( repeat :arg0 ( influence :arg1-of ( relate :arg2 weather )  :location ( and :op1 spring :op2 autumn )  )  )  :extent ( possible :arg1 ( play :arg1 ( extent :degree such )  )  :polarity - )  )
or :location-of ( pitch :arg1-of ( construct :op1-of ( 15 :quant-of ( temporal-quantity :unit year )  )  )  )  :mod way :op1 ( site :mod club :mod ( football :mod back )  :poss ( country :name ( name :op1 salinensee :op2 lake )  :prep-on-of ( school :arg1-of ( consider :arg0 ( it :arg0-of ( consider :arg1 ( problem :beneficiary-of solution )  :arg2 secondary )  )  )  )  )  )
reject :arg1 ( idea :mod both )
turf :mod astro :mod-of ( pitch :arg1-of ( lay :arg2-of ( turn :arg1 ( thing :arg1-of think )  )  )  :arg1-of ( view :arg0 ( 6 :quant-of ( temporal-quantity :unit year )  )  :arg1-of general :arg2 ( solution :arg1-of perfect )  )  )
draw :arg0 ( organization :arg0-of ( inherit :arg1 ( thing :name ( name :op1 schabelstube )  )  :arg2 leasehold )  :name ( name :op1 fc )  )  :arg1 ( plan :arg0 specific :arg1-of ( contribute :arg0 ( organization :name ( name :op1 eur )  )  :arg1-of ( promise :op1-of ( and :arg0-of ( approve :arg1 subsidy )  :op2 ( construct :arg0 ( 2 :quant-of ( temporal-quantity :unit year )  )  :arg1 pitch )  :op3 state )  )  )  )
summarise :mod-of ( person :arg1-of ( remain :arg0 ( date-entity :year 2012 )  :arg2-of ( cover :arg0 ( organization :name ( name :op1 town :op2 council )  )  :arg1 ( organization :name ( name :op1 eur )  )  :arg1-of ( decide :time ( date-entity :month 10 )  :arg0 organization )  )  )  :arg1-of ( cost :arg2-of total )  :name ( name :op1 klumpp )  )
x :arg1-of ( work :arg1-of ( begin :arg0 68 :arg2 ( pitch :mod turf :mod metre )  :time ( date-entity :month 6 :quant 4 )  )  )
bike :arg0-of ( use :arg1 half :arg2 ( lay :arg1 track )  :arg2-of ( remove :arg1 ( metr :mod earth :mod ( volume-quantity :unit cubic-meter )  )  :time ( phase :arg1-of ( last :arg2 ( temporal-quantity :quant 3 :unit month )  )  :mod ( construct :arg0 dirt )  )  )  )
continue :arg0 ( and :arg2-of ( address :arg1 topic :op1-of ( and :op2 ( affair :arg1-of ( internal :mod-of justice )  )  )  )  :op1 ( organization :name ( name :op1 spd )  )  )  :arg1 ( negotiate :arg2 coalition )
meet :arg0 ( group :arg0-of ( work :arg1-of competent )  :arg1-of ( end :mod this )  )  :time ( morning :mod this )
include :arg1 ( and :arg0-of ( issue :mod other )  :arg1-of ( direct :arg0 democracy )  :op1 ( bribe :arg1 mp )  :op2 ( police :mod federal )  )  :arg2 ( topic :arg1-of discuss )
seek :arg0 ( and :op1 ( group :arg0-of work :mod integration )  )  :arg1 ( continue :arg0 migration :arg1 discuss )  :mod also :time morning
idea :arg0-of ( oppose :arg0-of ( issue :arg1 ( dual :mod-of nationality )  :arg1-of address )  :arg1 ( side :arg1-of ( regard :arg0 that )  :mod both )  )
like :arg0 ( organization :arg0-of ( decide :arg1 nationality )  :name ( name :op1 spd )  )  :arg1 ( put :arg1 ( end :arg1 ( dual :mod-of ( passport :poss-of ( notion :arg1-of reject )  )  )  )  :arg2 ( pressure :arg1-of ( place :arg2 ( child :arg1-of immigrate )  )  )  :arg0 organization )
substantiate :arg0 ( organization :arg0-of ( oppose :arg1 ( charge :arg0 - :arg1 car :arg1-of ( promote :arg0 ( organization :name ( name :op1 csu )  )  )  :arg2 toll )  :arg2 ( subject :arg2-of regard :topic traffic )  )  :name ( name :op1 spd )  )  :arg1 ( friday :location-of agenda :mod this )
and :op1 ( fee :mod rate )  :op2 ( drive :arg0 ( he :arg0-of ( negotiate :arg1 ( explain :arg0 counterproductive :arg1 environmentally )  :arg2 ( issue :arg1-of ( relate :arg2 traffic )  )  )  :poss-of letter :poss-of group :poss-of ( person :name ( name :op1 a )  )  :poss-of parliament )  :arg1 thus-far :arg1-of ( frequent :arg0 flat )  :arg2 ( amount :arg2-of ( stick :arg0 toll :arg1 road )  )  )
hotspot :arg0-of ( threaten :arg1 ( divert :arg0 ( already :time-of accident )  :arg1 ( traffic :topic ( road :location country )  )  )  )
introduce :arg0 toll :arg1 of :concession ( step :arg1 car :arg2 eye :mod only :mod also )
say :arg0 ( he :arg1-of compensate :arg1-of ( abolish :arg0 ( country :name ( name :op1 germany )  :wiki germany )  )  )  :arg1 ( risk :arg0 there :arg1 that :arg2 ( point :mod late )  )  :time time
open :arg0 ( country :name ( name :op1 dieter )  )  :arg1 ( sing :arg0 ( person :name ( name :op1 dieter )  )  :arg1 mountain :arg1-of ( wave :arg0 ( person :name ( name :op1 dieter )  )  )  )  :arg2 ( stage :mod air )
question :arg1 ( person :arg0-of ( will :arg1 ( again :mod summer :mode interrogative )  )  :arg0-of ( on :arg1 lip )  :arg0-of ( air :arg1 evening :arg1-of ( open :arg0 friday :mod actual :polarity - )  )  )
genuine :manner-of ( evening :domain it :location ( country :name ( name :op1 stuttgart )  )  :mod tropic )
provide :arg0 this :arg1 ( condition :beneficiary ( star :mod pop :op1-of ( and :op2 ( person :name ( name :op1 dieter )  )  :op3 ( person :name ( name :op1 thomas :op2 kuhn )  )  :op4 band )  )  :mod ideal )
of :arg1 ( sing :arg1 mountain :arg1-of ( perform :arg0 image )  :arg1-of wave :arg1-of click )
drive :arg0 ( person :arg1-of ( injure :arg0 accident :degree serious )  )  :arg1 car
injure :arg1 ( person :arg0-of ( drive :arg1 ( car :mod ( old :quant ( temporal-quantity :quant 37 :unit year )  )  )  :time evening )  :source aachen )  :arg2 ( accident :location thursday )  :degree serious
say :arg0 ( information :source ( police :mod-of around )  )  :arg1 ( travel :arg0 old :arg1 ( 41 :mod-of year )  :manner car )  :arg2 ( kempen :mod-of ( bypass :location direction )  )
right :arg1 ( he :arg0-of ( go :arg1 ( fail :arg0 ( he :arg0-of ( see :arg1 year )  :poss-of ( vehicle :poss oncom :poss old )  :poss-of 37 )  :arg1 t√∂nis )  :arg1-of turn )  )  :arg2 onto
collide :arg0 vehicle
and :op1 ( suffer :arg0 ( person :arg1-of reside :mod ( country :name ( name :op1 aachen )  )  )  :arg1 ( injure :arg1-of ( take :arg3 hospital :purpose treat )  :mod serious )  )
follow :arg0 ( block :arg0 ( road :degree ( country :name ( name :op1 konstanz )  )  )  :arg1 roundabout )  :arg1 accident
say :arg0 police :arg1 ( occur :arg0 ( person :arg0-of ( drive :arg2 ( thing :mod swis :name ( name :op1 seat :op2 ibiza )  )  )  :arg0-of ( lane :arg1 ( reichenaustrasse :arg1-of ( lane :quant 2 )  :location town )  :mod left )  :arg0-of travel :age ( temporal-quantity :quant 51 :quant-of old :unit year )  )  :arg1 accident )
notice :arg0 ( he :arg0-of ( lane :arg1-of ( turn :arg2 left )  )  :arg1-of ( move :arg2 direction :manner across :op1-of ( and :arg0-of ( lane :mod right )  )  )  )  :arg1 that :time ( before :op1 roundabout :quant short )
collide :arg0 he :arg1 ( organization :name ( name :op1 bmw )  )  :arg2 ( do :arg0 ( person :arg0-of ( travel :arg1 konstanz :arg2 ( lane :mod that )  )  :arg1-of ( reside :mod ( 23 :quant-of ( temporal-quantity :unit year )  )  :mod old )  )  )
damage :arg1 ( thing :name ( name :op1 vw :op2 passat )  )  :mod also :op2-of ( behind :arg2-of ( travel :arg0 ( person :arg0-of drive :age ( temporal-quantity :quant 19 :quant-of old :unit year )  )  )  :op1 bmw )
cause :arg1 ( organization :name ( name :op1 eur )  :part-of ( damage :arg1 material :arg1-of total )  )  :arg1-of ( announce :arg0 police )
continue :arg0 state :arg1 ( investigate :arg0 ( road :arg1-of ( block :manner off )  )  :arg1 accident )
abolish :arg0 ( organization :arg0-of ( call :arg1 passenger )  :name ( name :op1 vienna :op2 airport )  )  :arg1 out
please :arg0 ( 24 :quant-of ( organization :name ( name :op1 gate )  )  )  :arg1 ( way :poss ( person :mod mr. :name ( name :op1 max :op2 maier )  )  )
announcement :mod-of ( such :mod ( country :location-of future :name ( name :op1 vienna :op2 international :op3 airport )  )  :op1-of - )  :topic this
cease :arg0 ( majority :quant-of ( announcement :mod loudspeak )  )  :arg1 ( reduce :arg1 ( level :mod noise )  :manner considerable )  :time thus-far
goal :domain ( create :arg0 ( adjust :mod this )  :arg1 ( atmosphere :arg1-of ( relax :degree more )  )  )
announce :arg0 ( person :name ( name :op1 peter :op2 kleeman )  )  :arg1 ( person :arg0-of ( have-org-role :arg1 airport :arg2 spokesperson )  )  :arg1-of ( follow :arg2 ( trend :arg1 ( country :arg0-of ( approach :arg1 announcement :arg1-of adjust )  :name ( name :op1 vienna :op2 airport )  )  :mod international )  )  :purpose ( radio :arg1 ( city :name ( name :op1 vienna )  :wiki vienna )  )
do :arg0 ( airport :location ( and :op1 ( country :name ( name :op1 frankfurt )  )  :op2 ( city :name ( name :op1 dubai )  :wiki dubai )  )  :location ( country :name ( name :op1 kopenhagen )  )  )  :direction away :manner ( call :arg1 ( out :arg1 other )  :mod noisy )  :time already
recommend :arg1 ( calm :arg0 away :arg1 ( atmosphere :arg0-of ( do :arg1 200 :arg2 ( announcement :mod this )  )  :mod airport )  )  :arg1-of ( out :arg1-of ( call :arg1-of personal :arg1-of ( come :path loudspeaker )  :op1-of ( around :location-of ( average :arg1 day )  )  )  )  :time future
say :arg0 they :arg1 ( person :arg1-of ( flight :arg0 ( or :arg1-of ( change :arg0 other :arg1-of ( regard :arg0 information :arg2 ( lose :arg0 somewhat :arg1 among :arg2-of ( same :arg1 all )  :arg2-of ( take :arg0 individual :arg1 ( notice :arg0 relative :arg1 of )  :arg3 seldom :op2-of ( and :op1 ( show :arg0 also :arg1 ( that :mod-of this )  :arg1-of experience )  )  )  :arg2-of ( depart :arg0 announcement :arg0-of ( broadcast :arg1 ( radio :arg1-of ( chat :arg0 while )  )  )  :arg1 gate :time time )  )  )  )  )  )  :name ( name :op1 &quot; )  )
country :location ( country :name ( name :op1 kaltenhof )  )  :name ( name :op1 highland :op2 games )
contest :arg0 ( festival :location ( country :name ( name :op1 kaltenhof )  :quant 9 )  :mod agriculture :mod autumn )  :arg1 ( pull :arg0 ( van :instrument-of ( brake :arg0 8 :arg1 also )  )  :arg1 6 :arg2 tractor :op1-of alongside )
p.m. :location-of 30 :poss ( saturday :mod-of 1 )  :poss ( 7 :quant-of ( 9 :arg1-of ( start :arg0 ( country :name ( name :op1 highland :op2 games )  )  )  )  )
give :arg1 ( touch :arg0 they :arg1 ( colour :mod ( thing :name ( name :op1 swabian )  )  )  :arg2 ( event :mod ( country :name ( name :op1 kaltenhof )  )  :mod-of ground )  :domain-of ( tradition :mod ( country :name ( name :op1 scotland )  :wiki scotland )  )  )  :arg1-of while
and :arg1-of ( carry :arg1-of ( team :op1-of ( and :op2 individual :op3 ( company :arg1-of pit )  )  )  )  :arg1-of ( toss :mod-of discipline )  :op1 ( toss :arg1 another :arg1-of cab :mod horseshoe )  :op2 bucket
and :op1 ( cab :arg0-of ( weigh :arg1 25 :arg2 ( distance-quantity :quant 30 :quant 4 :unit kilometer )  :op2-of ( and :op1 ( long :arg1 metr )  )  )  )  :op2 half
explain :arg0 about :arg1-of ( distance :arg0 it :arg2 saile :polarity - )  :mod-of peter :mod-of organis
and :op1 ( throw :arg1 log :manner vertically )  :op2 ( somersault :time once )  :op3 ( finish :arg1 ( lie :arg1-of straight )  :time then )
point :mod maximum :mod-of ( score :mod this )
come :arg1 ( toss :arg0 all :arg1 horseshoe )  :arg4 accuracy :direction down
throw :arg1 horseshoe :arg2 ( distance :arg1 metr )  :time ( onto :op1 ( peg :time 8 )  )
prove :arg0 participant :arg1 skill :arg3 ( and :op1 strength :op2 water )  :manner ( carry :arg0 ( metr :quant 50 )  :arg1 bucket )  :time then
and :op1 ( record :arg1 time )  :op2 ( measure :arg0 ( quantity :mod water )  :arg1 vat :time end )
possible :arg1 ( take :arg0 team :arg1 ( compete :arg0 individual )  :arg3 2 :purpose ( each :arg1-of ( have-org-role :arg0 ( person :op1-of ( or :op2 clan )  )  :arg2 member )  )  :time then )
receive :arg0 ( and :op1 winner :op2 ( team :mod individual )  :op3 contest )  :arg1 prize
possible :arg1 ( practice :arg0 ( team :arg1 10 )  :arg1 a.m. )
desirable :arg1 ( clothe :arg0 suitable :arg1 ( wear :arg0 company :arg1 kilt :arg1-of possible :purpose example )  )
permit :arg1 ( clothe :arg1 ( thing :name ( name :op1 swabian )  )  :mod tradition )  :mod also
panel :arg0-of ( award :arg1 ( bonus :arg1-of judge :mod few :mod-of ( point :mod outfit )  )  :mod also )
begin :arg1 ( compete :arg1 ( open :arg1 registration :location ( until :op1 ( temporal-quantity :op1-of few :unit hour )  )  )  )  :op1-of prior
beforehand :arg1-of ( pull :mod-of ( contest :arg0 saturday :arg0-of ( begin :arg1 ( temporal-quantity :op1-of half :unit hour )  )  :arg1 tractor :op2-of ( and :arg0-of ( promise :arg1 ( deal :arg0 ( ground :mod event )  :arg1 action :mod great )  )  :op1 ( organization :name ( name :op1 scottish-swabian :op2 highland :op3 games )  )  )  )  )
bras :mod-of ( band :mod-of ( music :arg1-of ( treat :arg0 evening )  :mod-of fan )  )
mean :arg1 ( 19 :arg0-of ( allude :arg1 ( word :arg1 ( and :arg0-of ( love :arg1 ( beer :arg1-of ( well :location expressive )  )  )  :arg1-of ( provide :arg0 group :arg1-of ( entertain :arg0 ( evening :mod great )  )  :location music :location wind )  :op1 perhaps )  :arg1-of ( play :mod-of ( region :mod ( pear :mod-of tree )  )  )  )  )  )
march :mod lively :op1-of ( and :arg1-of ( play :arg0 ( band :arg1-of polka )  )  )
include :arg1 ( and :op1 ( waltz :mod emotive )  :op2 ( band :mod big :mod full :mod-of sound )  )  :arg2 repertoire :mod also
and :op1 ( keep :arg1 ( sing :arg1 inn :time-of ( know :arg1 ( person :mod-of koch :name ( name :op1 heinz )  )  :manner good :manner there :manner ( den :mod unt )  :mod also )  )  )  :op2 sausage :op3 baron
and :op1 ( fool :arg0 ( he :arg0-of ( appear :arg1 past )  )  :arg1 ( market :op1-of ( festival :name ( name :op1 christmas )  :wiki christmas )  )  )  :op2 guild :op3 event
band :arg0 ( person :arg0-of ( farm :arg1 session )  :arg0-of ( bring :arg1 ( and :arg2-of ( mean :arg1 2 )  :op1 then :op2 oldi :op3 ( close :arg0 p.m. :arg1 celebration )  )  )  :poss-of guest :poss-of morning )  :arg1 ( will :arg0 music :arg1 ( society :location-of ( entertain :arg0 sunday :arg1 audience )  )  )
feature :arg1 party :arg2-of ( field :arg1 ( get :arg0 celebration :arg1 ( way :mod-of friday )  :op1-of under )  )
and :op1 ( car :arg0-of ( exhibit :op2-of ( and :op1 ( meet :arg0 ( company :location topic )  :arg1 ( and :arg1-of ( include :arg0 ( sunday :op3-of ( and :op1 itinerary :op2 saturday )  )  :arg2 ( item :mod other )  )  :mod vintage :op1 tractor )  )  )  )  )  :op2 agriculture :op3 forestry
and :op1 ( thing :arg0-of attract :mod further )  :op2 ( maze :mod corn )  :op3 ( market :mod ( craft :arg0 sunday )  )  :op4 ( shear :arg1 sheep )
straw :arg0-of ( castle :arg1 bouncy :arg2 ( drive :arg0 tractor :arg1 ( child :arg1-of ( pet :arg0 there :arg2 zoo )  :mod specially )  :arg1-of ( surf :arg0 ( tractor :op1-of ( and :arg1-of ( supervise :arg0 under )  )  )  )  )  )
and :arg1-of ( ski :arg1-of ( associate :arg2 ( community :arg2-of ( organize :arg1 event )  :mod-of hall )  )  )  :op1 club :op2 ( cap :arg0 blast :arg1 ( tractor :mod-of enthusiast )  )
and :op1 ( overview :quant-of milk )  :op2 egg :op3 alternativ
promote :arg0 ( nutrition :mod vegan )  :arg1 ( alternativ :mod vegetable )  :arg2 ( and :op1 egg :op2 milk :op3 ( product :mod dairy )  )
serve :arg0 ( mash :arg2 ( cream :arg1 plant :arg2 example )  )  :arg1 ( substitute :arg1 ( cheese :mod quark :mod tofu )  )
provide :arg0 ( organization :name ( name :op1 vegetarian :op2 association )  )  :arg1 ( example :mod further :topic ( thing :name ( name :op1 world :op2 vegan :op3 day )  )  )  :time ( date-entity :era-of 1 :month 11 )
propose :arg0 ( organization :arg0-of ( host :arg1 ( alternativ :mod vegan )  )  :name ( name :op1 vegetarian :op2 association :op3 of :op4 germany )  )  :arg2-of ( occasion :arg1 ( thing :name ( name :op1 vegan :op2 ( day :mod world )  )  )  )  :time ( date-entity :month 11 :quant 1 )
alternative :condition ( replace :arg0 ( yoghurt :mod soya )  :arg1 yoghurt :arg1-of possible )  :domain ( margarine :location ( plant :mod pure )  )  :mod good :prep-to butter
or :op1 ( country :name ( name :op1 soya )  )  :op2 oat :op3 almond :op4 rice :op5 ( use :arg1 milk :arg1-of possible :location ( place :quant-of milk )  )
possible :arg1 ( replace :arg1 ( cream :arg1-of whip :mod tradition )  :arg2 ( cream :arg1 plant )  )  :arg1-of whip
plant :mod also :mod-of ( alternativ :destination egg )
possible :arg1 ( replace :arg0 ( banana :arg1-of ripe :mod ( mash :arg1 half :arg2 example )  )  :arg1 egg :arg2 ( agent :arg1-of binding :location cake )  )
tablespoon :arg0-of ( suitable :arg1 ( mass-quantity :quant 50 :quant-of ( sauce :mod ( apple :mod-of also )  :op1-of ( or :op2 ( tablespoon :mod ground )  )  )  :unit gram )  )  :quant 3 :quant-of ( water :quant ( plus :location-of linse )  )
and :op1 ( powder :arg1 example :arg1-of ( bake :arg0 ( mixture :arg1-of ( replace :arg0 ( dough :arg1-of ( become :arg2 fluffy )  )  :arg2 egg )  )  )  )  :op2 tablespoon :op3 cornflour :op4 ( tablespoon :quant 3 :quant-of ( water :mod mineral )  )  :time tablespoon
fulfill :arg0 ( or :op1 ( yoghurt :mod soya :quant ( mass-quantity :quant 50 :unit gram )  )  :op2 ( tofu :mod silken )  )  :arg1 ( purpose :mod this )  :arg1-of possible :mod also
say :arg0 ( information :source ( organization :name ( name :op1 vegetarian :op2 association )  )  )  :arg1 ( vegetable :mod ( percentage-entity :value ( 100 :mod current )  )  :mod-of ( diet :poss ( country :name ( name :op1 germany )  :poss-of ( diet :mod vegan )  :quant around :wiki germany )  )  )
city :name ( name :op1 new :op2 york )  :wiki new_york_city
host :arg0 ( way :direction ( family :location ( country :name ( name :op1 weymouth )  )  )  :poss ( pupil :arg0-of ( get :arg1 ( know :arg0 ( organization :name ( name :op1 schwarzwald :op2 grammar :op3 school )  )  :arg1 city )  )  )  )  :arg1 ( city :location ( state :name ( name :op1 massachusetts )  :wiki massachusetts )  :name ( name :op1 new :op2 york )  :wiki new_york_city )
head :arg0 ( they :arg0-of ( reach :arg1 ( heart :part-of city )  :arg1-of possible :manner foot )  )  :arg1 ( straight :arg1 ( bridge :arg1 brooklyn )  )  :time ( after :op1 ( flight :arg1 ( city-district :name ( name :op1 manhattan )  :wiki manhattan )  :duration ( temporal-quantity :quant 8 :unit hour )  )  )
view :arg0-of fascinate :arg1 ( skyline :arg1-of ( impress :arg0 here :location ( evening :arg1-of light )  :time particular )  :mod ( famou :mod world )  )
time :arg1 ( square :wiki - )  :arg1-of ( trip :arg2 ( off :arg1-of round-up :arg2-of ( sleep :arg0 nev :arg1 ( go :arg0 ( almost :quant-of ( temporal-quantity :quant 24 :unit hour )  )  :arg4 ( true :mod howev :op1-of slogan :quant-of ( temporal-quantity :unit day )  )  :purpose-of ( differ :arg1 pupil :arg2 due :time time )  )  :location city )  )  )
possible :arg1 ( visit :arg0 they :arg1 ( country :name ( name :op1 statue :op2 of :op3 liberty )  )  :op2-of ( and :op1 ( spite :poss shutdown )  :op3 ( climb :arg1 statue )  :op4 foot )  :time day )
move :arg0 they :arg1 ( visit :arg0 ( thing :name ( name :op1 financial :op2 district )  )  :arg1 ( memorial :mod ( event :name ( name :op1 9/11 )  :wiki september_11_attacks )  :quant 11 )  )  :arg2 ( company :name ( name :op1 wall :op2 street )  :wiki wall_street )  :time then
possible :arg1 ( take :arg0 pupil :arg1 overview :purpose ( enjoy :arg0 ( city :arg0-of fascinate )  :arg1 ( view :arg1 ( height :mod ( metr :mod 373 )  )  )  )  :source ( platform :arg1-of view :poss ( country :name ( name :op1 empire :op2 state :op3 building )  )  )  )  :time day
autumn :mod-of ( sun :prep-in-of ( rest :mod-of ( opportunity :arg1-of perfect :arg2-of ( provide :arg0 ( country :name ( name :op1 central :op2 park )  :poss ( they :arg0-of ( hustle :arg1 ( street :location ( city :name ( name :op1 new :op2 york )  :wiki new_york_city )  )  :op1-of ( and :op2 ( bustle :arg1 ( organization :name ( name :op1 rockerfeller :op2 center )  )  )  )  )  :poss-of ( way :time then )  )  )  )  )  :op1 while )  )
and :arg1-of ( experience :arg2 ( organization :name ( name :op1 weymouth :op2 high :op3 school )  )  :time ( day :mod school )  )  :op1 ( arrive :arg1 ( pupil :arg1-of host )  :arg1-of ( follow :arg2 ( flight :arg1 ( city :name ( name :op1 new :op2 york )  :wiki new_york_city )  :arg2 ( city :name ( name :op1 boston )  :wiki boston )  :duration short )  )  :arg4 family :time now )
parish :arg2-of ( celebrate :arg0 ( year :mod ( this :mod ( again :mod once )  )  )  :arg1 ( saint :mod-of day :mod-of mass )  )
say :arg0 ( legend :wiki billy_thorpe )  :arg1 ( hunt :arg1-of ( convert :arg1-of ( follow :arg0 late :arg2 vision )  :op1-of ( and :op2 ( appoint :arg0 ( person :name ( name :op1 st. :op2 hubert )  )  :arg1 ( bishop :poss ( country :name ( name :op1 l√ºttich )  )  )  )  )  )  :mod ruthles )
of :arg0 ( thing :arg1-of hunt :mod group :name ( name :op1 hunting )  )  :arg1 ( person :arg0-of ( flat :arg1 e :arg1-of ( key :arg1-of natural )  )  :arg0-of ( play :arg1 ( tradition :mod old :mod-of france )  )  :name ( name :op1 hunting )  )
drag :arg1-of ( hunt :arg1-of ( hound :arg1-of ( pack :op2-of ( and :op1 horse :purpose-of ( provide :arg0 ( they :arg0-of ( ride :arg1 clothes :arg1-of ( wear :arg0 ( person :arg0-of ( play :arg1 wind )  )  )  )  )  :arg1 ( accompaniment :mod music )  :arg2 rider :manner main )  )  )  )  )
a.m. :poss-of ( solemn :mod-of ( mass :arg0-of ( take :arg1 place :prep-on sunday :time ( date-entity :month 11 :quant 3 )  )  )  )
stand :arg1 ( design :arg1 new :mod newly )
invite :arg0 1 :arg1 ( you :arg0-of ( linger :arg1 while :op1-of ( and :op2 ( come :arg1 that :mod again )  )  )  )
want :arg1 ( name :arg1 1 :arg2 there )
say :arg0 dictionari :arg1 ( define :arg1 ( express :arg0 ( phenomenon :mod psychological )  :arg1 ( feel :arg1 ( experience :op1-of ( or :op2 ( see :arg1 ( situation :mod new )  )  )  :time already )  )  )  )
feel :arg1 ( remain :arg1 ( do :arg0 ( same :arg1 ( visit :arg1 case )  :arg1-of name :arg1-of ( view :arg0 ( county :wiki pingtung_city )  )  )  :arg1 it :polarity - )  :arg1-of pure )  :time always
contrast :arg1 ( theoretic :mod ( just :polarity - )  )  :arg2 ( possible :arg1 ( repeat :arg1 ( and :op1 ( aim :arg1 ( recur :arg1 ultimate )  :domain this :manner precise )  :op2 ( visit :arg1 ( wonderful :arg0 tangibly :arg1 name )  :arg1-of actual )  :op3 something )  )  )
and :op1 fun :op2 ( beautiful :arg1 cause :manner simple )
onlook :arg2-of ( give :arg0 ( glance :arg1 ( work :arg1 outset :arg1-of ( internal :arg0 right )  )  )  :arg1 ( feel :arg1 8 :manner positive )  )
feel :arg0 ( you :arg0-of ( design :arg1 ( place :arg2-of ( resemble :arg1 ( ambience :op3-of ( yet :op1 ( modern :arg1 ultra )  :op2 cosy )  )  :arg1-of look )  )  )  )  :arg1 good
helm :source-of ( and :op1 ( person :arg0-of ( found :arg1 business )  )  :op2 ( person :name ( name :op1 mirjam :op2 van :op3 der :op4 stelt )  :op1-of ( and :arg1-of ( range :arg2 ( wide :arg1 here )  :arg2-of ( spoil :arg1 ( guest :poss team )  )  )  :op2 coffe :op3 cocktail )  )  :op3 ( person :name ( name :op1 daniel :op2 b√ºttner )  )  )
delicious :arg0-of ( fill :arg1 ( this :topic-of addition )  )  :arg1-of ( cake :op1-of ( or :op2 ( baguett :arg1-of fresh :arg1-of bake )  )  )
mean :arg2 ( manage :arg0 they :arg1 ( chic :arg1-of ( open :mod ( prior :mod restaurateur )  :mod old :mod themselv )  )  :arg1-of ( lounge :arg0 ( person :arg0-of ( own :arg1 already )  :name name :poss-of ( 33 :mod both :mod-of ( temporal-quantity :unit year )  )  )  )  :time previous )
hope :arg1 ( reach :arg0 ( lover :arg0-of ( move :arg2 ( country :name ( name :op1 kleve )  )  )  :arg1-of friendly )  :arg1 ( audience :arg1-of wide )  )
university :mod-of ( customer :mod - )
emphasis :mod-of ( person :arg2-of ( do :arg0 ( we :arg0-of ( target :manner ( specific :arg1 group )  )  )  :arg1 b√ºttn :polarity - )  :name ( name :op1 daniel :op2 ortega )  :wiki daniel_ortega )
age :arg1 ( bracket :arg1 here :op3-of ( and :op1 ( person :arg0-of ( study :arg1 they )  :mod young :prep-to-of ( much :arg1-of ( appeal :arg0 pair :arg1-of ( hope :prep-in ( fact :arg1-of ( actual :arg0 all )  )  )  )  )  )  :op2 ( citizen :mod senior )  )  )
speak :arg1 lover
motivate :arg0 ( love :arg1 coffee )  :arg1 ( person :arg0-of own :arg1-of friendly :quant 2 )
enjoy :arg0 they :arg1 ( brew :arg1 ( variet :mod format )  :arg2-of ( hot :arg1 fragrant )  )
fan :quant espresso
cappuccino :arg1-of ( drink :arg0 ( person :name ( name :op1 mirjam :op2 van :op3 der :op4 stelt )  )  :arg2 ( fan :degree ( more :domain ( person :name ( name :op1 daniel :op2 b√ºttner )  )  )  :mod espresso )  )
reveal :arg0 ( she :op5-of ( and :op1 baguette :op2 it :op3 i :op4 ( thing :mod ( that :mod-of ' )  )  )  )  :arg1 nrz
event :arg1-of hold :op1-of already :quant ( 2 :arg1-of ( light :degree brightly )  )
or :mod ( perhaps :mod-of ( more :degree-of accurate )  )
cause :arg0 ( place :location-of ( thing :name ( name :op1 hafenfest )  )  )  :arg1 this :arg2 ( benefit :arg0 ( person :name ( name :op1 caf√© :op2 d√©j√† )  )  :arg1 ( more :degree-of outside )  :polarity - )
thing :mod-of ( evening :mod also )  :name ( name :op1 ringelnatz )
funny :op2-of ( and :op1 ( succeed :arg1-of beautiful :arg1-of ( find :arg0 it :manner 33 :manner ( 2 :quant-of ( temporal-quantity :unit year )  )  :mod old )  )  )
contrast :op1-of ( everyone :polarity - )
please :arg0 you :arg1 ( person :mod ( this :mod perhaps )  :name ( name :op1 perhaps )  )  :arg2 everyone :mod ( just :mod-of ( possible :arg1 event :polarity - :topic-of ( fan :mod vocal :mod-of evening )  )  )  :polarity -
express :arg1 ( interest :arg1 ( i :arg0-of ( appeal :arg1 event :mod only :op1-of and :time always )  )  :arg2 ( event :arg1-of special )  )
event :arg0-of ( except :arg1 rule :arg2 ( reason :mod this )  :time always )
cause :arg0 ( want :arg0 we :arg1 little )  :arg1 ( possible :arg1 ( normal :arg0 disruption :arg1 business )  )
say :arg0 that :arg1 ( organization :arg1-of ( stand :arg2 reliability :mod also )  :name ( name :op1 d√©j√† :op2 vu )  )
and :op1 team :op2 ( set :arg1 ( opschlag :location ( country :arg0-of ( offer :arg1 ( product :poss-of ( quality :arg1-of regard )  )  :location here )  :name ( name :op1 kleve )  )  )  :arg1-of ( fantastic :arg0 this )  )
become :arg1 street :arg2 ( restaurant :quant-of ( distance-quantity :unit mile )  )  :manner ( fast :mod that )
and :example-of ( distance-quantity :unit mile :value restaurant )  :example-of ( and :example-of and :op1 ( far :arg1-of ( near :arg2 ( person :arg0-of ( reside :arg1 delight )  )  :arg3 ( many :mod of )  :mod guest :mod this )  )  :op2 ( person :arg0-of ( discover :arg1 it )  :arg0-of ( study :arg1 themselv )  )  )
person :name ( name :op1 anke :op2 gellert-helpenstein )
day :time-of ( thank :arg1 ( person :name ( name :op1 dinker )  )  :arg2 ( organization :name ( name :op1 mgv :op2 male :op3 choral :op4 society )  )  )
issue :arg0 ( person :arg1-of ( invite :arg0 ( it :poss-of 165th )  :arg3 ( temporal-quantity :unit ( year :mod this )  )  )  :name ( name :op1 this )  )  :arg1 ( sing :arg0 guest :arg1 wife :arg1-of ( accept :arg0 happy )  :arg1-of activity :arg2-of ( celebrate :arg0 anniversary )  :op1-of ( and :example-of 52 )  )
enjoy :arg0 clubhouse :arg1 present :arg1-of ( friendly :arg2 ( get :arg0 inn :arg1 ( that :quant all )  :arg1-of ( name :arg0 together :prep-to music )  )  )
occasion :arg1 ( bestow :arg1 honour )  :arg1-of ( fit :arg0 tradition :time ( always :mod also )  )  :domain ( celebrate :arg1 anniversary )
receive :arg1 ( person :arg0-of ( singe :arg1 of :arg1-of special :arg3 ( time :mod this :value-of around )  )  :arg1-of ( award :arg0 year )  :arg1-of ( delight :arg0 secretary )  :name ( name :op1 this )  )
contrast :arg1 ( you :arg0-of ( do :arg0-of ( cause :arg1 much )  :arg0-of ( run :arg1 ( we :arg0-of ( offer :arg1 ( we :arg0-of ( say :arg1 choir :arg2-of ( thank :arg0 sincere :arg1 ( person :arg0-of ( have-org-role :arg2 chairman )  :name ( name :op1 &quot; )  )  )  )  )  )  )  :op1-of around )  :arg1 this :mod also :polarity - )  )  :arg2 ( and :op1 ( keep :arg0 you :arg1 ( record :mod countless )  :mod only )  )
mark :arg0 attendance :arg1 ( go :arg0 ( temporal-quantity :unit year )  :arg1 choir :arg1-of ( follow :arg0 44 )  :arg1-of ( have-org-role :arg2 ( chairman :mod honorary )  )  :arg1-of ( have-org-role :arg2 director )  :arg1-of ( have-org-role :arg2 chairman )  :arg1-of ( participate :arg0 ( thing :arg1-of award )  :mod ( each :arg0-of ( attend :arg1 42 )  :arg1-of ( winkle :arg0 year )  :arg1-of singe :op2-of ( and :op1 last )  )  :op1-of ( and :arg2-of ( mean :arg1 of )  :op2 ( perform :arg1 presentation )  :op3 choir :op4 rehearsal :op5 ( activity :op1-of posi )  )  )  :mod this )
organize :arg1 music :arg2 ( copy :arg1-of ( responsible :arg1-of ( go :arg0 ( place :mod fifth )  :arg4 ( person :name ( name :op1 artur :op2 br√ºckner )  )  )  )  )
and :op1 ( person :arg0-of ( delight :arg1 ( class :mod top :mod-of ( menu :mod present )  )  :mod ( again :mod once )  )  :arg2-of ( give :arg0 ( organization :name ( name :op1 board :op2 of :op3 directors )  )  :arg1 ( thank :arg0 ( table :mod decoration )  :arg1 ( team :arg1-of ( manage :arg0 innkeep )  )  :arg1-of special )  )  :name ( name :op1 ange :op2 pier-ribbert )  )  :op2 ( thing :name ( name :op1 gerda :op2 pier :op3 - :op4 ribbert )  )
mean :arg1 ( meet :arg1 ( thing :name ( name :op1 the )  )  :arg1-of ( regular :arg0 it :mod-of ( choir :mod-of rehearsal )  )  )  :mod 19 :mod ( every :mod-of tuesday :quant-of clubhouse )  :op1-of 45
say :arg0 new :arg1 ( person :arg1-of ( welcome :arg0 ( sing :arg0 voice :arg1 more :arg1-of ( love :arg0 that )  )  )  :name ( name :op1 &quot; )  )  :time ( time :mod any )
hail :arg0 ( organization :name ( name :op1 un )  :wiki united_nations )  :arg1 ( goal :arg0-of ( tackle :arg1 poverty )  :mod new )
tackle :arg1 ( poverty :mod globe )  :purpose-of ( put :arg0 ( goal :arg1-of ( replace :arg0 ( set :consist-of ( goal :arg0-of ( develop :arg1 ( 12 :quant-of ( temporal-quantity :unit year )  )  )  )  :mod new )  :arg1-of ( work :arg1-of ( start :arg0 ( organization :name ( name :op1 united :op2 nations )  :wiki united_nations )  )  :time immediate )  )  :mod millennium )  :arg1 place )
push :arg1 ( goal :arg1-of ( develop :arg1-of sustain )  )  :arg2 ( person :arg0-of play :arg0-of ( replace :arg1 ( organization :arg0-of ( expire :arg1 ( ahead :mod-of of )  )  :name ( name :op1 australian )  )  )  :arg0-of ( have-org-role :arg1 ( organization :arg0-of ( sustain :arg1 ( begin :arg1 ( city :location-of overnight :name ( name :op1 rio :op2 de :op3 janeiro )  :wiki rio_de_janeiro )  :time ( date-entity :year 2015 )  )  :mod-of ( develop :arg1 summit :mod that )  )  :name ( name :op1 un )  :wiki united_nations )  :arg2 diplomat )  :arg0-of ( key :arg1 role )  :mod ( country :name ( name :op1 australia )  :wiki australia )  )
include :arg1 they :arg2 ( draft :arg1 document :arg1-of ( endorse :arg0 ( person :arg0-of ( lead :arg1 ( world :poss-of ( person :name ( name :op1 ms :op2 gillard )  :wiki julia_gillard )  )  )  )  :time summit )  :mod final )
tell :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 un )  :wiki united_nations )  :arg2 secretary )  :mod general :name ( name :op1 ban :op2 ki-moon )  :wiki ban_ki-moon )  :arg2 ( summit :mod-of overnight )  :time ( time :arg2-of ( rise :arg1 ( above :mod-of ( nation :mod-of interest )  )  )  :mod that )  :time now
say :arg0 he :arg1 ( thing :arg1-of ( process :arg1-of ( launch :arg0 state :op1-of ( and :arg1-of agree :op2 ( take :arg0 ( i :arg0-of ( develop :arg1 goal )  :arg0-of ( have-org-role :arg2 member )  :arg0-of ( please :arg1 that )  )  :arg1 ownership :arg2 of )  )  )  )  :arg1-of establish :arg1-of ( sustain :arg0 universal )  :name ( name :op1 &quot; )  )
and :op1 ( build :arg1 ( thing :mod this :name ( name :op1 sdgs )  )  :manner ( advance :arg1 we )  )  :op2 ( goal :mod ( develop :arg0 integral :arg1 millennium )  )  :op3 ( develop :arg0 they :mod-of ( framework :time ( post :op1 ( date-entity :year 2015 )  )  )  )
goal :arg0-of ( build :arg1 ( succeed :arg1 ( develop :arg1 ( we :poss-of ( vision :arg1-of ( realize :arg0 ( effort :purpose ( implement :arg0 ( state :arg0-of ( have-org-role :arg2 member )  )  :arg1 ( mandate :arg1-of ( give :arg2 i )  )  :purpose-of ( spare :arg0 i :polarity - )  )  )  )  )  )  )  )  )  :arg1-of sustain
prevail :arg0 ( country :arg0-of ( go :arg1 ( temporal-quantity :unit day )  :manner victory :op1-of even )  :arg1-of match :name ( name :op1 baden )  :op2-of ( slash :op1 ( country :name ( name :op1 sg :op2 achim )  )  )  )  :arg1 ( mood :mod positive )  :location ( team :arg0-of ( flight :arg1 4 )  :mod handball :mod top )  :mod still
let :arg0 ( person :arg2-of train :name ( name :op1 tomasz :op2 malmon )  )  :polarity ( - :polarity-of ( doubt :arg1 ( fact :mod this )  :mod any )  )
motivate :arg1 everyone :arg2 ( task :prep-at hand )  :degree full :mod still
say :arg0 ( i :arg0-of ( hope :arg1 ( start :arg0 we :arg1 ( win :mod again :arg0 we )  :time final )  )  )  :arg1 that
say :arg0 ( i :arg0-of ( remember :arg1 ( amr-unknown :arg2-of long )  :polarity - )  )  :arg1 ( person :arg0-of ( anticipate :arg1 team :arg2 ( organization :name ( name :op1 &quot; )  )  )  :arg0-of ( succeed :arg1 he )  :arg2-of ( resemble :arg0 victory :arg1 ( taste :mod that )  )  :name ( name :op1 &quot; )  )
reserve :arg0 ( moment :arg0-of advance :arg0-of issue :mod ( exact :mod-of ( form :arg0-of warn :mod ( good :degree most )  :mod even )  )  :polarity - )  :arg1 tier
play :arg0 ( person :quant ( many :arg1-of ( train :arg0 i :location youth )  )  )
motivate :arg1 ( play :arg0 ( person :arg0-of ( coach :time former )  )  :arg1 ( they :quant consequently )  )  :manner particular
and :op1 in :op2 addition :op3 ( see :arg0 we :arg1 ( thing :arg1-of ( coach :arg0 person )  :arg1-of ( explain :arg0 ( team :mod first )  )  :name ( name :op1 &quot; )  )  :arg1-of ( wait :arg2 there )  :arg2 reinforcement :op1-of wheth )
win :arg0 ( they :arg0-of ( get :arg1 final :arg1-of ( will :arg0 ( team :arg0-of ( perform :arg1 recent )  :arg0-of improve )  )  :arg1-of ( case :arg0 any )  )  )  :arg1 track :time back
and :op1 ( cover :arg1 ( major :arg1 problem )  :mod-of term )  :op2 ( counter :arg1 ( attack :arg1 primary )  )
goal :arg1-of ( improve :arg0 ( team :part eye )  :mod considerable )
hope :arg0 i :arg1 ( manage :arg0 ( person :arg0-of play )  :arg1 ( clear :arg1 ( person :arg0-of head )  :time ( break-up :duration short )  :arg0 person )  :time final )
concern :arg0 ( security :mod ( country :name ( name :op1 mozambique )  :wiki mozambique )  )  :arg0-of ( mount :arg1 ( clash :arg1 personaliti :arg1-of powerful )  )
chant :arg0 central :arg1 maputo :manner ( peace :arg1-of ( rare :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :arg0-of ( found :arg1 statue )  :name ( name :op1 mozambique )  :wiki mozambique )  :arg2 ( president :arg1-of stare )  )  :arg1-of ( gather :arg0 they )  )  :arg1-of ( demonstrate :arg0 down )  :arg1-of public )  :time-of slogan )
say :arg0 ( we :arg0-of ( want :arg1 stability :op4-of ( and :op1 ( want :arg0 we )  :op2 peace :op3 back )  )  :arg0-of ( invest :arg1 company )  )  :arg1 of :arg2 ( person :arg0-of ( have-org-role :arg1 executive :arg2 chief )  :name ( name :op1 &quot; )  )
crowd :op1 ( join :arg0 ( we :arg0-of ( demand :arg1 security )  :arg1-of ( emblazon :arg0 ( she :arg0-of ( attire :arg1 ( aircraft-type :name ( name :op1 t50 )  :wiki sukhoi_pak_fa )  )  :arg0-of ( on :arg1 thursday :arg1-of ( depend :arg0 ( square :wiki - )  )  )  :arg0-of ( swap :arg1 corporation )  :arg0-of ( of :arg1 country :mod future )  )  )  )  :arg1 capital )
report :arg0 ( and :op1 ( thing :name ( name :op1 renamo )  )  )  :arg1 ( clash :arg0 ( force :mod ( government-organization :arg0-of ( govern :arg1 some )  )  )  :arg1 ( 20 :quant-of ( temporal-quantity :unit year )  )  )  :arg1-of ( skirmish :arg1-of bad :mod more :time ( since :op1 ( deal :arg1 ( 2 :quant-of ( temporal-quantity :unit week )  )  :arg2 peace )  )  )  :mod almost
and :arg2-of ( rule :arg1 white )  :op1 ( person :arg0-of ( rebel :arg1 ( thing :name ( name :op1 renamo )  )  )  :arg0-of ( movement :arg1 initial )  :arg0-of back :arg1-of ( notorious :arg0 once )  )  :op2 rhodesia :op3 then :op4 ( country :arg1-of ( govern :arg0 ( government-organization :arg0-of ( depend :arg1 ( government-organization :arg0-of ( govern :arg1 country )  )  :polarity - )  )  )  :name ( name :op1 south :op2 africa )  :wiki south_africa )  :purpose-of ( effort :mod of :mod apartheid :mod destabilise )
become :arg2 ( party :arg0-of oppose )  :time ( after :op1 ( deal :arg2 peace :time ( date-entity :year 1992 )  )  )
contrast :arg1 ( believe :arg0 ( person :arg0-of analyze )  :arg1 ( likely :arg1 ( slide :arg0 country :arg1 ( conflict :manner back :mod blow :mod full )  )  :polarity - )  )  :arg2 ( unnerve :arg0 ( event :time recent )  :arg1 ( and :op1 ( person :arg0-of invest :mod foreign )  :op2 ( person :arg1-of local )  )  )
and :location-of ( high :arg1 ( stake :arg1 offshore :op1-of coal :op1-of northwest )  :arg2 ( economy :arg1-of ( grow :arg1-of ( invest :arg0 ( company :source-of ( temporal-quantity :op1-of few :unit ( year :mod next )  )  )  :arg2 ( country :name ( name :op1 us )  :wiki united_states )  :location ( thing :name ( name :op1 rio :op2 tinto )  )  )  :manner fast )  :poss ( country :name ( name :op1 brazil )  :wiki brazil )  )  )  :op1 ( reserve :arg1-of ( discover :arg0 next :arg0-of ( bring :arg1 more :arg1-of ( possible :op1-of ( and :op2 ( country :name ( name :op1 italy )  :wiki italy )  )  )  )  )  :mod huge :mod ( gas :mod-of deposit )  )
blame :arg0 ( and :op1 ( party :arg0-of rule :poss ( organization :name ( name :op1 frelimo )  )  )  :op2 ( force :arg1-of dominate :mod politics :time ( since :op1 ( date-entity :year 1975 )  )  )  :op3 ( thing :name ( name :op1 renamo )  )  )  :arg1 ( other :mod each )  :arg2 tension
say :arg0 ( thing :name ( name :op1 renamo )  )  :arg1 ( initiate :arg0 17 :arg1 ( clash :arg1 stronghold :time ( late :degree most )  )  :manner ( launch :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :location-of ( province :wiki helmand_province )  :name ( name :op1 sofala )  )  )  )  :arg1 ( attack :arg0 tradition :arg1 ( person :arg0-of ( have-org-role :arg2 member )  )  :time ( date-entity :month 10 )  )  )  )
tell :arg0 ( person :arg0-of ( have-org-role :arg2 spokesman )  :arg0-of ( lead :arg1 group :arg2 fernando )  :arg1-of ( kill :arg0 force :mod-of afonso :op4-of ( and :op1 attack :op2 ( base :mod renamo )  :op3 ( attempt :arg0 ( government-organization :arg0-of govern :arg0-of ( escalate :arg1 ( person :arg0-of ( rebel :arg1 former )  :arg1-of assault )  :mod then )  )  :arg1 dhlakama )  )  )  :mod ' )  :arg1 mazanga :arg2 ( newspaper :name ( name :op1 the :op2 financial :op3 times )  :wiki financial_times )
blame :arg0 ( government-organization :arg0-of govern )  :arg1 ( thing :name ( name :op1 renamo )  )  :arg2 ( trigger :arg1 clash )  :manner ( accuse :arg2 ( attack :arg1 soldier )  )
seek :arg0 ( person :arg0-of ( have-org-role :arg2 president )  :name ( name :op1 armando :op2 guebuza )  )  :arg1 ( play :arg1 ( concern :arg0 instability )  :arg0 person )
tell :arg0 ( person :arg0-of ( lose :arg1 ( want :arg0 ( he :arg0-of prove :arg0-of ( try :arg1 ( he :arg1-of ( impose :arg1-of possible )  :arg1-of ( decide :arg0 ( government-organization :arg0-of govern )  )  )  )  :poss-of force )  :arg1 ( use :arg0 ( person :arg0-of ( see :arg1 wednesday )  :mod that :name ( name :op1 mr )  )  :arg1 ( whatever :arg1-of ( remain :op1-of of )  )  )  )  )  :name ( name :op1 mr )  :name ( name :name-of ( publication :wiki agence_france-presse )  :op1 afp )  )  :arg1 france :arg2 ( agency :mod news )  :mod mr
insist :arg0 ( and :op1 ( thing :name ( name :op1 renamo )  )  )  :arg1 ( want :arg0 ( organization :name ( name :op1 frelimo )  :op1-of both )  :arg1 ( avoid :arg0 they :arg1 war )  )
contrast :arg2 ( grow :arg1 concern :time ( after :op1 ( quote :arg1 ( thing :name ( name :op1 mr :op2 mazanga )  )  :arg2 ( say :arg1 ( abandon :arg1 ( accord :arg0 ( thing :name ( name :op1 renamo )  )  :arg1 peace :time ( date-entity :year 1992 )  )  )  )  )  )  )
tell :arg0 he :arg1 ( mean :arg0 he :arg1 ( agree :arg1-of ( respect :arg0 ( organization :name ( name :op1 frelimo )  )  :arg2 - )  )  )  :arg2 ft
contrast :arg1 mr :arg2 ( say :arg0 ( person :arg1-of ( come :direction back )  :arg1-of ( serious :arg1-of ( negotiate :arg0 we )  )  :name ( name :op1 &quot; )  )  :arg1 vision )
clash :quant ( series :arg0-of ( fuel :arg1 ( tension :arg1-of ( ease :arg2-of ( do :arg0 previou :arg1 ( talk :arg0 party :arg1 ( year :mod this )  )  :manner little )  )  )  )  )
say :arg0 ( person :arg0-of ( head :arg1 together )  :arg1-of ( butt :arg0 2 )  :op5-of ( and :op1 ' :op2 big :op3 man :op4 guebuza )  )  :arg1 ( and :arg1-of ( lecture :arg0 ( person :arg1-of ( expert :arg0 hanlon )  :name ( name :op1 joseph )  :wiki joe_jackson_[manager] )  )  :op1 ( open :arg0 it :arg1 ( country :name ( name :op1 mozambique )  :wiki mozambique )  )  )
and :op1 ( person :arg0-of ( negotiate :mod good )  )  :op2 ( prepare :arg1 ( kind :mod-of ( concede :arg1 neither )  )  )
say :arg0 ( thing :name ( name :op1 renamo )  )  :arg1 ( boycott :arg1 ( elect :mod municipality )  :time ( date-entity :month 11 )  )  :manner ( elect :arg1 ( reform :arg2-of push )  )  :time already
schedule :arg1 ( and :op1 president :op2 ( poll :mod parliament )  )  :purpose ( year :mod next )
and :arg0-of ( movement :arg1 ( win :arg0 ( spoil :mod finance )  :arg1 ( concede :arg1 ( government-organization :arg0-of govern )  )  )  :arg1-of ( attempt :arg2-of ( interpret :arg0 ( person :arg0-of comment :quant some )  :arg1 ( use :arg1 force )  )  )  :arg1-of ail )
show :arg0 ( movement :mod democratic :wiki may_fourth_movement )  :arg1 it :arg1-of improve :arg1-of ( elect :arg2 ( vote :arg0 of :arg1 ( thing :arg1-of share :name ( name :op1 renamo )  )  :arg2-of ( decline :arg0 ( since :mod-of ( date-entity :year 1992 )  )  :arg1 ( while :quant-of ( party :mod new )  )  )  )  )  :arg1-of ( expect :arg0 ( country :arg0-of form :arg1-of ( have-org-role :arg0 former :arg2 member )  :name ( name :op1 mozambique )  :wiki mozambique )  )
say :arg0 ( he :arg0-of ( want :arg1 ( destroy :arg0 country :arg1 democracy )  :mod ( next :mod-of year )  )  :arg0-of ( end :arg1 ( term :mod ( down :mod ( step :mod due )  )  )  )  )  :arg1 mr
say :arg0 ( he :arg0-of ( leave :arg1 presidency )  :arg0-of ( want :arg1-of ( cause :arg0 ( want :arg0 ( he :arg1-of ( elect :arg0 ( want :arg0 ( he :arg2-of ( want :arg0 he :arg1 democracy :op1-of multiple :polarity - )  :poss-of party )  :arg1 transparent :polarity - )  :arg2 mr )  )  :arg1 peace :polarity - )  )  :polarity - )  )  :arg1 mazanga
contrast :arg1 ( clear :arg1 it :polarity - )  :arg2 ( carry-out :arg0 ( thing :mod capacity :name ( name :op1 renamo )  )  :arg1 ( attack :arg1 ( and :op1 ( station :mod police )  :op2 vehicle )  :arg1-of ( run :op2-of ( and :op1 ( hit :arg1 ( key :arg0 much :arg1 ( highway :mod south :mod north )  )  )  )  )  :mod disruptive )  )
contrast :arg0 ( person :arg0-of ( take :arg1 place :location ( thing :name ( name :op1 sofala :op2 province )  )  )  :arg0-of ( export :arg1 coal :arg2 ( country :name ( name :op1 maputo )  )  :arg2-of ( rely :arg0 ( several :quant-of ( distance-quantity :unit kilometer )  )  :arg1 ( and :op1 port :op2 ( organization :name ( name :op1 rio :op2 tinto )  )  :op3 ( organization :name ( name :op1 vale )  )  )  )  )  :arg0-of mine )  :arg1 ( skirmish :arg1 north )  :arg2 ( host :arg0 most :arg1 ( country :name ( name :op1 beira )  )  )
suspend :arg0 rio :arg1 ( use :arg1 railway :arg2 week )  :time ( after :op1 ( threaten :arg0 ( thing :mod about :name ( name :op1 renamo )  )  :arg1 ( attack :arg1 line )  :time ( date-entity :month 6 )  )  )
coy :domain ( thing :arg1-of ( ask :manner ( repeat :arg0 ( thing :name ( name :op1 renamo )  )  :arg1 ( threaten :mod this )  )  )  :name ( name :op1 mr :op2 mazanga )  )
say :arg0 ( person :mod mr :mod ( well :polarity - )  :name ( name :op1 renamo )  )  :arg1 ( thing :arg1-of ( warn :arg0 ( want :arg0 ( country :name ( name :op1 mozambique )  :wiki mozambique )  :arg1 ( thing :name ( name :op1 renamo )  )  )  :arg2 ( community :mod international )  )  :mod that )
say :arg0 ( person :name ( name :op1 fernando :op2 lima )  )  :arg1 ( add :arg0 instability :arg2 frustration )  :arg2 ( person :arg0-of ( head :arg1 ( country :arg1-of ( govern :arg0 government-organization )  :name ( name :op1 mediacoop )  )  )  :arg1-of ( concern :arg0 corrupt :mod also :topic ( and :op1 ( pace :mod ( develop :purpose kidnap )  :mod slow )  :op2 ( spate :time recent )  )  )  :quant ( many :arg1-of ( depend :arg0 ( company :mod media )  :polarity - )  )  )
say :arg0 he :arg1 ( and :op1 ( and :op1 ( government-organization :arg0-of ( govern :arg1 country )  )  )  :op2 ( recommend :arg0 ( he :arg0-of ( find :arg1 solution :manner 1 )  :arg1-of ( have-org-role :arg0 ( person :arg0-of ( think :arg1 ( one :arg0-of ( responsible :arg1 future :arg2 of )  )  )  )  :arg2 president )  )  :arg1 problem )  )
say :arg0 ( person :name ( name :op1 omar :op2 sultuane )  )  :arg1 ( want :arg0 person :arg1 stability :mod just )  :arg2 demonstrator
say :arg0 ( he :arg2-of ( free :arg0 ( peace :mod-of again )  :arg1 ( access :arg1 road )  :arg1-of ( want :arg0 they )  :arg2-of ( want :arg0 they :mod just )  )  )  :arg1 ( and :op1 about :op2 ( thing :arg1-of ( care :arg0 1 :polarity - )  :name ( name :op1 &quot; )  )  :op3 ( organization :name ( name :op1 &quot; )  )  )
say :arg0 ( person :arg0-of ( author :arg1 model )  :poss-of ( life :mod way :mod of )  )  :arg1 ( and :arg1-of ( recommend :arg0 ( child :arg0-of teach )  )  :op1 myth :op2 legend )
reveal :arg1 ( thing :arg1-of ( match :arg0 ( strength :arg1-of ( show :arg1-of possible )  :mod brute :mod thor :mod ( of :mod tal )  )  :arg2 ( subtle :mod-of trickery )  :polarity - )  :arg1-of ( dream :arg0 important )  :mod while :mod-of legend :name ( name :op1 tales )  )
say :arg0 many :arg1 ( and :op1 ( far :arg1-of ( of :arg0 myth )  :mod-of too :mod-of wild )  :op2 ( far :mod-of too )  :op3 scandalous :op4 some :op5 ( far :arg1-of case :mod-of too :mod-of filthy )  :op6 ( teach :arg0 school )  :op7 ( advocate :arg1 ( care :arg1 ( select :arg0 ( country :name ( name :op1 holland )  :wiki netherlands )  :arg1 ( age :arg1 ( work :arg1-of appropriate )  )  )  )  )  )
say :arg0 ( he :arg1-of ( educate :arg0 already )  )  :arg1 ( and :op1 ( find :arg0 ( i :arg0-of ( wonderful :arg1 that )  )  :arg1 it )  :op2 ( country :name ( name :op1 america )  :wiki united_states )  :op3 ( myth :wiki year_2000_problem )  :op4 folklore )
twenty :arg2-of ( advocate :arg0 i :arg1 plan )  :quant-of ( temporal-quantity :unit year )
add :arg0 ( he :arg0-of ( switch :arg1 message :arg2 off )  :arg0-of ( total :arg1 child )  )  :arg1 didactic :arg1-of ( author :arg0 ( story :mod enjoyable :time subliminat )  )  :op1-of ( and :op2 ( person :arg0-of ( teach :arg1 overtly )  )  )
contrast :arg1 ( thing :arg1-of ( intend :arg0 they :arg2 out )  :arg1-of possible :domain-of good :op4-of ( and :arg1-of ( say :arg0 you )  :mod ( ethnic-group :mod of :mod ( well :mod-of ( write :arg0 you :arg1 ( book :wiki - )  )  )  :mod ( ethnic-group :mod ( beowulf :arg1-of ( translate :arg0 ( country :name ( name :op1 holland )  :wiki netherlands )  )  )  :mod-of saxon :name ( name :op1 anglo-saxon )  :wiki anglo-saxons )  :name ( name :op1 norse )  :wiki norsemen )  :op1 myth :op2 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :op3 ( folk :mod-of tal )  )  )  :arg2 sight
and :arg1-of ( hope :arg1-of ( sense :degree some :topic-of necessity )  )  :arg1-of ( write :arg0 ( person :arg0-of author :arg1-of ( differ :mod big )  :mod adult )  :arg2 adult )  :op1 ( person :arg0-of ( author :arg1 adult )  :arg0-of ( write :arg1 perhaps :arg2 child )  )
contrast :arg1 ( simplify :arg1 ( everything :mod that )  :op1-of ( or :op2 come :op3 ( end :manner happy :polarity - )  )  )  :arg2 ( sense :mod innate :op1-of ( and :op2 good :op3 evil )  )
state :arg0 ( and :op1 ( reveal :arg1 story :op1-of and )  )  :arg1 that
tell :arg1 old :arg1-of show :polarity -
once :mod-of again :mod-of ( country :name ( name :op1 freihof )  :op1-of back )
bring :arg0 ( person :arg0-of ( move :arg1 ( he :arg0-of ( retire :arg1 home )  )  :arg2 sunday :duration ( temporal-quantity :unit year )  :op1-of into :source 100 )  :name ( name :op1 100 )  )  :arg1 life :time ( final :quant-of ( temporal-quantity :unit year )  )
inspire :arg0 ( play :arg1 ( role :arg1-of ( amuse :degree extreme )  )  )  :arg1 ( audience :mod large )
write :arg0 ( person :name ( name :op1 cornelia :op2 volk )  )  :arg1 ( play :arg0 ( person :arg0-of ( confer :arg2 ( citizenship :arg1-of ( die :op1-of and )  :mod honorary )  )  :arg0-of ( receive :arg1 ( acclaim :mod great )  :prep-under directorship )  :arg1-of arrive :name ( name :op1 alois :op2 kraftzcyk )  :op1-of ( and :arg0-of ( portray :arg1 ( person :name ( name :op1 hansjakob )  )  )  :op2 scriptwrite :op3 actor )  )  :arg1-of entertain )
approach :arg0 he :arg1 retire :time-of ( time :arg2-of ( provide :arg0 ( person :arg0-of ( explain :arg1 circumstance )  :arg0-of ( guide :arg1 audience :path ( scene :arg1-of differ )  :purpose ( serve :arg2 ( person :arg0-of narrate )  )  )  :name ( name :op1 marcus :op2 zagermann )  )  :op1-of ( and :op2 ( link :arg0-of ( explain :arg1 ( leap :arg0 youth )  )  )  )  )  )
return :arg1 ( person :name ( name :op1 hansjakob )  :poss-of home )  :arg2 childhood :arg3 ( country :name ( name :op1 freihof )  )  :arg4 paradise :time ( date-entity :day 22 :month 10 :year 1913 )
aloi :arg1-of ( shine :arg0 ( once :mod-of again )  :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( play :arg1 ( begin :arg0 role :arg1 it )  )  :poss-of great :poss-of ( town :op1-of role )  )  :arg2 son )  )
draw :arg0 ( he :arg0-of ( travel :arg1-of ( true :mod-of style )  )  :arg0-of ( own :arg1 horse )  :arg0-of ( black :arg1 ( forest :arg1 chestnut )  )  )  :arg1 schwarzw√§ld :arg2 ( horse :quant 2 )  :mod carriage
contrast :arg2 ( welcome :arg1 ( country :name ( name :op1 philippines )  :wiki philippines )  :arg2 ( he :arg0-of ( receive :arg1 ( applaud :arg0 audience :mod great )  )  :arg1-of ( have-rel-role :arg0 person :arg2 sister )  )  :mod also :mod ( only :polarity - )  )
and :op1 ( manage :arg0 ( person :arg0-of ( bring :arg1 character :arg2 ( amaze :mod life )  )  :arg1-of ( have-rel-role :arg0 ( person :poss-of role )  :arg2 sister )  :name ( name :op1 billy :op2 sum-hermann )  :op1-of ( and :op2 expression :op3 ( gesture :arg1 both :mod-of term )  )  )  :arg1 ( believe :arg1 place )  )
appropriate :manner-of ( play :arg0 ( organization :arg0-of ( round-up :arg1 perform :time thus-far )  :name ( name :op1 m√ºhlenbacher :op2 bauernkapelle )  )  :arg1 ( piece :arg1-of select :mod music )  :time ( between :op1 ( scene :mod individual )  )  )
honor :arg1 ( present :arg1 of :arg1-of ( go :arg0 title :arg1-of ( winkle :arg0 heinz )  :arg1-of ( have-org-role :arg2 mayor )  :mod ( citizen :arg0-of ( represent :arg1 back :arg1-of appear :arg1-of ( have-org-role :arg2 mayor )  :time day )  :mod-of ( town :mod section :mod together )  )  :mod honorary )  )
bring :arg0 ( person :arg0-of ( exclaim :arg1 ( amr-unknown :arg1-of ( beautiful :mod oh )  )  )  :arg1-of appear :mod ( lead :arg0 ( person :arg0-of ( sing :arg1 then )  :mod ( thing :name ( name :op1 the )  )  )  )  :name ( name :op1 the )  )  :arg1 ( i :mod-of ( time :mod ( of :mod memory )  :mod-of ( life :mod group :mod back )  )  )  :mod this :mod-of childhood
cry :arg0 audience :arg1 loud :time ( do :arg0 ( they :arg0-of ( delight :arg1 song )  )  :arg1 ( thing :name ( name :op1 with )  )  )
express :arg0 ( person :arg1-of ( concern :arg2-of ( regard :arg1 excess )  )  :name ( name :op1 hansjakob )  )  :arg1 ( criticize :arg0 ( and :op1 institution :op2 ( economy :mod rural )  :op3 consequence :op4 industrialisation :op5 ( effect :poss war )  )  :arg1 church )  :time day
find :arg0 he :arg1 ( place :location ( behind :op1 ( mausoleum :topic ( brand :arg1-of ( near :arg2 ( country :name ( name :op1 hofstetten )  )  )  )  )  )  )  :arg3 ( rest :poss ( soil :mod native )  )
and :op1 ( rest :arg0-of ( find :arg1 home :manner final :manner ( restless :mod-of spirit )  )  )  :op2 ( return :arg1 forever :arg1-of end :arg1-of word :arg1-of ( play :mod-of role )  )
receive :arg0 ( perform :arg0-of ( applaud :mod great )  )  :arg1 ( and :op1 ( word :quant ( many :duration-of ( praise :arg2 audience )  )  )  )
basketball :arg1-of ( hopeful :arg0 ( organization :name ( name :op1 neckar :op2 giants )  )  :arg1-of ( grow :arg2 ( organization :name ( name :op1 neckar :op2 riesen )  )  )  )
remain :arg1 ( person :arg0-of ( improve :arg1 ( chance :arg1 ( thing :name ( name :op1 ludwigsburg :op2 budesliga )  )  )  )  :arg0-of ( play :arg1 basketball )  :arg1-of relegate )  :arg2 league
procedure :mod ( wild :mod-of ( card :poss ( person :arg0-of ( apply :arg1 few )  :mod now :op2-of ( and :arg0-of ( cause :arg1 this )  :op1 ( organization :name ( name :op1 neckar :op2 riesen )  )  )  )  )  )
decline :arg0 ( organization :arg0-of ( apply :arg1 ( place :arg1-of possible )  :arg2 stand )  :name ( name :op1 hamburg :op2 towers )  )  :arg1 ( project :mod basketball )
say :arg0 ( we :arg0-of ( participate :arg1 ( process :arg1 former :op1-of card )  :arg2 ( town :mod ( organization :name ( name :op1 &quot; )  )  :mod ( since :mod-of ( date-entity :year 2012 )  )  )  :op1-of wild :polarity - )  )  :arg1 ( thing :arg0-of ( play :arg1 ( person :arg0-of ( roll :arg1 ( put :arg0 ( team :mod nation )  :arg1 ( concept :mod together :mod professional )  :arg2 club )  :arg2 amr-unknown )  :name ( name :op1 pascal )  :wiki blaise_pascal )  )  )
sigh :arg1 ( relieve :arg1-of ( hear :arg0 ( country :name ( name :op1 ludwigsburg )  )  )  )  :polarity -
say :arg0 ( we :arg0-of ( process :arg1 it :op1-of wild :op1-of until :op1-of certain :op1-of card )  :arg0-of ( concern :arg1 ourselv :polarity - )  )  :arg1 of :arg2 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 &quot; )  )  :arg2 boss )  :arg0-of ( speak :arg1 ( paper :mod we :mod that )  )  :name ( name :op1 &quot; )  )  :arg2-of ( receive :arg0 ( country :name ( name :op1 &quot; )  )  :arg1 licence :polarity - )
newly :manner-of ( promote :arg0 ( thing :name ( name :op1 bundesliga )  )  :arg1 ( basket :arg0-of ( prove :arg1 ( fitnes :mod finance )  :op2-of ( and :op1 ( submit :arg0 ( date-entity :month 5 )  :arg1 document :arg2 ( panel :mod ( arbitrate :arg1 ( 23 :op1-of until )  )  )  )  )  )  :mod ( country :name ( name :op1 d√ºsseldorf )  )  )  )
refuse :arg1 ( team :mod ( country :name ( name :op1 rhineland )  )  )  :arg2 licence :mod already
authority :domain ( organization :name ( name :op1 court :op2 of :op3 arbitration )  )  :poss ( resort :mod last )
thing :arg1-of ( focus :mod ( country :name ( name :op1 haigerloch )  )  )  :name ( name :op1 abendmahlskirche )
and :arg1-of ( dedicate :arg0 ( organization :arg0-of ( tour :arg1 ( thematic :arg1-of ( public :arg0 ( year :mod this )  )  )  :arg2 ( sunday :mod-of ( 27 :mod-of ( date-entity :month 10 )  )  )  )  :name ( name :op1 church )  :op1-of protestant :wiki christian_church )  )  :arg2-of ( culture :arg0 ( anniversary :arg1-of ( contribute :arg0 town :arg2 150th )  )  :arg1 town )  :op1 last :op2 ( organization :name ( name :op1 church )  :poss-of holy :wiki christian_church )
turn :arg1 focus :arg1-of ( follow :arg2 ( visit :arg1 ( organization :name ( name :op1 nuclear :op2 bunker :op3 museum )  )  )  )  :arg2 ( country :arg0-of ( rule :arg1 ( thing :name ( name :op1 prussian )  )  :time-of come )  :name ( name :op1 haigerloch )  )  :time period :time ( after :op1 ( date-entity :year 1850 )  )
crown :arg1 ( glory :arg0-of ( visit :arg1 ( thing :name ( name :op1 abendmahlskirche )  )  )  )
tell :arg1 ( person :arg0-of ( participate :arg1 ( tour :arg1 ( thing :name ( name :op1 protestant )  )  )  )  )  :arg2 ( story :topic ( construct :arg0 ( area :mod ( religious-group :name ( name :op1 catholic )  :wiki catholicism )  )  :arg1 church )  )  :op1-of ( and :op2 ( gain :arg1 insight :arg2 ( develop :arg1 congregation )  )  )  :op1-of and
contrast :arg1 last :arg2 ( and :op1 ( person :arg0-of ( support :arg1 church :arg2-of ( paint :arg0 ( person :name ( name :op1 friedrich :op2 sch√ºz )  )  :arg1 ( eye :arg1-of ( turn :arg2 ( paint :arg0 least :arg1 supper :arg2 - :mod last )  :mod also )  )  )  )  :name ( name :op1 walter :op2 kr√∂ll )  )  :op2 ( person :name ( name :op1 georg :op2 halbritter )  )  )
reproduce :arg1 ( person :arg0-of ( work :mod famou )  :location ( country :name ( name :op1 milan )  )  :name ( name :op1 leonardo :op2 da :op3 vinci )  )  :domain it :mod faithful
and :op1 ( half :arg1-of ( tour :arg0 3 :arg1-of ( meet :arg0 p.m. :mod-of point )  :duration ( temporal-quantity :unit hour )  )  )  :op2 ( organization :name ( name :op1 nuclear :op2 bunder :op3 museum )  )
available :arg1 ( organization :location-of ( office :mod ticket )  :name ( name :op1 nuclear :op2 bunker :op3 museum )  )  :arg2 ticket
provide :arg1 information :arg2 you :op2-of ( and :op1 ( question :arg1-of ( available :arg2 ( organization :name ( name :op1 haigerloch :op2 town :op3 tourist :op4 office )  )  )  )  )
state :arg0 ( person :name ( name :op1 snowden )  )  :arg1 ( thing :arg1-of possible :location ( country :name ( name :op1 russia )  :wiki russia )  )  :degree further
state :arg0 ( person :arg1-of ( expert :arg2 ( intelligence :mod ( country :name ( name :op1 us )  :wiki united_states )  )  :time former )  )  :arg1 ( thing :arg0-of ( regard :arg1 ( scandal :mod ( espionage :arg1-of possible )  :mod ( country :name ( name :op1 us )  :wiki united_states )  :source ( asylum :mod ( country :mod-of ( person :name ( name :op1 edward :op2 snowden )  )  :name ( name :op1 russia )  :wiki russia )  )  )  )  )  :degree further
possible :arg1 ( submit :arg1 ( question :arg1 either )  :arg2 ( write :arg0 ( person :location ( country :name ( name :op1 russia )  :wiki russia )  )  )  )  :op1-of ( or :op1-of old :op2 ( meet :arg0 ( represent :arg1 ( organization :name ( name :op1 federal :op2 prosecutor )  )  )  :arg1 ( 30 :quant-of ( temporal-quantity :unit year )  )  )  )
report :arg0 ( organization :name ( name :op1 interfax :op2 agency )  )  :arg1 this :manner ( reference :arg0 - :arg1 group :purpose ( detail :arg1 situation :mod great )  )
state :arg0 ( level :location-of ( clarify :arg1 ( matter :mod such )  )  )
depart :arg0 ( person :name ( name :op1 snowden )  )  :arg1 ( country :name ( name :op1 russia )  :wiki russia )  :arg2 virtual
say :arg0 ( he :arg0-of ( quote :arg1 source :arg2 ( lose :arg0 he :arg1 status :arg2 refugee :mod this )  )  )  :arg1 agency
continue :arg0 source :arg1-of ( cause :arg0 ( travel :arg0 ( he :arg1-of ( ally :arg2 ( country :name ( name :op1 germany )  :wiki germany )  :arg3 ( country :name ( name :op1 usa )  :wiki united_states )  )  )  :arg1 ( person :arg1-of ( risk :arg2 deport )  :name ( name :op1 snowden )  )  :location there )  )
pay :arg0 endurance :arg1 dividend
club :mod-of ( tennis :mod-of ( tournament :time-of ( become :arg1 ( team :quant 6 )  :arg1-of battle :arg2 champion )  )  )
endurance :time-of ( decide :arg1 ( match :mod final :op1-of ( organization :mod-of ( team :arg1-of end )  :name ( name :op1 maier :op2 / :op3 bronner )  )  )  )
enjoy :arg0 ( division :mod tennis :poss ( organization :name ( name :op1 sportfreunde :op2 rohrdorf )  )  )  :arg1 ( weather :arg1-of perfect )  :manner ( and :op1 ( club :arg1-of ( local :arg0 ( organization :name ( name :op1 rohrdorf :op2 sports :op3 fans )  )  )  )  :op2 enthusiast :topic-of tournament )
tennis :arg1-of ( play :mod-of ( fun :arg2-of ( focus :arg0 tournament )  )  )
schedule :arg0 ( team :arg0-of ( play :arg1 ( match :arg1 5 :purpose ( other :quant all )  )  )  :mod every )  :arg1 match :arg2 ( team :mod each )
maximum :mod-of ( temporal-quantity :poss-of ( duration :op2-of ( or :arg2-of ( double :arg1 ( match :arg1-of ( match :arg2 ( set :arg1-of ( long :arg0 9 )  )  )  )  )  :op1 point )  )  :quant 45 :unit minute )
manage :arg0 ( person :name ( name :op1 anja :op2 schlichter )  )  :arg1 tournament
and :op1 ( person :arg0-of ( support :arg1 ( person :name ( name :op1 anja :op2 schlichter )  :part ( hand :arg2-of ( place :arg1 ( organize :arg1 tournament )  )  :part-of trusty )  )  )  :name ( name :op1 carmen :op2 m√ºller )  )  :op2 ( person :name ( name :op1 inga :op2 kronemeyer )  )
move :arg1 tournament :arg2 ( phase :mod crucial )  :time ( after :op1 ( and :op1 ( match :quant 3 )  :op2 ( break-up :arg1 lunch :arg2 pasta )  )  )
tie :arg1 ( favourit :arg0-of mean )  :arg2 ( and :op1 ( person :name ( name :op1 matthias :op2 bronner )  :op2-of ( slash :op1 ( person :name ( name :op1 andre :op2 maier )  )  )  )  :op2 ( person :name ( name :op1 michael :op2 klippel )  )  :op3 ( person :name ( name :op1 sadmin :op2 osmicic )  )  :op4 ( team :mod both :source ( organization :name ( name :op1 sg :op2 rohrweiler )  )  )  :op5 ( produce :arg0 ( game :mod last :quant 2 )  :arg1 victor )  )
show :arg0 ( person :arg2-of ( present :arg0 ( person :name ( name :op1 carmen :op2 m√ºller )  )  :arg1 ( thing :name ( name :op1 challenge :op2 cup )  )  :mod-of pleasure )  :name ( name :op1 andre :op2 maier )  :op1-of ( and :op2 ( person :name ( name :op1 matthias :op2 bronner )  )  )  )  :arg1 ( power :location ( leg :mod final )  :mod ( stay :arg0 final :arg1 ( thing :arg1-of ( award :arg0 ceremony )  )  )  :mod ( great :degree most )  )
take :arg0 ( person :name ( name :op1 michael :op2 klippel )  :op1-of ( slash :op2 ( person :arg1-of partner :name ( name :op1 sadmin :op2 osmicic )  )  )  )  :arg1 ( place :arg1-of second )
asphaltriech :mod-of ( team :poss-of ( person :name ( name :op1 bernd :op2 maier )  :op2-of ( and :op1 ( go :arg0 bronze :arg4 ( person :name ( name :op1 rainer )  )  )  )  )  )
draw :arg0 tournament :arg1 ( close :arg1-of succeed )  :arg2 ( sun :mod afternoon )  :purpose ( accompany :arg0 ( and :op1 coffee :op2 cake )  )  :time late
firm :arg0 ( organization :arg1-of ( near :arg2 ( country :mod-of ( child :mod hand )  :name ( name :op1 hornberg )  )  )  :location ( country :name ( name :op1 gutach )  )  :name ( name :op1 vogtsbauernhof :op2 black :op3 forest :op4 open :op5 air :op6 museum )  :time ( weekend :mod last )  )  :arg1 8 :time ( once :time-of again )
welcome :arg0 museum :arg1 ( person :arg0-of ( visit :arg1 ( year :mod this )  )  :op1-of ( and :beneficiary-of ( party :mod colourful )  :op2 child :op2-of ( and :op1 ( and :arg0-of ( participate :arg1 ( program :mod holiday )  :arg1-of ( activity :arg2 25 :op1-of summer :quant numerous )  :op1-of 8 :op1-of 24 )  )  :op3 event )  :op3 family )  :op1-of ( and :op2 saturday :op3 sunday )  )  :mod tradition
say :arg0 handicraft :arg1 ( press :arg1-of ( release :arg0 ( child :arg0-of ( learn :arg1 various :arg1-of possible :arg2 tradition :op4-of ( and :op1 ( on :quant-of ( temporal-quantity :unit day )  )  :op2 both :op3 adult )  )  :arg0-of alike )  )  )
silk :op3-of ( or :op1 ( produce :arg0 ( activity :arg0-of ( age :arg1 whatever )  :arg1-of suitable )  :arg1 soap :op1-of wheth )  :op2 ( turn :arg1 candle )  )
receive :arg0 child :arg1 ( help :arg1 p.m. :arg2 ( a.m. :mod-of until )  )  :arg2 ( artisan :mod region :time ( present :time 5 )  )
take :arg0 activiti :arg1 place :arg2 ( workshop :mod museum )  :mod also
top :arg1-of spin :op3-of ( or :arg1-of ( build :arg0 ( skill :arg1-of ( demonstrate :arg0 ( guest :mod young )  :arg1-of possible )  :mod manual )  )  :op1 ( pip :arg1 cuckoo )  :op2 ( wheel :arg1 water )  )
or :op1 ( race :arg1 stilt )  :op2 ( walk :arg0 wheelbarrow :arg1 such :arg1-of ( promise :arg0 ( host :arg1 ( game :mod old )  )  :arg2 ( plenty :quant-of fun )  )  )
and :mod here :op1 speed :op1-of day :op2 coordinate
offer :arg0 ( museum :arg1-of open :mod air )  :arg1 ( tour :arg0 ( and :op1 saturday :op2 sunday )  :arg1 museum :mod ( mystery :part-of ( and :mod respective :op1 midday :op2 p.m. )  )  )  :purpose ( detective :mod any :mod miniature )
and :arg1-of ( work :arg0 ( child :arg0-of ( tour :arg1 premise )  )  )  :op1 ( true :domain story )
carriage :purpose-of ( journey :arg1 addition :arg1-of ( draw :arg0 ( horse :arg0-of black :mod ( thing :name ( name :op1 forest :op2 chestnut )  )  )  )  :topic-of ( museum :arg1-of open :arg1-of ( know :arg0 ( person :arg0-of visit )  :arg3 ( opportunity :arg1-of special )  )  :mod air )  )
contrast :arg1 such :arg2 ( and :example-of ( animal :mod other :quant many )  :op1 sheep :op2 goat :op3 cow :op4 chicken )  :op3-of ( and :arg1-of possible :op1 ( find :arg1 ( horse :domain it :mod ( just :polarity - )  )  )  :op2 admire :time ground )
possible :arg0 a.m. :arg1 ( enjoy :arg0 child :arg1 ( clown :arg0 sunday )  :time ( do :arg0 ( person :name ( name :op1 otsch )  )  :arg1 prank :arg2 ( guest :mod museum )  )  )  :mod also
provide :arg0 ( person :name ( name :op1 hermann :op2 b√ºttner )  )  :arg1 ( and :op1 cosy :op2 magical :op3 alternative )  :time meanwhile
and :op1 ( tell :arg0 1 :arg0-of ( take :arg1 guest :arg2 a.m. :arg3 ( world :arg1-of ( wonderful :arg0 young )  :mod fairytale )  )  :arg1 story :op1-of p.m. :op1-of 3 )  :op2 p.m.
mean :arg1 a.m. :arg2 ( perform :arg0 ( child :arg0-of ( dance :arg1 group )  :mod tradition )  :arg1 11 :mod also :time 30 )
let :arg1 ( look :arg0 ( person :arg0-of visit :op6-of ( and :example-of ( artisan :quant numerous )  :mod ( both :mod-of ( temporal-quantity :mod event :unit day )  )  :op1 ( make :arg0 a.m. :arg1 broom )  :op2 ( sew :arg0 furthermore )  :op3 spinn :op4 ( weave :arg0 p.m. )  :op5 ( bake :arg0 until )  )  )  :arg1 ( shoulder :arg1 such )  )
cause :arg1 ( possible :arg1 ( expect :arg0 ( person :arg0-of ( visit :arg1 ( museum :arg1-of open :mod air )  )  :poss-of ( program :arg1-of vary :mod holiday :poss ( country :location-of ( holiday :arg1-of end :mod summer )  :name ( name :op1 baden-wuerttemberg )  )  )  )  :arg1 right )  )
consider :arg1 ( oddball :location ( town :mod small )  :mod lovable )  :arg1-of ( cause :arg0 ( resolve :arg0 ( he :arg0-of ( compete :arg1 ( country :name ( name :op1 new :op2 zealand )  :wiki new_zealand )  :location ( race :location ( country :name ( name :op1 america )  :wiki united_states )  )  )  :mod all )  :arg1 ( person :name ( name :op1 burt :op2 munro )  )  )  :arg1-of ( motorbike :time ( date-entity :year 1920 )  )  )
possible :arg1 ( deter :arg1 ( person :arg0-of ( pursue :arg1 dream )  :name ( name :op1 burt )  )  :arg2 ( spite :arg0-of ( defect :arg1 heart )  )  )  :polarity -
and :op1 ( donate :arg0 ( he :poss-of savings :poss-of ship )  :arg1 ( city :name ( name :op1 los :op2 angeles )  :wiki los_angeles )  :quant few )  :op2 ( mortgage :arg1 ( workshop :mod old )  )
follow :arg0 ( and :op1 coffee :op2 tea :op3 cake )  :arg1 film
pierce :arg1 ( person :arg0-of ( reside :arg1 ( disturb :arg1 beep )  )  )
invest :arg0 ( country :name ( name :op1 rhenus :op2 midgard )  )  :arg2 land :degree high :mod also
stockpile :arg0 they :arg1 ( coal :arg0-of ( arrive :arg1 ship )  )
iron :arg0 ( company :arg0-of ( fire :arg2 location )  )  :mod other :mod also :time ( time :arg1-of same )
besides :op1 ( import :arg1 ( venture :mod other )  :arg1-of ( activity :arg0 ( country :name ( name :op1 rhenus :op2 midgard )  )  :location ( field :mod ( logistics :mod ( park :mod wind )  )  )  :mod also )  :arg2 coal )
shimmer :arg1 coal :arg3 black :time ( yard :mod storage :part-of embankment )  :time front
or :op1 ( reclaim :arg1 machine )  :op2 ( distribute :arg0 ( and :op1 ( stack :mod blue :mod huge :quant 2 )  )  :arg1 coal :arg2 ( require :arg1 here )  )  :op3 load
shrill :arg1 ( noise :arg0-of warn :arg0-of ( movement :arg1 ( machine :arg1-of handle )  :mod each )  :mod-of ( ring :location site )  )
say :arg0 signal :arg1 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 &quot; )  )  :arg2 director )  :arg0-of ( manage :arg1 ( country :name ( name :op1 &quot; )  )  )  :arg1-of ( prescribe :arg0 legally )  :name ( name :op1 &quot; )  :op4-of ( and :op1 purpose :op2 of :op3 security )  )
possible :arg1 ( hear :arg0 they :arg1 ( and :op1 ( result :arg1 ( number :quant-of ( complain :arg0 person :arg1 town :arg2 north )  )  )  )  :arg2-of ( fortunate :arg0 ( far :mod-of away )  :arg1 already )  )  :manner ( wind :mod-of event :source unfavourable )
say :arg0 40 :arg1 ( and :op1 ( take :arg0 old :arg1 year )  :op2 ( complain :arg0 ( he :arg0-of touch )  :arg1 affect )  :op3 ( serious :degree very )  )
implement :arg0 position :arg1 ( measure :mod technical )  :instrument ( mean :arg0-of ( quiet :arg1 ( warn :arg1 ( consult :arg0 we :arg1 authority :manner close :time now )  :mod-of signal )  )  )
seek :arg0 ( he :poss-of neighbour )  :arg1 ( dialogue :arg1-of open )  :mod also :time future
plan :arg0 ( person :name ( name :op1 matthias :op2 schrell )  )  :arg1 location :degree further :quant some
and :arg2-of ( power :arg1-of major :location ( sector :mod this )  :location ( continent :name ( name :op1 europe )  :wiki europe )  )  :location-of coal :op1 ( continue :arg0 ( country :arg0-of ( construct :arg1 ( country :name ( name :op1 lower :op2 saxony :op3 bridge )  )  )  :name ( name :op1 rhenus :op2 midgard )  )  :arg1 ( focus :arg2 ( export :arg1 ( station :mod power )  )  :arg0 country )  )
sink :arg0 ( basin :arg1-of moor :arg1-of ( thank :arg0 ( time :arg0-of ( unload :arg1 ( carrier :mod ( bulk :arg1 terminal )  )  :arg1-of possible :location here )  :quant some :time now )  :arg2 front )  )  :arg2 depth :duration metr
say :arg0 ( we :arg0-of ( hope :arg1 ( break-up :arg0 ( year :mod this )  :arg1 million :arg2 3 )  )  :arg1-of ( handle :arg0 ( term :mod in :op1-of of )  )  )  :arg1 ( person :arg1-of ( mark :arg0 tonne )  :name ( name :op1 &quot; )  )
coal :arg0-of ( go :arg1 ( plant :arg1-of local :mod power :mod ( thing :name ( name :op1 eon )  )  :op1-of alongside )  :arg4 ( plant :mod power )  :mod also )  :arg1-of ( import :arg0 inland )
add :arg0 ( volume-quantity :arg1-of realistic :op2-of ( around :arg0-of ( import :arg1 year :arg2 coal )  :op1 5 )  :unit tonne )  :arg1 ( plant :mod ( company :name ( name :op1 suez )  :wiki suez_[company] )  )  :arg2 network
possible :arg1 ( see :arg0 ( and :op1 ( unloader :mod ship :quant 3 )  :op2 bridge :op3 ( belt :mod ( transport :arg1 10 )  )  )  :arg1 ( rise :mod this )  )
optimistic :arg1-of ( play :arg0 ( person :arg1-of ( defeat :arg0 ( of :mod spite )  :op1-of first )  :mod basketball :mod ( country :name ( name :op1 bavaria )  )  )  )
possible :arg1 ( curtail :arg0 ( defeat :arg2 ( thing :name ( name :op1 euroleague )  )  :mod even )  :arg1 ( optimism :mod huge :poss ( basketballer :poss ( organization :name ( name :op1 fc :op2 bayern :op3 m√ºnchen )  )  )  )  )  :polarity -
mean :arg0 ( 83 :arg1-of ( fortunate :arg0 ( person :arg0-of ( coach :arg1 svetislav )  :arg1-of ( assess :arg0 ( team :mod ( good :degree most :op1-of ( over :mod last :op2 ( continent :name ( name :op1 europe )  :wiki europe )  )  :op2-of ( against :arg1-of ( win :arg0 ( we :arg1-of ( stop :arg0 ( possible :polarity - )  :arg2 ( believe :arg0 1 :arg1 that )  )  )  :arg1-of possible :arg2 ( 2 :quant-of ( temporal-quantity :unit year )  )  )  :op1 even )  )  )  )  )  :arg1-of ( follow :arg0 pesic )  :arg2 ( person :arg0-of ( defend :arg1 ( olympiako :mod-of pir√§u )  )  :arg1-of ( defeat :arg0 47 :op1-of ( evening :mod thursday )  :op1-of title )  )  :polarity - )  )  :arg1 39 :op1-of 88
deliver :arg0 ( we :arg0-of ( exist :arg1 basketball :location ( city :name ( name :op1 munich )  :wiki munich )  :mod also )  )  :arg1 message
contrast :arg1 ( put :arg0 appearanc :arg1 ( team :mod ( city :name ( name :op1 munich )  :wiki munich )  )  :arg1-of ( flight :mod top :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  :arg2 ( perform :arg1 crucial :arg2 good )  :purpose ( period :arg1-of long )  )  :arg2 ( focuss :arg0-of ( suffice :arg1 3 )  :domain phase :polarity - )
manage :arg0 initial :arg1 ( turn :arg0 guest :arg1 ( deficit :mod ( point :mod 15 )  )  :arg2 lead :purpose ( go :purpose-of ( minute :unit-of ( temporal-quantity :quant 13 )  )  )  :time ( before :op1 ( possible :arg1 ( turn :arg0 pir√§u :arg1 game :arg2 around :mod ( again :mod once )  )  )  )  )
contrast :arg1 then :arg2-of ( champion :arg0 euroleague :arg1 ( mistake :arg0 ( we :arg0-of ( fight :arg2 back :op1-of ( against :mod well :op2 incredible )  )  )  :arg1-of ( care :arg0 ( once :mod-of again )  :polarity - )  )  :time time :time 2 )
contrast :arg1 ( proud :compared-to ( perform :arg1 we )  :domain we )  :arg2 ( want :arg0 we :arg1 ( win :arg1 ( game :mod every )  :arg0 we )  )
hold :arg0 ( person :op3-of ( and :op1 ( organization :arg0-of ( champion :arg1 ( seri :mod ( country :name ( name :op1 italy )  :wiki italy )  )  :arg1-of ( win :arg1-of ( celebrate :arg0 ( team :arg1-of ( strike :arg0 ( person :arg0-of ( succeed :arg1 ( person :name ( name :op1 malcolm :op2 delaney )  :op1-of ( and :op2 ( person :name ( name :op1 nihad :op2 djedovic )  )  )  )  :degree most )  )  )  :mod ( city :name ( name :op1 munich )  :wiki munich )  )  )  :arg1-of ( clear :arg0 ( 2 :quant-of game )  )  )  )  :name ( name :op1 montepaschi :op2 siena )  )  :op2 ( title :arg1-of polish )  )  )
person :mod ( organization :name ( name :op1 tenth :op2 anniversary :op3 of :op4 the )  :poss-of ( thing :location ( city :name ( name :op1 new :op2 york )  :wiki new_york_city )  :mod-of ( magazine :name ( name :op1 the :op2 new :op3 yorker )  :wiki the_new_yorker )  :name ( name :op1 comedy :op2 festival )  )  )  :name ( name :op1 ben :op2 greenman )
crowd :arg2-of direct :arg2-of ( tell :arg0 ( person :arg0-of ( serve :arg1 ( master :mod ceremony )  :arg2 ( organization :name ( name :op1 palace :op2 theatre )  )  :arg2-of ( argue :arg1 ( birth :arg1 ( comedy :location ( country :name ( name :op1 america )  :wiki united_states )  :mod standup )  :arg2 ( country :name ( name :op1 new :op2 york :op3 city )  )  )  :arg1-of ( possible :arg0 1 )  )  :location broadway )  :mod vaudevillian :name ( name :op1 frank :op2 fay )  )  :arg1 ( joke :arg1 ( manner :mod conversational )  )  :arg1-of ( start :arg3 ( nearly :op1 ( temporal-quantity :unit year )  )  )  )
innovate :arg0 ( person :arg0-of ( extend :arg1 ( through :quant-of ( temporal-quantity :unit year )  )  )  :name ( name :op1 fay )  )  :arg1 ( recent :degree most :location ( city :location-of festival :name ( name :op1 new :op2 york )  :wiki new_york_city )  )
standup :mod-of ( institution :mod-of ( organization :arg1-of ( found :op3-of ( and :op1 ( create :arg0 ( person :name ( name :op1 caroline :op2 hirsch )  )  :purpose-of ( celebrate :arg0 ( festival :arg0-of ( show :arg1 ( club :mod small :op1-of ( and :op2 ( theatr :mod large )  )  )  :mod ( sixty :degree more )  )  )  :arg1 ( anniversary :mod tenth )  :time ( year :mod this )  )  )  :op2 oversee )  )  :name ( name :op1 carolines )  )  )
say :arg0 hirsch :arg1 ( and :op1 ( go :arg0 most :arg1 ( succeed :arg1 point :mod great )  :arg1-of ( appear :arg0 ( headliner :mod this )  )  :arg4 of )  )  :arg2-of ( play :arg0 they :arg1 club :mod ( big :degree too )  )
build :arg0 we :arg1 ( festival :mod this )  :manner ( way :instrument-of ( continue :arg1 work )  )
feature :arg0 ( military :poss-of veteran )  :arg1 among :arg2-of ( garden :arg1 ( square :wiki - )  :arg3 madison )  :arg2-of ( benefit :arg1 ( person :arg0-of ( water :arg1 rog )  :mod ( other :mod-of bruce )  :name ( name :op1 jon :op2 stewart )  :op1-of ( and :arg1-of bill )  :wiki jon_stewart )  :arg3 ( hero :arg1-of ( up :arg3 stand )  :mod well )  :mod ( comedy :op1-of ( and :example-of music :example-of ( and :arg1-of bill :arg1-of ( include :arg0 event :arg2 syk :arg3 ( temporal-quantity :unit ( year :mod this )  )  :prep-on appearanc )  :op1 griffin :op2 mah )  )  )  )
expand :arg0 ( world :mod comedy )  :arg1 festival
show :arg0 ( channel :mod nontraditional :mod through :mod such :mod small :quant ( temporal-quantity :unit year )  )  :arg1 ( and :op1 ( come :arg1 festival )  :op2 ( comedy :arg1-of ( resemble :arg2 network )  )  :op3 spike )  :arg1-of ( participate :arg0 of :arg2 several :mod comedian :mod this )
show :arg0 he :arg1 ( and :op1 ( person :arg0-of ( deep :arg1 ( cable :mod-of sitcom )  )  :arg2-of ( rise :arg1 prominence )  :name ( name :op1 nick )  :wiki nick_clegg )  :op2 ( raunchy :mod gleefully :mod-of ( fantasy :mod-of football )  )  :op3 theme :op4 league :op5 now )  :arg1-of ( sketch :arg0 comedy )
and :op1 ( organization :arg1-of ( have-org-role :arg0 ( person :arg1-of ( know :arg0 ( she :arg0-of ( slate :arg1 ( cast :arg1 both )  )  :arg0-of ( shoe :arg1 on )  )  :arg2 she :manner ( good :degree most )  :manner ( viral :mod-of video )  :mod ( broadcast-program :name ( name :op1 saturday :op2 night :op3 live )  :wiki saturday_night_live )  :mod though )  :mod series :name ( name :op1 jenny )  )  :arg2 member )  :name ( name :op1 jenny )  )  :op2 ( organization :name ( name :op1 jenny )  )
distinctive :op1 ( decentralize :arg0 wry :arg1 ( world :mod comedy :poss-of ( product :domain ( and :op1 ( person :name ( name :op1 kroll )  )  :op2 ( person :name ( name :op1 slate )  )  :op3 ( comedian :mod young :mod other :op1-of both )  :op4 ( person :mod pessimistic :name ( name :op1 anthony :op2 jeselnik )  )  :op5 ( person :mod ( focuss :degree racial )  :name ( name :op1 w. :op2 kamau :op3 bell )  )  )  )  )  :op1-of voice )
interview :arg0 1 :arg1 ( person :arg0-of ( talk :arg1 ( person :name ( name :op1 david )  :wiki - )  )  :arg1-of ( draw :arg0 festival :mod ( big :degree most )  )  :arg2-of ( mean :arg1 steinberg )  :name ( name :op1 david )  :wiki - )
contrast :arg1 ( start :arg0 ( person :arg0-of ( have-org-role :arg1 film :arg2 director )  :name ( name :op1 steinberg )  )  :arg1 ( comedian :mod standup )  )  :arg2 ( become :arg1 ( and :op1 ( historian :mod unofficial :mod comedy )  )  :arg2 ( television :arg1-of accomplish )  )
host :arg1 ( he :arg0-of ( show :arg1 ( 2007 :year-of date-entity )  :time ( date-entity :year 2005 )  )  :arg0-of ( call :arg1 ( organization :name ( name :op1 from )  )  :arg2 ( person :name ( name :op1 from )  )  )  :arg0-of ( land :arg1 tv )  )
take :arg0 meet :arg1 place :arg2 ( center :mod ( city-district :name ( name :op1 manhattan )  :wiki manhattan )  )  :destination ( country :name ( name :op1 town :op2 hall )  )
say :arg0 definite :arg1 steinberg :arg1-of ( work :arg0 ( comedy :mod-of dna :mod-of all :mod-of of )  :location city :mod ' )
think :arg0 i :arg1 between :op5-of ( and :op1 ( walk :arg0 he :arg1 sometimes :arg1-of ( tell :arg0 he :arg2 i )  :location here :time-of down )  :op2 ( person :location alley )  :op3 2 :op4 building :op6 hey :op7 ( lose :arg0 i :arg1 ( money :arg1-of ( live :arg0 i :location here )  )  :mod-of all )  )
satisfy :arg1 ( country :name ( name :op1 iran )  :wiki iran )  :arg2-of ( process :arg1 ( negotiate :mod nucleus )  )
express :arg0 ( country :arg0-of ( process :arg1 negotiate )  :name ( name :op1 iran )  :wiki iran )  :arg1 satisfy :time ( before :op1 ( meet :arg0 week :arg1 ( and :op1 ( power :mod ( veto :arg1 ( organization :name ( name :op1 un )  :wiki united_nations )  )  :quant 5 )  :op2 ( country :name ( name :op1 germany )  :wiki germany )  )  :mod next :mod nucleus )  )
write :arg0 ( past :arg1-of ( clear :arg0 ( organization :name ( name :op1 &quot; )  )  )  :arg2-of ( differ :arg0 ( we :arg0-of ( reach :arg1 ( agree :arg0 ( many :quant-of ( temporal-quantity :unit year )  )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( company :name ( name :op1 facebook )  :wiki facebook )  :arg2 ( minister :mod foreign )  )  :name ( name :op1 &quot; )  )  :time after )  :time now )  )  :arg1 he )  :mod-of ( year :unit-of temporal-quantity )  )  :arg1 page
contrast :arg1 ( doubt :arg0-of ( process :arg1 negotiate )  :domain-of ( side :arg0-of ( end :arg1 it )  :arg1-of ( come :arg4 solution :domain-of ( optimistic :domain ( negotiate :arg1-of ( satisfy :op1-of and )  :arg2 nucleus :arg3-of ( have-org-role :arg2 chief )  )  :mod also )  )  :mod both )  )  :arg2 ( path :arg1-of long )
machet :manner-of ( kill :arg0 ( boy :mod ( country :location-of ( country :name ( name :op1 drama )  )  :name ( name :op1 uruguay )  )  )  :manner playmate )
uruguay :location-of ( old :arg1-of ( murder :arg2-of ( confess :arg0 child )  )  :poss 2 :quant ( temporal-quantity :quant 11 :unit year )  )
invite :arg0 ( boy :op1-of and :quant 2 )  :arg1 ( victim :arg0-of age )  :arg2 ( go :arg0 12 :arg1 ( hunt :arg1 14 :mod bird )  )
and :arg1-of ( arm :arg0 tuesday )  :op1 knife :op2 ( stab :arg0 they )  :op3 ( throw :arg0 old :arg1 11 :arg1-of ( well :arg0 machet )  :op1-of ( and :arg1-of die :op2 body :op3 ( report :arg0 year :arg1 pa√≠ :medium-of thursday )  :op4 newspaper )  )
and :location ( district :arg0-of work :mod class )  :op1 ( play :arg0 ( they :arg0-of ( go :time then )  )  :arg1 football :arg2 ( front :poss home )  )
resort :arg0-of ( exclusive :arg1 ( 15 :quant-of ( distance-quantity :unit kilometer )  )  :purpose ( find :arg0 north :arg1 body :location ( village :poss ( country :name ( name :op1 cerro :op2 pelado )  )  )  :time ( night :arg1-of ( follow :arg0 beach )  )  )  )  :location ( country :name ( name :op1 punta :op2 del :op3 este )  )
state :arg0 ( person :arg0-of ( state :arg1 ( half :mod old )  :time alibi )  :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( offend :arg1 they )  :mod young )  :arg2 sister )  :age ( temporal-quantity :quant 5 :unit year )  )  :arg1 ( assault :arg0 boy :arg1 she :manner sexual )
confess :arg0 ( boy :quant 2 )  :arg1 ( progress :arg1 event :arg1-of ( describe :arg0 girl :manner ( mention :arg0 police :arg1 attack )  )  )  :arg2 ( murder :arg1 11 :arg1-of meditate :arg2 old :time year )
rivalry :arg1-of ( cite :arg0 ( old :topic pair )  :arg2 motive )  :location ( field :source-of football )
take :arg1 he :arg3 ( institute :mod ( person :arg0-of offend :mod young )  :mod psychiatric )  :mod provisional
pimp :arg0-of ( go :arg4 prison )
and :op1 half :op2 ( threaten :arg1 3 :arg1-of ( issue :arg0 ( prison :location-of ( temporal-quantity :unit year )  )  )  :op3-of ( and :op1 ( traffic :arg0 ( man :arg1-of ( condemn :arg0 ( organization :name ( name :op1 district :op2 court :op3 of :op4 constance )  )  :op1-of exploitative )  :age ( temporal-quantity :quant 33 :unit year )  :mod old :source ( thing :name ( name :op1 st. :op2 georgen )  )  )  :arg1 human )  :op2 pimp :op4 ( harm :arg1 bodily :mod grievou )  )  )
tour :arg2-of ( follow :arg1 ( soldier :arg0-of ( confess :arg1 ( procedure :arg1-of bargain :arg1-of ( plead :arg0 former )  :poss-of context )  )  :arg1-of ( work :arg2 doorman )  :mod ( country :name ( name :op1 germany )  :wiki germany )  )  )  :location ( country :name ( name :op1 afghanistan )  :wiki afghanistan )  :quant 2
say :arg0 confess :arg1 ( get :arg0 he :arg1 ( know :arg1 ( woman :arg0-of ( send :arg1 ( street :op1-of onto )  :time ( after :op1 ( temporal-quantity :op1-of few :unit week )  )  :time then )  )  :arg2 ( or :op1 internet :op2 ( telephone :mod-of ( contact :arg1 5 )  )  )  :arg0 he )  :arg1-of occasion )
issue :arg1 ( threaten :op2-of ( and :op1 ( violence :mod ( mean :arg0-of ( break-up :arg1 ( he :arg0-of ( resist :mod any )  )  )  )  )  )  )
keep :arg0 ( he :arg0-of ( work :duration ( temporal-quantity :unit year )  )  :mod some )  :arg1 income :arg2 woman
and :arg1-of ( confiscate :arg0 ( contact :arg0 ( he :arg0-of ( prevent :arg1 woman )  )  :arg1 ( world :mod outside )  )  )  :op1 ( phone :mod mobile :mod-of ( card :mod sim )  )
bring :arg0 ( he :arg0-of ( procure :arg1 ( accomplice :wiki - )  :arg2 woman )  :poss-of ( west :mod south )  )  :arg3 ( brothel :mod various )  :location together
monitor :arg0 ( he :arg0-of ( control :arg1 income )  )  :arg2 ( extent :quant some )
claim :arg0 accuse :arg1 ( suffer :arg0 he :arg1 ( trauma :mod severe )  :time ( after :op1 ( lose :arg0 ( colleagu :arg1-of ( serve :location alongside :location ( country :name ( name :op1 afghanistan )  :wiki afghanistan )  )  )  :arg1 life :arg1-of explode )  )  )  :purpose ( appear :time ( before :op1 court )  )  :time initial
culpability :arg1-of ( limit :arg0 thus-far :arg1-of ( doubt :arg0 ( person :arg0-of ( suffer :arg1 ( condition :mod psychiatric :mod any )  )  :arg1-of ( expert :arg2 psychiatric )  )  :arg1-of ( cast :arg0 ( old :arg0-of ( confess :arg1 year :arg2 33 :mod full )  )  :op1-of and :time once )  :mod considerable )  )
female :mod-of ( victim :time-of ( question :arg0 court :arg1 any :arg2 more :polarity - )  )
possible :arg1 ( identify :arg1 ( traffic :arg1 human :arg1-of ( case :mod further )  )  :arg1-of ( follow :arg2 ( convict :arg0-of ( achieve :arg1 ( use :arg1 ( measure :arg1 ( telephone :arg1 4 )  )  )  )  :arg1 exploitative :arg1-of surveil )  )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 criminal :op2 investigation :op3 department )  :wiki criminal_investigation_department
conversation :arg1-of ( intercept :arg2 ( aggression :mod-of ( level :arg1-of high )  )  )
confirm :arg0 victim :arg1 ordeal :arg1-of ( hearing :mod subsequent )
witness :arg0 ( person :arg0-of ( state :arg1 all )  :arg0-of ( suffer :arg1 ( bruise :arg0 woman :arg1 yet :mod blue )  :arg2 body )  :mod further )
and :arg1-of ( view :arg0 ( personality :arg1-of ( break :arg0 ( of :arg1-of case )  :arg1-of complete )  )  :mod that :mod this )  :op1 violence :op2 ( exploit :arg1 ( field :arg1-of normal :mod this )  )
express :arg1 ( regret :arg0 accuse :arg1 behave )  :time yesterday
state :arg0 ( he :arg1-of follow :arg1-of ( imprison :arg0 i )  )  :arg1 ( and :op1 circle :op2 ( hope :arg0 ( i :arg0-of ( remove :arg1 this )  )  :arg1 ( life :arg1-of normal :arg1-of complete :arg1-of lead )  )  )
drop :arg1 ( extend :arg0 96 :arg1 ( oil :arg1-of barrel )  )
show :arg0 ( country :arg0-of ( manufacture :arg1 sector )  :name ( name :op1 china )  :wiki china )  :arg1 ( power :arg1-of hunger )  :arg1-of ( report :arg1-of high :arg1-of offset :arg1-of ( supply :op2-of ( over :op1 ( concern :arg0 friday :arg1 ( continue :arg0 ( oil :arg1-of price :mod-of of )  :arg1-of fall )  )  )  )  )  :arg1-of strengthen
barrel :arg0 benchmark :arg1 ( morning :arg0-of ( trade :arg1 ( organization :name ( name :op1 new :op2 york :op3 mercantile :op4 exchange )  )  :arg2 ( country :mod-of ( crude :purpose ( deliver :arg1 12 :arg2 ( monetary-quantity :quant ( 14 :op1-of down )  :unit cent )  )  )  :name ( name :op1 u.s. )  :wiki united_states )  :mod electronic )  :location ( continent :name ( name :op1 europe )  :wiki europe )  :time late )
fall :arg0-of ( leave :direction down :duration ( temporal-quantity :unit month )  :extent percentage-entity :time ( date-entity :month 10 )  )  :arg1 ( contract :arg1 ( monetary-quantity :quant 39 :unit cent )  )  :location thursday
weigh :arg1 ( supply :arg1 crude :mod ample )  :arg2 ( price :arg1 ( temporal-quantity :unit ( week :mod recent )  )  )
say :arg0 ( organization :name ( name :op1 energy :op2 department )  :poss-of ( volume-quantity :time ( week :mod last )  :unit barrel )  )  :arg1 ( increase :arg1 ( supply :arg0 ( country :name ( name :op1 u.s. )  :wiki united_states )  )  )  :time ( wednesday :op1-of 4.1 )
rise :arg0 ( volume-quantity :quant more :unit barrel )  :arg1 ( supply :arg1 25 )  :time ( over :op1 5 :op2 ( temporal-quantity :unit week )  )
contrast :arg1 ( come :arg0 ( demand :arg1-of strong )  :arg1 ( thing :arg1-of suggest )  :arg1-of manufacture :arg3 ( report :arg1 ( show :arg1 uptick )  :arg1-of ( activity :arg0 ( country :name ( name :op1 china )  :wiki china )  )  :quant 2 )  :time friday )
suggest :arg0 ( country :arg0-of ( strengthen :arg1 ( continue :arg1 ( grow :arg0-of ( rebound :arg1 percentage-entity )  :arg1 economy )  :arg1-of ( quarter :arg0 previous )  :arg1-of ( quarter :arg0 7.8 )  :arg1-of possible :arg1-of recover :arg1-of ( low :arg0 ( 2 :quant-of ( temporal-quantity :unit decade )  )  )  )  :time after )  :name ( name :op1 china )  :wiki china )  :arg1 that
barrel :arg1 ( exchange :arg0 ( crude :arg1-of ( fall :arg0 ( benchmark :arg1-of ( use :arg0 ( thing :arg0-of ( refine :arg1 ( country :name ( name :op1 u.s. )  :wiki united_states )  )  )  :manner ( crude :mod international )  :mod also )  :wiki bse_sensex )  :location ( city :name ( name :op1 london )  :wiki london )  )  :mod ( organization :name ( name :op1 brent )  )  )  :arg1 ice :domain-of ( monetary-quantity :quant 26 :unit cent )  )
block :arg0 court :arg1 ( rule :arg1 ( policy :arg1-of ( frisk :op1-of ( and :arg1-of ( stop :arg0 ( organization :name ( name :op1 nypd )  )  )  )  )  )  )
and :arg1-of ( stop :arg0 ( police :poss ( city :arg1-of ( change :arg1-of judge :arg1-of require :arg2-of ( block :arg0 ( court :arg0-of ( appeal :arg1 federal )  )  :arg1 thursday )  )  :name ( name :op1 new :op2 york )  :wiki new_york_city )  )  )  :poss-of ( program :arg1-of frisk :op1-of ( and :arg0-of ( remove :arg1 ( judge :arg1 case )  )  )  )
appeal :arg0 city :poss-of ( outcome :arg1-of ( pend :time-of ( stay :arg1 ( decide :arg0 ( person :name ( name :op1 shira :op2 scheindlin )  )  )  :arg1-of ( say :arg0 ( organization :mod 2nd :name ( name :op1 u.s. :op2 circuit :op3 court :op4 of :op5 appeals )  )  )  :arg2 judge )  )  )
question :arg0 8 :arg1 ( person :arg1-of ( stop :mod-of ( program :arg1-of ( carry :arg0 ( city :arg0-of ( violate :arg1 ( constitution :arg1-of ( rule :arg0 judge )  )  )  )  :arg2 way )  )  :op1-of and )  )
appeal :arg1 ( thing :arg1-of ( find :arg0 city )  )  :arg3 ( and :op1 ( order :mod remedial )  :op2 ( decide :arg1 ( assign :purpose ( help :arg1 ( department :arg0-of ( change :arg1 police :arg1-of ( train :purpose-of program )  :domain-of policy :op1-of ( and :arg1-of associate )  )  )  :arg1-of monitor )  )  )  )
hear :arg0 ( court :arg2-of appeal )  :arg1 argue :arg2 ( stay :arg1-of request )  :time tuesday
state :arg0 public :arg1 ( thing :op2-of ( and :op1 ( interview :arg1 media :quant ( series :arg0-of ( cause :arg1 ( criticize :arg0 court :arg1-of ( respond :arg0 ( country :arg0-of ( judge :purpose-of ( run :arg0 she :arg0-of ( cause :arg1 ( need :arg1 ( remove :arg1 judge :arg2 case )  :arg1-of ( say :arg0 ( court :arg2-of appeal )  )  )  )  :arg1 afoul :manner ( compromise :arg1 necessity :arg3-of conduct :purpose ( avoid :arg0 code :arg1 ( appear :arg1 partiality )  :arg1-of judge )  )  )  )  :name ( name :op1 u.s. )  :wiki united_states )  :arg1-of public )  )  )  )  )  )  )
and :arg1-of stop :op1 ( person :mod-of ( thousand :mod-of ten )  )  :op2 ( frisk :arg1 ( program :prep-with-of ( target :arg0 ( person :arg0-of ( have-org-role :arg1 police :arg2 officer )  :arg0-of ( violate :arg1 ( right :mod civil )  :arg1-of ( judge :arg0-of rule )  )  )  :arg1 ( and :op1 ( thing :name ( name :op1 hispanic )  )  :op2 ( man :arg1-of black )  )  :manner wrong )  )  )
and :op1 ( appoint :arg0 ( she :arg0-of ( oversee :arg1 ( change :arg1-of major )  )  )  :arg1 ( monitor :arg0 outside )  )  :op2 ( order :arg0 ( she :arg0-of ( test :arg1 ( camera :arg1-of ( wear :mod body )  :location ( precinct :arg1-of ( occur :arg0 ( stop :quant most )  )  :quant some )  )  )  )  :arg1 ( program :arg1-of pilot )  )  :op4-of ( and :arg1-of reform :op1 policy :op2 train :op3 supervise )
and :arg1-of ( store :arg1-of ( practice :arg1-of ( end :arg0 ( country :name ( name :op1 new :op2 york :op3 city )  )  :arg1-of ( agree :arg0 country )  )  )  :arg2 name )  :op1 ( address :poss ( person :arg1-of ( case :arg1-of ( dismiss :arg0 8 :time ( after :op1 ( stop :arg1 police )  )  )  )  )  )
appeal :arg1 ( argue :arg1 city :arg1-of oral :arg1-of ( 2014 :year-of ( date-entity :day 14 :month 3 )  )  :arg1-of schedule :arg1-of after :arg1-of sometime )
criticize :arg0 ( number :quant-of ( advocate :arg1 ( right :mod civil )  )  )  :arg1 ( tactic :arg1-of ( frisk :op1-of ( and :arg1-of stop )  )  )
contrast :arg1 around :arg2 ( increase :arg0 ( frisk :arg1 ( and :arg1-of stop :op1 ( person :arg0-of ( depend :polarity - )  :arg0-of ( have-org-role :arg2 mayor )  :arg1-of administrate :name ( name :op1 michael :op2 bloomberg )  :wiki michael_bloomberg )  )  )  :arg1 ( stop :arg1 most :arg1-of record )  :arg2 ( form :mod some )  :arg3 ( high :arg1 ( temporal-quantity :unit decade )  :mod time :mod all :time ( date-entity :year 2011 )  )  :manner dramatic :op1-of ( and :op2 hispanic :op3 ( man :arg1-of black )  )  )
and :op1 ( file :arg0 ( man :quant 4 )  :arg1 lawsuit :time ( date-entity :year 2004 )  )  :op2 ( minority :quant all )  :op3 ( become :arg2 ( case :arg1 class :mod action )  )
say :arg0 ( person :arg0-of ( change :arg1 nypd )  :arg0-of ( support :arg1 of )  )  :arg1 ( and :op1 ( stop :arg0 ' )  :op2 ( program :arg1-of frisk )  :op3 ( change :arg1 practice :op1-of ( and :op2 ( fair :polarity - )  :op3 ( person :arg0-of ( trust :arg1 mold )  :mod more )  :op4 effective :op5 ( police :op1-of ( and :arg2-of ( use :arg0 police :arg1 policy :mod department )  :op2 force :op3 possible :op4 ( affect :arg0 other :arg1 amr-unknown )  )  )  )  )  :op4 end )
contrast :arg2 ( low :arg0 change :arg1 ( morale :mod police )  :arg1-of ( say :arg0 opponent )  :arg2 ( and :op1 ( crime :mod - )  :op2 ( waste :arg1 money :polarity - )  :time ( after :op1 ( shrink :arg0 ( thousand :poss ( person :arg0-of ( have-org-role :arg2 officer )  )  )  :time ( decade :unit-of ( temporal-quantity :mod last )  )  )  :time-of pressure :time-of ( solve :arg1 ( problem :arg1-of broad :topic ( force :mod police )  )  )  )  )  )
contrast :arg1 constitution :arg2 ( and :arg1-of ( practice :arg1-of frisk )  :arg1-of ( put :arg0 ( she :arg0-of stop :arg0-of ( stop :arg1 it )  :arg0-of ( implement :arg1 ( way :arg1-of reform )  )  )  :arg1-of end :arg1-of ( note :arg1-of judge )  :arg2 - )  )
dream :poss-of ( camel :poss-of happiness )
oasi :arg1-of ( manage :arg0 ( camel :arg0-of reach :arg1-of dream :mod only )  )  :domain happy
and :op1 ( person :arg0-of ( have-org-role :arg1 ever :arg2 chairman )  :arg0-of ( describe :arg1 ( piece :mod this :poss-of wisdom )  )  :name ( name :op1 it )  )  :op2 history :op3 fascination :op4 behind :op5 ( help :arg0 it :arg0-of ( hand :arg1 society )  )
impress :arg1-of organize :mod-of ( thing :arg1-of ( look :arg0 ( birthday :arg1-of ( celebrate :arg1-of ( see :arg0 evening )  )  :mod tenth )  :arg1-of ( possible :arg0 saturday )  :direction back :time already )  :arg2-of result )
report :arg0 ( thing :arg0-of ( found :arg1 depth )  :name ( name :op1 chairman :op2 henne )  )  :location ( work :arg0 organize )
visit :arg0 he :arg1 ( organization :location ( city :name ( name :op1 nouakchott )  :wiki nouakchott )  :location ( country :name ( name :op1 mauritania )  :wiki mauritania )  :name ( name :op1 cheijk-zajed :op2 hospital )  )  :duration time :time ( date-entity :year 2004 )
and :op1 ( develop :arg1 ( collaborate :mod important )  :arg2-of result )  :op2 ( person :name ( name :op1 hanne )  )  :op3 ( perform :arg0 gynaecologist :arg1 operation :arg2 countless :purpose ( journey :arg1 location :quant several )  )
show :arg1 ( image :source ( trip :arg1 ( mention :arg1 initiative )  )  )  :arg2 ( screen :mod large )  :purpose ( give :arg1 insight :arg2 ( guest :location ( event :mod anniversary )  )  )  :time speech
show :arg0 desert :arg1 vehicle :arg1-of organize :mod also
vehicle :arg1-of ( border :arg0 it :arg1-of ( protect :time former )  :mod federal )
say :arg0 ( person :name ( name :op1 henne )  )  :arg1 ( plan :arg0 he :arg1 ( assume :arg1 ( role :domain ( organize :arg1 this )  :mod ( advise :arg1 ( person :name ( name :op1 lord )  :wiki lord )  )  )  :arg0 he )  :op2-of ( and :op1 ( thing :arg1-of ( suggest :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 nagold )  )  :arg2 mayor :time former )  :name ( name :op1 rainer :op2 prewo )  )  :arg2 ( equip :arg1 vehicle :arg2 ( system :mod photovoltaic )  )  )  )  )  :time now )
build :arg0 ( company :arg0-of ( edge :arg1 capital :arg2 ( district :mod poor )  )  :mod carpentry :source ( country :name ( name :op1 baiersbronn )  :poss-of ( record :mod-of ( time :part-of ( week :arg1-of ( free :arg2 ( charge :arg1 less )  )  )  )  )  )  )  :arg1 ( station :location hospital )  :location ( country :name ( name :op1 socogim )  )  :time ( date-entity :year 2008 )
mention :arg0 ( person :name ( name :op1 henne )  )  :arg1 ( person :arg0-of ( have-rel-role :arg2 mother )  :mod new :op1-of ( and :op2 ( hospital :mod child )  )  )  :location ( city :name ( name :op1 nouakchott )  :wiki nouakchott )  :mod also
interest :arg1 this :mod particular :time ( time :location-of ( do :arg0 ( country :name ( name :op1 nagold )  )  :arg3 ( clinic :mod maternity )  :direction away )  )
say :arg0 ( person :name ( name :op1 henne )  )  :arg1 ( learn :arg0 you :arg1 ( deal :arg1-of ( work :arg2 ( doctor :location ( continent :name ( name :op1 africa )  :wiki africa )  )  )  :mod great )  )  :arg1-of ( recommend :arg2 ( you :arg0-of ( slow :purpose ( avoid :arg0 burn :arg1 out )  )  )  :topic-of example )
contrast :arg1 ( possible :arg1 ( unrest :location country :mod politics )  )  :arg2 ( come :arg1 ( doctor :arg1-of local :quant many )  :arg4 ( country :arg0-of ( plan :arg1 ( journey :arg1 due :quant many )  )  :name ( name :op1 germany )  :wiki germany )  :purpose ( sit :arg1 ( reason :mod this )  :arg2 ( lecture :arg1 - :arg2 ( variety :mod-of topic )  )  )  )
and :arg1-of ( send :arg0 ( example :purpose-of ( send :arg1 container :arg1-of regular :arg2 ( continent :mod-of material :name ( name :op1 africa )  :wiki africa )  :time addition )  :time ( date-entity :month 3 :part-of ( year :mod this )  )  )  )  :op1 ( device :mod medicine )  :op2 medicine :op3 ( material :arg1-of bandage )  :op4 ( bed :arg0 hospital )  :op5 spectacl
trip :arg1-of ( organize :arg1-of ( support :arg0 ( musician :arg0-of ( experience :arg1 ( thing :arg1-of ( share :op3-of ( and :arg1-of ( provide :arg0 ( thing :mod co :name ( name :op1 - :op2 initiator :op3 hans :op4 - :op5 joachim :op6 fuchtel )  )  :arg2 ( plenty :quant-of ( colour :arg1-of ( local :arg0-of ( stall :arg1 goat :arg1-of mobile :arg2-of ( convert :arg1 ( country :name ( name :op1 mauritania )  :wiki mauritania )  )  )  )  )  )  )  :op1 tell :op2 ( vehicle :mod merced )  )  )  )  )  )  :arg2 ( country :name ( name :op1 mauritania )  :wiki mauritania )  :manner tradition )  )
motivate :arg1 ( work :location ( area :mod audit )  )  :arg1-of ( identify :arg0 ( he :arg0-of ( have-org-role :arg1 parliament :arg2 ( member :mod young )  )  )  )  :arg1-of personal
decide :arg0 ( he :arg0-of ( become :arg2 ( clear :arg1 ( waste :arg1 ( money :quant much )  )  )  )  )  :arg1 ( help :manner ( control :arg0 person :arg1 budget )  :arg0 he )
require :arg0 ( economy :mod globe )  :arg1 ( kind :arg1 human :mod globe )  :arg2 ( person :name ( name :op1 fuchtel )  )  :mod also
forget :arg0 ( mean :polarity - )  :arg1 ( fact :time ( lie :arg0 ( continent :name ( name :op1 africa )  :wiki africa )  :arg1 ( think :arg1 close :quant many )  )  )  :arg1-of recommend
person :compared-to-of far :name ( name :op1 gran :op2 canaria )  :quant ( all :mod-of ( that :domain-of ( continent :name ( name :op1 africa )  :prep-with - :wiki africa )  )  )
use :arg0 ( person :name ( name :op1 coulson )  )  :arg1 ( hack :arg1 phone )  :arg2 ( verify :arg1 tip )
and :arg1-of confront :op1 ( surveil :arg1 former )  :op2 ( confirm :arg0 ( organization :name ( name :op1 former )  )  :arg1 ( bogu :mod-of tip )  :arg1-of ( attempt :arg0 ( person :arg0-of ( use :arg1 editor :arg1-of ( hack :arg0 phone )  :arg1-of allege )  :name ( name :op1 former )  )  )  :arg2 ( involve :arg1 ( secretary :mod-of charl )  :arg2 then :arg4 home :mod affair :mod about )  )
tell :arg0 ( person :arg1-of ( prosecute :arg0 person )  :name ( name :op1 prosecutor )  )  :arg1 ( hear :arg0 ( organization :mod that :name ( name :op1 prosecutor )  )  :arg1 ( false :mod-of rumour )  :arg1-of ( special :arg0 ( he :arg0-of ( attract :arg1 ( person :arg0-of ( advise :arg1 ( person :name ( name :op1 prosecutor )  )  )  )  )  :arg0-of ( see :arg1 ( person :name ( name :op1 prosecutor )  )  )  )  )  )  :arg2 ( government-organization :name ( name :op1 old :op2 bailey )  :wiki old_bailey )  :time ( date-entity :month 5 :year 2005 )
contrast :arg1 ( step-in :arg1 door :arg1-of hack )  :arg2 ( and :op1 ( call :arg0 she :arg1 ( hear :arg0 she :arg1 court )  :arg2 ( newspaper :arg0-of ( task :arg1 ( private :arg1 investigator )  )  )  :mod also :op2-of ( and :op1 voicemail )  )  :op2 leave )
say :arg1 ( see :arg0 ( he :arg0-of ( say :arg1 edi )  :arg0-of ( like :arg1 ( put :arg0 man :arg1 story :arg1-of ( hope :arg0 person :arg2 out :op1-of house :op1-of ' :op4-of ( outside :op1 ( of :mod editor )  :op2 man :op3 stand )  )  :arg2 person )  :polarity - )  :arg1-of ( catch-up :arg0 ( he :arg1-of ( prosecute :arg0-of ( suggest :arg1 ( that :mod-of mr )  :arg2 now )  :arg2 amr-unknown )  )  :arg2 they )  )  :arg1 amr-unknown :arg2 they )
say :arg0 he :arg1 ( use :arg0 ( thing :name ( name :op1 notw )  )  :arg1 ( way :quant 3 )  :arg2 ( investigate :arg1 story )  )  :arg1-of ( surveil :op2-of ( and :op1 ( hack :arg1 phone )  :op3 confront )  )
involve :arg1 editor :arg1-of personal
know :arg0 he :arg1 ( do :arg1 surveil )  :arg1-of obvious
amr-unknown :topic ( first :mode interrogative )
know :arg0 he :arg1 ( hack :arg1 phone :op1-of about )  :arg1-of ( do :arg0 interrogative )
say :arg0 ( he :arg1-of ( say :arg0 he )  :part - )  :arg1 we :location ( oh :mod-of yes )
bother :arg1 ( charl :mod with )  :arg1-of ( waste :arg0 ( she :arg0-of ( tell :arg1 amr-unknown :arg2 ( interest :arg0 source :arg1 m :arg2 ( feature :arg0 ( ' :mod notw )  :arg1 ( desk :mod-of when )  :arg2-of ( involve :arg1 clarke :mod affair :mod an :mod rumour :mod about )  :arg2-of ( pick-up :arg0 first :arg1 ( up :mod-of by )  )  )  :arg2-of mean :manner sexual )  :mod pawlby :time ( time :mod your )  )  )  :polarity - )
seize :arg0 ( she :arg2-of ( take :arg0 tape :arg1 voicemail :arg3 of )  :poss-of least :poss-of phone )  :arg1 home :arg1-of ( occasion :arg0 3 )  :arg2 8 :time ( date-entity :year 2006 )
investigate :arg0 ( person :arg1-of ( find :arg0 ( she :arg0-of project :arg1-of ( have-rel-role :arg0 person :arg2 sister )  :op3-of ( and :op1 m :op2 pawlby )  )  :manner also :manner entry :manner ( private :arg1 investigator )  )  )  :arg1 ( ' :mod-of ( computer :mod-of which )  )
say :arg0 ( she :arg0-of ( ask :arg1 ( call :arg0 ( she :arg0-of ( investigate :arg1 period )  :arg0-of ( receive :arg1 grandparent )  )  :arg1 information :arg2 anonymous )  )  )  :arg1 edi
and :arg1-of ( report :arg0 former :arg1-of move :arg1-of surveil :arg1-of oversee )  :arg1-of ( report :arg0 meanwhile :arg1-of ( have-org-role :arg0 former :arg2 chief )  )
mean :arg1 ( tell :arg0 ( she :arg0-of ( leave :arg1 voicemail )  )  :arg1 ( story :arg1-of ( get :arg0 i )  :arg1-of ( plan :arg0 ( we :arg0-of ( run :arg1 tomorrow )  )  )  :arg1-of resemble )  :arg2 ( i :arg0-of ( speak :arg1 charl :time really )  )  :time ( date-entity :day 18 :month 6 :year 2005 )  )
say :arg1 mr :arg2-of ( involve :arg0 ( story :arg0-of ( follow :arg1 ( man :mod ( other :mod-of important :mod-of ( former :mod such )  )  )  )  :arg0-of ( same :arg1 pattern )  )  :arg1 ( person :mod secretary :mod home :name ( name :op1 david )  :wiki - )  )
brook :arg1 ( rebekah :mod defendant )  :arg1-of ( marry :time time )  :arg1-of ( see :arg0 he )  :arg2 ( person :arg0-of ( confront :arg1 ( thing :name ( name :op1 mr :op2 blunkett )  )  :arg1-of ( hear :arg0 jury :arg2 thursday )  :arg2 ( affair :prep-with ( woman :arg1-of marry )  )  )  :name ( name :op1 coulson )  )
and :op1 ( person :name ( name :op1 coulson )  :op1-of ( and :arg0-of ( conspire :arg1 ( date-entity :day 9 :month 8 :year 2006 )  :arg1-of ( deny :arg0 ( person :name ( name :op1 brooks )  )  )  :arg2 ( hack :arg0 other :arg1 phone )  )  )  )  :op2 ( date-entity :day 3 :month 10 :year 2000 )
admit :arg0 ( and :op1 ( person :name ( name :op1 mulcaire )  )  :op2 ( person :name ( name :op1 thurlbeck )  )  :op3 ( person :name ( name :op1 weatherup )  )  )  :arg1 ( hack :arg1 phone )
rich :arg1-of ( go :arg0 ( organization :arg0-of ( plan :arg1 ( tax :arg1-of ( protest :arg1-of ( strike :time ( since :op1 ( date-entity :year 1972 )  )  )  )  )  )  :name ( name :op1 french :op2 football :op3 association )  )  :mod actual )
come :arg1 ( meet :arg0-of mediate :arg1-of end )  :manner resolution
fail :arg1 ( meet :arg0 de :arg0-of ( mediate :arg1 wealth )  :arg1 sac :arg2-of ( follow :arg1 ( manoeuvre :arg0 ( and :op1 ( associate :arg1 football :manner professional )  )  :arg1 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 france )  :wiki france )  )  :arg0-of ( conflict :arg0-of ( regard :arg1 tax )  )  )  :arg2 cul )  )  )
welcome :arg1 ( and :op1 club :op2 ( person :arg0-of ( represent :arg1 ( city :name ( name :op1 paris )  :wiki paris )  )  :arg0-of ( have-org-role :arg2 president )  :arg1-of ( associate :arg0 ( he :arg0-of complain :arg0-of ( listen :arg1 thursday )  )  )  )  )
refuse :arg0 he :arg1 ( spare :arg1 ( associate :arg1 football )  :arg1-of ( exceed :arg1-of earn )  :arg2 ( tax :arg0 ( date-entity :year 2014 )  :arg1 income :arg1-of ( plan :arg0 ( country :location-of ( company :arg0-of ( pay :arg1 year )  :mod every )  )  )  :arg2 ( percentage-entity :value 75 )  )  :purpose ( impose :arg1 ( 2 :quant-of ( temporal-quantity :unit year )  )  )  :arg0 he )
remain :arg1 oppose :arg3 adamant :mod also
inform :arg0 ( head :arg1 ( organization :name ( name :op1 union :op2 of :op3 professional :op4 football :op5 clubs )  )  )  :arg1 ( go :arg0 ( person :name ( name :op1 jean-pierre :op2 louvel )  )  :arg1 ( end :arg1 ( date-entity :month 11 )  :arg2-of ( announce :arg0 ( organization :name ( name :op1 ucpf )  )  :arg1 strike )  )  :direction ahead :time now )
schedule :arg0 ( organization :arg2-of ( cancel :arg1 and :time thus-far )  :name ( name :op1 ligue )  )  :arg1 ( temporal-quantity :quant 2 :quant 1 :unit ( day :arg1-of ( match :arg0 12 :op1-of 2 )  )  )  :op1-of ( and :op2 ( date-entity :month 11 :quant 29 )  )
possible :arg0 gechingen :arg1 ( protect :arg1 absolute )  :degree -
say :arg0 ( person :arg0-of reside :arg0-of ( have-org-role :arg2 mayor )  :arg0-of ( plan :arg1 stage :time early )  :arg1-of ( involve :arg1-of ( want :arg0 we )  )  )  :arg1 ( concept :arg1-of ( flood :arg0 ( event :arg2-of ( open :arg0 h√§u√ül :arg1 information )  )  )  :arg1-of ( regard :arg0 ( citizen :mod-of ' )  :arg2 gechingen )  :arg1-of protect )  :arg1-of possible
concern :arg1 ( community :mod-of hall )  :arg1-of ( express :arg0 around :arg1-of ( measure :arg0 ( person :arg0-of participate :arg1-of ( come :arg2 ( person :name ( name :op1 gemeindehalle )  )  )  :quant 80 )  :arg1-of plan )  :op1-of ( and :arg1-of explain :op2 ( submit :arg1 idea )  )  )
of :arg1-of ( decide :arg0 ( person :arg1-of clear :name ( name :op1 h√§u√üler )  )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 h√§u√üler )  )  :arg2 member )  )  :time final )
comment :arg0 ( person :arg1-of ( find :arg0 flood :arg2 unprepar :time ( date-entity :day 15 :month 5 :year 2009 )  )  :name ( name :op1 h√§u√üler )  )  :arg1 ( event :arg0-of ( raise :arg1 ( question :arg1 ( measure :mod protect )  )  :topic-of future )  :mod decisive )
flood :arg1-of ( protect :arg0 ( concept :arg1-of ( form :arg0 ( country :arg1-of ( collaborate :manner-of ( commission :arg1 ( study :arg1 ( basin :mod river )  )  )  )  :name ( name :op1 aidlingen )  :poss-of ( community :arg1-of neighbor )  )  :time now )  )  )
say :arg0 ( many :arg0-of ( develop :arg1 ( plot :arg0 of :arg1 land )  )  )  :arg1 ( person :arg1-of ( protect :arg0 goal )  :name ( name :op1 &quot; )  )  :arg1-of possible
say :arg0 ( organization :name ( name :op1 german :op2 weather :op3 service )  )  :arg1 ( need :arg3 ( protect :arg1 every :arg2 ( flood :arg0-of ( occur :manner statistics )  :arg1-of expect :arg1-of ( plan :arg0 ( 100 :quant-of ( temporal-quantity :unit year )  )  )  )  )  )
take :arg0 ( monetary-quantity :unit cent )  :arg1 ( change :arg0 ( allowance :mod-of form )  :arg1 climate :op1-of 15 )  :arg3 account
refer :arg0 ( circle :arg1-of expert )  :arg1 this
cause :arg0 ( mass :quant-of water )  :arg1 ( damage :arg1-of ( flood :beneficiary-of equivalent :duration ( temporal-quantity :unit year )  )  :location ( country :name ( name :op1 gechingen )  )  :mod considerable )  :time ( date-entity :year 2009 )
contrast :arg1 ( possible :arg1 ( attempt :arg0 ( we :arg0-of ( improve :arg1 ( say :arg0 ( thing :mod such :polarity - )  :arg1 ( person :name ( name :op1 &quot; )  )  )  )  :arg1-of ( protect :arg0 there :manner absolute )  )  :arg1 relative )  )
possible :arg0 around :arg1 ( count :arg0 town :arg1 ( country :arg2-of ( invest :arg0 4 :arg1 ( monetary-quantity :unit cent )  )  :name ( name :op1 gechingen )  )  :location ( subsidy :mod state )  )  :purpose ( achieve :arg1 ( protect :arg1 hq :op1-of around :op1-of 70 )  )
indicate :arg0 ( person :name ( name :op1 h√§u√üler )  )  :arg1 ( provide :arg1 ( develop :arg1 ( concept :mod overall )  )  :arg1-of fund :mod only )
cooperate :arg1 ( citizen :poss-of town )  :time-of ( develop :arg1 ( concept :mod such )  )
complete :arg1 ( plan :mod complex )  :purpose ( and :op1 ( procedure :instrument-of approve )  )
possible :arg1 ( begin :arg1 implement :location ( scenario :mod ( good :degree most )  :topic case )  :time ( date-entity :year 2016 )  )
report :arg0 we :arg1 ( local :arg1 ( measure :arg0 ( concept :arg0-of ( present :arg2 ( organization :name ( name :op1 town :op2 council )  )  :mod already :time week :time past )  :arg0-of ( protect :arg1 ( person :arg0-of ( run :arg1 ( country :name ( name :op1 stammheim :op2 valley )  )  )  :name ( name :op1 river :op2 irm )  )  )  )  :arg1-of ( plan :arg0 ( measure :mod other )  )  :arg2 tributary )  )
participate :arg0 ( person :arg0-of ( use :arg1 ( opportunity :purpose ( submit :arg1 ( concern :arg1 ( protect :arg0 ( concept :mod presentation )  :arg1 flood )  )  )  )  :arg2 conjunction )  )
and :arg1-of ( plan :arg0 other :arg2-of ( raise :arg1 ( question :arg1 - )  )  :purpose ( protect :arg0 embankment :arg1 location )  )  :op1 ( reservoir :mod detention )
possible :arg1 ( achieve :arg0 ( sum :arg2-of ( measure :arg0 ( of :mod interplay )  :arg1 ( propose :arg0 ( person :arg1-of base :name ( name :op1 gregor )  )  )  :mod all )  )  :arg0-of ( desire :arg1 goal )  :arg1 ( concept :arg1-of ( require :arg0 it )  :arg1-of ( present :arg1-of ( engineer :arg0 company :arg1-of commission )  )  :mod emphasise :mod that :mod ( plann :mod technical )  )  )
say :arg0 ( person :name ( name :op1 joachim :op2 wald )  :poss ( thing :mod furthermore :name ( name :op1 und :op2 corbe )  )  )  :arg1 ( find :arg1 ( solution :mod ( economy :degree most )  )  )
result :arg1 ( network :arg1-of overflow :mod canal )  :arg2 ( suffer :arg0 ( town :arg1-of ( reside :arg0 ( person :arg0-of ( resent :arg1 even )  :arg1-of local )  )  :mod old )  :arg1 ( normal :arg1 thunderstorm )  :arg1-of repeat )
and :arg3-of ( know :arg1 problem :arg2 ( department :arg1-of administrate )  )  :op1 ( take :arg1 ( measure :mod initial )  :time already )
indicate :arg0 ( person :name ( name :op1 h√§u√üler )  )  :arg1 ( differ :arg1 ( guideline :arg0-of ( confuse :arg1 this :op2-of ( and :op1 ( protect :arg0 ( system :mod canal )  :arg1 flood )  )  :polarity - )  )  )
oblige :arg1 town :arg2 ( design :arg1 ( network :mod canal )  :arg2 ( possible :arg1 ( withstand :arg0 every :arg1 ( event :frequency ( 3 :quant-of ( temporal-quantity :quant 2 :unit year )  )  :mod rain )  )  )  :manner ( way :mod such )  )
sewerage :mod-of ( channel :arg1-of ( wide :arg2-of ( gobble :arg1 million )  )  )
collide :arg2-of ( follow :arg1 ( injure :degree serious )  )
injure :arg0 ( rural :mod-of road )  :arg1 ( person :arg0-of ( drive :arg1 car )  :quant 2 )  :arg2 ( collide :arg1 friday :arg1-of head )  :degree serious :op1-of 44 :time ( early :quant-of afternoon )
contrast :arg1 ( block :arg0 ( police :arg0-of ( comment :arg1 ( cause :arg1 accident )  :arg1-of ( possible :polarity - )  :mod initial :quant much )  )  :arg1-of complete :arg2 ( off :op1 road )  )  :arg2 immediate
mention :arg0 ( they :poss-of ( thing :arg0-of ( assess :arg1 various )  :arg1-of ( state :arg0 ( person :arg0-of witness )  )  )  )
and :op1 ( drive :arg0 ( person :arg0-of ( drive :arg1 ( golf :arg1 ( company :name ( name :op1 vw )  :wiki volkswagen )  :arg2 amr-unknown :op1-of certain )  )  :age ( temporal-quantity :quant 19 :quant-of old :unit year )  :mod female )  :arg1 ( man :arg1-of ( come :arg0 she )  :age ( temporal-quantity :unit year )  :mod old :mod 38 )  :arg2 direction )
wreckage :location-of ( free :arg0 ( temporal-quantity :unit hour )  :arg1 she :arg2 ( service :mod ( fire :arg1 ( collide :arg0 ( vehicle :quant 2 )  :arg1 half :condition ( stick :arg0 almost :arg1 woman :degree severe )  )  )  )  )  :poss vehicle
cause :arg1 accident :arg1-of actual :arg1-of ( remain :arg3 ( clear :polarity - )  )  :time initial
take :arg1 ( party :arg0-of ( fortunate :arg1 nearby :polarity - )  :quant both )  :arg3 hospital
remain :arg1 ( road :arg1-of ( block :degree full :duration ( temporal-quantity :quant around :quant 2 :unit hour )  )  )
possible :arg1 ( call :arg0 you :arg1 ( country :name ( name :op1 usa )  :wiki united_states )  )
feature :arg0 ( and :op1 ( seek :arg0 ( person :name ( name :op1 god )  :wiki god )  :arg1 ( person :name ( name :op1 philip :op2 k. :op3 dick )  )  :op1-of ( and :op2 metaphysician )  )  :op2 novel :op3 story )  :arg1 ( theme :arg1-of recur )  :arg2 ( extent :mod certain )  :mod also
beard :arg0 ( forehead :arg1-of high )  :arg1 ( pierce :arg1 eye :arg1-of ( astound :arg0 ( likenes :mod external )  )  )
and :op1 ( person :arg0-of ( consider :arg1 ( reveal :arg0 ( person :name ( name :op1 fyodor :op2 m. :op3 dostoevsky )  )  :arg1 ( soul :mod ( country :name ( name :op1 russia )  :wiki russia )  )  )  :op1-of ( and :op2 apologist )  )  :domain-of ( prophet :arg1-of consider :arg1-of ( esteem :arg0 ( oeuvre :mod massive )  :degree high :mod certain :time ( country :mod native )  )  )  :name ( name :op1 philip :op2 k. :op3 dick )  )
feature :arg1 ( story :arg1-of distribute :poss cassette :poss ( publish :arg1 house :arg1-of release )  :poss ( title :mod some )  :poss zweitaudensein )
illustrate :arg0 ( person :arg0-of ( choose :arg2-of ( believe :op3-of ( and :op1 ( pair :arg0 ( kingdom :poss ( progress :mod technical :mod breathtak )  )  :arg1 paranoia )  :op2 ( fixation :topic security )  )  )  )  :name ( name :op1 dick )  )  :arg1 ( country :name ( name :op1 america )  :wiki united_states )
read :arg0 ( he :arg2-of ( resemble :arg1 ( mixture :mod-of of )  )  :op4-of ( and :op1 ( person :name ( name :op1 dick )  )  :op2 ( person :name ( name :op1 god )  :op1-of ( and :op2 ( book :wiki - )  :op3 computer :op4 manual )  :wiki god )  :op3 ( thing :arg1-of experience )  :op5 late )  )  :arg1 book
or :op1 ( crazy :arg1 he :mod perhaps )  :op2 ( affect :arg0 drug :arg1 brain :mod perhaps )
realize :arg0 he :arg1 ( diviniti :domain computer )  :arg2 early
and :op1 computer :op2 ( question :arg0 ( he :arg0-of ( write :arg1 theology )  )  :arg1 ( machine :arg0-of ( separate :arg1 human )  :arg1-of ( create :arg0 creator )  )  )
problem :quant-of ( thing :domain that :name ( name :op1 that )  )
kill
master :mod ( fiction :mod science )
write :arg0 ( person :arg1-of fantastic )
inspire :arg0 ( story :poss he )  :arg1 ( person :arg0-of ( produce :arg1 such )  :mod film )  :op1-of ( and :op2 ( person :name ( name :op1 ridley :op2 scott )  )  :op3 ( person :name ( name :op1 paul :op2 verhoeven )  )  :op4 ( person :name ( name :op1 steven :op2 spielberg )  :wiki steven_spielberg )  )
significant :arg1 ( story :mod latter )  :mod particular :time now
originate :arg0 report :arg1 ( and :op1 ( exude :arg0 year :arg1 ( scent :arg1 of )  )  :op2-of ( and :op1 minority :op3 ( war :name ( name :op1 cold :op2 war )  :wiki cold_war )  :op4 tribunal )  :time ( date-entity :year 1956 )  )
or :arg1-of ( crime :location ( here :location-of principle )  )  :degree ( more :degree-of less )  :location ( something :location-of now )  :op1 ( person :arg0-of ( have-org-role :arg1 ( government-organization :arg0-of ( develop :arg1 i.e. )  :name ( name :op1 white :op2 house )  :poss-of doctrine :wiki white_house )  :arg2 official )  )
and :arg1-of ( access :arg0 ( we :arg0-of ( look :arg1 mutant :arg2-of ( resemble :arg1 alarmingly )  )  :arg0-of ( own :arg1 world )  )  )  :op1 police :op2 ( insight :mod this )  :time future
say :arg0 ( individual :arg0-of ( break :arg1 law :polarity - )  )  :arg1 ( person :arg0-of ( have-org-role :arg1 ( government-organization :arg0-of govern )  :arg2 official )  :arg1-of ( arrest :arg0 we :arg2 amr-unknown )  )
possible :arg1 ( commit :arg0 they :arg1 violence :arg2 ( act :arg0 ( we :arg0-of ( get :arg1 they :arg2 first )  )  :arg1 of )  )  :time before
contrast :arg1 ( we :arg1-of crime :arg1-of ( major :arg0 we )  )  :arg2 ( detention :mod-of camp )  :op1-of ( and :example we :example - :location society :op2 ( person :arg0-of ( read :arg1-of ( stream :arg0 they :time time )  )  :arg2-of criminal :domain-of full )  )
assume :arg0 they :arg1 ( and :arg0-of ( prevent :arg1 ( think :arg1 ( thing :arg1-of bad )  :arg1-of ( turn :arg2 action )  :manner criminal )  )  )
and :op1 ( person :arg0-of ( act :arg1 tale )  :name ( name :op1 dick )  )  :op2 ( oppose :arg0 blueprint :arg1 terror )  :op3 law :op4 ( tap :arg0 phone :arg1 madnes :arg2 of )
mean :arg1 this :arg2 ( and :op1 ' :op2 drone :op3 philosophy :op4 practice :op5 ( work :arg0 ( person :mod also :name ( name :op1 obama )  :wiki barack_obama )  :arg1 amr-unknown )  )  :mod attack :mod ( of :mod anticipation )
finish :arg0 story :arg1 yet :polarity -
argue :arg0 ( chief :mod police )  :arg1 ( and :op1 ( life :arg1-of ( control :arg0 military )  )  :op2 ( leave :arg0 ( division :poss power :quant ( more :polarity - )  )  :arg1 ( organization :name ( name :op1 state :op2 . )  )  )  )
and :op1 watch :op2 ( convict :arg0 watch :arg1 ( crime :time future )  )  :time then
slip :arg0 system
contrast :arg1 ( perfect :arg1 it )  :arg2 lie
device :arg0 ( it :poss-of condition )
contrast :arg1 ( accept :arg1 error :mod ( only :polarity - )  )  :arg2 ( build :arg0 it :arg1 ( and :op1 victim )  )
create :arg0 system :arg1 ( threaten :arg1 fight )
mean :arg1 ( read :arg0 again :arg1 ( person :name ( name :op1 philip :op2 k. :op3 dick )  :op1-of ( and :op2 truth :op3 time :op4 time )  )  )  :arg2 close
state :arg1 ( thing :arg0-of ( regard :arg1 ( scandal :mod ( spy :arg0 ( person :name ( name :op1 merkel )  )  )  )  :arg2 ( country :name ( name :op1 russia )  :wiki russia )  )  :arg1-of issue )
state :arg0 ( person :arg1-of ( expert :arg2 ( intelligence :mod ( country :name ( name :op1 us )  :wiki united_states )  )  :time former )  )  :arg1 ( thing :arg1-of ( regard :arg2 ( scandal :arg2-of ( involve :arg1 ( chancellor :arg2-of ( have-org-role :arg0 ( person :name ( name :op1 edward :op2 snowden )  )  :arg1 federal :arg3 ( asylum :mod ( country :name ( name :op1 russia )  :wiki russia )  )  )  )  :arg1-of possible )  :mod espionage :mod ( country :name ( name :op1 us )  :wiki united_states )  )  )  )  :degree ( further :poss-of ( person :name ( name :op1 angela :op2 merkel )  :wiki angela_merkel )  )
write :arg0 ( person :arg0-of ( prosecute :arg1 ( ' :mod-of office )  )  :arg0-of ( represent :arg1 federal :op1-of of )  :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :op1-of ( or :arg1-of ( submit :arg0 either )  :arg1-of possible :arg1-of question :op2 ( meet :arg0 year :arg1 ( person :arg0-of ( report :arg1 agency :arg2 ( country :name ( name :op1 russia )  :name ( name :op1 interfax )  :wiki russia )  )  :mod old )  :mod-of 30 )  )
meet :arg0 ( politician :mod ( country :name ( name :op1 germany )  :wiki germany )  :mod yesterday :purpose ( discuss :arg0 ( represent :arg0 ( political-party :name ( name :op1 green :op2 party )  :wiki green_party_of_the_united_states )  :arg1 parliament )  :arg1 scandal )  )  :arg1 ( person :name ( name :op1 hans-christian :op2 str√∂bele )  )  :location ( city :name ( name :op1 moscow )  :wiki moscow )
boost :arg0 ( reveal :arg0 ( organization :name ( name :op1 nsa )  )  )  :arg1 ( paranoia :poss corporation :topic ( surveil :arg0 state )  )
buzz :arg0 ( helicopter :arg1-of low :mod ( police :mod ( country :mod-of ( capital :mod finance :poss ( country :name ( name :op1 germany )  :wiki germany )  )  :name ( name :op1 germany )  :wiki germany )  )  )  :arg1 ( 8 :mod late )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( consulate :poss ( country :name ( name :op1 us )  :wiki united_states )  )  )  :location ( country :name ( name :op1 frankfurt )  )  )  :time ( day :mod mild )
photograph :arg0 mission :arg1 ( intelligence :arg1-of agency :poss ( country :location-of ( protect :arg1 instruction )  :name ( name :op1 germany )  :poss-of domestic :poss-of constitution :wiki germany )  )  :location ( country :arg0-of ( locate :arg1 less )  :arg0-of ( bank :arg1 ( and :op1 bundesbank )  :location ( continent :name ( name :op1 europe )  :wiki europe )  )  :name ( name :op1 us )  :poss-of outpost :poss-of rooftop :wiki united_states )
say :arg0 ( media :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg1 ( and :op1 ( prompt :arg0 ( organization :arg0-of ( identify :arg1 ( presence :mod ( antenna :arg1-of ( listen :arg0 foreign )  )  )  )  :arg0-of ( hope :arg1 identify )  :name ( name :op1 bfv )  )  :arg1 action )  :op2 ( exchange :arg0 ( country :name ( name :op1 us )  :op1-of ( and :op2 ( ministry :poss ( country :name ( name :op1 germany )  :wiki germany )  )  )  :wiki united_states )  :arg1 ( city :name ( name :op1 berlin )  :wiki berlin )  )  )
capable :arg1 ( country :arg0-of ( enhance :arg1 ( or :arg1-of ( trade :op1-of secret )  :op1 ( competitiveness :mod international )  :op2 ( increase :arg0 ( company :mod foreign )  :arg1 behalf )  :op3 ( bottom :mod-of line )  )  )  :mod-of company :name ( name :op1 us )  :wiki united_states )  :arg2 ( use :arg0 ( country :name ( name :op1 us )  :wiki united_states )  :arg1 ( intelligence :arg1-of ( steal :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :mod-of of :name ( name :op1 us )  :wiki united_states )  :arg2 director )  :arg0-of ( insist :arg1 intelligence :op1-of ( again :mod-of 9 )  )  :name ( name :op1 james )  )  )  :mod foreign )  :mod that )  :polarity -
contrast :arg2 ( and :mod ( continent :name ( name :op1 europe )  :wiki europe )  :op1 ( government-organization :arg0-of ( begin :arg1 ( release :arg0 ( person :name ( name :op1 edward :op2 snowden )  )  :arg1 ( trove :mod ( treasure :arg1 ( contractor :arg0-of ( turn :arg1 whistleblow )  )  )  )  )  :condition-of ( sure :arg1 ( take :arg1 ( director :arg2-of ( have-org-role :arg0 ( person :arg0-of ( lead :arg1 business )  )  :arg1 ( country :arg1-of ( surveil :arg0 secret )  :name ( name :op1 us )  :wiki united_states )  )  )  :arg2 word )  :degree long :polarity - )  :op1-of since :time ever )  :arg0-of govern )  )
and :arg1-of ( ratchet :arg3 ( high :arg0 ( company :name ( name :op1 yahoo )  :op2-of ( and :op1 ( company :name ( name :op1 google )  :wiki google )  )  :wiki yahoo! )  :arg1-of ( surveil :arg0 state )  :mod new )  )  :arg1-of report :op1 ( spy :arg0 ( government-organization :arg0-of ( gain :arg1 ( access :arg1 ( data :arg1-of ( hold :arg0 ( provide :arg0 ( country :name ( name :op1 us )  :wiki united_states )  :arg1 cloud )  )  )  )  )  :mod ( country :name ( name :op1 us )  :wiki united_states )  :name ( name :op1 national :op2 security :op3 agency )  :wiki national_security_agency )  )  :op2 ( organization :mod ( company :mod oil )  :mod ( country :name ( name :op1 brazil )  :wiki brazil )  :name ( name :op1 petrobras )  )  :op3 ( paranoia :poss corporation )
straw :mod-of ( come :arg1 ( person :arg0-of ( have-org-role :arg1 it :arg2 chancellor )  :arg0-of ( bug :arg1 ( possible :arg1 about )  )  :arg1-of reveal :mod that :name ( name :op1 angela :op2 merkel )  :poss-of ( decade :unit-of temporal-quantity )  :poss-of phone :wiki angela_merkel )  :time final )
possible :arg1 ( person :arg0-of ( sure :arg1 then )  :arg0-of ( powerful :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :degree most )  :arg0-of ( target :arg1 ( person :arg0-of ( lead :arg1 business )  :poss-of ( potential :mod also :op1 target )  )  )  )
and :op1 ( service :arg1-of ( collaborate :arg0 ( person :domain-of transparent :name ( name :op1 snowden )  )  :manner intensive )  :mod intelligence :mod ( country :name ( name :op1 us )  :wiki united_states )  )  :op2 company
think :arg0 ( i :arg0-of conceive )  :arg1 ( use :arg0 data :arg1 this :arg1-of ( benefit :arg0 mutual )  )
say :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 ( and :op1 of :op2 ( represent :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 &quot; )  )  :arg2 president )  :arg1-of ( wake-up :arg0 must )  :name ( name :op1 &quot; )  )  :arg1 company :op1-of small :op1-of ( medium :arg0-of ( size :arg1 it :arg2 ( country :name ( name :op1 germany )  :wiki germany )  )  )  )  )
say :arg0 ( survey :arg1 almost :arg1-of ( publish :arg0 7 )  )  :arg1 ( believe :arg0 ( company :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg1 ( pose :arg0 ( country :name ( name :op1 us )  :wiki united_states )  :arg1 ( risk :arg0 ( country :name ( name :op1 china )  :wiki china )  :arg0-of ( come :arg1 ( and :op1 ( theft :mod data )  )  :arg4 ( espionage :mod industry )  )  :arg1 consultancy :mod big )  :time now )  )
evidence :arg0 ( country :arg0-of ( pass :arg1 foreign )  :arg0-of ( own :arg1 ( trade :arg0 company :arg1 secret )  )  :name ( name :op1 us )  :wiki united_states )  :arg1 date :arg1-of ( document :arg0 company :arg1-of leak :quant all )  :polarity -
express :arg0 ( person :arg0-of ( have-org-role :arg2 politician )  )  :arg1 ( concern :arg1 ( and :op1 ( recommend :arg1 ( strive :arg0 ( organization :arg0-of ( lack :arg1 ( it :mod certain )  )  :name ( name :op1 eu )  :wiki european_union )  :arg1 ( reduce :arg1 ( depend :arg1 ( country :name ( name :op1 us )  :wiki united_states )  )  )  )  :op2-of ( and :op1 ( capable :arg2 internet )  )  )  )  )
sceptical :domain ( person :arg0-of ( lead :arg1 business )  )  :domain this
say :arg0 ( parliament :domain-of someone :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg1 ( recommend :arg1 ( build :arg0 we :arg1 ( company :mod ( country :name ( name :op1 germany )  :wiki germany )  :name ( name :op1 google )  :wiki google )  )  )
shut-down :arg0 ( i :arg0-of ( open :manner slow :mod again )  )  :arg1 eye :mod only :op1-of ( and :arg1-of possible )
say :arg0 company :arg1 ( software :mod ( country :arg1-of ( have-org-role :arg0 hasso :arg2 ( chairman :mod plattn :mod ( way :domain ( that :mod-of ' )  :polarity - )  :mod of )  )  :name ( name :op1 germany )  :wiki germany )  :mod business )  :time sap
recommend :arg0 ( want :arg0 it :arg0-of ( strong :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  )  :arg0-of ( let :arg2 die :polarity - )  :arg1 industry )  :arg1 ( it :quant-of ( temporal-quantity :quant 20 :unit year )  )  :time then
and :op1 ( country :location-of coal :name ( name :op1 germany )  :wiki germany )  :op2 car :op3 ( person :arg0-of ( farm :arg1 everything )  )
contrast :arg0 everything :arg1 ( industry :mod it )
think :arg0 ( company :arg1-of ( shock :arg0 ( and :arg0-of ( come :arg1 ( sophistication :mod technical )  :mod still )  :arg2-of ( expose :arg0 ( agency :mod ( country :arg1-of spy :name ( name :op1 us )  :wiki united_states )  )  :arg1 ( reveal :arg0 ( person :name ( name :op1 snowden )  )  )  )  :op1 reach )  )  :quant some )  :arg1 ( pose :arg0 ( country :name ( name :op1 china )  :wiki china )  :arg1 ( risk :arg2 surveil :mod ( big :degree most )  )  )  :time previous
store :arg1 ( data :arg1-of ( subject :arg2 jurisdiction :op1-of ( and :op2 ( vulnerable :mod potential )  )  )  )  :arg2 ( country :arg1-of ( have-org-role :arg0 ( person :arg1-of ( become :arg2 ( compute :arg0 ( shift :arg1 more :arg1-of occur :mod big )  :arg1 cloud )  )  :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  :arg2 executive )  :name ( name :op1 us )  :wiki united_states )
say :arg0 ( survey :arg1 ( some :op1 10 )  :arg1-of ( carry-out :arg0 ( organization :mod ( body :mod trade )  :name ( name :op1 cloud :op2 security :op3 alliance )  )  )  )  :arg1 ( cancel :arg1 ( plan :arg1 ( use :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 us )  :polarity - :wiki united_states )  :arg2 member )  )  :arg1 ( provide :arg0 ( prism :mod-of ( data :mod ( country :name ( name :op1 us )  :wiki united_states )  )  )  :arg1 cloud :arg1-of ( base :location ( country :name ( name :op1 us )  :wiki united_states )  )  )  :time ( after :op1 ( reveal :arg1 ( program :arg1-of ( mine :arg0 ( monetary-quantity :unit cent )  )  )  )  )  )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 sap :arg2 chief :mod-of executive )  :name ( name :op1 jim )  :wiki - )  :arg1 ( see :arg0 ( we :arg1-of ( come :op2-of ( and :arg1-of possible :op1 ( question :arg1 that :mod new )  :op3 ( store :arg0 year :arg1 data )  :op4 ( guarantee :arg0 you :arg2 i :polarity - )  :op5 ( stay-on :arg0 it :arg1 physical :arg2 jurisdiction )  )  :purpose ago )  )  :arg1 customer )
and :arg1-of ( confirm :arg0 ( report :arg1-of cost :arg2-of ( argue :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2 executive )  :quant many )  :time simple )  :time ( late :degree most )  )  :arg2 ( know :arg0 they :time already )  )  :op1 ( want :arg0 ( state :arg0-of ( guard :arg1 ( data :mod this )  )  :arg1-of ( powerful :arg0 all )  )  :arg1 ( steal :arg1 ( secret :arg1-of ( prize :degree most )  )  :arg0 state )  )
surprise :arg0 ( place :mod ( take :arg1 ( spy :arg1 economy )  )  :mod that )  :polarity -
take :arg0 it :arg1 place :time always
say :arg0 ( discuss :arg0 through :arg1 executive :arg1-of ( change :arg0 fundamental :arg2 ( make :arg0 chemical :arg1 basf )  :op1-of ( and :quant ( many :quant-of ( topic :domain this )  :quant-of ( temporal-quantity :unit year )  )  )  :polarity - )  :arg2 ( have-org-role :arg0 bock :arg1 of :arg2 chief )  :time current )  :arg1 kurt
and :arg1-of ( spy :arg0 ( person :arg1-of ( spy :arg0 we :mod too )  :mod ( country :name ( name :op1 america )  :wiki united_states )  )  :arg1-of ( cause :arg0 ( interest :arg2 ( defend :arg1 ( business :poss we )  )  :mod nation )  )  )  :op1 commerce :op2 industry :op3 level
attack :prep-to-of ( hand :mod this :op1 ( advantage :arg1-of case )  :time-of ( boast :arg0 ( person :arg0-of lead :mod corporate )  :arg1 ( countermeasure :arg1-of ( take :arg0 they )  )  :arg2-of ( keen :arg1-of general :polarity - )  )  )
stick :arg1 ( thing :name ( name :op1 usb )  )  :arg1-of free :arg1-of ( pick :arg0 ( home :arg0-of ( say :arg1 ( trade :mod-of fair )  )  :arg1-of ( drum :arg1-of ( long :duration-of since )  :arg2 message :purpose ( company :mod large )  )  )  :domain-of unwise :op1-of ( or :op2 ( leave :arg1 ( unguard :mod laptop )  :location room )  )  )  :purpose hotel
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( thing :name ( name :op1 carmaker :op2 audi )  )  :arg2 member )  :arg1-of ( meet :arg0 board :op1-of ( before :time-of ( collect :arg0-of ( cause :arg1 ( possible :arg1 ( use :arg0 ( listen :arg1 board )  :arg1 they :arg2 ( device :mod remote )  :polarity - )  )  )  :arg1 ( phone :arg1-of mobile )  )  )  )  :name ( name :op1 ulrich :op2 hackenberg )  )  :arg1 ( practice :arg1-of standard :time ( year :unit-of temporal-quantity )  )
cause :arg0 ( consider :arg0 ( person :arg0-of ( risk :arg1 ( that :mod-of phone )  :arg1-of ( trip :arg0 foreign )  :arg1-of ( smart :arg1-of compromise )  )  :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2 executive )  :arg0-of ( use :arg1 prepaid :arg1-of simple )  :arg1-of advise )  :arg1 mobil )  :arg1 of
throw :arg1 ( mobil :mod prepaid )  :direction away :time then :time afterwards
and :arg0-of ( remain :arg1 ( company :arg1-of ( size :arg2 medium )  :mod small )  :arg1-of concern :arg3 ( vulnerable :prep-to ( and :op1 surveil )  :prep-to hack )  )
lead :arg0 ( person :mod globe )  :arg1 ( many :quant-of ( company :mod this )  )  :arg2 market :arg3 ( niche :mod ( particular :mod-of ( country :name ( name :op1 germany )  :wiki germany )  )  )
warn :arg0 ( organization :arg1-of ( have-org-role :arg0 ( person :arg0-of ( protect :arg1 corporation )  :arg1-of ( lack :arg0 often )  :arg2-of ( size :arg0 ( medium :op2-of ( and :op1 small )  )  :arg1 company )  :op1-of ( and :arg1-of experience :op2 finance :op3 resource )  )  :arg2 personnel )  :name ( name :op1 &quot; )  )  :arg1 ( report :arg0 ( effective :arg0 secret :op1-of against )  :arg1-of ( access :arg0 unauthoris )  )
warn :arg0 ( country :name ( name :op1 us )  :poss-of ( economy :mod-of espionage :poss ( country :mod other )  )  :poss-of company :wiki united_states )
say :arg0 ( newspaper :name ( name :op1 washington :op2 post )  :wiki the_washington_post )  :arg1 ( name :arg0 ( organization :name ( name :op1 us :op2 national :op3 intelligence :op4 estimate )  )  :arg1 ( and :op1 ( country :name ( name :op1 russia )  :op1-of alongside :wiki russia )  :op2 ( country :name ( name :op1 israel )  :wiki israel )  )  :arg2 ( country :name ( name :op1 france )  :wiki france )  :location ( tier :arg1-of ( engage :arg0 ( person :arg0-of offend )  :arg2 ( hack :arg1 ( behind :op1 ( country :name ( name :op1 china )  :wiki china )  )  )  :purpose ( intelligence :mod economy )  )  )  )
espionage :mod-of ( economy :arg1-of ( come :arg3-of ( bad :arg1 france )  )  :poss it :poss ( country :arg1-of ( have-org-role :arg0 board :arg2 member )  :name ( name :op1 germany )  :poss-of blue :poss-of chip :poss-of ( company :arg0-of ( concur :arg1 that )  )  :wiki germany )  )
say :arg0 ( person :arg0-of ( know :arg1-of perfect :arg2-of ( operate :arg0 they :arg1 ( fight :arg1-of ( ally :arg2 country )  :arg1-of spy )  :mod even )  :mod ( well :mod-of ( all :mod that )  )  :op1-of service )  :arg0-of ( interview :arg1 ( intelligence :arg1-of ( internal :arg0 ( head :mod former :mod-of of )  :arg2 france )  )  )  :arg2-of ( quote :arg0 ( organization :name ( name :op1 bernard )  )  :arg1 agency )  :name ( name :op1 bernard )  )  :arg1 ( this :mod-of ( temporal-quantity :unit month )  )
question :arg1-of ( answer :arg1-of ( provide :arg0 ( fair :arg2-of ( wed :arg1 ( country :name ( name :op1 hechingen )  )  )  :mod trade )  )  )
say :arg0 ( person :arg0-of ( undertake :arg1 ( person :name ( name :op1 &quot; )  )  :arg1-of possible )  :arg1-of ( remain :op2-of ( and :op1 marriage )  )  :arg1-of ( discover :arg0 most )  :arg2-of ( journey :arg0 important :arg1 of )  )  :arg1 philosoph
possible :arg1 ( succeed :arg0 ( celebrate :arg1 wed )  :arg1-of ( tip :arg2-of ( give :arg1 ( country :name ( name :op1 hechingen )  )  :time ( fair :arg1-of special :location ( country :name ( name :op1 dom√§ne )  )  :mod trade )  :time now )  )  )
represent :arg1 ( and :arg1-of ( relate :arg2 wed )  :op1 ( supply :arg1 ( product :quant all )  :mod important )  :op2 service )
trend :arg0 ( retro :mod-of ( look :direction back )  )  :arg1 ( once :mod-of again )
begin :arg1 this :arg2 ( clothe :arg1 wed )
or :mod ( good :degree most )  :op1 ( mute :arg1 white )  :op2 cream
and :arg1-of dress :op1 front :op2 ( ruffle :arg0 often :quant numerous )  :op3 embroidery :op4 ( and :op1 back )  :op5 ( end :arg0 ( veil :quant often )  :arg1 train :arg1-of ( run :arg0 they :arg2 rear )  )
opine :arg1-of ( differ :arg0 ( person :name ( name :op1 stefanie :op2 koch )  :source ( organization :name ( name :op1 modehaus :op2 kleiderm√ºller )  )  )  )
brown :op3-of ( or :op1 ( choose :arg0 ( person :mod some )  :arg1 combination :arg1-of ( popular :arg0 ( suit :op1-of ( and :op2 waistcoat :op3 neckerchief )  )  :arg2 man :degree most )  )  :op2 cream )
explain :arg1 ( select :arg1 ( important :domain venue )  )
recommend :arg1 ( special :arg0 ( room :arg2-of adjoin :domain-of ( ideal :polarity - )  :quant plain )  :arg1 ambience )
draw :arg0 ( country :name ( name :op1 dom√§ne )  )  :arg1 ( attend :arg1 ( facility :location ( house :mod carriage )  )  :arg0 country )  :arg1-of ( regard :mod this )
carriage :arg1-of ( want :arg0 ( anyone :arg1-of ( offer :arg0 ( person :name ( name :op1 uwe :op2 link )  )  )  )  )
comment :arg0 ( he :arg2-of ( popular :arg1 hen :mod also :time ( carriag :mod howev )  )  :poss-of party )
photograph :arg0 ( wed :arg1 also )  :arg1 ( and :op1 person :op2 lookout :op3 invitation :op4 ( arrange :arg1 flower )  :topic-of ( idea :arg1-of romantic )  )
contrast :arg1 ( or :arg0-of ( explain :mod ( wed :mod full :mod-of clothing )  )  :arg1-of special :arg1-of ( take :arg0 ( thing :arg1-of ( increase :arg0 fashionable )  :arg1-of become :name ( name :op1 the )  )  :mod picture :mod ( of :mod series )  :mod that :mod-of ( few :mod-of ( day :unit-of temporal-quantity )  )  :time ( after :mod-of ( celebrate :arg1 ( location :mod-of preferably )  )  )  )  :arg1-of resemble :op1 ( waterfall :mod front )  )
present :arg1 ( detail :arg1 ( wed :arg1 sunday :arg1-of succeed )  :mod other :quant many )  :location ( country :name ( name :op1 dom√§ne )  )
possible :arg1 ( entertain :arg0 ( person :name ( name :op1 marko :op2 ripperger )  )  :arg1 guest :arg2 style )  :op6-of ( and :op1 ( arrange :arg1 flow )  :op2 ring :op3 ( table :arg1-of ( wed :arg0 such )  )  :op4 cake :op5 ( magician :mod also )  )
forget :arg1 ( care :arg1 nail :op2-of ( and :arg1-of correct :op1 cosmetic )  :polarity - )
need :arg0 you :arg1 ( celebrate :mod unforgettable )  :manner everything
lover :mod dog :mod victoriou
victoriou :domain ( athlete :op1 ( associate :arg0 ( thing :arg0-of ( rally :arg1 ( thing :name ( name :op1 obedience :op2 tournament )  )  )  :name ( name :op1 bitz :op2 dog :op3 - )  )  :arg1 lover )  )  :mod ( again :mod once )
and :op1 ( and :op1 ( person :arg0-of ( start :arg1 ( thing :prep-with ( dog :quant 2 )  )  :arg2 ( country :name ( name :op1 kandel )  )  )  :name ( name :op1 achim :op2 scherrenbacher )  )  :op2 ( achieve :arg0 ( he :poss-of ( place :mod twelfth )  )  :arg1 ( person :mod bitch :name ( name :op1 sandy )  )  :time ( beginner :mod-of class )  )  :op3 ( point :quant 94 )  :op4 ( place :mod ( fifth :mod-of ( old :mod-of marley :quant ( temporal-quantity :quant 15 :unit month )  )  )  :mod thus-far )  )  :poss-of ( point :quant 87 )
subject :arg1 ( person :name ( name :op1 susi :op2 h√∂pp )  )  :arg2 ( scrutiny :arg1-of critical )  :arg3 ( judge :arg0 class :arg1 1 )  :topic ( compete :arg0 dog :arg1 ( person :arg0-of compete :name ( name :op1 woody )  )  )
believe :arg0 ( person :arg0-of murder :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( have-rel-role :arg2 parent )  :arg1-of die :mod ( country :mod-of teen :name ( name :op1 georgia )  :wiki georgia_[country] )  :mod-of of )  :arg2 son )  )  :arg1 amr-unknown :mod ( accident :mod freak )
say :arg0 ( he :arg0-of ( find :arg1 inside :arg1-of roll :manner body :manner of :manner teenager :manner ( country :name ( name :op1 georgia )  :wiki georgia_[country] )  )  :arg0-of ( wrestle :arg1 mat )  :arg0-of ( high :arg1 school )  :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( believe :arg1 family )  :arg1-of murder )  :arg2 son )  :arg1-of ( have-rel-role :arg0 person :arg2 parent )  :poss-of gym )  :arg1 ( attorney :wiki - )  :time thursday
stick :arg0 11 :arg2 ( prop-up :arg0 mat :arg1 ( country :name ( name :op1 ga )  )  :arg2 behind :manner bleacher :purpose ( high :arg0 upright :arg1 ( school :mod-of gym )  )  :time ( inside :op1 ( country :mod-of ( person :arg0-of ( find :arg1 ( date-entity :month 1 )  )  :name ( name :op1 kendrick :op2 johnson )  )  :name ( name :op1 valdosta )  )  )  )
contrast :arg1 17 :arg2 ( die :arg1 ( person :arg1-of ( investigate :arg0 ( person :mod sheriff )  :arg2 ( family :arg2-of ( dispute :arg0 year :arg1 that )  :mod old )  )  :arg1-of ( conclude :arg0 ( organization :mod-of ( county :wiki pingtung_city )  :name ( name :op1 lowndes )  )  :arg2 ( freak :mod-of accident )  )  :name ( name :op1 johnson )  :wiki - )  )
think :arg0 they :arg1 murder :arg2 ( person :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( tell :arg1 ( organization :name ( name :op1 &quot; )  )  )  :arg1-of ( represent :arg0 ( attorney :wiki - )  :arg1-of ( crump :arg0 absolute )  :op1-of ( and :op2 ( person :name ( name :op1 &quot; )  )  )  )  :name ( name :op1 johnson )  :wiki - )  :arg2 son )  )
believe :arg0 they :arg1 ( die :arg1 ( he :arg1-of ( conclude :arg0 sheriff )  )  :manner way :arg0 they )
say :arg0 ( they :arg0-of ( believe :arg1 that )  )  :arg1 ( physics :mod of :mod law )  :arg1-of ( crump :arg0 ( it :arg0-of ( defy :arg1 logic )  )  )  :arg1-of ( sense :manner well :mod common )
think :arg0 ( they :arg0-of cover :arg0-of ( protect :arg1 ( person :op1-of ( or :arg1-of ( responsible :arg0 ( person :arg1-of ( have-rel-role :arg0 ( person :arg1-of die )  :arg2 son )  )  )  )  )  )  )  :arg1 this
say :arg0 he :arg1 ( and :op1 ( person :arg0-of ( have-rel-role :arg1 ( he :arg0-of ( return :arg1 ( body :mod-of bag )  :arg2 they )  )  :arg2 son )  :arg2-of ( send :arg0 they :arg1 school )  )  :op2 book :op3 bag )
say :arg0 ( he :arg0-of ( investigate :arg1 ( person :arg0-of ( note :arg1 that )  :arg1-of ( remain :arg1-of answer :arg1-of question )  :arg1-of die :name ( name :op1 johnson )  :wiki - )  :arg1-of ( conduct :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 u.s. )  :wiki united_states )  :arg2 attorney )  :name ( name :op1 michael :op2 moore )  :wiki michael_moore )  )  :arg2 into :mod formal )  :arg0-of ( key :arg1 several )  )  :arg1 thursday
cause :arg1 die :domain amr-unknown :mode interrogative
result :arg1 ( crime :arg1 ( die :arg0-of ( be :mode interrogative )  )  )
say :arg0 ( person :name ( name :op1 moore )  )  :location ( conference :mod press :mod-of ( thursday :part afternoon )  )
wherever :location-of ( lead :arg0 they :arg1 ( follow :arg0 i :arg1 fact )  )
truth :arg1-of ( discover :arg0 ( objective :poss i )  )
opine :arg0 i :arg1 ( investigate :arg0 formal :arg1-of ( say :arg0 ( he :arg1-of exist )  )  :arg1-of ( suffice :arg0 of :mod that )  )
indicate :arg1 ( person :arg1-of die :name ( name :op1 johnson )  :wiki - )  :arg2 ( autopsy :arg0 ( person :arg0-of ( report :arg1 that )  :arg2-of ( tell :arg0 ( person :name ( name :op1 moore )  )  :arg1 ( positional :mod-of asphyxia )  )  )  :arg1 initial :arg2-of ( result :arg1 of )  )
say :arg0 ( person :name ( name :op1 moore )  )  :arg1 ( list :arg0 autopsy :arg1 ( cause :arg1 die :arg1-of differ )  )
say :arg0 ( he :arg1-of ( confirm :arg0 there :op2-of ( or :arg1-of ( answer :arg0 must )  :op1 ( question :arg0 several )  )  )  )  :arg1 that
add :arg0 ( person :name ( name :op1 moore )  )  :arg1 ( ask :arg1 ( evidence :arg0-of suffice :arg1 ( warrant :arg1 ( or :op1 ( investigate :arg1 ( right :mod civil )  :arg1-of criminal )  )  :arg2 ( die :arg1 ( person :name ( name :op1 johnson )  :wiki - )  )  )  :arg1-of ( uncover :arg0 he )  )  :arg2 ( government-organization :arg0-of conduct :name ( name :op1 fbi )  :wiki federal_bureau_of_investigation )  )
comment :arg1 ( contact :arg0 office :arg1 thursday :arg1-of ( represent :arg0 sheriff :arg2 ( county :wiki pingtung_city )  )  :arg1-of ( available :arg0 immediate :polarity - )  )
order :arg2 ( release :arg0 ( judge :arg1 wednesday :part ( south :part-of ( country :name ( name :op1 georgia )  :wiki georgia_[country] )  )  )  :arg1 ( video :arg0-of surveil :quant all )  :arg2 ( authority :arg1-of ( review :arg0 ( person :arg0-of investigate )  )  )  )
say :arg0 ( person :arg0-of ( have-rel-role :arg1 ( he :arg0-of ( contain :arg1 clue :arg2 amr-unknown )  :arg1-of die )  :arg2 parent )  :mod teenager )  :arg1 ( hope :arg0 they :op1-of video :op1-of footage )
allergy :mod ( child :mod ( organization :arg0-of ( issue :arg1 school )  :name ( name :op1 cdc )  )  )  :mod-of guideline
and :arg1-of release :op1 ( prevent :arg0 ( control :arg0 disease :arg1 school :arg1-of set :arg1-of ( center :arg0 wednesday )  )  :arg1 ( child :arg1-of manage :arg1-of allergi :arg1-of food )  )  :op2 guideline
age :arg1 ( child :arg0-of ( suffer :arg1 ( allergi :arg1-of ( climb :arg0 food )  )  :purpose ( put :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 u.s. )  :wiki united_states )  )  )  :arg1 ( guideline :consist ( set :domain this )  :mod such )  )  )  :quant number )  :arg2 school
allergi :mod ( food :mod 1 )  :poss ( child :location ( country :name ( name :op1 united :op2 states )  :wiki united_states )  :mod 20 )  :time now
and :op1 ( increase :arg0 ( prevalence :mod ( allergi :mod food :quant ( date-entity :year 1997 )  )  :topic child )  :arg1 ( percentage-entity :value 18 )  :arg1-of ( find :arg0 ( organization :name ( name :op1 cdc )  )  )  )  :op2 ( date-entity :year 2007 )
contain :arg0 ( guide :arg0 ( person :arg2-of ( staff :arg1 ( child :mod of :mod food )  )  :op1-of ( and :arg1-of ( recommend :arg0 they :arg1-of ( occur :arg1-of react )  :arg1-of allergic )  :op2 allergi :op3 amr-unknown :op4 handle )  :op3-of ( and :op1 amr-unknown :op2 faculty )  )  :arg1 school )  :arg1 information
recommend :arg0 it :arg1 ( school :arg0-of ( respond :arg1 ( anaphylaxi :mod ( fatal :mod potential )  )  )  :arg1-of ( stock :arg0 ( injector :purpose ( use :arg1 ( auto :mod ( brand :mod ( thing :name ( name :op1 epipen )  )  )  )  :mod ( common :degree most )  )  )  :mod epinephrine )  )  :mod also
epinephrine :arg2-of ( allow :arg0 rule :arg1 school :purpose-of ( update :arg0 more :arg1 ( legislatur :mod state )  :time recent )  )  :mod stock
include :arg1 ( list :arg2 ( symptom :arg1-of ( communicate :arg0 ( child :arg1-of ( react :arg1-of allergic )  )  )  :arg1-of typical )  )  :arg2 report :mod also
say :arg0 ( i :arg0-of ( feel :arg1 ( resemble :arg1 ( or :arg1-of ( tingle :arg0 tongue :arg2 i )  :op1 it )  :arg2 ( there :location-of hair )  )  :mod tongue )  :arg2-of ( poke :arg0 ( i :arg0-of ( feel :arg1 it :arg2-of ( resemble :arg1 something )  )  )  :arg1 tongue )  )  :arg1 ( possible :arg1 kid )
possible :arg1 ( kid :arg1-of ( have-rel-role :arg0 person :arg2 parent )  :arg1-of ( pick :arg2 ( gend :mod-of undetermin )  )  :mod ( intersex :mod of )  )
become :arg1 ( country :location-of ( bear :arg1 baby :arg2 ( genitalia :mod ambiguou )  )  :name ( name :op1 germany )  :wiki germany )  :arg2 ( nation :arg0-of ( recognize :arg1 gender )  :mod ( continent :name ( name :op1 europe )  :wiki europe )  )
assign :arg0 - :arg1 ( male :op1-of ( or :op2 female )  )  :degree newborn :manner rigidly
require :arg1 ( person :arg0-of declare :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( have-rel-role :arg1 ( child :mod such :mod ( any :mod-of gender )  :mod ( new :mod-of law )  )  :arg2 parent )  :arg0-of ( birth :arg1 certificate )  :arg0-of ( declare :arg1 gender )  :arg0-of ( specify :arg1 ( or :arg1-of allow :op1 undetermin )  :polarity - )  )  :arg2 parent )  )  :polarity -
possible :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( decide :arg3 ( surgery :arg1 intersex :arg1-of ( assign :arg0 sex )  :arg2 newborn )  :mod hasty )  :op1-of off )  :arg2 parent )  :arg2-of ( pressure :arg1-of ( take :arg0 ( law :arg1-of aim )  )  :op1-of ( and :op2 ( fight :arg1 discriminate )  )  )
say :arg0 ( person :arg0-of ( say :arg1 ( temporal-quantity :quant 1 :unit year )  :arg2 i :prep-with ( company :name ( name :op1 bbc )  :wiki bbc )  :time late )  :mod intersex )  :arg1 ( man :op1-of woman )
and :op1 ( remain :arg1 i :arg2 ( patchwork :arg1-of ( create :arg0 doctor )  )  )  :op2 bruise :op3 scar
estimate :arg1 ( child :arg1-of ( bear :arg0 girl :time ( year :mod each )  )  :prep-against-of boy )
or :op1 ( gonad :op3-of ( or :op1 ( intersex :part ( group :arg1-of ( fall :arg0 ( atypical :mod-of chromosom )  :arg2 ( diagnosi :mod ( disorder :mod ( develop :arg0 they :arg1 60 :mod sexual )  )  )  )  :consist-of condition )  )  :op2 ( term :mod umbrella )  :op4 ( genitalia :arg1-of ( develop :arg0 about :mod ( usual :polarity - )  )  )  )  )  :op2 ovari :op3 testes
possible :arg1 ( intersex :domain ( person :name ( name :op1 wallis :op2 simpson )  )  )
contrast :arg1 ( possible :arg1 ( sex :mod ( that :mod-of when )  )  )  :arg1-of ( understand :arg0 ( person :arg0-of ( use :arg1 ( information :arg1-of ( assign :arg0 it )  :arg1-of ( available :mod ( good :degree most )  )  )  :arg2 ' :arg2-of ( determine :arg0 ( country :name ( name :op1 united :op2 states )  :wiki united_states )  :arg1 it :polarity - )  :mod good :op1-of ( and :arg1-of wait :op2 then :op3 ( monitor :arg1 child )  :op4 ( develop :arg1 ( surgery :arg1-of ( undertake :arg0 before )  )  :op3-of ( and :arg0-of ( cause :arg1 ( at :mod-of all )  )  :op1 psychological :op2 physical )  )  )  )  :arg1-of expert :mod most )  :arg1-of ( identify :arg0 gend )  :mod ( well :mod still )  :polarity - )  :arg2 say
say :arg0 ( person :arg0-of ( specialize :arg1 issue )  :mod dr. :mod ( country :mod-of psychiatrist :name ( name :op1 new )  )  :name ( name :op1 new )  )  :arg1 ( thing :arg1-of ( resemble :arg2 ( sound :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2-of ( identify :arg0 of :arg1 gender )  :mod law :mod new )  )  :mod good )
pose :arg0 ( child :mod intersex )  :arg1 ( dilemma :mod ethics )
contrast :arg1 ( kid :arg1-of ( say :arg0 ( he :arg1-of ( do :arg0 ( person :arg0-of ( endanger :arg1 ( condition :mod that )  )  :mod some :poss-of life )  :polarity - )  )  )  :arg1-of ( surgery :arg1-of require )  )  :arg2 most
possible :arg1 ( see :arg0 you :arg1 ( thing :arg0-of surgery :arg1-of ( assign :arg0 gender )  )  :op1-of ( and :op2 ( develop :arg0 identity )  )  :time then )
know :arg1 ( develop :arg0 child :arg1 ( identity :mod any :mod gender )  )  :compared-to-of ( science :domain-of ( accurate :degree very :polarity - )  )
answer :arg0 nobody :arg1 ( question :arg2 ( happen :arg1 this )  )  :arg1-of possible
resemble :arg1 it :arg2 ( person :poss-of gay :poss-of mystery )
contrast :arg1 once :arg1-of ( exclusive :arg0 ( female :degree ( exclusive :arg1 male )  )  )  :arg1-of ( relate :arg1-of ( contrast :arg0 both :arg2 ( relate :arg0 ( status :mod-of ( gender :polarity - )  )  :arg1 ( makeup :mod biology )  :arg1-of instead-of )  )  :condition-of ( describe :arg0 ( report :arg1-of ( file :arg2 ( organization :name ( name :op1 european :op2 commission )  :wiki european_commission )  :time ( date-entity :year 2011 )  )  )  :arg1 ( person :mod intersex )  :arg2 person :manner ( or :op1 ( transsexual :arg2-of differ )  :op2 transgender )  )  )  :arg2 ( typical :arg1 ( clear :arg1 ( define :arg1 either :op1-of or :polarity - )  )  )
and :op1 ( organ :mod reproductive :op3-of ( or :op1 secondary :op2 ( thing :arg1-of ( manifest :arg0 ( feature :arg0 primary :arg1 such :mod this )  :arg1-of possible )  :arg2-of characteristic :example ( and :op1 ( mass :arg1-of muscle )  :op2 ( distribute :arg1 hair )  :op3 ( breast :arg1 chromosomal )  :op4 stature :op5 ( and :op1 ( thing :arg2-of ( characteristic :arg1 such )  :mod sexual )  )  )  :mod sexual )  :op4 ( structure :op1-of ( and :op2 hormon )  )  )  )  :op2 genitalia
bias :arg1 level :op3-of ( and :op1 harassment :op2 violence :op4 ( crime :arg0 ( person :arg0-of ( face :arg1 discriminate :location realm )  :op3-of ( and :manner-of ( give :arg0 report :arg1 overview :mod also )  :op1 intersex :op2 transgender :op4 employment )  )  )  )
gend :arg0-of ( special :arg1 ( camp :time now )  )  :mod-of ( nonconform :mod-of boy )
mark :arg1 ( or :arg1-of ( allow :op4-of ( and :op1 already :op2 ( country :name ( name :op1 australia )  :wiki australia )  :op3 ( country :name ( name :op1 nepal )  :wiki nepal )  :op5 adult :op6 ( person :arg0-of ( have-org-role :arg1 gender :arg2 official )  :mod-of document )  )  )  :op1 female )  :mod-of male
appeal :arg0 ( person :arg0-of ( specify :arg1 status :polarity - )  :arg0-of ( win :arg1 genderles :arg1-of legal :time after )  :arg0-of ( keep :arg1 52 )  :arg2-of ( become :arg0 year :arg1 ( country :name ( name :op1 australia )  :wiki australia )  :location ( world :arg1-of ( recognize :arg0 old )  )  :time ( date-entity :month 6 )  )  :poss-of ( life :poss gender )  )
say :arg0 x :arg1 ( government-organization :name ( name :op1 interior :op2 ministry )  :poss ( country :mod-of ( passport :arg0-of ( designate :arg1 intersex :mod ( other :op1-of ( or :op2 ( vehicle :name ( name :op1 m1 )  :wiki m1_abrams )  :op3 ( aircraft-type :name ( name :op1 f22 )  :wiki lockheed_martin_f-22_raptor )  )  )  )  )  :name ( name :op1 germany )  :wiki germany )  :wiki ministry_of_interior_[iraq] )
controversy :domain ( issue :arg0 gender :arg1 24 :arg1-of ( say :arg0 ( report :mod news :topic ( country :arg2-of ( neighbor :arg1 ( country :name ( name :op1 france )  :wiki france )  )  :name ( name :op1 france )  :wiki france )  )  )  )  :mod still
sign :arg0 ( country :arg0-of ( petition :arg1 ( theory :mod gender )  )  :arg0-of ( withdraw :arg1 ( school :mod-of textbook )  )  :location-of ( religious-group :name ( name :op1 catholic )  :wiki catholicism )  )  :arg1 ( strong :arg0 lawmaker :arg1 france )  :time ( date-entity :time-of dozen :year 2011 )
contrast :arg1 ( choose :arg0 ( state :mod new )  :arg1 ( we :arg1-of ( reverse :arg0 ( pillar :mod more :mod ( of :mod-of civilization )  )  :arg2 2 :polarity - )  )  :arg1-of ( oppose :arg0 ( country :mod-of ( website :mod-of ( religious-group :name ( name :op1 catholic )  :wiki catholicism )  )  :name ( name :op1 u.s. )  :poss-of online :wiki united_states )  :mod also )  :arg1-of ( write :arg0 ( country :mod-of law :name ( name :op1 germany )  :wiki germany )  :mod ( that :mod-of world )  )  :arg1-of ( drag :arg0 into )  :arg1-of activity :op1-of gender )  :arg2 sexual
tell :arg0 ( person :arg0-of ( have-rel-role :arg1 newborn :arg2 mother :location ( state :name ( name :op1 maryland )  :wiki maryland )  )  :quant 1 )  :arg1 ( see :arg0 she :arg1 ( baby :arg0-of ( assign :arg1 gender )  :arg1-of birth )  )  :arg2 zone :mod also
cause :arg0 ( extra :arg0-of ( limit :arg1 especially )  )  :arg1 ( know :arg0 ( you :arg0-of ( do :arg1 website :arg2 ( child :mod of :time-of ( tell :arg0 she :arg2 parenting )  )  :polarity - )  )  :arg1 gender :arg2-of ( stress :arg0 parent :arg1 enough )  )
need :arg0 child :arg1 ( and :op1 stability :op2 certainty )
and :mod both :op1 ( bear :arg1 ( child :arg1-of ( call :arg2 hermaphrodite )  )  :location ( country :name ( name :op1 greece )  :source-of ( god :mod handsome :poss-of ( sexuality :mod ( dual :mod-of historically )  )  )  :wiki greece )  )  :op2 male :op3 ( genitalia :mod female )
think :arg0 ( community :mod medicine :op1-of ( and :op2 ( slate :arg1 little :op1-of ( and :arg1-of possible :op2 ( erase :arg1 ( temporal-quantity :unit decade )  )  )  )  )  )  :arg1 gender :time then
contrast :arg1 ( know :arg0 many :arg1 ( complex :domain ( identity :mod gender )  :op1-of ( and :op2 doctor :op3 ( possible :arg0 ethics :arg1 wrong )  :op4 ( grow :arg1 they :time-of ( feel :arg0 child :arg1 ( thing :arg1-of ( assign :arg0 gender )  )  :arg1-of ( know :polarity - )  )  )  )  )  )  :arg2 ( challenge :arg1 ( surgery :arg1 sometimes )  :time now )
say :arg0 ( emergency :arg1-of ( call :arg0 back :arg3 it :duration ( temporal-quantity :mod 20th :unit century )  :manner ( middle :mod-of of )  :op1-of psychiatric )  )  :arg1 dresch
call :arg0 you :arg1 ( call :arg0 you :arg1 ( kid :arg1-of ( bear :arg2 this )  )  :polarity - )  :arg2 psychiatrist :purpose surgeon
ambiguou :mod-of ( genitalia :arg2-of ( treat :arg1 ( child :topic dr. )  :topic-of ( theory :arg1-of ( prevail :arg2-of ( hold :arg0 ( organization :name ( name :op1 johns :op2 hopkins :op3 university )  )  :arg1 ( malleable :domain gender )  )  )  :arg1-of ( put :arg0 ( money :poss ( person :name ( name :op1 john )  :wiki - )  )  :arg2 forward )  )  )  )
and :op1 ( argue :arg0 gender :arg1 identity :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( raise :arg1 amr-unknown )  )  :arg2 parent )  :arg1-of ( interact :arg0 child )  :arg1-of ( coin :arg0 he )  :arg1-of ( shape :arg0 ( person :arg0-of ( identify :arg1 ( or :op1 female )  )  )  :mod-of male :op3-of ( and :op1 gene :op2 hormon )  )  :op1-of ( and :op2 society :op3 environment :op4 cue )  )
contrast :arg2 ( become :arg0 ( he :arg0-of ( know :arg1 ( person :name ( name :op1 but )  )  :time ( date-entity :year 1966 )  :time case )  :mod-of theory )  :arg2 controversy )
castrate :arg1 child :arg2-of ( botch :arg1 ( circumcision :arg2-of ( sever :arg1 ( peni :poss ( boy :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( raise :arg1 girl :op2-of ( and :op1 ( remove :arg1 testicl )  )  )  :arg1-of ( advise :arg0 he )  )  :arg2 parent )  )  )  )  )  )  :manner full
contrast :arg1 it :arg1-of ( transition :arg0 ( of :arg1-of case )  :arg1-of ( succeed :arg1-of case :arg1-of ( present :arg0 money )  )  )  :arg2 ( say :arg0 - :arg1 ( person :name ( name :op1 &quot; )  )  )
and :op1 ( transition :arg0 ( he :arg1-of ( marry :arg0 15 :arg2 woman )  )  :arg1 ( boy :location around )  :direction ( back :op1 boy )  )
contrast :arg1 38 :arg2 ( commit :arg0 he :arg1 suicide )
say :arg0 ( person :arg2-of ( practice :arg0 ( doctor :mod some )  :arg1 ( model :mod that )  :mod still )  :name ( name :op1 drescher )  )  :arg1 that :time now
contrast :arg1 1990 :arg2 ( person :arg0-of survive :arg1-of ( come :purpose happy :purpose forward :purpose outcome :time surgeri :time ( gender :mod this )  :time internet :time advent :time - )  )
contrast :arg1 ( chromosom :mod xy )  :arg2 ( genital :mod ambiguou )  :condition-of ( bear :arg0 ( case :arg0 such :arg2 ( person :name ( name :op1 jim :op2 bruce )  )  :op1-of male )  :arg1 ( person :arg0-of write :age ( temporal-quantity :quant 36 :quant-of old :unit year )  :source ( state :name ( name :op1 montana )  :wiki montana )  )  )
and :arg1-of possible :op1 doctor :op2 ( peni :mod small )  :op3 ( convince :arg0 ( he :arg0-of ( sure :arg1 ( or :arg1-of possible :op1 large :op2 clitori )  :polarity - )  )  :arg1 ( he :arg0-of ( live :arg1 ( life :mod satisfactory )  )  )  :arg2 nev )  :op4 man
cause :arg0 ( he :arg0-of ( birth :arg1 ( girl :arg1-of ( raise :arg0 ( he :arg2-of ( remove :arg0 surgically :arg1 and )  )  )  )  :arg2 external :time ( after :time-of ( and :op1 organ :op2 testes )  )  :time ( date-entity :year 1976 )  )  )  :arg1 short
give :arg1 ( hormon :mod female )  :arg2 he :time ( age :arg2 12 )
tell :arg0 he :arg1 girl :arg2 ( i :arg2-of ( know :arg0 i :arg1 that )  )  :polarity -
contrast :arg1 ( happy :domain i :polarity - )  :arg2 ( difficult :degree really :domain ( ask :arg2 question )  )
vaginoplasty :location-of ( 18 :op1 he )
contrast :arg2 ( wrong :arg0 ( and :op1 depress :op2 ( know :arg1 something )  )  :arg1 ( demand :arg0 he :arg1 ( record :mod medicine )  )  )
horrify :arg1 ( find :arg0 he :arg1 amr-unknown )
and :op1 ( sterilize :arg1 ( i :arg0-of ( tell :arg2 i :time ever )  :arg0-of ( birth :arg1 - )  )  )
genital :arg1-of ( develop :arg0 ( testosterone :arg1-of ( produce :arg2-of ( prevent :arg0 ( organization :arg2-of ( bear :arg1 ( person :name ( name :op1 bruce )  )  )  :name ( name :op1 dsd )  )  :arg1 body )  )  :quant enough )  :manner proper )
breast :arg1-of ( remove :op2-of ( and :arg1-of ( change :arg0 ( he :arg0-of ( learn :arg1 truth :op1-of after )  )  :arg4 man :direction back )  :op1 ( take :arg1 ( shot :mod testosterone )  )  )  )
render :arg0 surgery :arg1 infertile
normalize :arg1 perception :arg1-of ( try :arg0 ( organization :name ( name :op1 interface :op2 project )  )  :arg2-of ( call :arg1 ( organization :location-of ( other :arg2-of ( advocate :arg0 he :arg1 intersex :time today )  )  )  )  )
contrast :arg1 ( person :arg0-of ( choose :arg1 ( thing :arg0-of ( worry :arg1 ( and :arg1-of ( invite :arg0 ( country :mod-of law :name ( name :op1 germany )  :wiki germany )  )  :arg1-of ( label :arg0 stigma )  )  )  :arg1-of advocate :arg1-of ( inform :arg0 ( state :arg0-of ( base :arg1 ( group :arg1-of legal )  )  :name ( name :op1 california )  :wiki california )  )  )  )  :arg0-of ( have-org-role :arg2 director )  :name ( name :op1 but )  )  :arg2 executive
say :arg0 she :arg1 ( and :op1 ( concern :arg0 activist :arg1 that )  :op2 ( decide :arg0 ( person :arg0-of ( have-rel-role :arg2 parent )  :arg1-of ( encourage :arg0 ( country :arg0-of ( rule :arg1 of )  :arg0-of ( do :arg1 amr-unknown )  :name ( name :op1 germany )  :wiki germany )  )  )  :arg1 ( give :arg0 lot :arg1 undetermin :arg2 child )  :arg1-of quick )  )
afraid :domain ( we :arg0-of ( encourage :arg1 intervene )  )
think :arg0 ( we :arg1-of ( wait :time then )  )  :arg1 ( assign :arg0 ( process :mod good )  :arg1 ( or :op1 ( male :op1-of ( sex :mod female )  )  )  )
contrast :arg1 ( we :arg0-of ( see :arg1 law :polarity - )  )  :arg2 ( amr-unknown :arg0-of ( cause :arg1 ( possible :arg1 ( we :arg0-of speculate :arg0-of play :quant all )  )  )  )
say :arg0 ( person :arg0-of ( choose :arg1 it :arg1-of ( cause :arg0 ( she :arg0-of ( support :arg1 ( country :mod-of law :name ( name :op1 australia )  :wiki australia )  :mod organization )  )  )  :arg1-of allow :arg1-of ( recognize :arg2 ( third :mod-of gender )  )  :op1-of adult )  :name ( name :op1 tamar-mattis )  )  :arg1 that
say :arg0 ( she :arg1-of legal )  :arg1 ( decide :arg0 ( own :arg1 gender )  :arg1 about :arg1-of ( possible :arg1-of ( recommend :arg0 adult )  )  )
assign :arg0 ( law :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg1 birth
point :arg1-of ( take :arg0 ( child :mod young )  :arg1-of ( recommend :arg1-of ( battle :domain that :polarity - )  )  )  :mod this
possible :arg1 ( grow :arg0 ( decide :arg3 body )  :arg1 they )
contrast :arg1 ( dr. :mod-of ( person :arg0-of ( say :arg1 ( and :mod both :op1 ( person :arg0-of ( have-rel-role :arg1 ( child :arg1-of ( empower :arg0 ( country :arg2-of ( help :arg0 other :op2-of ( and :op1 ( develop :arg0 disord :mod sexual )  )  :purpose-of ( radiologist :mod breast )  )  :mod-of law :name ( name :op1 germany )  :wiki germany )  )  )  :arg2 parent )  :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( support :arg1 group )  )  :arg2 daughter )  )  )  )  :name ( name :op1 but )  )  )  :arg2 ( city :name ( name :op1 pittsburgh )  :wiki pittsburgh )
contrast :arg1 ( call :arg0 ( person :arg1-of ( have-rel-role :arg0 ( person :arg1-of ( bear :location male :location chromosom )  )  :arg2 daughter )  :name ( name :op1 baratz )  )  :arg1 syndrome :arg1-of complete :arg2 androgen )  :arg2 insensitivity
androgen :mod-of ( receptor :domain-of ( faulty :arg0-of ( cause :arg1 ( develop :arg0 ( person :name ( name :op1 katie )  )  :arg1 ( thing :arg2-of ( characteristic :arg1 female )  )  )  )  )  )
contrast :arg0 ( or :op1 uteru :op2 ( ovari :op1 she )  :polarity - )  :arg1 vagina
and :op1 ( marry :arg0 ( psychiatry :mod child )  :arg1 ( person :name ( name :op1 katie )  )  :arg2 ( organization :name ( name :op1 university :op2 of :op3 pennsylvania )  )  )  :op2 ( person :arg1-of ( reside :arg0 29 )  )  :time now
hope :arg0 ( she :domain-of infertile )  :arg1 ( become :arg1 ( or :op1 adopt :op2 ( surrogacy :mod gestational )  )  :arg2 parent )
say :arg0 ( person :arg0-of ( have-rel-role :arg1 some :arg2 parent )  :arg0-of ( decide :arg1 themselv :arg1-of ( make :arg0 into )  )  :arg2-of ( give :arg0 law :arg1 space :polarity - )  )  :arg1 ( person :arg1-of rush :name ( name :op1 &quot; )  )
and :arg1-of ( write :arg0 they :op1-of ( or :op2 male :op3 female )  )  :op1 ( figure :op2-of ( and :arg1-of ( give :arg0 it :arg2 time )  :op1 ( test :arg1 some )  )  )  :op2 period :op3 ( before :quant time )
okay :arg0 ( way :mod this )  :arg1 ( you :arg0-of ( raise :arg1 child )  :arg0-of ( love :arg1 child )  )
and :op1 ( baby :arg1-of wonderful )  :op2 ( enjoy :arg0 you :arg1 fun )
surgery :arg0-of ( reverse :arg1 ( we :arg0-of ( rush :arg1 - )  )  )
say :arg0 she :arg1 ( thing :arg1-of ( feel :arg0 ( person :arg0-of ( have-rel-role :arg2 parent )  :arg1-of ( motivate :arg0 anxiety )  :mod that )  :arg1-of ( cause :arg0 ( and :op1 ( decide :arg0 ( child :arg1-of ( bring :arg0 it )  )  :arg1 ( take :arg0 into :arg1 away )  )  )  )  )  :arg1-of ( do :arg0 they )  :arg1-of ( do :arg0 they :polarity - )  :mod right )
and :arg2-of ( comfortable :arg0 ( she :arg0-of ( feel :arg1 ( thing :arg1-of wonderful )  )  )  :arg1 or :degree more :mod sex :mod ultimate )  :op1 ( decide :arg0 he :arg1 child )
empower :arg0 it :arg1 ( child :arg0-of decide )
injure :arg0 ( person :arg0-of ( attack :arg1 unknown )  )  :arg1 girl :manner ( fire :arg1 shot :arg2 car )
injure :arg0 ( person :arg0-of ( attack :arg1 unknown )  :arg0-of ( fire :arg1 shot :arg2 car )  )  :arg1 ( girl :location saxony :mod old :mod ( twelve :quant-of ( temporal-quantity :unit year )  )  )
fire :arg0 ( person :arg0-of assail )  :arg1 ( group :mod-of ( child :location thursday )  )  :arg1-of ( presume :arg2 ( gun :mod air )  )  :location ( country :name ( name :op1 genthin )  )  :location evening
announce :arg0 ( police :location ( country :name ( name :op1 burg )  )  )  :arg1 this
suffer :arg0 girl :arg1 ( injure :arg1 ( calf :mod left )  :mod minor )
work :arg0 ( person :arg1-of ( rescue :arg0 girl )  :mod-of hospital )
come :arg0 6 :arg1 shot :arg3 ( car :arg1-of ( stop :manner sudden :op2-of ( and :op1 ( drive :arg1 ( group :mod-of child )  :mod-of past )  )  )  :mod small )
see :arg0 ( person :arg0-of witness )  :arg1 ( sit :arg1 ( person :quant 2 )  :arg2 car )
fire :arg0 ( person :arg0-of assail )  :arg1 shot :destination ( stop :arg1 bus )  :mod also
shatter :arg1 ( pane :mod glass )
drive :arg0 they :direction away :time then
investigate :arg0 ( organization :arg0-of ( state :arg1 friday )  :name ( name :op1 criminal :op2 investigation :op3 department )  :wiki criminal_investigation_department
possible :arg1 ( look :arg0 ( organization :name ( name :op1 kempten :op2 police :op3 department )  )  :arg1 ( night :arg1-of ( calm :op1-of thu )  :mod halloween )  :degree far :direction back )
call :arg1 ( deal :arg0 authority :arg1 ( throw :arg0 child :arg1 egg :arg2 house )  )  :mod only
possible :arg0 immediate :arg1 ( clean :arg1 ( remnant :arg0-of ( damage :arg1 egg :arg1-of occur :mod material )  )  :arg1-of ( mean :arg0 ( person :arg0-of ( own :arg1 home )  :arg0-of ( realize :arg1 this )  )  :manner once :polarity - )  )  :arg1-of cause
cause :arg0 ( area :mod ( centre-left :mod town )  )  :arg1 ( damage :mod material :op1-of ( firework :quant few )  )  :location here :mod either :polarity ( - :polarity-of furthermore )
report :arg0 ( person :arg0-of ( reside :arg1 ( thing :name ( name :op1 bischof-freundorfer-weg )  )  )  )  :arg1 ( and :op1 ( trim :arg0 wheel :arg1 ( car :arg1-of ( wrap :arg0 ( paper :mod toilet )  )  )  :arg3 steal )  )
arrive :arg0 ( police :op1-of prior )  :arg1 ( man :arg0-of ( find :arg1 further )  :arg0-of ( trim :arg1 ( wheel :quant all )  :arg2 ( account :arg0-of ( require :arg1 ( involve :arg1 police :polarity - )  )  )  :manner nearby )  )
live :arg1 ( perspective :arg1-of ( orient :mod future )  )
live :arg0 ( person :name ( name :op1 waltraud :op2 ries )  )  :arg1 ( life :mod dreamy )  :arg1-of ( tell :arg2 truth )
locate :arg0 ( and :op1 ( country :name ( name :op1 stuttgart )  )  :op2 ( greenery :mod ( old :mod-of ( population :mod tree )  )  :quant plenty )  :op3 ( neighbour :arg1-of nice )  :op4 ( traffic :quant ( much :degree too )  )  )  :arg1 ( house :poss she )  :location ( neighbourhood :mod peaceful )  :op1-of -
use :arg0 ( centre-left :mod city )  :arg1 ( transport :arg0 ( temporal-quantity :mod only :op1-of few :unit ( minute :domain she )  )  :arg1 public )
point :arg0 ri :arg1 ( large :mod-of spid )  :arg2 ( door :mod-of frame )  :arg2-of ( ask :arg0 ( you :arg1-of ( hope :arg2 of :op1-of spider :op1-of afraid )  )  :arg1 waltraud )  :mode interrogative :op1-of out :polarity -
and :manner ( time :quant some :time now )  :op1 ( look :arg0 i :arg1 ( home :mod new :poss ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  )
contrast :arg2 ( know :arg0 you :arg1 difficult )  :op1-of ( country :name ( name :op1 stuttgart )  )
contrast :arg1 ( possible :arg1 ( manage :arg0 house :arg1 ( step :arg1 - :arg1-of ( age :arg0 ( home :op1-of inside )  :arg2 old )  :quant ( number :mod large )  )  )  :arg1-of ( fear :arg0 ( reason :arg1-of ( move :arg0 ( she :arg0-of ( explain :arg1 arachnophobia )  )  :arg1-of desire )  )  )  :polarity - )  :arg2 and
mean :arg1 ( move :arg0 ( mid :arg1-of ( experience :arg0 ( lady :arg0-of ( undergo :arg1 ( operation :mod meniscu )  :op1-of since )  )  )  :mod-of fifti )  :arg1 furthermore :arg2 floor :prep-with disability :source floor )
age :arg0 happy :arg1 ( property :arg1-of ( live :arg0 ( she :arg0-of ( release :arg1 book :time ( recent :mod only )  )  )  :location subject )  :degree-of ( good :degree most :poss interrogative )  :mod type )  :arg2 i :mod old
age :arg1 ( she :arg0-of ( recount :arg1 property :arg1-of ( begin :arg0 ( we :poss-of ( good :degree most :mod-of of :mod-of example )  )  )  )  )  :arg1-of ( work :arg0 ( simple :mod that )  :location home :polarity - )  :mod old
apartment :mod just :mod pretty :prep-in ( thing :arg1-of surround :arg1-of ( green :arg1-of ( move :arg0 she :arg2 ( person :arg0-of ( have-rel-role :arg1 simple :arg2 husband )  :accompanier-of ( maisonette :mod ( temporal-quantity :quant 20 :unit year )  )  )  )  )  )
think :arg1 thing :manner ( differ :arg0 ( mid :mod-of fifti )  :arg1 ( thing :name ( name :op1 waltraud :op2 ries )  )  )  :time now
age :arg0 she :arg1 ( live :arg0 ( person :arg2-of ( deal :arg0 she :arg1 actual )  :mod few )  :arg1 topic )  :mod old
possible :compared-to-of ( long :arg1 ( put :arg0 majority :arg1 person :arg2 ( back :mod mind )  )  )
say :arg0 she :arg1 ( smirk :arg1 ( person :mod only :mod other )  )  :compared-to-of old
give :arg0 ( person :arg0-of do :arg0-of ( become :arg1 ( strain :mod psychological :wiki influenza_a_virus_subtype_h5n1 )  :arg2 severe )  )  :arg1 ( consider :arg1 only )
contrast :arg1 ( possible :arg1 ( say :arg0 ( stage :mod this :mod-of it )  :arg1 ( person :name ( name :op1 &quot; )  )  :time ( late :degree too )  )  )
present :arg0 ( decorator :mod interior )  :arg1 ( model :arg1-of house :purpose ( live :arg0-of ( depend :polarity - )  )  :quant 17 )  :arg2 ( age :arg2 old )  :location book
choose :arg0 you :arg1 ( explain :arg0 she :arg1-of ( decide :arg0 howev :arg1-of personal :time always )  )  :arg1-of ( reside :arg0 ( of :mod type )  )
age :arg1 - :arg1-of ( overcome :arg2 solution )  :arg2 old
ill :arg2 consider :arg2-of ( become :arg1 ( you :arg0-of ( take :arg1 fact :arg1-of ( recommend :arg2 you :concession even )  :purpose ( possible :arg1 ( afford :arg0 ( you :arg0-of ( retire :location ( country :name ( name :op1 tuscany )  )  )  )  :arg1 ( spend :arg1 ( or :op1 ( country :name ( name :op1 brittany )  )  )  :arg0 you )  )  )  :time always )  )  :arg1-of possible )
add :arg1 ( provide :arg0 food :arg1 ( move :arg1 abroad :arg1-of ( think :arg0 you :arg2-of ( become :arg1 ( live :arg1-of possible :example-of language )  :location lonely )  )  :arg1-of ( seek :arg0 dolce :mod that )  )  :arg1-of author )  :arg1-of ( sound :example-of and :op1-of ( knowledge :example even )  )  :arg1-of local
and :arg1-of ( include :arg0 model :arg2 ( community :arg1-of live )  )  :op1 alternative :op2 ( arrange :arg0 ( model :arg1-of ( care :arg0 she :mod classic )  )  :arg1 ( mention :arg1 pensioner )  :arg1-of live )  :op3 often
and :op1 ( quirk :arg1 ( everyone :arg0-of tick :arg0-of ( age :arg2 old )  )  )
comment :arg0 ( she :arg1-of ( reside :arg0 howev :arg2 community :mod ( of :mod ( type :mod this )  )  )  )  :arg1 ( wink :arg0 i )  :polarity -
and :domain-of ( accommodation :arg2-of ( resemble :arg1 nothing )  :consist-of ( person :arg0-of study )  )  :op1 ( bathroom :arg1-of share )  :op2 kitchen
say :arg0 ( you :arg0-of ( need :arg1 ( space :arg1-of ( own :arg0 in )  )  :arg1-of ( age :arg0 old :arg2 simple )  )  )  :arg1 ri :arg1-of withdraw
wish :arg0 ( person :arg0-of author :arg0-of ( work :arg1 residence :arg1-of possible )  :arg0-of ( rule :arg1 possible :arg2 community )  )  :arg1 pensioner :polarity -
operate :arg1 ( person :arg0-of ( dig :mod classic )  :arg0-of study )  :manner differ
and :arg1-of ( want :arg0 you :mod just :mod also )  :example-of ( and :op1 sometimes )  :op1 peace :op2 ( quiet :arg1 ( she :arg0-of believe )  )
opine :arg0 ( she :poss-of ( capital :mod state )  :poss-of ( alone :polarity - )  )  :mod this
age :arg1 capital :mod ( old :mod-of service :mod-of ( life :mod citizen :poss ( person :arg0-of ( head :arg1 ( experience :arg1 of )  )  :arg0-of ( want :arg1 stuttgart :concession ( remain :arg1 majority :arg2-of ( long :arg1 possible )  :manner-of ( own :arg0 state :arg1 home )  )  )  :mod old :mod ( that :mod also )  )  )  )
grow :arg1 old :domain-of ( topic :poss ( person :arg1-of ( advise :arg0 she )  :poss-of agency )  )
possible :arg0 also :arg1 ( remain :arg0 just :arg3 ( environment :mod usual )  )  :purpose-of ( accept :arg0 ( person :mod elderly )  :arg1 ( and :op1 ( limit :arg1 particular :arg2 ( experience :arg1 ( study :arg0 ( organization :name ( name :op1 stiftung :op2 warentest )  )  :arg1 ( person :arg0-of consume )  )  )  )  )  :arg3 inconvenience )
barrier :arg2-of ( free :arg1 nowadays :purpose-of ( design :arg1 ( or :op1 apartment )  :arg2 house :arg2-of ( possible :arg1 ( thing :quant many )  )  :manner ( way :mod such )  )  )
seek :arg0 first :arg1 ( or :arg1-of ( work :arg0 ( person :arg0-of ( recommend :arg1 that )  :name ( name :op1 ries )  )  :mod that :mod all )  :arg1-of ( renovate :arg0 of )  :arg1-of ( appropriate :arg0 age )  :op1 house :op2 apartment )  :arg2 out :op1-of ( and :op2 depth :op3 ( use :arg0 simple :arg1 information :arg2 tradesman )  :op4 ( come :arg1 along :polarity - )  )
elderly :arg1-of ( need :arg0 nowadays :arg1-of ( suit :arg1-of renovate :arg1-of ( specialize :arg0 person )  )  )
possible :arg1 ( work :arg0 ( landlord :quant some )  :arg1 ( design :arg1 ( level :arg2-of ( raise :arg0 even :arg1 ( seat :mod toilet )  :mod-of ( matter :mod just :mod even )  )  )  :arg1-of clarify :mod interior )  :arg1-of carry :mod this )  :instrument ( apartment :arg1-of case :mod rental )
age :arg1 ( apartment :arg1-of ( exist :arg0 even )  :arg1-of ( appropriate :arg0 ever :op1-of ( and :arg1-of ( case :time ( always :polarity - )  )  :arg1-of possible :op2 barrier :op3 ( free :arg1-of beautiful )  )  )  )
person :arg0-of ( go :path ( experience :mod this )  )  :name ( name :op1 waltraud :op2 ries )
contrast :arg1 ( install :arg0 ( you :arg1-of ( hinder :mod great )  )  :arg1 ( lift :arg0 much :arg1 ( path :arg1-of cobble )  :arg1-of ( step :arg1-of ( feature :arg0 ( apartment :poss-of door )  )  :quant number )  :location ( inside :op1 apartment )  :mod stair )  )  :arg2 ( possible :arg1 install )
and :arg1-of ( look :arg0 she :arg1-of ( keep :time ( until :op1 ( find :arg0 she :arg1 ( property :mod ideal )  )  )  :arg0 she )  )  :op1 ( person :arg0-of ( have-rel-role :arg2 husband )  )
spid :arg0-of ( move :compared-to-of ( afraid :degree more :domain she )  )  :location ( door :mod front )
want :arg0 ( country :name ( name :op1 usa )  :wiki united_states )  :arg1 ( prosecute :arg1 ( person :name ( name :op1 snowden )  )  :arg0 country )  :mod still
employ :arg0 ( person :arg1-of ( regard :arg2-of ( change :arg0 ( country :name ( name :op1 usa )  :wiki united_states )  :arg1 position :polarity ( - :op1 former )  )  )  :name ( name :op1 edward :op2 snowden )  :poss ( organization :name ( name :op1 us :op2 secret :op3 service )  )  )  :arg1 person
accuse :arg0 he :arg2 ( pass :arg1 ( information :mod secret :topic authorisation )  )  :mod still
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( government-organization :mod ( country :name ( name :op1 us )  :wiki united_states )  :name ( name :op1 foreign :op2 office )  :wiki foreign_and_commonwealth_office )  :arg2 spokesperson )  )  :arg1 ( face :arg0 he :arg1 ( proceeding :arg1 ( city :name ( name :op1 washington )  :wiki washington,_d.c. )  :arg2-of criminal :location ( country :mod-of ( person :name ( name :op1 jennifer :op2 psaki )  )  :name ( name :op1 usa )  :wiki united_states )  )  )
state :arg0 ( person :name ( name :op1 snowden )  )  :arg1 ( thing :arg0-of ( change :arg1 ( fact :mod this )  :polarity - )  )  :mod even :time ( recent :degree most )
appeal :arg0 ( person :mod politician :name ( name :op1 hans-christian :op2 str√∂bele )  )  :arg1 ( continue :arg1 ( threaten :arg0 ( political-party :mod ( country :name ( name :op1 germany )  :wiki germany )  :name ( name :op1 green :op2 party )  :wiki green_party_of_the_united_states )  :arg1 - :arg2 prosecute )  )  :arg1-of ( follow :arg2 ( meet :arg1 ( person :name ( name :op1 snowden )  )  :location ( city :name ( name :op1 moscow )  :wiki moscow )  :time recent )  )  :arg2 ( country :name ( name :op1 usa )  :wiki united_states )
comment :arg0 ( person :arg0-of ( view :arg1 and :arg2 parliamentarian :mod that :mod of :mod emphasise :mod ( that :polarity - )  )  :arg0-of ( have-org-role :arg1 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 germany )  :wiki germany )  )  )  :arg2 member )  :name ( name :op1 psaki )  )
will :arg0 ( person :name ( name :op1 edward :op2 snowden )  )  :arg1 ( hold :arg0 ( whistleblow :mod ( organization :name ( name :op1 secret :op2 service )  )  )  :arg1 ( discuss :arg0 ( authority :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg1 principle )  )
wish :arg0 ( he :arg0-of ( clarify :arg1 situation )  )
meet :arg0 ( person :mod politician :name ( name :op1 hans-christian :op2 str√∂bele )  )  :arg1 friday :arg2-of ( follow :arg1 public )  :op2-of ( and :arg1-of clear :op1 ( seek :arg0 ( country :mod-of ( political-party :name ( name :op1 green :op2 party )  :wiki green_party_of_the_united_states )  :name ( name :op1 usa )  :wiki united_states )  :arg2 ( letter :arg1-of ( open :arg0 former )  )  :arg4 ( person :arg1-of ( employ :arg0 ( organization :name ( name :op1 nsa )  )  )  )  :time current )  :op3 ( pass :arg0 this :arg2 ( and :op1 ( government-organization :arg0-of govern )  :op2 ( thing :name ( name :op1 federal :op2 parliament )  )  :op3 ( person :arg0-of ( prosecute :arg1 ( general :arg1-of ( public :arg0 federal )  :mod-of federal )  )  )  )  )  )
purport :arg1 ( word :arg0 letter :arg1 follow )
possible :arg1 concern
investigate :arg1 ( surveil :arg0 mass )  :arg1-of ( regard :arg0 you :arg1-of ( write :arg0 i :arg2-of ( invite :arg1 i )  )  )
and :op1 ( employ :arg0 i :arg1 ( person :name ( name :op1 edward :op2 joseph :op3 snowden )  )  :arg2 ( or :op1 contract :op2 ( hire :arg0 ( person :arg1-of ( expert :arg2 technical )  )  :arg1-of direct )  )  :time former )  :op2 ( government-organization :mod ( country :name ( name :op1 united :op2 states )  :wiki united_states )  :name ( name :op1 national :op2 security :op3 agency )  :wiki national_security_agency )  :op3 ( organization :name ( name :op1 defense :op2 intelligence :op3 agency )  )
believe :arg0 ( i :arg0-of ( create :arg1 ( duty :arg0-of ( act :arg1 ( service :beneficiary ( organization :mod this )  )  )  :arg1-of moral )  )  )  :arg1 ( i :arg0-of ( witness :arg1 ( violate :arg1 ( law :poss ( government-organization :arg0-of govern )  )  :mod systemic )  )  )
face :arg0 i :arg1 ( campaign :arg0-of ( force :arg1 i :arg2 ( family :op1-of ( and :op2 home )  )  )  :arg1 persecute :arg1-of sustain :op2-of ( and :op1 severe )  )  :arg2-of ( result :arg1 ( report :arg1 ( concern :mod this )  )  )
live :arg0 ( i :arg0-of ( grant :arg1 ( asylum :arg0-of ( accord :arg2 ( law :mod international )  )  :duration temporary :location ( country :name ( name :op1 russian :op2 federation )  :wiki russia )  )  )  )  :prep-in exile :time current
hearten :arg0 ( respond :arg0 beyond :arg1 ( act :arg1 ( express :arg1 both :mod politics )  :location ( and :op1 ( country :name ( name :op1 united :op2 states )  :wiki united_states )  )  )  )  :arg1 i
judge :arg0 ( citizen :location ( around :op1 world :op2 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 united :op2 states )  :wiki united_states )  :arg2 official )  :arg1-of high )  )  )  :arg1 ( revelation :mod-of ( system :arg1-of account :mod ( surveil :mod pervasive )  )  )  :arg2 ( service :mod public )
result :arg1 ( reveal :arg1 spy :mod this )  :arg2 ( propose :arg1 ( law :mod new )  :op1-of ( and :arg0-of ( address :arg1 ( abuse :arg1 ( trust :arg0 public )  :arg1-of conceal )  :time former )  :op2 policy :quant many )  )
claim :arg1 ( risk :arg1-of ( mitigate :arg1-of ( show :arg1-of ( clear :arg0 ( time :arg1-of same )  :arg1-of increase :arg2-of ( become :arg1 ( benefit :arg1 ( society :poss ( knowledge :arg1-of grow :mod this )  )  )  )  )  )  )  )
and :op1 ( continue :arg0 ( positive :domain ( outcome :poss effort )  :mod demonstrable )  :arg1 ( treat :arg1 dissent :arg2 defection :arg0 government-organization )  )  :op2 ( seek :arg0 ( government-organization :arg0-of govern )  :arg1 ( criminalize :arg1 ( speech :arg1-of ( charge :arg0-of ( provide :arg1 ( defend :polarity - )  )  :arg2 felony )  :mod politics )  )  )
crime :arg1 ( speak :arg1 truth )  :polarity -
confident :arg1 i :arg2 ( abandon :arg0 ( government-organization :arg0-of ( support :arg1 ( community :mod international )  )  :arg0-of ( govern :arg1 ( country :name ( name :op1 united :op2 states )  :wiki united_states )  )  )  :arg1 ( behave :arg1 harmful :mod this )  )
hope :arg0 i :arg1 ( possible :arg1 ( cooperate :arg0 i :arg1 ( regard :arg1 ( report :arg0 media :arg1 particular )  :arg1-of ( accord :arg2 law )  :manner ( regard :arg1 ( truth :op1-of ( and :op2 authenticity :op3 ( document :arg1-of appropriate )  )  )  :arg2 and )  )  :arg2 ( find :arg1 fact :arg1-of responsible )  )  :time ( resolve :arg1 ( difficulty :domain ( situation :mod humanitarian :mod this )  )  )  )
and :op1 ( thank :arg0 ( i :arg0-of ( speak :arg1 all :arg2 you )  :arg0-of ( resolve :arg1 situation )  :arg0-of ( uphold :arg1 ( law :arg0-of ( protect :location country )  :mod international )  )  :arg0-of ( look :arg1 forward )  )  :arg1 you :arg2 effort )
witness :arg0 ( person :name ( name :op1 hans-christian :op2 str√∂bele )  )  :arg1 ( person :name ( name :op1 edward :op2 snowden )  )
find :arg1 ( person :arg0-of ( buy :arg1 kindergarten )  :arg1-of private )
say :arg0 hand :arg1 winterlingen :arg2-of ( build :arg0 ( person :arg0-of ( have-org-role :arg1 mai :arg2 mayor )  :mod ' :name ( name :op1 michael )  :wiki michael_jackson )  :arg1 good )
sell :arg0 ( authority :arg1-of local )  :arg1 ( kindergarten :time former )  :arg2 ( person :arg0-of buy :arg1-of private )
consent :arg0 ( organization :name ( name :op1 town :op2 council )  )  :arg1 ( meet :time ( recent :degree most )  )  :arg2 sale :time meet :time ( open :arg2 public :polarity - )
change :arg1 hand :arg1-of ( price :arg1-of appropriate )  :arg1-of build
satisfy :arg0 ( authority :arg1-of local )  :arg1 ( person :name ( name :op1 &quot; )  )  :arg2 emphasise
add :arg1 ( organization :name ( name :op1 eur )  )  :arg2 ( budget :arg1-of local )
clear :arg0 it :arg1 ( use :arg0 ( person :arg0-of own :mod new )  :arg1 ( kindergarten :time former )  )  :polarity - :time yet
and :arg1-of ( build :arg0 ( upkeep :arg3-of ( pay :arg1 ( responsible :arg1 ( build :arg1 such )  :arg1-of ( hand-over :arg2 ( someone :mod ( else :mod-of ( before :op1 winter )  )  )  :polarity - )  :arg1-of ( consider :arg0 ( mayor :arg2-of have-org-role )  :arg2 ( decide :mod right )  )  :op1-of and )  :mod thus-far )  )  )  :op1 heat :op2 ( tend :arg2 garden )  :op3 ( clear :arg1 pavement )
say :arg0 ( person :arg1-of offload :arg2-of ( expend :arg0 this )  :name ( name :op1 &quot; )  )  :arg1 now :arg1-of glad
concert :arg1-of ( accompany :arg0 ( temperature :mod ( summer :arg1-of high )  )  )  :arg1-of ( open :arg0 air )
give :arg0 ( organization :name ( name :op1 hammereisenbach :op2 music :op3 society )  )  :arg1 ( concert :arg1-of open :mod air )  :destination ( hammer :arg1 ( thing :name ( name :op1 guest :op2 house )  :poss-of terrace )  )
read :arg1 thermomet :arg2 7 :arg3 ( degree :quant 25 )  :condition conductor :time ( raise :arg0 ( person :name ( name :op1 bianca :op2 willmann )  )  :arg1 baton )  :time still :time ( p.m. :location-of 30 )
enjoy :arg0 ( listener :quant 50 )  :arg1 ( sound :arg1 ( musician :mod ( thing :name ( name :op1 hammrich )  )  )  )  :quant around
provide :arg0 ( person :name ( name :op1 manuela :op2 honeck )  )  :arg1 ( explain :arg0 chairperson :arg1 ( accompany :arg1 piece )  )
succeed :arg1 ( manage :arg1-of ( help :arg0 all :arg1-of ( thank :arg0 ( person :name ( name :op1 honeck )  )  :arg2 do )  )  )
report :mod-of ( person :arg1-of ( campaign :arg0-of ( consider :arg1 ( dump :arg1 ( person :name ( name :op1 biden )  :wiki joe_biden )  :arg2 ( person :name ( name :op1 hillary :op2 clinton )  :wiki hillary_rodham_clinton )  )  )  )  :name ( name :op1 obama )  :wiki barack_obama )
say :arg0 ( person :arg1-of ( replace :arg0 ( person :arg0-of ( have-org-role :arg1 ( close :degree most :mod-of adviser )  :arg2 president )  :name ( name :op1 barack :op2 obama )  :wiki barack_obama )  :arg1-of ( consider :arg0 secret )  :arg1-of ( have-org-role :arg0 ( person :name ( name :op1 joe )  :wiki joe_paterno )  :arg2 ( president :mod vice )  )  :arg2 ( person :name ( name :op1 hillary :op2 clinton )  :wiki hillary_rodham_clinton )  )  :name ( name :op1 biden )  :wiki joe_biden )  :arg1 ticket :arg2 ( newspaper :name ( name :op1 the :op2 new :op3 york :op4 times )  :wiki the_new_york_times )  :time ( date-entity :year 2012 )
mean :arg1 ( down :arg1 ( change :arg1 game :op4-of ( and :op1 ( mark :arg1 ( bombshell :mod ( notable :mod most )  )  )  :op2 ( person :arg0-of ( anticipate :arg1 heavy :time ( date-entity :year 2012 )  )  :name ( name :op1 john )  :wiki - )  :op3 ( campaign :arg1 tome )  )  :time ( date-entity :year 2012 )  )  :arg1-of ( double :arg0 revelation )  )
hope :arg1-of wane :arg2-of ( elect :arg1 ( person :arg1-of bolster :arg2-of ( help :arg0 ( person :arg0-of ( gauge :arg1 wheth )  :arg1-of dump :name ( name :op1 biden )  :op3-of ( and :arg1-of ( poll :time late :time ( date-entity :year 2011 )  )  :op1 ( person :arg0-of ( conduct :arg1 top )  :arg0-of ( extensive :arg1 group )  :arg0-of ( have-org-role :arg2 aide )  :arg0-of ( have-org-role :arg1 that :arg2 president )  :op6-of ( and :op1 ( copy :arg1 of )  :op2 forthcoming :op3 book :op4 ( report :arg0 ( newspaper :name ( name :op1 the :op2 times )  :wiki los_angeles_times )  :arg1-of obtain :time evening )  :op5 thursday )  )  :op2 session )  :wiki joe_biden )  :arg1-of possible )  :name ( name :op1 obama )  :wiki barack_obama )  )
say :arg0 ( newspaper :name ( name :op1 the :op2 times )  :wiki the_times )  :arg1 ( and :arg1-of ( provide :arg0 book :arg2 ( politics :mod nation )  )  :op1 ( person :arg0-of ( have-org-role :arg1 inside :arg2 ( official :mod senior )  )  :arg0-of ( have-org-role :arg2 correspondent )  )  :op2 ( campaign :arg0 ( government-organization :arg0-of ( of :arg1 ( effort :arg1-of ( account :arg0 thorough )  )  )  :arg0-of ( measure :arg1 ( effect :arg0 ( government-organization :mod-of chief :name ( name :op1 white :op2 house )  :wiki white_house )  :arg1 ( swap :arg0 ( person :arg0-of ( have-org-role :arg1 state :arg2 secretary )  :arg0-of ( have-org-role :arg1 ( country :name name :wiki united_kingdom )  :arg2 ( president :mod vice )  )  :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :arg1 former )  :arg1-of poll :arg1-of bill )  )  :name ( name :op1 white :op2 house )  :wiki white_house )  :arg1 former )  :op3 staff )
and :op1 ( infrastructure :mod ( campaign :arg1 ( country :name ( name :op1 chicago )  :polarity ( close :manner-of ( guard :arg0 ( switch :mod potential )  :arg1 secret )  )  )  )  )  :op2 ( organization :name ( name :op1 oval :op2 office )  :op1-of inside )
and :op1 ( person :mod senior :name ( name :op1 david )  :op4-of ( and :op1 ( person :name ( name :op1 jim )  :wiki - )  :op2 messina :op3 former )  :wiki - )  :op2 ( person :arg0-of ( know :arg1-of ( change :arg1-of ( consider :arg0 ( government-organization :arg1-of ( have-org-role :arg0 ( person :arg0-of ( have-org-role :arg1 ( close :degree most :mod-of adviser )  :arg2 president )  :arg0-of campaign :name ( name :op1 obama )  :wiki barack_obama )  :arg2 chief :time former )  :name ( name :op1 white :op2 house )  :wiki white_house )  :manner under :mod ( only :mod-of ( half :mod-of dozen )  )  )  )  )  :name ( name :op1 david )  :wiki - )
show :arg0 data :arg0-of ( add :arg1 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :arg2 ticket )  :arg1 odds :arg1-of ( move :arg0 ( person :arg1-of ( down :arg1-of double :arg2 ( claim :arg1 ( effort :arg1-of spearhead )  :arg2 ( close :arg0-of ( personal :arg1 rapport )  )  )  )  :arg2-of ( replace :arg1 despite )  :name ( name :op1 biden )  :wiki joe_biden )  :arg1-of ( decide :arg0 ultimate :op1-of against :polarity - :time before )  :arg2 ( person :arg1-of ( improve :arg0 materially :arg2 ' )  :name ( name :op1 obama )  :wiki barack_obama )  )
confirm :arg0 ( person :name ( name :op1 daley )  )  :arg1 ( consider :arg1 ( replace :arg1 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :arg1-of administrate :arg2 ( person :name ( name :op1 biden )  :wiki joe_biden )  )  :prep-in fact )  :medium ( interview :arg0 ( person :name ( name :op1 martin )  )  :arg1 person )
tell :arg0 ( person :name ( name :op1 &quot; )  :op4-of ( and :op1 ( look :arg0 i :arg1 into :arg2 ( whole :mod-of bunch )  :degree about :mod vocal )  :op2 of :op3 thing )  )  :arg1 paper :arg2 they :arg3 1 :time this
cause :arg0 ( we :arg1-of ( resemble :compared-to interrogative )  )  :arg1 ( shape :arg0 we :arg1 ( president :arg2-of ( have-org-role :arg0 ( person :mod holy :name ( name :op1 christ )  :wiki christ )  )  )  :arg1-of ( remember :arg0 you )  :mod-of point :op1-of awful )
tell :arg0 diligence :arg1 ( publication :name ( name :op1 cnn )  :wiki cnn )  :arg1-of ( coop :arg0 ( family :arg0-of ( find :arg1 ( move :arg1 dividend :arg1-of poll :arg1-of ( while :arg1-of ( characterize :arg1-of research )  )  :arg1-of pay )  :arg1-of significant :arg1-of invest )  :name ( name :op1 anderson )  :wiki clan_anderson )  :arg1-of ( elect :arg1-of ( campaign :arg1-of make )  )  )
say :arg0 martin :arg1 ( thing :arg1-of ( do :arg0 ( campaign :arg1 ( money :arg1-of spend )  )  :arg0-of ( focus :arg1 group :arg1-of ( poll :arg0 of )  :arg2 unles :op1-of and )  :arg2 kind :polarity - )  :name ( name :op1 360 )  :name ( name :op1 ac-130 )  :wiki qihoo )  :arg2-of ( consider :arg0 they :arg1 something :mod serious )
know :arg0 ( person :name ( name :op1 obama )  :wiki barack_obama )  :arg1 ( clear :arg1 it :polarity - )  :arg1-of ( swap :arg0 team )  :arg1-of explore
tell :arg0 ( person :name ( name :op1 martin )  )  :arg1 ( ask :arg0 ( he :arg0-of ( know :arg1 ( shuffle :mod potential )  )  :poss-of then )  :arg2 ( person :arg0-of ( have-org-role :arg2 boss )  :name ( name :op1 daley )  )  )  :arg2 ( publication :name ( name :op1 cnn )  :wiki cnn )
say :arg0 ( he :arg0-of ( do :arg1 ( change :arg1 potential :arg1-of ( have-org-role :arg0 ( person :arg0-of ( admit :arg1 former )  :arg2-of staff )  :arg2 chief )  )  )  :arg0-of ( have-org-role :arg2 president )  :arg1-of while )  :arg1 ( think :arg1 ( know :arg0 ( person :name ( name :op1 obama )  :wiki barack_obama )  :arg1 ( possible :arg1 it )  )  :polarity - )
add :arg0 ( person :name ( name :op1 martin )  )  :arg1 that :arg1-of ( down :arg1-of double )  :arg2 ( politics :arg2-of ( answer :arg0 definitive :arg1 wheth :polarity - )  :arg2-of ( probe :arg0 ( person :arg0-of ( reach :arg1 desk )  :name ( name :op1 obama )  :wiki barack_obama )  )  )
ask :arg0 ( person :name ( name :op1 cooper )  )  :arg1 ( think :arg0 he :arg1 ( know :arg0 ( person :name ( name :op1 obama )  :wiki barack_obama )  :arg1 research :arg2 ( dump :arg0 about :arg1 ( person :name ( name :op1 biden )  :wiki joe_biden )  :arg2 ticket )  :polarity - )  :manner serious )  :arg2 ( person :name ( name :op1 martin )  )
possible :arg1 ( reply :arg0 ( person :name ( name :op1 &quot; )  )  )
happen :arg1 amr-unknown :arg1-of transit :arg2 e-mail :mode interrogative
electronic :mod-of ( mail :arg1 e-mail :op1-of short )
be :arg1 ( measure :arg1 ( maintain :arg1 ( privacy :mod correspondence )  :arg1-of ( resemble :arg2 that )  )  :arg1-of ( implement :arg0 ( service :mod tradition :mod postal )  :arg2 ( design :arg1 ( service :arg1-of ( base :location internet )  :mod this )  )  :mode interrogative )  :mod technical )
lay :arg1 ( focus :arg0-of ( communicate :arg1-of possible )  :arg0-of ( design :arg1 ( service :mod internet :mod early )  )  )
proof :mod-of ( exchange :arg1 ( mail :arg1 thu )  :arg1-of intercept :purpose-of ( create :arg1 ( foundation :arg1-of stable )  :arg2-of ( give :arg1 ( attend :polarity - )  :purpose ( develop :arg1 ( protocol :arg1-of underlie :mod technical )  )  )  )  )
resemble :arg1 ( email :domain-of ( more :arg1-of ( seal :mod-of letter )  )  :mod tradition )  :arg2 ( postcard :arg1-of ( open :arg0 ( this :mod-of reason )  )  )
email :arg0-of ( connect :arg1 computer :arg1-of direct :arg2 then )  :arg0-of pair :arg2 ( person :arg0-of use :arg0-of send-out )  :purpose interrogative
or :arg1-of ( send-out :arg0 first )  :arg1-of ( browse :arg0 ( person :name ( name :op1 anna )  )  )  :arg1-of ( mail :arg0 ( she :arg0-of ( mail :arg1 server )  :arg0-of ( provide :arg1 service )  )  )  :op1 ( program :mod email )
gmail :mod-of ( account :arg0 she :mod-of ( example :beneficiary-of ( company :domain this :name ( name :op1 google )  :wiki google )  )  )
send-out :arg0 ( server :mod mail :mod this )  :arg1 content :arg2 ( provide :arg1-of ( use :arg0 ( person :name ( name :op1 benni )  )  )  )
possible :arg1 ( pass :arg0 ( route :mod en )  :arg1 ( mail :arg1 internet )  :path ( number :mod any :quant-of ( server :mod other )  )  )
possible :arg1 ( call :arg0 ( person :name ( name :op1 benni )  )  :arg1 ( content :arg1-of provide )  :mod then )
be :arg0 interrogative :arg1 ( e-mail :arg1-of ( read :arg0 party :arg2 net )  :arg1-of journey :mod tradition )
read :arg0 ( majority :quant-of ( e-mail :poss-of ( recipient :direction-of ( robot :location route :mod software )  )  )  )  :arg1 several
contain :arg0 malware :arg1-of ( mail :arg2-of ( send :arg0 by :arg1 wheth :arg1-of ( provide :arg0 ' )  :arg1-of ( carry-out :arg0 an :arg1-of ( check :arg0 attachment )  :arg1-of general :arg2 out )  )  )
carry-out :arg1 ( check :arg2 virus )  :arg2 ( system :mod recipient )  :mod also
delete :arg1 ( or :arg1-of ( check :arg0 provide :location addition )  :op1 nuisance :op2 ( mail :arg1 spam :mod unwant )  )  :op1-of ( or :op2 ( sort-out :arg2 ( folder :mod spam )  )  )  :time immediate
robot :arg1-of ( task :mod other :mode interrogative )
advertise :arg1 such :arg1-of ( display :arg2-of ( require :arg0 ( company :name ( name :op1 google )  :wiki google )  :arg1 ( information :arg1-of ( identify :arg0 robot :mod also :time ( case :arg1 system )  )  )  )  )  :arg1-of ( base :location context )
possible :arg1 ( display :arg0 ( company :arg1-of ( link :arg1-of correspond :arg2 ( offer :arg1 holiday )  )  :name ( name :op1 google )  :wiki google )  )  :condition ( and :arg0-of ( communicate :arg1 ( travel :arg0 upcoming :arg1 holiday )  )  :op1 ( person :name ( name :op1 anna )  )  :op2 ( person :name ( name :op1 benni )  )  )
read :arg0 ( individual :arg1-of ( know :polarity - )  )  :arg1 e-mail :mod also :mode interrogative
probability :arg0-of ( read :arg1 ( mail :arg0 ( person :mod unauthoris )  :arg1-of ( low :degree extreme )  )  )
possible :arg1 theoretic
possible :arg1 ( read :arg0 ( person :arg0-of administrate )  :arg1 ( mail :arg0 ( company :op1-of within )  :arg1-of send :mod electronic )  )  :frequency often
e-mail :arg0-of ( service :arg1 secret :op2-of ( and :op1 ( authority :arg0-of ( intercept :arg1 ( note :arg1-of ( take :op1-of ( or :purpose-of ( authorisation :arg1-of legal :mod also )  )  )  )  )  :mod ( enforce :arg1 law )  )  )  )
possible :arg1 ( include :arg0 this :arg1 ( activity :arg1 spy :mod ( law :polarity - )  :mod potential )  )
read :arg1 ( protect :arg1 e-mail :arg1-of ( possible :arg1-of be :mode interrogative )  )
possible :arg1 ( protect :arg1 e-mail :arg1-of effective :arg2 read :manner ( use :arg0 encrypt :arg1 ( standard :mod ( thing :name ( name :op1 openpgp )  )  )  )  )
tell :arg1 ( communicate :arg1 ( effort :mod great :mod technical )  )  :arg1-of ( possible :condition-of ( conceal :arg1 ( metadata :instrument-of ( communicate :arg1 - :mod email )  )  :arg1-of ( possible :mod also )  )  :mod even )
and :op1 ( company :name ( name :op1 yahoo )  :wiki yahoo! )  :op2 ( company :name ( name :op1 google )  :wiki google )  :part-of ( country :location-of ( market :mod e-mail )  :mod ( amr-unknown :degree-of ( important :mode interrogative )  )  :name ( name :op1 germany )  :wiki germany )
say :arg0 ( study :arg1-of ( conduct :arg0 ( organization :name ( name :op1 convios :op2 consulting )  )  )  )  :arg1 ( play :arg0 ( and :op1 ( use :arg1 8 :arg1-of private )  :op2 ( company :name ( name :op1 yahoo )  :wiki yahoo! )  :op3 ( company :mod-of ( service :mod ( mail :arg1 ( date-entity :year 2013 )  )  :mod main )  :name ( name :op1 google )  :wiki google )  )  :arg1 ( role :mod minor :mod only )  )
manage :arg0 ( company :name ( name :op1 google )  :wiki google )  :arg1 ( number :arg1-of while :arg1-of ( account :arg0 ( newspaper :name ( name :op1 mail )  :wiki royal_mail )  )  :arg1-of ( fall :arg0 ( company :name ( name :op1 yahoo )  :wiki yahoo! )  )  )  :time ( recent :arg0-of ( grow :arg1 considerable )  )
steal :arg0 shallow :arg1 ( and :arg1-of ( bury :arg0 ( person :arg0-of ( have-rel-role :arg2 mother )  )  :arg2 ( grave :mod forest )  )  :op1 pension )
devise :arg0 ( man :source ( country :name ( name :op1 wolfsburg )  )  )  :arg1 plan :time ( die :arg1 ( person :arg0-of ( have-rel-role :arg2 mother )  :mod elderly )  )
and :arg3-of ( collect :arg1 pension :arg1-of ( continue :arg0 ( he :arg0-of ( bury :arg1 ( person :arg1-of decease )  :arg2 forest )  )  :op1-of and )  )  :source-of ( allowance :arg0-of care )
say :arg0 ( investigate :arg1 police )  :arg1 ( bury :arg0 wolfsburg :arg1 ( person :arg0-of ( have-rel-role :arg1 ( person :arg1-of ( reside :mod ( 67 :quant-of ( temporal-quantity :unit year )  )  :mod old )  )  :arg2 mother )  :location wood )  :condition ( continue :arg0 he :arg1 ( collect :arg1 pension :arg3 ( and :source-of ( allowance :arg0-of care )  )  :arg0 he )  :arg1-of possible )  )
and :op1 ( pocket :arg0 ( he :arg0-of ( cover :arg1 ( temporal-quantity :quant 89 :quant-of old :unit year )  )  :arg1-of die )  :arg1 money :arg2 ( and :op1 ( more :op1 year )  :op2 half )  :time then )
say :arg0 ( person :arg0-of ( have-org-role :arg2 spokesperson )  )  :arg1 ( face :arg0 67 :arg1 ( charge :arg1 year :arg2 fraud )  :prep-against old :time now )  :arg2 friday
state :arg0-of ( say :arg1 ( hide :arg0 man :arg1 woman :location ( forest :arg1-of ( near :arg2 ( country :name ( name :op1 helmstedt )  )  )  )  )  )
require :arg1 ( draw :arg0 fact :arg1 ( suspect :arg0 - :arg1 ( date-entity :month 5 )  )  :time ( time :mod that )  )  :arg2 ( medication :poss ( person :arg0-of ( have-rel-role :arg1 ( man :arg1-of ( suspect :direction back )  )  :arg2 mother )  :mod ( reliant :arg1-of ( care :arg0 already )  )  )  )
tell :arg0 pension :arg2 ( person :arg0-of ( investigate :arg1 ( travel :arg0 ( person :arg0-of ( have-rel-role :arg2 mother )  )  :arg4 ( country :name ( name :op1 spain )  :wiki spain )  )  )  )
and :op1 ( continue :arg1 ( investigate :arg0 ( person :arg0-of ( have-org-role :arg2 official )  :arg0-of ( find :arg1 strange )  )  :arg1 this )  )
discover :arg0 ( and :op1 ( person :arg0-of ( have-rel-role :arg2 son )  )  :op2 ( live :arg0 ( and :op1 ( person :arg0-of ( have-rel-role :arg2 mother )  )  )  :arg2 more :duration ( temporal-quantity :quant 15 :unit year )  :location ( reside :arg1 ( temporal-quantity :unit ( day :mod final )  )  :arg1-of same )  )  :op3 ( care :arg0 he :arg1 she )  )  :arg1 it
acknowledge :arg0 67 :arg1 ( die :arg1 ( person :arg0-of ( have-rel-role :arg2 mother )  )  )  :arg2 old :arg3 year :time final
say :arg0 police :arg1 ( show :arg0 autopsy :arg1 ( evidence :arg1 ( offence :mod capital :mod any )  )  :polarity - )
fancy :arg1 ( cream :arg1 ice :arg1-of ( dark :arg1-of glow )  )  :mode interrogative
glow :arg0 ( create :arg1 world )  :arg1 ( use :arg1 jellyfish :arg1-of ( dark :arg0 ( country :name ( name :op1 britain )  :poss-of entrepreneur :wiki united_kingdom )  )  :arg1-of ( cream :arg0 ice )  )
harness :arg0 ( person :arg0-of ( develop :arg1 ( snack :arg0 luminescent :arg1 ( animal :mod marine )  )  )  :name ( name :op1 charlie :op2 francis )  )  :arg1 ( property :mod fluorescent )
glow :arg0 ( protein :arg1-of ( recreate :arg0 ( country :name ( name :op1 china )  :wiki china )  :manner chemically :purpose-of ( read :arg0 ( he :arg1-of ( come :accompanier idea :time after )  )  :arg1 ( paper :mod research )  :op1-of ( and :op2 jellyfish :op3 convince :op4 scientist )  :op1-of after )  )  )
protein :op3-of ( and :arg0-of ( glow :arg1 it )  :arg1-of make :op1 ( eat :arg0 ( react :arg1 ( cream :arg0 ice )  )  )  :op2 ( raise :arg0 tongue :arg1 ( ph :mod-of level )  )  )
say :arg0 ( person :arg0-of ( react :arg1 more :arg2 ( heat :arg1-of ( mean :arg2 ( become :arg1 ( you :arg0-of ( lick :arg1 bright )  )  )  )  :poss mouth )  )  :name ( name :op1 chris )  )  :arg1 ( cream :arg1 ice )  :arg1-of ( cause :arg0 light )
contrast :arg1 ( stuff :arg2-of ( say :arg0 ( i :arg2-of ( found :arg0 i :arg1 deliciou )  )  :arg1 ( get :arg0 you :arg1 200 :arg1-of ( produce :arg0 ( term :mod ( early :mod-of ( day :unit-of temporal-quantity )  )  )  :arg2 stuff :degree very )  :arg2 about )  :arg2-of ( cream :arg0 company :arg1 ice )  :topic it )  :mod incredible )  :arg2 still
protein :arg1-of ( use :arg0 ( we :arg0-of ( cream :arg1 ice )  )  :arg1-of ( react :arg2 tongue :location ( ph :arg0-of neutral )  )  )
cause :arg1 ( and :op1 ( raise :arg1 ( level :arg1-of ( glow :arg0 ( cream :arg1 ice )  )  :mod ph )  :time ( protein :arg1-of ( warm :arg0 mouth )  )  )  )
glow :arg1 ( effect :arg1-of ( give :arg0-of ( cause :arg1 ( seem :arg1 ( perfect :arg1 ( share :arg2 halloween )  )  :op2-of ( and :op1 ( test :arg0 we :arg1 ( few :op1 ( temporal-quantity :unit month )  )  :time past )  )  )  )  )  :arg1-of wonderful :mod that )
cause :arg0 ( expensive :compared-to gold :degree more :domain ( luminescence :mod jellyfish )  :domain it )  :arg1 ( cream :arg0 i :arg1 ice :domain-of probable :mod ( expensive :degree ( most :poss-of 4 )  )  )
cause :arg0 140 :arg1 ( each :arg1-of ( cost :arg2 around )  :arg1-of ( scoop :arg2 i )  )
taste :manner ( good :degree pretty :domain it )
and :op1 ( person :arg0-of ( fame :arg1 it )  :arg1-of ( base :location bristol )  :arg2-of ( experiment :arg0 company )  :name ( name :op1 charlie )  )  :op2 ( beer :mod ( flavour :mod ( usual :polarity - )  )  )  :op3 cheese :op4 beef :op5 gold :op6 leaf
contrast :arg1-of ( create :domain-of ( ambitious :degree ( more :mod even )  )  :mod next )
say :arg0 ( he :arg0-of ( cream :arg1 ice )  :arg0-of ( want :arg0-of develop :arg1 really )  :arg1-of ( mean :arg0 i )  )  :arg1 invisible
contrast :arg2 ( reckon :arg0 ( i :arg0-of ( find :arg1 ( way :instrument-of ( do :arg0 inherent :arg1 we :arg1-of ( cause :arg0 ( refraction :arg1-of ( cause :arg0 ( crystal :arg2-of ( cream :arg1 ice )  :consist-of ice )  )  )  )  )  )  )  )  :arg1 it )
harness :arg0 ( cream :arg1 ice :arg1-of ( synthesize :arg0 ( scientist :mod ( country :name ( name :op1 china )  :wiki china )  )  )  )  :arg1 ( property :mod fluorescent :poss jellyfish )
point :arg1-of ( single :arg0 after :arg2-of ( match :arg1 ( day :unit-of ( temporal-quantity :quant 6 )  )  )  )  :arg2-of ( score :arg1 ( organization :name ( name :op1 tsv :op2 morsum )  )  :domain-of yet )  :location ( organization :name ( name :op1 handball :op2 association :op3 league )  )
and :op1 all :op2 ( possible :arg1 ehl )  :op3 ( celebrate :arg0 ( team :arg0-of ( match :arg1 tomorrow :op2-of ( against :op1 derby )  )  )  :arg1 ( week :mod last )  )
begin :arg0 season :arg1 afresh :arg2 ( match :mod this )
optimistic :op1 ( remain :arg1 ( person :arg1-of ( clear :arg0 we :arg1-of ( head :arg0 ( person :arg0-of comment )  )  )  :name ( name :op1 &quot; )  )  :arg3 ( hope :arg0 i :arg1 we :arg2 final :op1-of that )  :op1-of cautious )
injure :arg1 ( person :arg1-of ( except :arg0 ( he :arg1-of ( match :arg0-of ( available :arg1 final :arg2 ( squad :arg1-of complete )  )  :mod this )  )  )  :name ( name :op1 hendrick :op2 blohme )  )  :arg1-of long
emphasize :arg1 ( place :arg1-of resemble )  :arg2 ( play :mod ( tempo :arg1-of high )  )
keep :arg0 we :arg1 ( error :poss we )  :destination ( minimum :poss-of ( reason :mod this )  )
desire :arg0 ( play :arg1 cover-up :arg1-of ( improve :arg0 ( priority :mod top )  )  :arg2 we )  :arg1-of ( leave :arg2 much :time recent )
of :mod ( victory :mod first )  :op2-of ( against :mod season :op1 ( come :arg1 ( person :arg1-of ( coach :arg0 person )  :arg2-of ( relax :arg0 ( he :arg1-of ( follow :arg0 team )  )  :arg1 much :degree more )  :name ( name :op1 thomas )  :wiki - )  :purpose across )  )
capable :arg1 we :arg1-of match :arg1-of indicate
make :arg0 ( mean :arg1 derby :polarity - )  :arg1 favourit :example-of anything :purpose possible
win :arg1 ( streak :arg1-of ( start :arg0 ( person :arg0-of ( look :direction nonetheles :time now )  :arg1-of come :name ( name :op1 panitz )  )  :op2-of ( and :op1 ( good :location ( country :name ( name :op1 morsum )  )  )  )  :time thus-far )  )
play :arg0 ( person :name ( name :op1 jan-malte :op2 jodat )  )  :polarity -
celebrate :arg0 ( youth :mod-of ( thing :arg2-of ( play :arg0 ( thing :arg0-of ( play :arg1 youth )  )  :arg1-of ( activity :arg0 thu )  )  :mod ( team :mod league )  :name ( name :op1 hc :op2 bremen )  )  )  :arg1 season
recommend :arg1 ( stay :arg0 ( anyone :arg0-of ( fire :arg1 game :arg1-of ( resemble :arg2 this )  :polarity - )  )  :location home )
halloween :arg1-of number :mod-of ( 2013 :year-of date-entity )
magical :domain halloween :time ( little :domain i )
allow :arg1 ( and :op1 ( play :arg1 dress :arg2 neighborhood )  )  :arg2 ( eat :arg0 i :arg1 ( candy :arg1-of ( stay :op2-of ( and :op1 ( i :arg1-of ( have-rel-role :arg0 person :arg2 sister )  )  )  :time late )  )  )
become :arg0 i :arg1 more :arg2 scrooge :location nowadays
probable :op3-of ( and :op1 ( i :arg2-of ( give :arg0 past :arg1 ( 2 :quant-of ( temporal-quantity :unit year )  )  :arg1-of ( sign :arg0 i :polarity - )  :arg1-of ( candy :arg0 ( year :mod this :polarity - )  )  )  )  :op2 apartment )
contrast :arg1 stat :arg2 ( show :arg0 ( i :arg0-of ( black :arg1 sheep :time-of ( come :arg1 halloween )  )  )  :arg1 it )
say :arg0 ( organization :name ( name :op1 national :op2 retail :op3 federation )  )  :arg1 ( spend :arg0 ( majority :quant-of ( person :mod ( country :name ( name :op1 america )  :wiki united_states )  )  )  :arg1 ( and :op1 ( candy :arg1 6.9 )  :op2 ( costume :arg0 ( year :mod this )  )  :op3 decoration )  :arg3 ( total :arg1 fact )  :purpose-of ( celebrate :arg1 halloween )  )
halloween :mod every :op1-of ( forward :direction-of ( look :arg0 i :arg1 ( thing :quant 1 )  :arg2 trend )  )
say :arg0 ( organization :name ( name :op1 nrf )  )  :arg1 ( expect :arg1 ( account :arg0 ( costume :arg1 6.9 :arg1-of spend )  :arg1 ( monetary-quantity :unit dollar )  )  )
rage :arg1 ( object :mod inanimate :mod ( this :mod-of year )  :mod sexy )  :mod all
and :arg1-of ( resemble :arg2 ( food :mod ( sexy :mod also )  )  )  :op1 ( and :arg1-of ( possible :polarity - )  :op1 woman :op2 sexy :op3 professional :op4 anymore :op5 they )  :op2 pizza :op3 hamburger :op4 carrot
expect :arg0 ( i :arg0-of ( walk :arg1-of ( bet :arg0 ( i :op1-of ( and :op2 ( man :poss-of it )  )  )  )  :arg2 daft :arg2-of ( thank :arg0 lot :arg1 zombie )  :time-of punk :time-of dead )  :arg0-of ( see :arg1 ( space :arg1-of ( feed :arg0 we :arg2 ( year :mod this )  )  )  )  )  :arg1 ( we :arg1-of ( will :arg0 man )  )
say :arg0 ( company :name ( name :op1 google )  :wiki google )  :arg1 ( zombie :op2-of ( and :op1 ( high :arg1 ( costume :arg2 search )  :degree most )  :op3 batman :op4 pirate :op5 witch )  )
guess :arg0 ( i :arg1-of ( wrong :arg0 nothing )  )  :arg1 tradition
and :op1 ( dress :arg0 we :arg1 ( dog :poss we )  :arg2 ( amazement :op1-of ( alone :domain we :polarity - )  )  :time ( year :mod last )  )
say :arg0 ( organization :name ( name :op1 nrf )  )  :arg1 ( spend :arg0 ( person :mod ( country :name ( name :op1 america )  :wiki united_states )  )  :arg1 fact :purpose ( costume :arg1 ( year :mod this )  :arg2 pet )  )
ironic :quant ( lot :quant-of of :quant-of ( hotdog :quant dog )  :quant-of that )
screw-over :arg0 ( we :arg1-of ( come :arg2-of ( candy :arg0 it )  )  )  :arg1 around :arg2 -
say :arg0 ( organization :name ( name :op1 nielsen :op2 company )  )  :arg1 ( spend :arg0 ( person :mod ( country :name ( name :op1 america )  :wiki united_states )  )  :time ( year :mod this )  )
bar :arg0 dud :arg1 ( and :example-of ( bar :arg0 of :arg1 ( worth :domain that :domain ( 600 :op1-of around )  )  :manner hershey )  :example-of ( product :name ( name :op1 milk )  :wiki milk_[film] )  :example-of lollipop :op1 twizzler )
say :arg0 ( we :purpose-of ( take :arg0 ( country :name ( name :op1 u.s. )  :wiki united_states )  :arg1 neighborhood :arg2 ( or :arg1-of ( trick :arg1-of 41 )  )  :arg3 ( great :degree-of news )  :manner treater :op1-of ( over :domain that )  :time commerce )  )
and :op1 ( buy :arg0 ( we :arg0-of ( consume :arg1 ( chocolate :quant 90 )  :arg2 ( we :arg1-of kid )  :time halloween )  )  :prep-in fact )
say :arg0 ( we :arg0-of ( do :arg1 ( thing :quant 1 )  )  :arg0-of ( want :arg0-of candy :arg0-of ( consume :arg1 corn )  :arg1 ( and :op1-of ( and :op2 yet :op3 nearly :op4 35 )  )  :polarity - )  )  :arg1 confectioner :arg2-of ( sell :arg0 it :arg1 of :op1-of ( around :op2 halloween )  )
kernel :degree ( individual :domain ( that :domain-of 9 )  :example-of about :quant ( of :arg1 corn )  )
solve :arg0 ( i :poss-of ( mystery :poss it )  )  :arg1 yet
halloween :prep-with ( house :arg1-of ( haunt :arg0 nothing :arg2 more )  )
and :arg1-of ( shock :arg0 ( they :arg0-of ( wall :arg1 ( terrorism :arg0-of resemble :mod-of behind :name name )  )  :poss-of ( good :degree most )  )  )  :op1 ( thing :arg0-of ( actual :arg1 way :op1-of prison )  :name ( name :op1 they )  )
say :arg0 revenue :arg1 ( and :arg1-of ( include :arg2 that )  :op1 ( take :arg0 ( you :arg0-of ( nice :arg1 ( photo :arg1-of ( comment :arg1-of resemble :op2-of ( and :arg1-of ( face :arg0 ( company :name ( name :op1 facebook )  :wiki facebook )  )  :op1 ( leave :arg0 guy :arg1 ( see :arg0 you :arg1-of resemble :op2-of ( and :op1 then )  )  )  )  )  )  )  )  :arg1 down :op1-of ( and :arg1-of ( put :arg0 ( you :arg0-of ( pant :arg1 ( photo :arg1-of ( awesome :arg0 500 )  )  )  :arg0-of ( pee :arg1 mid )  )  :arg1-of ( have-rel-role :arg0 ( country :arg0-of ( haunt :arg1 ( generate :arg0 ( country :name ( name :op1 united :op2 states )  :wiki united_states )  :arg1 house :arg1-of ( sanction :arg0 official :arg1-of ( haunt :arg0 fact )  )  )  )  :name ( name :op1 america )  :wiki united_states )  :arg2 friend )  )  )  :polarity - )  )
let :arg0 final :arg1 ( talk :arg1 pumpkin )
introduce :arg0 ( person :name ( name :op1 brown )  :op2-of ( and :op1 ( person :name ( name :op1 charlie )  )  :op3 kid :op4 ( carve :arg0 ( we :arg0-of ( decorate :arg1 ( festival :mod-of tree :name ( name :op1 christmas )  :wiki christmas )  )  )  :arg1 o )  :op5 ( jack :arg0 we )  :op6 lantern :op7 ( do :arg0 we :arg1 something :arg2 little :arg2-of ( resemble :arg1 it )  :arg3 since )  )  :wiki gordon_brown )  :arg1 ( pumpkin :mod great )
cause :arg0 ( pinter :arg1-of ( thank :arg0 lucky :arg1-of ( start :arg0 ( they :arg1-of ( sit :arg1-of ( carve :arg1-of grow )  :arg2 ( gourd :mod this )  :polarity - )  )  :mod ( only :mod-of ( temporal-quantity :unit ( year :mod last )  )  )  :time ( trend :arg1 pumpkin )  )  :arg2 baby )  )  :arg1 ( of :degree most )
say :arg0 ( country :name ( name :op1 census :op2 bureau )  )  :arg1 ( spend :arg0 ( person :mod ( country :name ( name :op1 america )  :wiki united_states )  )  :arg1 pumpkin :arg2 around :time ( year :mod this )  )  :arg2 106 :arg4 ( country :name ( name :op1 u.s. )  :wiki united_states )
porch :arg0-of ( come :arg3 ( state :arg0-of ( grow :arg1 pumpkin :time ( year :mod this )  )  :name ( name :op1 illinois )  :wiki illinois )  :mod probable )  :arg4-of ( wither :condition-of ( jack :arg1 ( o :mod-of lantern )  )  :manner slow )  :mod front
and :op1 ( try :arg0 ( you :arg0-of ( look :arg1 pumpkin :arg1-of ( credit :arg0 extra )  )  :arg0-of ( call :arg1 ( person :name ( name :op1 tim )  :wiki - )  :arg2 and )  )  :arg0-of ( carve :arg1 pound )  :arg1 napa )
fire :arg0 ( government-organization :name ( name :op1 house )  :wiki united_states_house_of_representatives )  :arg1 ( retrieve :arg0 ( service :mod rescue )  :arg1 ( body :arg1-of char )  )  :location helmbrecht
call :arg1 ( service :mod ( fire :arg1 thursday )  :time evening )  :arg2 helmbrecht :time late
catch :arg0 ( house :location district :mod bedroom :mod 3 )  :arg1 fire :time night
retrieve :arg0 ( person :arg0-of work :arg1-of rescue )  :arg1 ( body :arg1-of char :source house )
find :arg0 ( service :arg0-of ( fire :arg1 helmbrecht )  :mod ( rescue :arg1 ( bedroom :mod-of ( house :mod 3 )  )  )  )  :arg1 ( body :arg1-of char )
say :arg0 ( person :arg0-of ( have-org-role :arg1 police :arg2 spokesperson )  :location ( country :name ( name :op1 bayreuth )  )  )  :arg1 ( live :arg0 ( person :mod this )  :arg1 ( clear :polarity - :time yet )  :location house :op1-of wheth )
break-up :arg0 fire :arg2 ( floor :location ground :part-of house )  :purpose thursday :time ( late :op1 evening )
burst :arg1 flame :time ( arrive :arg1 ( service :mod ( fire :arg1 window )  )  )  :time already
and :op1 ( enter :arg0 ( person :arg0-of work :arg1-of rescue )  :arg1 premise )  :op2 ( find :arg1 body :location bedroom :arg0 person )
and :op1 this :op2 ( bedroom :arg1-of ( burn :arg1-of complete )  :mod another )
suffer :arg0 ( floor :mod entire )  :arg1 damage :mod ground
continue :arg1 ( person :arg0-of ( have-org-role :arg1 police :arg2 spokesperson )  )  :arg2 ( person :arg0-of reside :arg0-of fire :mod other )  :location home :polarity -
habitable :arg1-of ( long :arg0 time :arg2 house :polarity - )
clear :arg1 ( cause :arg1 fire :manner precise )  :mod initial :polarity -
advertise :arg1 ( position :arg1-of ( have-org-role :arg2 minister )  :arg2-of ( launch :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 ( large :degree most :mod-of nation )  :mod church )  )  :arg1-of campaign
stand :arg1 thing :purpose-of ( halve :arg1 ( number :quant-of ( pastor :quant around )  :time current )  :arg1-of ( calculate :arg0 ( organization :arg1-of ( have-org-role :arg0 ( person :arg2-of ( short :arg1 ( date-entity :year 2030 )  :arg1-of possible :arg2-of ( come :arg1 this :time ( time :arg1-of same )  )  )  )  :arg2 minister )  :name ( name :op1 protestant :op2 lutheran :op3 regional :op4 church :op5 of :op6 hanover )  )  )  )
say :arg0 ( person :mod pastor :name ( name :op1 mathis :op2 burfien )  )  :arg1 ( and :op1 ( attract :arg1 career :degree very )  :op2 ( offer :arg0 ( person :mod young :time today )  :arg1 ( prospect :arg1 43 :mod good :time future )  )  )  :manner ( converse :arg1 ( organization :name ( name :op1 protestant :op2 press :op3 service )  )  )
determine :arg1 ( routine :arg0-of work )  :arg1-of ( possible :arg1-of ( attract :arg0 it )  )
theology :arg1-of ( study :arg0 ( person :mod young )  :arg2-of ( inspire :arg1 ( time :arg1-of ( work :arg1-of ( have-org-role :arg0 ( person :name ( name :op1 burfien )  )  :arg2 ( minister :arg1-of ( commission :arg0 ( church :mod region )  :duration time )  )  )  )  :mod full )  )  )
and :op1 few :quant-of ( person :arg0-of ( decide :arg1 ( study :arg0 level :arg1 theology :time ( after :op1 ( examine :arg0 few :arg1 equivalent )  )  )  :time present )  :mod young )
secularisation :op1 ( process :arg1 ( voice :mod-of ( quiet :mod-of ( world :mod-of loud )  )  )  :arg1-of ( put :arg0 ( person :name ( name :op1 burfien )  )  :arg2 ( person :name ( name :op1 god )  :wiki god )  :direction ( down :mod this )  )  :op1-of of )
and :op1 ( free :arg1 job :mod great )  :op2 variety
and :op1 master :op2 ( possible :arg1 ( turn :arg0 i :arg1 ( focus :arg1 ( important :prep-to i )  )  :arg2 schedule )  )
possible :arg1 ( pastoral :arg2-of ( work :arg0 person :arg3 person )  )  :arg2 ( person :arg0-of ( have-org-role :arg2 minister )  )
and :arg0-of ( live :mod good )  :op1 ( person :arg0-of teach )  :op2 ( possible :arg1 ( earn :arg0 they :arg1 much )  )
contrast :arg2 ( high :arg1 wage :manner ( sector :arg1-of private :mod-of ( hand :arg1-of ( employ :arg0 theologian :arg1-of secure )  :mod other )  )  )
contrast :arg0 ( just :polarity - )  :arg1 ( today :arg1-of ( suit :arg0 this :arg2 ( person :mod ( young :poss-of career )  :poss-of ( job :mod meaningful )  )  )  )
say :arg0 ( information :source ( country :arg2-of ( cover :arg0 60 :arg1 ( quarter :location ( country :name ( name :op1 lower :op2 saxony )  )  :quant 3 )  :op1-of every )  :name ( name :op1 regional :op2 church )  )  )  :arg1 ( retire :arg0 ( pastor :quant around )  :arg1 year )
begin :arg1 ( graduate :mod theology :quant ( around :op1 40 )  )  :arg2 vicar :time ( time :arg1-of same )
possible :arg1 ( difficult :domain ( fill :arg1 ( position :location ( area :arg1-of ( populate :degree sparsely )  :arg1-of outlying :example ( or :location-of such :op1 ( country :name ( name :op1 emsland )  )  :op2 ( country :name ( name :op1 wendland )  )  )  )  )  )  )  :time future
theology :arg1-of ( study :location ( face :arg1-of ( invite :arg0 ( person :arg0-of ( organize :arg1 ( temporal-quantity :unit day )  :time ( initiative :mod other )  )  :arg0-of ( want :arg2 ( person :arg0-of study :mod young )  :arg1 organize )  :name ( name :op1 burfien )  )  )  :mod famou )  )
offer :arg0 ( course :mod theology )  :arg1 ( train :arg1-of broad )
possible :arg1 ( become :arg1 ( you :arg0-of ( have-org-role :arg1 federal :arg2 president )  )  :arg3 ( degree :mod theology )  :mod even )
announce :arg0 ( series :arg0-of ( rally :arg1 ( car-make :name ( name :op1 land :op2 rover )  :wiki land_rover )  )  )
and :op1 ( seat :arg1-of ( race :arg0 interior )  )  :op2 ( belt :arg1 ( harness :arg1 ( point :mod 6 )  )  )  :op3 ( system :mod intercom )
include :arg1 ( and :op1 ( package :arg0-of ( provide :arg1 ( access :arg1 ( mechanic :mod ( organization :name ( name :op1 bowler :op2 works )  )  )  )  )  :consist-of service )  :op2 ( support :arg1 event :mod logistics )  :op3 ( storage :poss vehicle )  )  :arg2 ( option :arg1-of ( brake :arg1-of upgrade )  )
say :arg0 ( person :arg0-of ( rally :arg1 customer )  :arg0-of ( have-org-role :arg1 of :arg2 director )  :arg1-of change :arg1-of manage :arg1-of come :arg1-of bowl :name ( name :op1 drew )  )
contrast :arg1 ( look :arg0 person :arg1 racer :arg1-of ( experience :arg0 they :polarity - )  :op1-of ( and :op2 excitement :op3 adventure :op4 ( and :op1 achievable :op2 ( path :mod-of ( world :mod-of class )  )  :op3 event )  :quant all )  )
and :op1 ( car-make :arg1-of ( partner :arg0 path :arg3-of ( offer :arg0 ( we :arg0-of ( believe :arg1 ( and :arg1-of ( offer :arg0 format :arg3 new )  :arg1-of ( experience :arg0-of ( differ :arg1 way :arg3 ( rally :arg0 ( country :arg0-of ( prepare :arg1 and :arg3 entrant )  :arg0-of ( rally :arg1 ( and :arg0-of raid :op1 rigour :op2 reality )  )  :name ( name :op1 uk )  :op1-of ( and :op2 overseas )  :wiki united_kingdom )  :arg1 discipline )  )  )  )  )  :arg0-of delight )  :arg1 this )  )  :name ( name :op1 land :op2 rover )  :wiki land_rover )
enjoy :arg0 ( we :arg0-of ( develop :arg1 championship :arg3 really )  :arg0-of ( defend :arg1 ( challenge :arg0 car :arg1 fun )  )  )  :arg1 really
and :op1 ( world-region :location-of ( event :arg2-of ( compete :arg0 ( challenge :arg0-of ( provide :arg1 ( and :op1 ( train :time day )  :op2 test )  :mod additional )  :arg1 defend )  :arg1 option )  :location desert )  :name ( name :op1 north :op2 africa )  :wiki north_africa )  :op2 ( world-region :name ( name :op1 middle :op2 east )  :wiki middle_east )
stick :arg1 ( 50ft :arg1-of ( get :arg0 she :location ( above :op1 ( ground :arg1-of ( quarry :topic-of ( ledge :mod precarious )  )  )  )  :op1-of ( after :time-of ( rescue :arg1 ( puppy :arg1-of lose )  :arg1-of ( call :arg0 ( crew :arg1 fire )  )  )  )  )  )
run :arg0 ( she :arg0-of ( crash :arg1 road :mod minor )  )  :arg1 ( person :arg1-of cock :mod spaniel :name ( name :op1 ruby )  )  :time after
spot :arg0 ( walk :arg1 dog :arg1-of ( trap :arg2 quarry )  )  :arg1 she :time ( late :op1 ( temporal-quantity :quant 3 :unit day )  )
abseil :direction down :purpose ( pluck :arg0 ( face :mod cliff :part-of firefighter )  :arg1 dog :arg2 ( die :mod certain )  )
lift :arg0 ( she :arg0-of ( stick :arg1 50ft :arg2 ( ledge :mod cliff )  )  :arg0-of ( get :manner somehow )  )  :arg1 she :arg2 ( safe :arg1 precarious )  :arg2-of ( call :arg1 ( crew :arg1 fire :arg1-of ( escape :arg0 puppy :mod lucky )  )  :op1-of after )
quarry :arg1-of ( rescue :arg0 ( old :quant ( temporal-quantity :unit month )  )  :op2-of ( before :op1 ( temporal-quantity :quant 3 :unit day )  :time-of ( survive :arg0 nine :arg1 alone :op2-of ( and :arg1-of ( involve :arg2 ( crash :arg1 road :location sunday )  :op1-of ( after :time-of ( run :arg0 cock :arg1 ( ruby :mod spaniel )  )  )  )  :op1 afternoon )  )  )  )  :arg2 wednesday
and :arg1-of ( thank :arg0 ( person :arg0-of ( reunite :arg1 ( country :name ( name :op1 flappit :op2 quarry )  )  :arg2 ( person :name ( name :op1 ruby )  )  )  :arg1-of ( have-rel-role :arg0 person :arg2 girlfriend )  :name ( name :op1 becky :op2 hall )  )  :arg2 ( country :name ( name :op1 west :op2 yorkshire :op3 fire )  )  :op1-of ( and :op4-of ( and :op1 ( person :arg0-of ( own :arg1 she )  :mod ( country :name ( name :op1 west :op2 yorkshire )  )  )  :op2 ( person :name ( name :op1 scott :op2 alderson )  )  :op3 ( country :name ( name :op1 denholme )  )  )  )  )  :op1 ( service :mod ( rescue :arg0 25 :arg1 20 )  )
and :op1 ( search :arg0 ( they :poss-of dog )  :mod frantic )  :op2 ( post :arg1 ( appeal :arg1 site )  :arg1-of miss :time ( after :op1 ( run :arg0 she :arg1 ( quarry :arg1-of ( follow :arg2 ( accident :mod minor )  )  )  )  )  :arg0 they )  :op3 ( network :arg0 society )
strand :arg0 ( around :quant-of ( wednesday :arg1-of ( walk :arg0 dog :arg0-of ( spot :arg1 ruby :arg2 ledge :time 15pm :time quarry )  :arg1-of ( eye :arg2 eagle )  )  )  )  :arg1 50ft
and :op1 ( organization :name ( name :op1 cleckheaton :op2 fire :op3 station )  )  :op2 ( rush :arg2 scene :op1-of ( and :op2 ( rescue :arg0 pet :arg1 ( person :name ( name :op1 ruby )  )  )  :op3 ( use :arg0 ( team :arg0-of ( rescue :arg1 technical )  )  :arg1 tube :arg2 ( transport :arg1 she :degree cliff )  )  )  )
say :arg0 ( she :arg0-of ( have-org-role :arg1 ( rescue :arg0 specialist :arg1 technical )  :arg2 officer )  )  :arg1 ( situation :mod precarious )
and :consist ( middle :part-of ( face :mod cliff )  :poss ( she :arg2-of right )  )  :op1 top :op2 bottom
move :arg1 ( she :arg0-of muscle )  :time ( rescue :arg1 ( solid :arg1 she :arg1-of ( freeze :arg0 - )  )  )
contrast :arg2 ( fine :arg1 she )  :time now
eat :arg0 she :arg1 biscuit :time afterwards
call :arg2 out :domain this :mod ( usual :degree very :polarity - )
believe :arg1 ( fact :mod ( spot :arg1 dog )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( rescue :arg0 specialist :arg1 technical )  :arg2 officer )  :name ( name :op1 specialist )  )  :arg1 ( escape :arg0 ( person :name ( name :op1 specialist )  )  :arg1 lucky :arg2 very )
possible :arg0 potential :arg1 ( or :op1 ( injure :arg1 she :degree ( serious :degree very )  )  :op2 bad )  :compared-to-of there
and :op1 exhaustion :op2 ( dehydrate :arg0 ( vet :arg3-of ( take :arg1 ( person :arg1-of ( check :arg1-of fine )  :name ( name :op1 ruby )  )  :op1-of ( and :op2 ( find :arg1 other )  )  )  )  )
say :arg1 ( thing :arg1-of ( terrify :arg1-of ( rescue :arg0 ( company :name ( name :op1 halifax )  :wiki halifax_[bank] )  )  :arg1-of ( watch :mod ( world-region :name ( name :op1 west )  :wiki western_world )  )  )  :name ( name :op1 miss )  )  :arg2 ( county :name ( name :op1 yorkshire )  :wiki yorkshire )
possible :arg1 ( believe :arg0 i :arg1 ( place :poss she )  )  :polarity ( - :polarity-of there )
amaze :arg0 it :arg1 ( back :poss-of ( arm :part-of we )  )
say :arg0 vet :arg1 ( fall :arg1 ( and :op1 ( collapse :arg0 ( she :arg1-of ( become :arg2 ( exhaust :mod too )  )  )  )  )  :domain-of probable )
amaze :arg1 firefighter
dare :arg0 it :arg1 they :degree really
and :mod just :op1 ( grateful :domain we )  :op2 ( tremendous :arg1-of ( single :arg0 every )  :mod absolute )
add :arg0 ( person :name ( name :op1 mr )  )  :arg1 ( we :arg0-of ( scare :arg1 that :arg2 ( she :arg0-of fall :arg1-of ( possible :arg2-of ( contrast :arg1 ( stay :arg1 she :location there )  )  )  )  )  )  :arg2 ( country :name ( name :op1 mr )  )
brilliant :arg1 firefighter
believe :arg0 i :arg1 she :mod just :polarity -
say :arg0 ( person :name ( name :op1 mick :op2 jagger )  )  :arg1 ( hit :arg0 he :arg1 ( person :name ( name :op1 perry )  :wiki rick_perry )  :arg2 she )  :arg2 18
say :arg0 ( she :arg0-of ( sing :arg1 ( show :arg0 ( country :name ( name :op1 australia )  :wiki australia )  :arg1 radio :arg1-of interview )  :arg1-of back :time-of ( hard :arg1 ( die :arg1 song )  :time ( date-entity :year 2004 )  )  :time-of vocal )  :poss-of ( habit :mod old )  )  :arg1 ( star :arg1-of ( pop :arg0 ( week :mod this )  )  )
say :arg0 she :arg1 ( and :op1 ( person :name ( name :op1 perry )  :wiki rick_perry )  :op2 ( person :arg0-of ( have-org-role :arg2 veteran )  )  :op3 ( rock :arg0 ( he :arg0-of ( hit :arg1 i :arg2 i :mod-of 18 )  )  :arg1 dinner )  :op4 that )
add :arg0 she :arg1 ( kind :degree very )  :arg1-of ( long :arg0 ( he :op1-of and )  :mod-of ( time :mod that )  )
state :arg0 ( he :arg0-of ( say :arg1 70 )  :arg0-of ( deny :arg1 categorically )  :arg1-of ( make :arg0 ( he :arg0-of pass )  :time ever )  )  :arg1 thursday :arg1-of ( represent :arg0 ( person :name ( name :op1 perry )  :wiki rick_perry )  )
mean :arg1 perhaps :arg2 ( she :arg0-of ( add :arg1 rep )  :arg1-of ( confuse :domain-of ( someone :mod else )  )  )
appear :arg1 ( person :arg0-of ( sing :arg1 of )  :arg0-of ( tour :arg1 ( this :mod-of year )  )  :quant 1 )  :arg1-of ( stone :arg0 ( person :name ( name :op1 perry )  :wiki rick_perry )  )  :op1-of guest
album :mod new :poss ( she :arg0-of ( debut :arg1 1 :time ( week :mod this )  )  :poss-of prism )
give :arg0 ( break-up :arg1 ( continent :mod ( person :name ( name :op1 george :op2 kerevan )  )  :name ( name :op1 europe )  :wiki europe )  )  :arg1 ( choose :arg1 ( ethnic-group :name ( name :op1 scot )  :wiki scottish_people )  )
day :mod ( another :mod-of ( story :mod ( scare :arg1 ( depend :polarity - )  )  :mod another )  )
warn :arg0 we :arg1 ( require :arg0 ( membership :mod ( organization :name ( name :op1 eu )  :wiki european_union )  :mod-of condition )  :arg1 ( join :arg0 ( country :arg0-of ( depend :polarity - )  :name ( name :op1 scotland )  :wiki scotland )  :arg1 ( zone :arg1-of ( travel :arg1-of ( free :arg1-of wide )  )  :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  )  )  :time ( time :mod this )
and :op1 ( control :arg0 ( story :arg1-of wall )  :arg1 passport )  :op2 ( barb :arg1 ( wire :arg1 ( border :arg1 along )  )  )
point-out :arg0 ( paper :arg0-of ( figure :arg1 that :arg2 headline )  :mod ( country :name ( name :op1 strathclyde )  )  )  :arg1 ( benefit :arg0 ( movement :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :arg1-of ( free :arg0 - )  )  :arg1 rest :arg1-of possible :mod economy )  :manner ( true :arg1 predictably )
point :arg0 anyone :arg1 ( spend :arg0 ( state :arg0-of ( bend :arg1 ( rule :arg0-of suit :mod formal :poss time )  )  :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  :arg2 member )  )  :degree much )
offer :arg0 ( country :arg0-of ( comply :arg1 ( continue :arg0 since :arg1 area :arg1-of concede :arg1-of cheap :time now )  :polarity - )  :name ( name :op1 scotland )  :wiki scotland )  :arg1 ( return :arg1 whatever :arg1-of ( want :arg0 it :polarity - :time really :time-of ( ethnic-group :name ( name :op1 scot )  :wiki scottish_people )  )  )  :location ( city :name ( name :op1 brussels )  :wiki brussels )
cause :arg0 then :arg1 ( story :polarity - )
cause :arg0 ( and :op1 ( become :arg1 it :arg2 ( i :arg0-of ( hear :arg1 ( control :arg0 passport :arg1 canard :arg1-of mean :arg1-of ( depend :polarity - )  :example ( temporal-quantity :unit year )  :example 40 )  )  )  :location fossilise )  )  :arg1 ( long :arg1 tooth )
whiskery :arg1-of ( interest :arg2 ( point :arg1-of ( lose :arg2 this )  :manner yet )  )  :mod-of ( tale :mod old )
bid :arg0 ( country :arg0-of ( expect :arg1 interrogative )  :arg1-of ( depend :arg0 ( recommend :arg1 anyway )  :polarity - )  :name ( name :op1 scotland )  :wiki scotland )  :arg1 ( continent :name ( name :op1 europe )  :wiki europe )
yoke :location ( city :arg1-of ( trade :time-of ( city :location-of ( especially :mod-of ( now :time-of interrogative )  )  :name ( name :op1 brussels )  :wiki brussels )  )  :name ( name :op1 london )  :wiki london )
stall :arg0 ( news :location here :mod real :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :arg1-of ( unite :arg1-of ( plan :mod great :time ( post :op1 war )  )  )  :time final
project :arg0 ( monetary-quantity :op1 official :poss-of crisis :unit euro )  :arg1 ( continent :name ( name :op1 europe )  :wiki europe )
or :arg2-of ( dedicate :arg0 ( party :arg0-of ( gain :arg1 ground )  )  :arg1 ( oppose :arg0 ( organization :name ( name :op1 eu )  :op1-of across :wiki european_union )  :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  )  )  :op1 ( scrap :arg1 ( monetary-quantity :unit euro )  :arg2 ( currency :mod common )  )
thus-far :arg1-of ( elect :arg0 federal :arg2 ( free :arg0 ( political-party :name ( name :op1 lib :op2 dems )  :wiki liberal_democrats )  :arg1 ( we :arg1-of ( come :arg0 ( year :mod ( this :mod only )  )  )  )  :arg1-of ( knock-down :arg0 effective )  :arg2 equivalent :arg2-of ( vote :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 5 :arg2-of ( found :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 alternative :mod even )  :arg2-of ( grab :arg0 nowhere :arg1 nearly )  )  :mod-of democratic_party_[united_states] )  :time ( date-entity :month 9 )  )
create :arg1 ( continent :mod federal :name ( name :op1 europe )  :wiki europe )  :arg1-of ( plan :arg1-of ( oppose :mod domestic :time always )  )
prove :arg0 ( crisis :mod economy :time current )  :arg1 watersh
impose :arg1 ( straitjacket :arg2-of ( couple :arg1 ( austerity :arg0-of ( think :arg1 ( go :arg0 ( continent :arg1-of project :name ( name :op1 europe )  :wiki europe )  :arg4 ( far :degree too )  )  :arg1-of adhere :arg2-of ( lead :arg1 ( currency :mod common )  )  :instrument ( person :quant many )  )  :arg1-of ( impose :arg0 ( and :op1 ( organization :name ( name :op1 european :op2 central :op3 bank )  )  )  :degree ( city :name ( name :op1 berlin )  :wiki berlin )  )  )  )  )  :arg2 ( economy :mod nation )
excessive :arg0 ( government-organization :arg0-of ( run :arg1 deficit :arg2-of ( do :arg0 ( crisis :location ( monetary-quantity :unit euro )  )  :arg1 ( true :mod-of that )  )  )  :arg0-of ( govern :arg1 ( country :name ( name :mod only :op1 greece )  :wiki greece )  )  :mod nation )  :arg2 little :mod-of budget
lock :arg0 ( system :mod ( monetary-quantity :unit euro )  )  :arg1 rather :arg2 ( rate :mod exchange :mod ( favourable :prep-to ( person :arg0-of export :mod ( country :name ( name :op1 germany )  :wiki germany )  )  )  )  :arg3 ( person :arg0-of ( have-org-role :arg1 ( country :mod-of ( politician :arg0-of ( want :arg1 ( keep :arg1 something )  )  )  :name ( name :op1 germany )  :wiki germany )  :arg2 member )  )
find :arg0 ( continent :mod ( south :part-of ( country :name ( name :op1 germany )  :wiki germany )  )  :name ( name :op1 europe )  :wiki europe )  :arg1 ( disadvantage :arg1 productive :arg1-of build )  :manner ( possible :arg1 ( devalue :arg1 ( currency :mod domestic )  )  )
and :op1 ( slash :arg0 ( recourse :mod only )  :arg1 wage )  :op2 ( spend :arg0 public :arg1-of ( spur :arg0 ( city :name ( name :op1 berlin )  :wiki berlin )  )  )
lie :arg0 ( and :op1 ( problem :topic currency )  :op2-of ( beyond :op1 ( budget :time current )  )  )  :arg1 ( malaise :arg1-of deep :arg1-of ( productive :arg0 ( continent :name ( name :op1 europe )  :wiki europe )  )  )
result :arg1 ( policy :arg1-of ( code :arg0 ( city :location-of ( and :op1 ( country :arg0-of ( expend :arg1 ( much :quant-of gas )  :arg2 ( consume :arg0 subsidise :arg1 electricity )  )  :mod-of energy :name ( name :op1 germany )  :wiki germany )  :op2 firm :op3 ( pay :arg0 ( industry :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  :arg1 much :arg2 ( and :op1 4 :op2 ( country :name ( name :op1 united :op2 states )  :wiki united_states )  )  )  )  :name ( name :op1 brussels )  :wiki brussels )  )  :arg1-of green :arg1-of ( impose :arg0 energy :arg2 france )  )
see :arg0 ( we :arg0-of ( disadvantage :arg1 ( cost :arg1 that :arg1-of cripple )  )  )  :arg1 already
wage :arg0 ( country :arg0-of ( cheap :arg1 gas :time ( by :arg1-of hammer )  )  :arg0-of ( stop :arg1 ( industry :mod petrochemical :quant all )  :location ( continent :name ( name :op1 europe )  :wiki europe )  :polarity - )  :mod-of shale :name ( name :op1 us )  :wiki united_states )  :arg1 ( freeze-over :arg1 world )
result :arg1 ( revolt :arg1 especially :arg1-of ( cheerlead :arg0 ( organization :name ( name :op1 eu )  :wiki european_union )  :mod main )  :arg1-of once :arg1-of ( brew :arg0 ( country :name ( name :op1 france )  :wiki france )  )  )
equal :arg1 ( bill :arg1-of ( give :arg2 ( city :name ( name :op1 paris )  :wiki paris )  :op2-of ( and :op1 ( keep :arg0 ( city :name ( name :op1 washington )  :wiki washington,_d.c. )  :arg1 ( country :arg0-of ( check :arg1 france )  :name ( name :op1 germany )  :wiki germany )  :purpose-of ( vehicle :arg2-of ( see :arg0 ( elite :mod politics )  :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  :time ( after :op1 war )  )  )  )  )  )  )  :compared-to world
contrast :arg1 france :arg2 ( and :op1 passport :op2 ( legitimacy :mod politics )  :op3 ( impose :arg0 ( city :arg0-of ( need :arg1 ( city :name ( name :op1 paris )  :wiki paris )  )  :name ( name :op1 berlin )  :wiki berlin )  :arg1 ( policy :location ( continent :name ( name :op1 europe )  :wiki europe )  :mod economy )  :purpose ( leave :arg1 ( economy :arg1-of batter )  :arg2 ( struggle :arg1 - )  )  )  )
mean :arg1 ( result :arg1 ( right :arg0 ( military :arg0-of ( rule :arg1 socialist :arg2 third )  :arg0-of ( pen :arg1 le )  :name ( name :op1 marine )  :wiki united_states_marine_corps )  :arg1 wing :arg2 ( oppose :arg0 ( organization :arg0-of ( win :arg1 crucial :arg2 ( elect :arg0 by :arg1 place :arg2 ( knock-down :arg1 into )  )  :mod just )  :mod-of nation :name ( name :op1 eu )  :wiki european_union )  :arg1 front )  :mod ' )  )
favor :arg0 ( political-party :arg0-of ( split :arg1 they )  :arg0-of ( warn :arg1 that :arg1-of ( timely :arg2 ( vote :arg0 of :arg1 ( monetary-quantity :unit cent )  :arg2-of ( popular :arg0 front :arg1 ( party :mod ( country :mod-of 24 :name ( name :op1 france )  :wiki france )  )  :mod most :time now )  )  )  )  :arg0-of ( assume :polarity - )  :mod ( country :name ( name :op1 britain )  :wiki united_kingdom )  :name ( name :op1 labour )  :wiki labour_party_[uk] )  :arg1 automatic :mod right :time leave
do :arg0 ( person :name ( name :op1 le :op2 pen )  :poss-of ( popularity :mod ( newfound :poss france )  )  )  :arg1 amr-unknown :arg2 ( class :arg0-of ( work :arg1 white )  )  :mode interrogative
create :arg0 ( she :arg0-of ( want :arg1 ( use :arg0 ( organization :name ( name :op1 european :op2 parliament )  :wiki european_parliament )  :arg1 next )  )  )  :arg1-of ( oppose :arg0 ( organization :arg0-of ( oppose :arg1 ( common :mod-of bloc :mod-of currency :mod-of across )  )  :name ( name :op1 eu )  :wiki european_union )  )  :arg2-of ( elect :arg0 year :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  )
possible :arg1 ( dominate :arg0 ( bloc :mod such )  :arg1 ( organization :name ( name :op1 european :op2 parliament )  :wiki european_parliament )  :condition ( party :arg0-of ( oppose :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  )  :arg1-of ( elect :arg1-of ( possible :degree very )  :mod this )  )  :purpose time )
and :op1 ( oppose :arg0 ( i :arg0-of ( feel :arg1 currency )  )  :arg1 ( grow :arg0 soon :arg1 sometime :location ( here :location-of point )  )  )  :op2 ( oppose :arg0 ( organization :arg0-of ( kill :arg1 ( monetary-quantity :unit euro )  :arg1-of ( coalesce :location ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :name ( name :op1 eu )  :wiki european_union )  :arg1 common )
contrast :arg1 ( disappear :arg0 ( organization :name ( name :op1 eu )  :wiki european_union )  :arg1 ( general :mod-of de )  :polarity - )  :arg2 ( revert :arg0 it :arg1 ( something :arg1-of ( resemble :arg2 ( loose :arg0 of :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :arg2 sovereign )  )  :mod more )  )
contrast :arg1 ( keep :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 ( monetary-quantity :unit euro )  :arg1-of possible )  :arg2 ( revive :arg0 ( country :name ( name :op1 france )  :wiki france )  :arg1 currency :op2-of ( and :op1 ( few :quant-of ( economy :mod satellite )  )  )  :op2-of ( and :op1 ( continent :mod south :name ( name :op1 europe )  :wiki europe )  )  )
expect :arg0 i :arg1 ( distance :arg1 ( country :arg0-of hope :name ( name :op1 uk )  :wiki united_kingdom )  :arg2 ( project :mod this :mod ( country :name ( name :op1 us )  :wiki united_states )  )  )
suggest :arg0 ( ocean :name ( name :op1 pacific )  :wiki pacific_ocean )  :arg1 ( interest :arg0 ( city :name ( name :op1 washington )  :wiki washington,_d.c. )  :arg1 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :arg1-of grow :arg2 ( ocean :name ( name :op1 atlantic )  :wiki atlantic_ocean )  )  :arg2 cold
leave :arg0 this :arg1 ( country :name ( name :op1 scotland )  :wiki scotland )  :mode interrogative
possible :arg0 essential :arg1 ( choose :arg0 we :arg1 ( region :part-of ( country :mod ( country :name ( name :op1 little )  )  :name ( name :op1 england )  :wiki england )  )  )
and :arg1-of ( tell :arg1-of ( include :arg0 ( interest :arg1-of ( defend :arg0 we :arg1-of ( possible :op1-of or )  )  :mod economy :poss we )  )  :arg2 ( city :name ( name :op1 berlin )  :wiki berlin )  )  :op1 ( city :name ( name :op1 brussels )  :wiki brussels )
loose :arg1 ( arrange :arg0 ( country :arg0-of ( do :arg1-of ( possible :arg1-of ( suspect :arg0 i )  )  :mod inside )  :name ( name :op1 scotland )  :wiki scotland )  :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :arg1-of ( provide :arg0 ( we :arg0-of ( keep :arg1 ( currency :poss we )  )  )  )  )
resemble :arg1 ( country :mod other :poss-of ( operation :arg1-of ( easy :manner ( continent :mod ( federal :polarity - )  :name ( name :op1 europe )  :wiki europe )  )  :mod co )  )  :arg2 mind
recommend :arg1 ( consider :arg0 we :arg1 ( emulate :arg1 ( country :name ( name :op1 norway )  :wiki norway )  :op1-of ( and :op2 ( retain :arg0 we :arg1 ( depend :mod economy :polarity - )  )  )  )  :mod otherwise )
and :op1 ( oppose :arg0 ( political-party :arg0-of ( win :arg1 spectacular :time ( date-entity :year 2011 )  )  :arg0-of ( oppose :arg1 ( succeed :arg1 ( politics :arg0-of ( movement :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  )  :mod austerity )  :arg1-of ( remarkable :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 scotland )  :wiki scotland )  )  )  )  :mod most )  )  :name ( name :op1 snp )  :wiki scottish_national_party )  :arg1 of :op1-of ( and :arg1-of ( implement :arg0 ( political-party :name ( name :op1 labour )  :wiki labour_party_[uk] )  )  :op2 ( propose :arg1 majority :arg1-of cut )  )  )  :op2 chancellor :op3 darl :op4 subsequent :op5 ( political-party :name ( name :op1 tory )  :wiki conservative_party_[uk] )  :op6 ( political-party :name ( name :op1 lib :op2 dem )  :poss-of coalition :wiki liberal_democrats )
impose :arg0 ( and :op1 ( city :name ( name :op1 brussels )  :wiki brussels )  )  :arg1 ( austerity :arg1-of ( accept :arg0 ( country :arg0-of ( vote :arg0-of ( ridiculous :arg1 it :time now )  :arg1 ( depend :mod only :polarity - )  )  :name ( name :op1 scotland )  :wiki scotland )  )  )  :degree ( city :name ( name :op1 berlin )  :wiki berlin )
puberty :manner-of ( grow-up :manner soon :mod-of old )  :mod early
show :arg0 research :arg1 ( tend :arg0 ( white :mod-of counterpart )  :arg1 girl :arg2 ( reach :arg0 ( and :op1 ( thing :name ( name :op1 african-american )  )  :op2 hispanic )  :arg1 puberty :time early )  )
mean :arg1 puberty :arg2 ( do :arg0 physical :arg1 ( change :arg1 imminent )  )  :polarity -
evidence :arg1 ( or :arg1-of blame :arg1-of hormon :part chemical )  :arg2 other :polarity -
think :arg0 ( person :arg1-of expert )  :arg1 ( possible :arg0 early :arg1 ( trigger :arg0 ( epidemic :mod obesity )  :arg1 puberty )  )
puberty :arg0-of ( pronounce :arg1 ( trend :arg1 early )  :arg2 boy :polarity - )
and :arg1-of ( specialize :arg0 journalist :arg2 ( child :arg1-of ( have-org-role :arg0 ( former :mod-of ( publication :name ( name :op1 cnn )  :wiki cnn )  )  :arg2 correspondent )  )  )  :op1 health :op2 ( issue :arg0 family )
recommend :arg1 ( alarm :arg1 ( person :arg0-of ( begin :arg1 ( sprout :arg0 ( person :arg0-of ( bud :arg1 breast )  :arg0-of ( have-rel-role :arg1 pubic :arg2 daughter )  )  :arg1 ( and :op1 hair )  )  )  :arg0-of ( have-rel-role :arg2 mother )  :op1-of ( or :op2 7 :op3 8 )  )  :mode interrogative )
explain :arg0 ( person :mod pediatrics :mod dr. :name ( name :op1 paul :op2 kaplowitz )  )  :arg1 ( and :op1 girl :op2 ( represent :arg0 ( change :arg0 endocrinologist :arg2 ( state :name ( name :op1 florida )  :wiki florida )  :domain-of ( common :mod quite )  :mod physical :mod this :time early )  :arg1 ( norm :mod new )  )  )  :time ( conference :location ( city :name ( name :op1 orlando )  :wiki orlando,_florida )  :time ( week :mod this )  :topic ( thing :name ( name :op1 american :op2 academy :op3 of :op4 pediatrics )  )  )
say :arg0 ( i :arg0-of spend )  :arg1 ( person :arg1-of ( have-rel-role :arg0 ( person :arg1-of ( reassure :arg0 lot :arg2 ( progress :arg0 rapid :arg1 into :arg2 full :arg2-of ( signal :arg0 usual :arg1 puberty :mod this :polarity - )  )  :time ( time :mod of )  )  )  :arg2 parent )  :name ( name :op1 &quot; )  )
and :arg1-of ( appear :location girl :time soon )  :op1 ( breast :arg1 such :arg1-of ( bud :arg0 obviou )  :arg2 body :op1-of ( and :example-of ( sign :mod ( develop :arg1 underarm )  )  :op2 hair )  )  :op2 pubic :op3 odor
contrast :arg1 ( 4 :quant-of ( temporal-quantity :op1-of past :unit decade )  )  :arg2 ( shift :arg1 ( age :arg0 period :arg1 menarche )  :mod only :mod slight )
age :arg0 ( country :name ( name :op1 united :op2 states )  :wiki united_states )  :arg1 ( temporal-quantity :op1-of down :unit year )  :arg1-of ( average :arg0 ( date-entity :year 1970 )  )
say :arg0 menarche :arg1 ( girl :arg0-of ( mean :arg1 ( common :mod this )  :arg2 ( guide :arg0 ( person :arg0-of ( author :arg1 of )  :mod also )  :arg1 ( cop :arg1 problem )  )  :time ( early :mod-of puberty )  )  )  :arg2 ( person :name ( name :op1 &quot; )  )  :arg2-of ( breast :arg0 once :arg1 ( take :arg0 it :arg1 least :arg1-of develop :arg1-of begin :arg2 2 )  )  :time ( before :quant ( temporal-quantity :quant 3 :unit year )  )
puberty :arg0-of progress :arg2-of ( test :arg0 time :arg1 ( accurate :degree most )  )
contrast :arg1 it :arg2 ( consider :arg1 ( accompany :arg1 enlargement :arg2 ( grow :arg1 ( spurt :arg1 ( age :arg1 ( debate :arg1 ( amr-unknown :arg1-of about :arg1-of ( constitute :arg2 ( actual :arg1 onset :arg2 puberty )  )  )  )  :arg2 8 )  :arg2 before )  )  )  :arg2 ( precociou :part breast )  )
or :op1 ( slow :arg1 process :manner down :time ( case :quant most )  )  :op2 ( stall :arg1 ( something :arg1-of ( monitor :arg0 pediatrician :arg1-of possible :manner close )  )  )
warrant :arg1 ( test :arg0 ( progress :arg1 such :manner ( rapid :degree more )  )  :arg1 ( rule :arg0 endocrinologist :arg1 ( problem :example ( or :op1 tumor :op2 cyst )  :mod serious )  )  )  :arg1-of possible
bone :arg0-of ( lead :arg1 ( and :op1 ( short :op3-of ( and :arg1-of treat :op1 ( delay :arg1 ( mens :mod early )  )  :op2 ( ward-off :arg1 ( consequence :arg1-of ( age :degree premature )  :mod another )  )  )  )  )  :arg1-of ( possible :mod ultimate )  :arg2 ( grow :arg1 adult :arg1-of stunt )  )
age :arg0 ' :arg2 ( child :arg1-of ( base :arg0 ( or :op1 recommendation :op2 drug :op3 hormone :op4 therapy )  )  :arg1-of ( grow :op2-of ( and :op1 ( develop :arg1 rate :mod of )  :op3 rate :op4 ( emotional :arg1 maturity )  )  )  )
important :domain ( aspect :mod psychosocial )  :location too
contrast :arg1 medication :arg2 ( and :arg1-of possible :op1 behavioral :op2 ( issue :arg1-of alleviate )  :op3 ( girl :arg0-of ( differ :arg1 ( from :op1 peer )  )  )  :op4 ( feel :arg0 ( person :arg0-of ( acknowledge :arg1 ( suppress :arg1 puberty )  )  :arg0-of ( cautious :arg1 with )  :name ( name :op1 kaplowitz )  )  :arg1 of )  )
mean :arg1 ( issue :arg1-of ( understand :arg0 other )  :mod big )  :arg2 ( do :arg0 ( person :arg0-of ( want :arg1 very :polarity - )  :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( have-rel-role :arg1 period :arg2 daughter )  :mod young )  :arg2 parent )  )  :arg1 simple )
say :arg0 ( or :arg2-of ( risk :arg0 ( they :arg0-of ( worry :arg2 about )  )  :arg1 amr-unknown )  :op1 of :op2 pregnancy :op3 even )  :arg1 ( person :name ( name :op1 &quot; )  )  :arg2-of ( handle :arg0 they :arg1 hygiene )
recall :arg0 ( it :arg0-of ( shock :arg1 10 )  )  :arg1 woman :arg2 ( person :arg0-of ( start :arg1 period )  :arg0-of ( have-rel-role :arg1 she :arg2 daughter )  )  :arg3 1
menstruation :arg1-of ( talk :arg0 ( we :mod-of - )  :arg2-of ( prepare :arg0 even :arg1 she :manner emotion )  :op2-of ( and :op1 sign )  )
upset :arg0 school :op2-of ( and :op1 ( scare :arg0 home :arg0-of ( come :arg1 she )  :arg1 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )
cause :arg0 ( lot :quant-of ( theory :arg1-of ( publicize :manner well )  )  )  :arg1 ( puberty :mod precociou )
evidence :arg0 ( body :mod-of hormon )  :arg1 ( or :arg1-of ( blame :arg0 media )  :op1 environment :op2 sexual :op3 message )  :arg2 ( or :op1 milk :op2 ( other :mod-of ( food :mod-of chemical )  )  )  :arg2-of ( consistent :arg0 there :arg1 yet :polarity - )
hit :arg0 boy :arg1 puberty :arg1-of ( resemble :arg2 girl )  :time early
hold :arg0 ( premise :arg0 ( epidemic :mod obesity )  :arg1-of ( contend :arg0 ( person :name ( name :op1 kaplowitz )  )  )  )  :arg1 ( weight :quant most )
time :arg1 puberty :arg2-of ( link :arg0 ( he :arg0-of ( help :arg1 ( conduct :arg1 ( study :arg1 ( girl :mod old :mod 9 :mod ( temporal-quantity :unit year )  )  :time ( date-entity :year 2001 )  )  )  )  )  :arg1 ( fat :mod body )  )
contrast :arg1 ( support :arg0 ( factor :arg1-of contribute :mod other )  :arg1 ( conclude :arg0 ( thing :arg1-of find :mod other )  :arg1 many :mod this )  )
and :arg0-of ( reach :arg1 puberty :arg2-of ( tend :arg0 ( white :mod-of counterpart )  :arg1 girl )  :time early )  :op1 ( country :mod this )  :op2 ( thing :name ( name :op1 african-american )  )  :op3 hispanic
explain :arg1-of vary
appear :arg0 gene :arg1 ( influence :arg0 ( everything :source ( condition :mod economy :mod globally )  )  :arg1 ( pattern :arg1 ( puberty :mod early )  :domain-of climate )  )
and :arg2-of ( blow :arg1 ( puberty :arg1-of ( trend :arg0 young :arg1-of ( pronounce :arg0 age :polarity - )  )  :mod early )  :mod full :op1-of ( another :mod-of conundrum )  :op1-of boy )  :op1 facial :op2 pubic :op3 ( hair :part-of girl )
reinforce :arg0 ( conference :arg1-of ( attend :arg0 ( doctor :mod other )  )  :mod ( thing :name ( name :op1 aap )  )  )  :arg1 ( complexiti :poss topic )
pubic :mod-of ( hair :op1-of ( and :arg0-of ( appear :arg1 acne )  :op2 ( and :op1 common :op2 ( infant :mod even )  :op3 toddler )  )  )
say :arg0 ( we :arg0-of ( identify :arg1 ( child :mod ' :mod ( endocrinologist :mod pediatrics )  :mod ( hospital :wiki - )  :mod ( new :mod-of jersey )  )  :arg2 ( true :op1-of onset :op1-of puberty :op1-of of )  )  :arg1-of ( care :arg0 ( we :arg0-of ( need :arg1 amr-unknown )  )  :arg2 about )  )  :arg1 dr. :arg2 silverman
recommend :arg1 ( hesitate :arg0 ( person :arg0-of ( have-rel-role :arg2 parent )  )  :arg1 ( guide :arg1 ( talk :arg2 child )  :arg2 pediatrician )  :polarity - )
mean :arg1 it :arg1-of possible :arg2 ( expect :arg0 soon :arg1 ( converse :arg1 ( advise :arg1 kaplowitz )  )  )
respond :arg0 child :arg1 ( you :arg1-of ( remain :arg3 calm )  )  :mod usual
schedule :arg1 ( blossom :arg0 ( girl :arg0-of ( need :arg1 reassurance )  )  :arg1 even :time early )  :op1-of ( ahead :direction-of ( happen :arg1 ( process :arg1-of normal :arg2 life )  )  )
feud :arg0 ( width :mod seat )  :arg1 ( make :arg1-of jet )  :arg3 ( order :location stake :mod big )
bitter :arg1-of ( confront :arg0 ( class :arg0-of ( distance :arg1 ( city :name ( name :op1 dubai )  :wiki dubai )  :arg1-of long :arg1-of ( set :arg0 ( person :arg0-of ( lead :arg1 ( between :arg1-of ( flare :arg0 row )  :arg1-of ( make :arg0 ( plane :mod-of over )  )  )  )  :arg0-of ( tour :arg1 of )  :poss-of width :poss-of seat )  )  :arg1-of flight :arg2 tone )  )  :arg2 ( this :mod-of ( temporal-quantity :unit month )  )  )
contrast :arg1 ( court :arg0 airlin :arg1 one :degree most )  :arg2 ( hold :arg0 ( space :arg1-of allocate :arg2-of ( efficient :arg0-of claim :arg1 - )  )  :arg1 ( key :arg1 ( dispute :arg1 always :arg1-of ( focus :arg2 width :manner ( provide :arg0 seat :arg1 ( flight :arg1 ( passenger :mod economy )  :arg1-of ( haul :arg1-of long )  )  )  )  )  :arg2 ( jet :arg1-of ( offer :arg0 ( and :op1 ( thing :name ( name :op1 airbus :op2 sas )  )  :op2 ( thing :name ( name :op1 boeing :op2 co )  )  )  )  :mod ( late :degree most )  )  )  )
contrast :arg0 ( 18 :quant-of ( distance-quantity :unit inch )  )  :arg1 ( call :arg0 ( company :name ( name :op1 airbus )  :wiki airbus )  :arg1 ( standard :arg0-of ( provide :arg1 ( week :mod this )  :arg2 seat )  :mod industry )  )  :arg2 ( say :arg0 ( company :arg0-of ( rival :arg1 ( thing :name ( name :op1 u.s. :op2 arch :op3 - )  )  )  :name ( name :op1 boeing )  :wiki boeing )  :arg1 ( recommend :arg1 ( decide :arg0 airlin :arg1 ( cm :quant 46 )  )  )  :arg2 economy )  :purpose-of ( wide :arg1 cabin )
expect :arg1 ( order :mod ( record :mod potential )  )  :location event :manner ( date-entity :month 11 )  :purpose-of ( sell :arg0 ( make :arg1 plane )  :arg1 ( version :mod ( large :time ever )  )  :arg1-of ( vie :arg0 ( dispute :arg1-of come )  )  :arg2 ( aircraft :arg1-of twin :arg1-of ( distance :arg1-of long )  :mod engin )  )
claim :arg0 ( plane :arg0-of ( lay :arg1 amr-unknown :arg2 back )  )  :arg1 ( or :arg1-of ( seat :arg0 particular )  :op1 9 )  :arg2 ( perform :arg0 abreast :arg1 ( economy :mod central )  :arg2-of ( design :arg0 ( jumbo :mod ( mini-vassal :mod new )  )  :manner jet )  :time 10 )
say :arg0 ( company :name ( name :op1 boeing )  :wiki boeing )  :arg1 ( and :arg1-of wide :op1 ( hold :arg0 406 :arg1 economy :arg2 ( person :arg1-of ( base :location seat )  )  )  :op2 ( 17 :quant-of ( distance-quantity :quant more :unit inch )  )  :op3 out :op4 10 :op5 ( each :mod-of row )  )  :arg1-of ( revamp :arg0 it )
say :arg0 ( company :name ( name :op1 airbus )  :wiki airbus )  :arg1 ( carry-out :arg0 ( 350 :poss-of ( version :arg1-of ( compete :arg0 9 )  )  )  :arg1 ( person :poss-of ( abreast :arg1-of ( lay :arg0 ( seat :arg1-of ( wide :mod-of ( economy :mod ( distance-quantity :quant 18 :unit inch )  )  )  )  )  )  :quant 350 )  )
advertise :arg1 ( press :mod ( trade :arg0 ( giant :arg0-of ( trade :arg1 ( blow :arg1 ( matter :mod technical )  )  :frequency often )  :arg1-of plane )  )  )
dominate :arg1 ( organization :compared-to-of ( ahead :time-of ( appeal :arg0 ( company :name ( name :op1 airbus )  :wiki airbus )  :arg1 100 :arg1-of ( direct :arg0 order )  :arg4 public :time now )  )  :name ( name :op1 dubai :op2 airshow )  )  :arg1-of expect :arg2 more
illustrate :arg0 ( you :arg0-of ( accept :arg1 this :arg3 interrogative )  )  :arg1 ( show :arg0 ( person :arg0-of finance )  :arg1 ( war :arg0 new :arg1 restaurant :arg1-of ( start :arg0 ( possible :arg1 ( recent :arg1-of ( preview :arg0 it )  )  )  )  )  :arg1-of ( slide :arg0 ( person :arg0-of ( squash :arg1 together )  :arg1-of title )  )  )  :manner 3
say :arg0 ( prop :arg0 turbo :arg1 ( person :arg0-of ( have-org-role :arg1 leahy :arg2 chief )  :arg1-of ( fly :arg1-of ( distance :arg1-of long :arg1-of ( propose :arg0 ( company :name ( name :op1 boeing )  :wiki boeing )  )  :arg2 ( narrow :arg0 seat :arg1 region )  )  )  :name ( name :op1 john )  :wiki - )  )  :arg1 ( company :name ( name :op1 airbus )  :wiki airbus )
contrast :arg1 ( change :arg1 diet )  :arg2 ( big :domain ( person :arg0-of ( change :arg1 ( seat :arg1 plane )  :manner radical :polarity - )  )  )
say :arg0 ( data :mod ( thing :name ( name :op1 health :op2 department )  )  )  :arg1 ( increase :arg0 ( between :op1 early )  :arg1 ( and :arg1-of ( define :arg0 ( jumbo :mod ( company :name ( name :op1 boeing )  :wiki boeing )  )  :purpose-of ( average :arg1 weight )  )  :op1 ( travel :arg1-of ( haul :arg0 1970 :arg1-of ( long :arg2 ( temporal-quantity :quant ( 49 :mod-of ( monetary-quantity :mod ( old :mod-of male )  :unit cent )  )  :unit year )  )  )  )  :op2 ( turn :arg0 10 :arg1 ( temporal-quantity :unit century )  :arg1-of modern )  )  )  :purpose ( country :name ( name :op1 u.s. )  :name ( name :op1 747 )  :wiki united_states )
say :arg0 statistic :arg1 ( average :arg0 health :arg1 ( 21st :mod-of male :quant-of ( temporal-quantity :unit century )  )  :arg2 waist-deep )  :arg2 ( distance-quantity :unit inch )  :purpose ( country :name ( name :op1 u.s. )  :wiki united_states )
say :arg0 ( company :name ( name :op1 airbus )  :wiki airbus )  :arg1 ( concept :arg1-of stick :arg1-of ( narrow :arg0 jet )  :arg1-of ( average :arg0 ( girth :mod-of of )  )  :arg1-of ( rival :arg0 it )  :arg1-of ( christen :arg0 newly )  :mod seat :mod 1950 )
say :arg0 ( company :name ( name :op1 airbus )  :wiki airbus )  :arg1 ( commission :arg1 ( research :arg0-of ( suggest :arg1 ( inch :mod extra :unit-of ( distance-quantity :arg0-of ( improve :arg1 ( quality :mod ( sleep :arg1 ( width :mod seat )  )  )  :time 53 )  )  )  )  )  :arg0 company )  :arg2 ( monetary-quantity :unit cent )
say :arg0 it :arg1 ( and :arg1-of measure :op1 ( dispute :arg0 ( company :name ( name :op1 boeing )  :wiki boeing )  :arg1 ( company :name ( name :op1 airbus )  :wiki airbus )  )  :op2 figure :op3 seat :op4 ( decide :arg0 ( person :arg0-of ( manufacture :arg1 step )  )  :arg1 ( amr-unknown :mod-of ( balance :mod airlin )  )  :op1-of ( and :op2 fare :op3 facility )  :op1-of into :polarity - )  )
say :arg0 it :arg1 ( show :arg0 ( research :arg1 ( seat :poss-of width )  )  :arg1 ( depend :arg0 ( experience :mod cabin )  :duration more )  )  :mod also
say :arg0 ( thing :arg1-of ( do :arg0 they :arg2 that )  )  :arg1 ( need :arg0 they :arg1 succeed :arg1-of ( crave :arg0 ( company :name ( name :op1 boeing )  :wiki boeing )  :arg1-of ( expert :arg0 cabin )  )  :arg1-of ( believe :arg0 they )  :arg1-of ( allow :op3-of ( and :arg1-of ( provide :arg0 it :arg2 flexibility )  :op1 ( come :arg1 down :op1-of really )  :op2 airlin )  )  )
profitable :arg1 ( make :arg0 ( want :arg0 they :polarity - )  :arg1 dictate )
know :arg0 they :arg1 business :arg2 ( good :compared-to ( anyone :mod else )  )
contrast :arg1 ( room :mod ( elbow :arg1-of supply )  :mod ( more :mod about )  :purpose flyer )  :arg2 ( affect :arg0 ( issue :mod increase )  :arg1 earn :arg1-of possible )
list :arg1-of ( price :arg0 ( plane :topic-of order )  :arg2 ( temporal-quantity :unit decade )  :arg3 ( come :arg2-of ( estimate :arg1 business )  :op2-of ( and :op1 ( dispute :arg1 tip :op1-of behind )  :op3 ( country :name ( name :op1 u.s. )  :wiki united_states )  :op4 ( export :arg0 700 :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :domain-of race :mod-of scale )  )  :time enough )  )
drive :arg0 ( layout :arg1-of ( report :arg0 ( organization :name ( name :op1 reuters )  )  )  :mod seat )  :arg1 ( battle :arg0 ( jet :mod ( late :degree most )  )  :arg1 7 :op1-of exact )
claim :arg0 ( and :op1 ( company :arg0-of ( design :arg1-of ( haul :arg0 ( 20 :arg0-of ( twin :arg1 engin )  )  :arg1-of ( long :arg0 ( monetary-quantity :unit cent )  :location ( segment :mod-of ( late :degree most )  )  )  )  )  :name ( name :op1 airbus )  :wiki airbus )  :op2 ( company :name ( name :op1 boeing )  :op1-of both :wiki boeing )  :op3 ( efficient :arg0 ( 365 :quant-of ( seat :part-of ( 777 :mod ( company :name ( name :op1 boeing )  :wiki boeing )  )  )  )  :arg1 seat :mod good )  :op4 ( person :arg0-of ( lead :arg2 market )  )  )  :arg1 that
claim :arg0 ( person :arg0-of ( design :arg1 ( 777 :mod ( abreast :mod 9 )  )  )  :arg0-of compare )  :arg1 original :arg2 ( perform :arg0 ( company :name ( name :op1 boeing )  :wiki boeing )  :arg1 10 :arg2-of ( depend :arg0 abreast )  )
blunt :arg0 ( compare :arg1 ( abreast :manner use :time now )  :arg2 10 )  :arg1 ( gain :arg1 ( cost :arg1 unit )  )
say :arg0 ( we :arg0-of ( head :arg1 of )  )  :arg1 keniston :arg2 ( comfort :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :arg2 ( ' :mod-of ( company :name ( name :op1 airbus )  :wiki airbus )  )  :mod passenger )  :arg2-of ( compete :arg0 plane :arg1 product :arg3 ( do :arg0 ( company :name ( name :op1 boeing )  :wiki boeing )  :arg0-of ( cram :arg2 seat :degree more )  :arg1 this :arg3 reason )  :degree more )
say :arg0 ( person :arg0-of analyze )  :arg1 ( suggest :arg0 ( cabin :mod row :mod seat :mod full )  :arg1 ( vote :arg0 ( passenger :quant many )  :arg1 ( layout :arg0-of ( go :arg1 ( hand :prep-in hand )  :arg1-of possible )  :mod dense )  :arg2 ( 777 :arg1-of exist )  )  :arg2 ( cheap :arg0 10 :arg1 fare )  )  :arg2 ( hand :mod other )
contrast :arg1 ( threaten :arg0 ( passenger :mod great )  :arg1-of ( drive :arg0 of :arg1-of ( propose :arg0 ( company :name ( name :op1 airbus )  :wiki airbus )  )  :arg2 777 :op1-of ( and :arg1-of ( say :arg0 ( width :quant-of ( distance-quantity :quant eighteen :quant seat :unit inch )  )  )  :op2 ( person :arg1-of ( expert :arg0 interior )  :name ( name :op1 &quot; )  )  :op3 ( found :arg1 ( girl :mod-of ( network :wiki american_broadcasting_company )  )  )  :op4 editor )  :op1-of ( point :mod business :mod that )  :op1-of by )  :arg2 cabin )  :arg2 reality
contrast :arg1 ( supply :arg0 ( and :op1 ( company :name ( name :op1 boeing )  :wiki boeing )  :op2 seat )  )  :arg2 ( offer :arg0 ( company :arg0-of catalogue :name ( name :op1 airbus )  :wiki airbus )  :polarity - :purpose ( choose :arg0 airlin :arg1 supply )  )
carry :arg0 ( person :arg0-of ( sell :arg1 ( trot :arg1 globe )  :mod jet )  )  :arg1 ( measure :arg1 tape :arg2 ( check :arg1 ( layout :arg1-of compete )  )  :op1-of even )
offer :arg0 ( builder :quant all )  :arg1 jet :manner ( and :op1 ( airlin :arg1-of ( cost :arg1-of low )  )  :op2 ( travel :mod region )  :topic-of ( layout :mod ( density :arg1-of high )  )  )  :mod also :time ( boast :arg1 comfort :arg1-of while )
contrast :arg2 ( say :arg0 ( company :arg0-of ( offer :arg1 ( 350 :mod abreast )  )  :name ( name :op1 airbus )  :wiki airbus )  :arg1 ( sell :arg1 10 :polarity - :time yet )  )
offer :arg1 ( cabin :arg0-of ( need :arg1-of ( stress :arg0 ( company :name ( name :op1 airbus )  :wiki airbus )  :time ( until :op1 recent )  )  :arg2-of ( wide :arg1 ( seat :mod ( jet :quant some )  :mod aisle )  )  )  :quant more )
say :arg0 ( person :arg0-of ( support :arg1 ( make :arg1 ( jet :arg1-of modern :mod large )  :mod only )  )  :arg1-of expert )  :arg1 ( likely :arg1 fly :arg1-of ( contrast :arg2 ( possible :arg1 ( distract :arg0 ( call :arg1 ( standard :mod industry :mod new )  )  :arg1 ( wave :arg1 other )  )  )  )  :polarity - )
possible :arg1 ( take :arg0 ( vaccine :arg0-of smoke :mod new :purpose ( oppose :arg1 nicotine )  )  :arg1 pleasure )
cigarette :arg1-of ( smoke :arg0 ( person :arg0-of ( have-org-role :arg2 scientist )  :arg0-of ( take :arg1 pleasure :arg1-of possible )  :arg0-of ( develop :arg1 ( vaccine :purpose ( oppose :arg1 nicotine )  )  )  )  )
possible :arg1 ( protect :arg0 ( dose :arg1 ( addict :arg1 life :arg2 nicotine )  :arg1-of single :arg2 vaccine )  :arg1 mouse )
contrast :arg1 ( need :arg1 ( test :arg0-of ( start :arg1 ( trial :arg0 early :arg1 human :arg1-of ( take :frequency ( several :op1 ( temporal-quantity :unit year )  )  )  )  :op1-of before )  :mod further )  )  :arg2 ( say :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :location ( city :name ( name :op1 new :op2 york )  :wiki new_york_city )  :name ( name :op1 weill :op2 cornell :op3 medical :op4 college )  )  :arg2 professor )  :name ( name :op1 ronald :op2 crystal )  )  :arg1 ( good :domain sign )  )
contrast :arg1 ( find :arg0 ( we :arg0-of ( hopeful :arg1 of :arg2 ( kind :mod this :mod that )  :degree very )  )  :arg1 nicotine :time today )  :arg2 ( addict :arg0 ( market :arg1-of ( stop :arg0 ( person :arg0-of ( try :arg1 method :time final )  :arg0-of ( approach :arg1 ( say :arg0 ( organization :name ( name :op1 &quot; )  )  :arg1 vaccine )  :arg1-of overcome :mod this :time current )  :arg0-of ( smoke :arg1 amr-unknown )  :arg0-of ( exhaust :arg1 all )  :arg2-of ( help :arg1-of ( possible :arg0 strategy )  )  )  )  )  :arg1 ( strong :arg1 enough )  )
contain :arg0 ( vaccine :mod new )  :arg1 ( virus :arg0-of ( harm :arg1 gene :polarity - )  :arg1-of ( engineer :arg2 ( carry-out :arg1 information )  )  )  :purpose-of ( oppose :arg0 antibodi :arg1 nicotine )
antibodi :arg1-of ( stream :arg1-of ( start :arg0 ( cell :arg1-of ( infect :arg0 virus :manner selectively )  :mod liver )  :time then )  :mod steady )
nicotine :arg1-of ( hit :arg2-of ( prevent :arg0 ( they :arg0-of ( reach :arg1 brain :op1-of before :time-of ( hunt :arg0 antibodi :arg1 ( molecule :mod nicotine :mod any )  :location bloodstream )  )  )  :arg1 ( person :arg0-of smoke )  )  )
vaccinate :arg1 ( mouse :arg0-of ( give :arg1 nicotine :time subsequent )  :arg0-of test :arg0-of ( continue :arg1 ( activity :arg1-of normal )  )  )
contrast :arg1 mouse :arg2 ( give :arg1 vaccine :arg2 ( person :arg0-of ( sign :arg1 nicotine )  :arg0-of ( say :arg1 ( brain :arg1-of reach )  :arg1-of chill )  :arg0-of research )  :polarity - )
describe :arg0 ( person :mod ( science :mod journal )  :name ( name :op1 translational :op2 medicine )  )  :arg1 experiment
fail :arg1 ( vaccine :consist-of tobacco )  :arg1-of ( cause :arg0 ( contain :arg0 they :arg1 antibodi )  )
and :arg2-of ( prove :arg0 they :arg1 ( keep :arg1 ( top :arg1 level )  :purpose-of ( give :arg1 jab :arg1-of ( frequent :arg2 antibody )  )  )  )  :op1 expensive :op2 impractical
contrast :arg1-of ( cost :arg2 ( vaccine :mod new )  )  :arg2 ( likely :arg1 ( low :degree far )  :arg1-of ( cause :arg0 ( turn :arg1 ( cell :mod liver )  :arg2 ( factory :mod antibody )  )  )  )
say :arg0 ( organization :name ( name :op1 prof :op2 crystal )  )  :arg1 ( possible :arg1 ( give :arg2 child :purpose ( tempt :arg1 they :arg3 ( try :arg1 ( cigarette :arg0-of ( prevent :arg1 ( addict :arg2 nicotine )  )  )  :arg0 they )  :op1-of before )  )  :time ( safe :arg1 ( vaccine :arg1-of complete :mod human :time future )  )  )
contrast :arg1 ( use :arg0 ( person :arg0-of smoke )  :arg2 quit :mod ( likely :degree more )  )
say :arg0 ( he :arg1-of ( kick :arg0 ( they :arg2-of ( help :arg0 it :arg1-of ( possible :polarity - )  )  )  :arg2 habit )  )  :arg1 ( and :arg1-of ( know :arg0 they :arg0-of ( cause :arg1 ( smoke :arg1 again :arg1-of ( start :arg0 they )  )  )  )  :op1 ( receive :arg0 they :arg1 pleasure )  :op2 due :op3 nicotine :op4 vaccine :op5 that )
contrast :arg1 ( interest :arg1 ( thing :arg2-of result )  )  :arg2 ( warn :arg0 ( scientist :arg0-of say :mod ( country :name ( name :op1 britain )  :wiki united_kingdom )  )  :arg1 ( need :arg1 ( research :arg1 ( more :degree far )  )  )  )
deny :arg0 ( person :name ( name :op1 tripodi )  )  :arg1 ( influence :arg0 ( person :name ( name :op1 obeid )  )  )
investigate :arg0 state :arg1 ( corrupt :arg1 watchdog )  :arg1-of will :arg2 ( person :arg0-of ( have-org-role :arg2 ( minister :mod labor )  :time former )  :name ( name :op1 joe )  :wiki joe_paterno )
deny :arg0 ( person :arg0-of ( have-org-role :arg1 ( government-organization :arg0-of govern :arg0-of ( control :arg1 ( land :location-of ( property :location-of ( interest :arg1-of hide )  :quant 3 )  )  )  )  :arg2 ( minister :mod ( thing :name ( name :op1 former :op2 nsw )  )  )  )  :name ( name :op1 joe :op2 tripodi )  )  :arg1 ( change :arg1 ( policy :arg1-of ( lease :arg0 maritime )  )  :arg1-of ( request :arg0 ( person :arg0-of mentor :mod politics :name ( name :op1 eddie :op2 obeid )  )  )  )
and :op1 ( restaurant :arg0-of ( tender :time ( after :op1 expiration )  )  :arg1-of ( own :purpose ( renew :arg1 ( organization :location-of ( lease :arg0 ( person :arg0-of ( have-org-role :arg1 state :arg2 minister )  :arg2-of ( lobby :arg0 ( thing :name ( name :op1 mr :op2 obeid )  )  :arg1 ( organization :name ( name :op1 icac )  )  :manner-of ( widen :arg0 ( organization :name ( name :op1 independent :op2 commission :op3 against :op4 corruption )  )  :arg1 ( inquire :arg0 friday )  )  )  :quant several )  :arg1 ( date-entity :month 8 :year 2005 )  )  :name ( name :op1 circular :op2 quay )  )  )  )  :quant 2 )  :op2 cafe
evidence :arg0 after :arg1 ( property :arg1-of ( interest :arg0 secret )  :arg1-of ( give :arg0 thursday )  :arg1-of ( investigate :arg0 now :arg1-of ( know :arg0 ( person :arg0-of ( have-org-role :arg1 deputy :arg2 chief )  :arg2-of ( staff :arg1 former )  )  )  :arg1-of ( allege :arg0 it )  )  )
push :arg0 ( government-organization :arg0-of govern :arg0-of ( go :arg1 ( discuss :arg1-of ( start :time ( date-entity :year 2005 )  )  :duration ( temporal-quantity :unit year )  )  :arg2-of ( lease :arg0-of ( tender :arg1 public )  )  )  )
and :op1 lesse :op2 this :op3 ( want :arg1 ( term :arg1-of long )  :mod also )
thing :arg2-of ( earn :arg0 about :arg1 ( enterprise :arg0-of ( lease :arg1 ( organization :name ( name :op1 circular :op2 quay )  )  :arg2 ( tender :arg0 public :arg1 2.5 )  :time ( date-entity :year 2009 )  )  :arg1-of renew )  )  :name ( name :op1 obeids )
tripodi :op2-of ( name :name-of ( thing :arg0-of ( favor :arg1 ( tender :arg0 public :arg1 ( date-entity :year 2006 )  )  )  :topic-of ( port :arg1-of ( have-org-role :arg0 initial :arg2 minister )  :time ( until :op1 ( date-entity :month 11 :time ( date-entity :year 2009 )  )  )  )  )  :op1 mr )
contrast :arg2 ( deny :arg0 he :arg1 ( change :arg1 ( thing :arg1-of ( request :arg1-of ( acknowledge :arg0 ( thing :arg1-of ( urge :arg2 ( shift :arg1 ( policy :mod ( government-organization :arg0-of govern :arg1-of lease )  )  )  )  :name ( name :op1 mr :op2 tripodi )  )  )  )  :name ( name :op1 mr :op2 obeid )  )  )  )
and :op1 ( show :arg0 ( thing :arg1-of ( transcribe :arg2 phone )  )  :arg2 ( call :arg1 ( organization :name ( name :op1 icac )  )  :location ( and :op1 8 :op2 ( date-entity :month 9 :year 2007 )  :op3 ( come :arg1 ( bureaucrat :mod senior )  :arg4 ( ministry :mod port )  :time ( after :op1 ( work :arg0 ( department :mod fisheri )  :arg1 ( thing :name ( name :op1 mr :op2 obeid )  )  )  )  )  )  )  )  :op2 ( thing :name ( name :op1 mr :op2 obeid )  )  :op3 ( thing :name ( name :op1 mr :op2 tripodi )  )  :op4 ( person :name ( name :op1 steve :op2 dunn )  )
discuss :arg0 matter :arg1 course :arg1-of be :arg2 ( person :arg0-of assist :arg0-of ( have-org-role :arg1 ( ask :arg0 ( person :name ( name :op1 &quot; )  )  :arg1 mr :arg2 ( person :name ( name :op1 &quot; )  )  )  :arg2 commissioner )  :arg2-of ( lease :arg0 commerce :arg1 ( policy :arg1-of ( telephone :arg0 of :mod this )  :arg1-of ( develop :arg0 conversation )  )  )  )
mr :arg1-of ( reply :arg0 ( person :name ( name :op1 &quot; )  )  :polarity - )
contrast :arg1 ( discuss :arg0 definite :arg1 - :arg1-of ( remember :arg0 i :polarity - )  )
and :op1 ( thing :name ( name :op1 mr :op2 obeid )  :op1-of ( definitely :polarity-of - )  )
say :arg0 ( person :arg0-of ( have-org-role :arg2 official )  )  :arg1 ( target :arg1 ( country :name ( name :op1 israel )  :wiki israel )  :arg2 ( attack :arg1 warplan )  :location ( inside :op1 ( country :name ( name :op1 syria )  :wiki syria )  )  )
confirm :arg0 ( person :arg0-of ( have-org-role :arg1 administrate :arg2 ( official :mod senior )  )  )  :arg1 ( strike :arg0 ( warplan :mod ( country :name ( name :op1 israel )  :wiki israel )  )  :arg1 ( target :arg1 ( country :mod-of thursday :name ( name :op1 latakia )  )  )  :time ( inside :op1 ( city :location ( country :name ( name :op1 syria )  :wiki syria )  :mod port :time night )  )  )  :arg2 ( broadcast-program :name ( name :op1 fox :op2 news )  :wiki fox_news_channel )
contrast :arg0 one :arg1 ( specify :arg0 ( person :arg0-of ( have-org-role :arg2 official )  )  :arg1 target :polarity - )  :arg2 say
report :arg0 ( publication :name ( name :op1 associated :op2 press )  :wiki associated_press )  :arg1 ( target :arg0 ( missile :quant 125 :source ( thing :name ( name :op1 russian-made )  )  )  :arg1 ( country :name ( name :op1 sa )  :wiki south_africa )  )
launch :arg0 ( country :arg2-of ( ship :arg1 ( missile :location ( inside :op1 ( country :name ( name :op1 syria )  :wiki syria )  )  )  )  :name ( name :op1 israel )  :wiki israel )  :arg1 early :purpose-of ( year :mod this )
possible :arg1 ( visa :arg1-of ( work :arg0 ( person :arg0-of ( test :arg1 genuinenes )  :mod foreign )  )  :mod 457 )  :arg1-of undergo
consider :arg0 ( government-organization :arg0-of ( test :arg1 ( person :arg0-of ( work :arg1 ( visa :mod 457 )  )  :mod foreign )  :mod genuinenes )  :arg0-of ( crack-down :arg1 ( expand :arg1 ( contemplate :arg0 it )  )  )  :arg0-of govern )  :arg1 by
fill :arg1 ( position :mod unskill )  :arg2 ( or :op1 ( way :manner-of ( move :arg1 ( and :op1 family :op2 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  :arg2 ( country :name ( name :op1 australia )  :wiki australia )  )  :mod door :mod back )  )  :arg2-of ( use :arg1 ( 457 :arg1-of ( prevent :arg2-of ( aim :arg1 ( criteria :path-of ( apply :arg1 adopt :arg2 test )  )  )  )  )  )
say :arg0 ( person :arg0-of ( work :arg1 foreign )  :poss about )  :arg1 ( possible :arg1 ( discuss :arg0 today :arg1 paper :arg1-of ( govern :arg0 ( government-organization :arg0-of ( release :arg1 ( person :arg0-of ( slam :arg1 rhetoric )  :arg0-of ( have-org-role :arg1 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 australia )  :poss-of neighbour :wiki australia )  )  )  :arg2 mp )  :poss-of labor )  :arg2 former )  )  )  )  :arg1-of ( offend :arg0 it )  )
tell :arg0 she :arg1 ( institute :arg0 ( country :name ( name :op1 india )  :wiki india )  :arg1 today )  :arg2 ( country :name ( name :op1 australia )  :wiki australia )  :arg3 ( market :arg1-of ( protect :arg0 ( and :op1 loud :op2 declaration :op3 about :op4 ( get :arg0 foreign :arg1 of )  :op5 ( queue :arg0 back :arg1 aussie )  :op6 job )  )  :arg1-of ( demand :arg0 union :arg2-of ( pleasant :arg0 first :arg1 throwback :degree very )  )  :mod labor )  :time time
mean :arg0 it :arg2 historically :mod that :op1-of ( and :arg1-of ( see :arg0 ( i :arg1-of ( surprise :arg0 history :arg2 artifact :polarity - )  )  :arg1-of ( echo :arg0 of )  :mode region :mode some )  :op2 white :op3 ( protect :arg1 labour )  )
outline :arg0 ( paper :arg1-of discuss )  :arg1 ( measure :arg1-of ( consider :arg0 ( person :arg0-of ( have-org-role :arg1 ( immigrate :arg1 12 )  :arg2 minister :time former )  :name ( name :op1 chris :op2 bowen )  )  :time previous )  )
meet :arg0 ( he :arg0-of ( recommend :arg1 ( change :arg1 of :arg2-of ( consider :arg0 yesterday :arg1 remainder :manner under )  )  )  )  :arg1 ( person :arg0-of ( smuggle :arg1 ( person :arg0-of ( implement :arg1 5 )  :mod about )  )  :arg0-of ( have-org-role :arg1 ( country :arg1-of ( have-org-role :arg0 ( person :arg0-of immigrate :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )  :arg2 minister )  :name ( name :op1 sri :op2 lanka )  :wiki sri_lanka )  :arg2 official )  )
circumstance :arg0-of ( nominate :arg1 ( or :arg0-of ( own :arg1 ( or :arg1-of ( relevant :arg0 genuinenes )  :op1 ( person :arg0-of ( sponsor :arg1 business )  )  )  )  :arg1-of ( relate :arg0 genuine )  :arg1-of ( associate :arg0 ( possible :arg1 ( visa :arg1-of ( nominate :arg0 scrutinise )  :arg1-of ( apply :arg0 ( adopt :arg0 criteria )  )  )  )  )  :arg1-of personal )  )
hold :arg0 ( person :arg0-of ( intend :arg1 ( sponsor :arg1 ( number :mod small :quant-of ( person :arg0-of work :arg0-of ( employ :arg1 hundred :time then )  :arg2-of ( require :arg0 previous :arg1 ( account :arg0 business :arg1 number )  :arg1-of possible :mod also )  )  )  )  )  )  :arg1 visa :time ( after :op1 business )
seek :arg0 ( thing :name ( name :op1 sri :op2 lankan )  )  :arg1 asylum :arg1-of ( die :time ( after :op1 ( arrive :arg1 ( island :mod ( festival :name ( name :op1 christmas )  :wiki christmas )  )  :arg2-of ( suspect :arg0 ( week :mod ( this :mod-of ( year :unit-of ( temporal-quantity :quant 35 :quant-of old )  )  )  )  :arg1 ( attack :arg1 heart )  )  :arg4 ( boat :topic asylum )  )  )  :time meanwhile )
and :op1 ( person :arg0-of ( have-rel-role :arg1 ( he :arg0-of ( comfort :arg1 since )  :arg1-of ( have-rel-role :arg0 ( person :mod adult :mod ( also :mod-of vessel )  )  :arg2 cousin )  :arg1-of ( have-rel-role :arg0 ( person :mod of )  :arg2 father )  :arg1-of die :poss-of wednesday )  :arg2 son )  :arg0-of ( travel :arg1 ( distraught :mod man :mod-of 9 :quant-of ( temporal-quantity :unit year )  )  )  :mod old )  :op2 ( country :name ( name :op1 australia )  :wiki australia )
rush :arg0 ( authority :mod ( country :name ( name :op1 australia )  :wiki australia )  )  :arg1 ( man :arg0-of ( die :arg1 he )  )  :arg2 ( hospital :mod ( country :name ( name :op1 christmas :op2 island )  )  :wiki - )
announce :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 uk )  :wiki united_kingdom )  )  )  :arg1 ( study :arg0-of ( aim :arg1 ( increase :arg1 ( benefit :arg1 ( country :name ( name :op1 scotland )  :wiki scotland )  :arg2 ( project :mod ( rail :mod 2 )  )  )  )  )  )
suggest :arg0 ( work :arg0 ( organization :name ( name :op1 hs2 :op2 ltd )  )  :arg1 ( phase :arg1-of ( open :arg0 1 :time ( date-entity :year 2026 )  )  )  )  :arg1 ( start :arg0 ( service :mod ( speed :arg1-of high )  )  :time soon )  :arg2 ( and :op1 ( country :name ( name :op1 scotland )  :wiki scotland )  :op2 ( north :part-of ( country :name ( name :op1 england )  :wiki england )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :mod-of together :name ( name :op1 uk )  :wiki united_kingdom )  :arg2 ( minister :mod transport )  )  :arg0-of ( bring :arg1 would )  :name ( name :op1 transport )  )  :arg1 project
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 scotland )  :wiki scotland )  :arg2 minister )  :arg1-of ( plan :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 uk )  :wiki united_kingdom )  )  )  )  :name ( name :op1 brown )  :wiki gordon_brown )  :arg1 ( he :arg0-of ( excite :arg1 work )  :arg1-of transport )
consist :arg1 ( organization :name ( name :op1 phase :op2 one )  )  :arg2 ( line :mod ( rail :arg1-of ( high :op1-of ( and :op2 ( city :name ( name :op1 london )  :wiki london )  :op3 ( country :name ( name :op1 west :op2 midlands )  )  )  )  )  :mod speed :mod new )
and :op1 ( run :arg1 line :arg2 ( country :arg0-of ( complete :arg1 ( 2 :arg1-of phase )  )  :name ( name :op1 manchester )  )  )  :op2 ( country :name ( name :op1 leeds )  )
and :arg1-of ( build :arg0 ( government-organization :arg0-of ( revise :arg1 ( 6 :month-of date-entity )  )  :arg0-of ( speed :arg1 ( link :arg1 ( city :name ( name :op1 london )  :wiki london )  )  )  :arg0-of ( govern :arg1 ( country :name ( name :op1 england )  :wiki england )  )  :arg0-of ( estimate :arg1 north_korea :arg1-of ( cost :arg1-of high )  )  )  )
instruct :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 uk )  :wiki united_kingdom )  )  )  :arg1 ( organization :arg0-of ( look :arg1 ( capacity :degree further :mod rail :op1-of ( and :op2 ( improve :arg0 transport :arg1 time :arg1-of journey :op1-of ( and :arg0-of ( talk :arg1-of hold :arg2 ( country :name ( name :op1 scotland )  :wiki scotland )  )  :op2 ( country-region :name ( name :op1 northern :op2 england )  :wiki northern_england )  :op3 ( country :name ( name :op1 scotland )  :wiki scotland )  )  )  )  )  )  :name ( name :op1 hs2 :op2 ltd )  )
or :op1 ( and :arg1-of ( include :arg2 ( possible :arg1 ( city :name ( name :op1 london )  :wiki london )  :arg2 ( journey :arg0 eventual :arg1 this )  )  )  :op1 ( city :name ( name :op1 glasgow )  :wiki glasgow )  :op2 ( city :name ( name :op1 edinburgh )  :wiki edinburgh )  )  :op2 ( temporal-quantity :quant 3 :unit hour )  :op3 less
say :arg0 ( person :name ( name :op1 baroness )  :op1-of ( and :arg1-of ( bring :arg0 we :arg2 ( close :mod-of together )  :mod that )  :location city :op2 ( network :mod ( nation :mod truly :quant 2 )  )  :op3 ( country :name ( name :op1 uk )  :wiki united_kingdom )  :op4 it )  )  :arg1 goal
bring :arg1 ( benefit :domain-of ( huge :arg0-of ( cause :arg1 ( drive :arg0 we :arg1 2 :direction forward )  )  )  )
face :arg0 we :arg1 crisis :arg2 capacity :location ( rail :mod-of ( network :poss we )  )
contrast :arg0 18 :arg1 ( and :op1 ( city :name ( name :op1 glasgow )  :wiki glasgow )  :op2 ( city :name ( name :op1 edinburgh )  :wiki edinburgh )  :op3 ( cause :arg0 2 :arg1 ( connect :arg1 city :manner good )  :location ( country :name ( name :op1 uk )  :op1-of across :wiki united_kingdom )  )  )  :arg2 connectivity :mod also
add :arg0 ( country :arg1-of ( have-org-role :arg2 secretary )  :name ( name :op1 scotland )  :wiki scotland )  :arg1 ( announce :arg0 ( country :name ( name :op1 scotland )  :wiki scotland )  :arg1 ( good :mod-of news )  :time today )  :arg1-of mean :arg2 carmichael
inclusion :poss ( country :arg1-of ( govern :arg0 ( government-organization :arg0-of ( call :arg1 ( person :name ( name :op1 brown )  :wiki gordon_brown )  :arg2 unequivocally :manner back )  )  )  :location-of ( network :quant 2 )  :name ( name :op1 scotland )  :wiki scotland )
contrast :arg1 ( speed :arg1-of ( high :arg0 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :mod ( case :mod-of overall )  )  :mod-of ( rail :mod-of across )  )  :arg2 ( say :arg0 ( person :arg0-of ( bring :arg1 potential )  :mod mr :name ( name :op1 brown )  :wiki gordon_brown )  :arg1 ( speed :arg0-of ( benefit :arg1 ( economy :mod huge )  :arg2 ( country :arg0-of ( add :arg1 ( economy :mod ( country :name ( name :op1 scotland )  :wiki scotland )  :mod weight )  :mod also )  :name ( name :op1 scotland )  :wiki scotland )  :manner high )  :mod-of rail )  )
and :arg0-of ( create :arg1 ( benefit :arg0 all :arg1 ( city :name ( name :op1 glasgow )  :wiki glasgow )  )  )  :op1 ( bring :arg1 ( rail :mod ( speed :arg1-of high )  )  :arg2 ( country :name ( name :op1 scotland )  :wiki scotland )  :arg2-of ( examine :arg1 option :arg1-of ( work :arg0 ( we :arg1-of ( excite :arg1-of cause )  )  :location ( partner :arg1 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 uk )  :wiki united_kingdom )  )  )  )  )  )  )  :op2 ( complement :arg1 ( line :arg1-of ( plan :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 scotland )  :wiki scotland )  )  )  :time already )  :location ( city :name ( name :op1 edinburgh )  :wiki edinburgh )  )  )
investigate :arg0 ( and :op1 ( decide :arg0 ( i :arg0-of ( look :arg1 ( review :arg1 report )  :direction forward )  )  :arg1 ( step :arg1 ( year :mod next )  :mod next )  :mod together )  )  :arg1 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 uk )  :wiki united_kingdom )  :arg2 minister )  )
rule :arg1-of ( stay :location ( country :name ( name :op1 australia )  :wiki australia )  :location force :time now )  :mod aircraft :poss ( device :mod electronic )
and :op1 tablet :op2 ( phone :arg1-of smart )  :op3 ( land :arg1 ( move :location ( country :name ( name :op1 us )  :wiki united_states )  )  :op2-of ( and :arg1-of ( continue :arg0 ( passenger :mod airline )  :arg1-of ( need :arg0 passenger )  )  :op1 ( turn :time ( take :arg0 ( country :name ( name :op1 australia )  :wiki australia )  :arg1 off )  )  )  :purpose ( loosen :arg1 ( regulate :arg0-of ( cover :arg1 device )  )  )  )
cause :arg0 ( change :arg1 procedure :arg1-of ( open :arg0 ( organization :arg0-of leave :name ( name :op1 the )  )  :mod way :op1-of ( or :arg1-of read :arg1-of possible :arg1-of ( play :mod-of game )  :op2 ( watch :mod e-book :op1-of video )  :op3 ( remain :arg1 airplane :concession-of ( provide :arg0 they :arg1 mode :arg1-of ( flight :arg0 of )  )  :concession-of ( critical :arg0 ( during :mod device )  :arg1 phase )  )  )  )  :mod carrier )  :arg1 ( that :mod-of passenger )
contrast :arg1 ( do :arg0 passenger :arg1 this :arg1-of possible :time already :time ( flight :arg1-of ( bulk :arg1-of land )  )  )  :arg2 ( find :arg0 ( person :arg0-of ( take :arg1 off :op1-of and :time-of ( access :arg1 e-book )  )  :quant many )  :arg1 annoy )
contrast :arg1 ( look :arg0 ( carrier :mod ( country :name ( name :op1 australia )  :wiki australia )  )  :arg1 ( decide :arg0-of ( require :arg1 ( undertake :arg0 ( carrier :mod ( country :name ( name :op1 us )  :wiki united_states )  )  :arg1 ( work :quant ( amount :mod massive )  )  :purpose ( meet :arg1 ( thing :arg1-of require )  )  )  )  )  )  :arg2 ( indicate :arg1 ( plan :arg0 immediate :arg1 ( change :arg0 they :arg1 procedure )  :polarity - )  )
contrast :arg0 ( restrict :arg1 ( use :arg0 ( country :location-of place :name ( name :op1 australia )  :wiki australia )  :arg1 device :arg2 ( phase :arg1-of flight :arg1-of critical )  )  )  :arg2 ( say :arg0 ( organization :name ( name :op1 civil :op2 aviation :op3 safety :op4 authority )  )  :arg1 ( look :arg1 ( announce :arg1 still )  )  :mod also )  :op1-of electronic
say :arg0 it :arg1 ( use :arg0 ( organization :arg0-of ( regulate :arg1 of :polarity - )  :name ( name :op1 &quot; )  )  :arg1 ( device :mod-of aircraft )  :arg1-of specific :arg1-of ( govern :arg0 current )  :arg2 electronic )
and :arg2-of ( comply :arg1 ( instruction :arg1-of ( give :arg0 ( person :arg0-of ( have-org-role :arg1 crew :arg2 member )  )  )  :mod safe )  :arg2-of ( maintain :arg1 safe :arg1-of ( ensure :arg0 aircraft :arg1-of ( require :arg0 ( regulate :arg0-of ( cover :arg1 issue )  )  )  :purpose-of ( operate :arg0 person )  )  )  )  :op1 passenger :quant all
contrast :arg1 amenable :arg2 ( say :arg1 ( take :arg0 change :arg1 ( lead :arg1 ( organization :arg2-of ( talk :arg0 virgin :arg1 ( extend :arg1 ( system :arg1-of flight :mod ( entertain :arg1 wi )  )  :arg2 use )  :time already )  :name ( name :op1 casa )  )  )  :arg2 regulator )  )
say :arg1 ( use :arg0 ( organization :name ( name :op1 &quot; )  )  :arg1 of :arg1-of ( welcome :arg0 ( we :arg0-of ( review :arg1 by :arg2 into )  )  )  :arg1-of allow :arg2 electronic )  :arg1-of ( have-org-role :arg0 ( we :arg1-of ( entertain :arg0 ( we :arg1-of ( experience :arg0 ( we :arg0-of ( improve :arg1 customer )  :arg0-of ( do :arg1 that :arg2 ( think :arg1 it :arg1-of ( cause :arg0 device )  )  :mod really )  )  :arg2 now )  )  :arg1-of ( flight :arg0 wireless )  :arg2 plane )  )  :arg2 spokesman )
say :arg0 ( organization :name ( name :op1 qantas )  )  :arg1 ( stick :arg2 ( rule :time current )  )  :time now
say :arg0 ( we :arg0-of ( plan :arg1 ( change :arg0 immediate :arg1 it )  :polarity - )  )  :arg1 ( and :op1 ( take :arg0 ( electronic :mod that )  :arg1 policy :arg2 ( off :arg2-of ( use :arg0 we :arg1 during :arg1-of possible )  )  :arg3 device :op1-of and :polarity - :time current )  :op2 land )
apply :arg1 rule :arg2 airlin
and :arg2-of ( interest :arg0 ( we :arg0-of regulate )  :arg1 always )  :op1 ( take :arg0 we :arg1 ( look :arg0 certain :arg1 reason :arg1-of develop :arg1-of ( decide :arg0 it :op1-of ( and :op2 behind )  )  :arg1-of ( possible :arg0-of ( benefit :arg1 passenger )  )  )  )
and :arg1-of ( depend :time ( age :arg1 fleet )  )  :op1 ( vary :arg1 ( impact :arg0 rule )  :arg2 airline :purpose ( carrier :mod ( country :name ( name :op1 us )  :wiki united_states )  )  :source airline )
and :op1 ( tolerate :arg0 ( plane :arg0-of ( revise :arg1 manual )  )  :arg1 ( interfere :arg1 radio )  :arg1-of ( prove :arg1-of ( train :arg2 material )  :arg1-of ( need :arg0 carrier )  )  :arg1-of possible :arg2 ( device :arg1-of mobile )  )  :op2 ( program :mod ( baggage :arg1-of carry )  )  :op3 ( briefing :mod passenger )
say :arg0 faa :arg1 ( and :op1 fleet :op2 ( use :arg0 passenger :arg1 handheld :arg1-of possible :arg1-of ( verify :arg0 ( airline :arg0-of ( tolerate :arg1 it :op1-of of )  :mod once )  )  :arg1-of ( allow :arg0 it )  :arg2 lightweight )  :op3 electronic :op4 device :op5 such :op6 tablet :op7 e-reader :op8 smartphon :quant ( all :mod-of altitude )  )
instruct :arg0 crew :arg1 passenger :location ( instance :arg1-of rare :mod ( visibility :arg1-of low )  )  :purpose ( turn :arg1 device :time land )
and :arg1-of ( bin :mod overhead :op2-of ( or :arg0-of ( stow :arg1 device :arg1-of ( recommend :arg1-of ( recommend :arg0 group :mod also )  )  :manner safe )  :op1 seat )  )  :op1 ( take :arg1 off )  :op2 ( land :arg1 heavy )
create :arg0 ( fan :arg1-of travel )  :arg1 ( scene :mod terrible )  :time ( before :location-of ( flare :arg1 ( thing :name ( name :op1 veltins :op2 arena )  )  )  :op1 ( derby :mod district :prep-against ( organization :name ( name :op1 schalke )  )  )  )
announce :arg0 ( organization :name ( name :op1 borussia :op2 dortmund )  )  :arg1 ( consequence :mod serious )
respond :arg0 ( ultra :arg0-of ( silence :arg1 initial )  :arg1-of ( match :arg0 friday :time before )  )  :arg1 stuttgart
kick :arg0 ( runner :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg1 ( match :arg0 up :arg1 it )  :arg2 ( signal :arg1 ( thing :name ( name :op1 iduna :op2 park )  )  )  :op1-of ( before :op2 off :path-of ( create :arg0 ( atmosphere :mod ( ghostly :degree almost )  :mod ( usual :polarity - )  )  :arg1 fan :time ( until :op1 ( thing :name ( name :op1 borussia :op2 dortmend )  :op1-of ( and :op2 ( thing :name ( name :op1 vfb :op2 stuttgart )  )  )  )  )  )  )  :time short
chant :arg0 ( fan :mod away )  :arg1 it :arg1-of ( hear :arg0 main :arg1-of possible )
and :op1 ( loud :degree most )  :op1-of ( and :arg0-of ( cry :arg1 ( loyal :degree most )  :arg1-of ( quiet :mod ( usual :polarity - )  :mod initial )  )  :op2 sing :op3 ( battle :arg1 ( stand :arg0 fan :arg1 ( hand :mod other :topic-of ( stand :part south )  )  )  :polarity - :polarity - )  )
chant :arg1 ( remain :arg1-of empty :arg1-of ( coordinate :arg0 individual :mod usual )  :op1-of ( podium :mod capo )  )  :mod unison
and :location ( front :time-of ( stand :arg1 ( large :arg1-of single )  :example text :example flag )  )  :op1 right :op2 ( person :arg0-of ( blow :arg1 wind )  :domain-of section :mod stadium :name ( name :op1 ban )  :wiki ban_ki-moon )
erupt :arg0 only :arg1 ( cheer :arg0 ( person :name ( name :op1 roman :op2 weidenfeller )  )  :arg1 usual )  :arg2 ( step :arg1 ( field :op1-of onto )  :arg1-of ( play :arg0 ( thing :domain goalkeep )  )  )  :condition case :manner briefly
contrast :arg1 ( wave :arg0 ( and :op1 ( person :arg0-of ( have-rel-role :arg1 team :arg2 mate )  :arg1-of ( follow :arg0 everywhere )  )  :op2 sing :op3 ( scarf :arg1 - :mod loud )  )  :arg1 mean )
and :arg0-of ( move :arg1 nothing :arg2 block :manner 12 )  :op1 ( block :mod central :poss ( stand :part ( south :op1-of 13 )  )  )
win :arg0 ( person :arg0-of ( speak :arg1 ( thing :arg1-of ( succeed :arg0 ( person :arg0-of ( raise :arg1 spirit :polarity - )  :name ( name :op1 norbert :op2 dickel )  )  )  :arg2-of ( result :arg0 ( victory :mod derby )  )  )  :arg1-of ( announce :arg0 ( stadium :mod even )  )  :mod ( again :mod once )  )  :arg0-of ( coach :arg1 ( person :arg1-of ( extend :arg0 ( recent :time-of ( day :unit-of temporal-quantity )  )  :arg1-of contract )  :name ( name :op1 j√∂rgen :op2 klopp )  )  )  )  :prep-against ( organization :name ( name :op1 arsenal )  )
lift :arg1 just :arg3 ( shout :arg0-of ( ask :arg1 ( shout :arg1 ( tension :op1-of ( and :arg1-of ( climb :arg0 capo :arg2 ( podium :op1-of onto )  :time ( before :op1 ( kick :arg1 off :location-of ( temporal-quantity :quant 5 :unit minute )  )  )  )  )  )  )  :arg2 ( section :mod each :part-of ( fan :mod usual )  )  :time-of ( tangible :mod almost :time ( until :op1 point )  )  )  :mod large )
and :op1 ( leave :arg1 ( stand :mod south )  :time ( until :op1 ( end :arg1 ( section :mod ( loud :degree most :mod-of always )  :part-of stadium )  )  )  )  :op2 ( resume :arg0 stand :arg1 ( role :mod usual )  :time final )
kick :arg0 ( south :arg1-of ( come :op1-of and )  :arg1-of ( stand :time soon :time winner )  )  :arg1 ( everything :arg1-of normal )  :arg2 ( off :arg2-of ( request :arg0 vociferou :location derby )  )  :example back
silence :arg2-of ( react :arg1 ( event :mod ( temporal-quantity :mod-of indeed :op1-of previous :unit day )  )  )  :time previous
travel :arg0 ( person :arg1-of do :arg1-of ( hit :mod almost )  :mod goalkeep :name ( name :op1 roman :op2 weidenfeller )  )  :arg1 ( fan :arg0-of ( fire :arg1 ( flare :arg0 ( and :op1 ( onto :op1 pitch )  )  :arg1 and )  :arg2 ( crowd :mod spectator )  :time ( before :mod immediately :op1 ( derby :arg1-of local :mod district :prep-against ( organization :name ( name :op1 fc :op2 schalke :op3 04 )  )  )  )  )  :quant some )
delay :arg1 ( kick :arg1 off )  :arg2 ( account :quant-of ( scene :mod chaotic )  )
result :arg1 hans_blix :arg1-of ( have-org-role :arg0 ( person :arg0-of ( represent :arg1 fan )  :arg1-of ( meet :arg1-of ( comfortable :mod rather :mod ( ultra :arg1-of ( believe :arg0 ( he :arg0-of ( word :arg1 and )  :arg0-of ( head :arg1 ( invite :arg1 joachim )  )  :poss-of office )  )  :mod-of fan :mod-of group )  :mod this )  )  )  :arg2 chairman )
announce :arg0 ( ultra :arg0-of ( movement :arg2 evening )  :arg1-of ( impact :arg0 there :arg2 entire :mod massive )  )  :arg1 ( discuss :arg0 panel :arg1-of ( have-org-role :arg0 bvb :arg2 chairman )  :arg2 ( country :name ( name :op1 &quot; )  )  )  :arg2 thursday
prohibit :arg0 ( person :name ( name :op1 watzke )  )  :arg1 ultra :arg2 ( organize :arg0-of ( choreograph :arg1 thing )  :arg1 ( match :arg1 ( organization :name ( name :op1 vfb :op2 stuttgart )  )  :arg3 home )  )  :prep-as ( measure :time immediate )
explain :arg0 ( he :arg2-of ( ban :arg0 i :arg1 it )  )
possible :arg1 ( ignore :arg0 ( we :arg0-of ( regard :arg1 ( pyrotechnic :location ( country :name ( name :op1 saxony )  )  :time zero )  )  )  :arg1 ( policy :arg1-of tolerate )  )  :polarity -
give :arg0 ( they :arg0-of ( decide :arg1 ( accept :arg0 one :arg1 ( differ :arg1 ( punish :arg0 addition :arg1 now :quant several )  )  )  :arg2 ( tuesday :op1-of until )  )  )  :arg1 option :arg2 ultra
say :arg0 ( person :name ( name :op1 watzke )  )  :arg1 ( impose :arg1 ( sanction :time ( end :arg1 ( week :mod next )  )  )  :mod otherwise )
assure :arg0 it :arg1 ( person :mod severe :name ( name :op1 &quot; )  )
interest :arg0 ( see :arg0 it :arg1 ( react :time then )  :prep-in ( stand :part south )  )
feel :arg0 pinch :arg1 ( shine :arg1 pawnbroker :arg2 ( class :mod middle )  :location ( country :name ( name :op1 singapore )  :wiki singapore )  )
and :arg1-of ( pair :arg0 ( person :arg0-of ( swap :arg1 ( shop :arg0 pawnshop :arg1 centre-left )  )  :mod ( country :name ( name :op1 singapore )  :wiki singapore )  :name ( name :op1 at )  :poss-of ( ring :mod bangle :mod gold :poss ( she :arg0-of ( pay :arg1 earring )  :arg1-of ( have-rel-role :arg0 person :arg2 daughter )  :poss-of ( school :mod-of fee )  )  )  )  )
say :arg0 ( i :arg1-of ( have-rel-role :arg0 ( person :op2-of ( and :op1 i :op3 ( buy :arg0 i :arg0-of ( cause :arg1 money )  :arg1 all :mod just :op1-of house :op1-of mr )  )  )  :arg2 husband )  )  :arg1 amirthalinga :arg2-of ( stick :arg0 ' :arg1 there )
say :arg1 ( suffice :arg0 ( temporal-quantity :unit month )  :arg1 ( income :frequency ( month :unit-of temporal-quantity )  :poss family )  :op2-of ( and :op1 ( work :arg0 ( she :arg0-of ( earn :arg1 administrator :arg2 ( name :op1 s-400 )  :op1-of even )  )  :arg1 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  )  :polarity - )
list :arg0 ( country :arg1-of ( become :arg1-of ( demand :arg0 such :location ( across :op1 ( part :location ( world-region :name ( name :op1 southeast :op2 asia )  :wiki southeast_asia )  )  )  :manner indeed )  :arg2 pawnshop :time ( week :mod this )  )  :location-of ( carry :arg0 she :arg1 ( transact :arg1 ( rise :arg1 ( debt :mod household )  )  )  )  :name ( name :op1 valuemax )  )  :arg1-of ( exchange :arg0 ( country :name ( name :op1 singapore )  :wiki singapore )  :mod stock )
contrast :arg1 almost :arg2 ( ' :arg1-of case :mod amirthalinga )  :arg2-of ( secure :arg0 ( fast :mod ( mere :arg0-of ( pawn :arg1 jewellery )  )  :mod-of ( way :polarity - )  :mod-of ( cash :mod land :name ( name :op1 s-400 )  )  )  :arg1 ( bank :arg1-of loan )  :arg1-of cheap :polarity - )
charge :arg0 ( pawnbroker :location ( country :name ( name :op1 singapore )  :wiki singapore )  )  :arg1 ( rate :arg0-of ( effective :arg1 ( local :arg1 ( person :arg0-of ( lend :arg1 ( shop :arg1 ( monetary-quantity :unit cent )  :arg3-of ( offer :arg0 ( organization :name ( name :op1 united :op2 overseas :op3 bank )  )  :arg1 ( monetary-quantity :unit cent )  :arg2 branch )  :mod-of ( centre-left :arg1-of ( same :arg0 17 )  )  )  )  )  )  )  :mod percentage )  :arg1-of typical :path ( above :mod just )
and :op1 advantage :op2 ( possible :arg1 ( arrange :arg0 pawnbroker :arg1 loan :arg2 salary :manner fast )  )  :op2-of ( or :arg1-of ( require :arg2 ( check :arg1 ( credit :arg0 bank )  )  :polarity - )  :op1 proof )
balloon :arg1 ( household :op1-of ( and :arg1-of rise :op2 ( and :arg0-of ( squeeze :arg1-of ( feel :arg0 family :time-of ( turn :arg0 ( person :location ( across :extent-of million :op1 region )  )  :arg2 pawnshop )  )  )  :op1 ( cost :arg1 ( live :arg1 hence )  )  :op2 ( person :arg0-of consume :mod-of debt )  )  )  )
and :op1 low :op2 middle :op3 income :op4 ( turn :arg1 ( family :arg1-of ( differ :arg2 economy )  )  :arg2 shop :purpose pawn :time ( after :op1 ( fuel :arg0 ( policy :arg1-of loose :topic money )  :arg1 ( credit :arg1 5 :arg1-of cheap :op2-of ( and :duration ( year :unit-of temporal-quantity )  :op1 ( grow :arg1 ( economy :arg1-of ( advanced :arg0 slow )  )  :mod robust :time since )  )  )  :arg2 ( crisis :mod finance :mod globe )  )  )  )
factor :prep-on-of ( risk :arg0 bank :arg1 ( continent :name ( name :op1 asia )  :wiki asia )  :arg1-of ( cite :arg0 ( agency :arg1-of ( rate :arg0 poor )  )  :arg3-of ( increase :arg0 ( week :mod this )  :arg1 ( household :arg1-of leverage )  )  )  :arg2 creditworthines :arg2-of ( rise :arg1 mortgage :mod main )  )
say :arg0 it :op1-of ( and :op2 ( country :name ( name :op1 malaysia )  :poss-of ( ratio :arg1-of gross :location ( continent :name ( name :op1 asia )  :wiki asia )  :mod domestic :op1 product )  :wiki malaysia )  :op3 ( country :name ( name :op1 thailand )  :wiki thailand )  :op4 ( country :name ( name :op1 singapore )  :wiki singapore )  :op5 ( debt :arg1-of ( high :degree most )  :mod household )  )
top :arg0 ( country :arg0-of ( list :arg1 60 :arg2 ( date-entity :poss-of 80 :year 2008 )  )  :name ( name :op1 malaysia )  :wiki malaysia )  :arg1 ( monetary-quantity :unit cent )  :arg2 ( monetary-quantity :unit ( cent :mod gdp )  )
worry :arg0 economist :arg1 ( level :arg1-of high :mod-of ( debt :arg1-of ( emerge :arg0 ( week :mod this )  :arg2 ( recession :arg1 technical )  :manner narrowly )  :mod ( person :arg0-of consume :location ( country :name ( name :op1 thailand )  :wiki thailand )  )  )  )  :mod also
show :arg0 data :arg1 ( and :op1 ( soften :arg1-of ( demand :arg0 ( person :arg0-of consume )  )  )  )  :arg2 ( weak :arg1 export :arg1-of continue )  :location thursday
say :arg1 ( economist :mod-of cimb )  :arg2 ( person :name ( name :op1 song )  :op1-of seng :wiki - )  :condition ( look :arg0 ( person :arg1-of cost :arg2-of ( rise :arg0 ( line :arg0-of ( end :arg1 of )  :arg2-of ( bottom :arg1 that )  )  :arg1 ( country :mod-of bank :name ( name :op1 malaysia )  :wiki malaysia )  )  )  :arg0-of ( supplement :arg2 income )  :arg1-of ( possible :arg0 they )  :arg1-of ( low :arg0 middle :arg2 ( scale :mod income )  )  :arg2 wherever )
add :arg0 ( person :arg0-of ( take :arg1 ( opportunity :mod cash )  :time ( value :arg1 ( jewellery :mod family )  :arg2 ( high :arg1 historically )  )  )  )  :arg1 ( price :arg1 gold )  :arg2 ( rush :arg1 ( temporal-quantity :arg0-of ( personal :arg1 ( thing :arg0-of belong )  )  :op1-of past :quant 2 :unit year )  :arg2 pawn )
pawn :location ( city :location state :location-of 200 :location-of ( pawn :arg0 item :arg1 ( monetary-quantity :quant ( 70 :poss ( country :name ( name :op1 singapore )  :wiki singapore )  )  :unit cent )  :arg2 gold )  :location-of outlet )
say :arg0 ( person :arg0-of ( look :arg1 ( price :arg1 good )  :arg2 gold )  :arg0-of ( let :arg1 ' :arg2 pawn :op1-of ( and :op2 grandma :op3 gold :op4 chain :op5 ( it :quant-of ( temporal-quantity :quant next :unit month )  )  :op6 back )  )  )
see :arg0 ( person :arg0-of ( operate :mod pawnshop )  )  :arg1 20 :location ( country :name ( name :op1 thailand )  :wiki thailand )  :manner-of ( use :arg0 ( customer :quant ( number :arg1-of ( rise :arg0 ( large :degree most )  :arg3 ( monetary-quantity :unit cent )  )  )  )  :arg1 outlet :time ( month :mod recent :unit-of temporal-quantity )  )
contrast :arg2 ( say :arg0 ( person :arg0-of ( have-org-role :arg1 executive :arg2 director )  :mod ch :name ( name :op1 lee )  :op7-of ( and :arg2-of ( resemble :arg1 it )  :op1 ( grow :arg1 pawn :op1-of such )  :op2 business :op3 ( person :arg0-of ( operate :arg1 of )  :mod that )  :op4 outlet :op5 15 :op6 ( expand :arg0-of ( neighbor :arg1 ( country :name ( name :op1 malaysia )  :wiki malaysia )  :mod ( only :polarity - )  )  :arg1 it :arg1-of ( plan :arg0 ( country :name ( name :op1 singapore )  :wiki singapore )  :time other )  )  )  :wiki - )  :arg1 yeah )  :op2-of ( outside :op1 ( shop :quant 4 )  :op3 ( continent :name ( name :op1 asia )  :wiki asia )  :op4 too )
fund :arg0 company :arg1 ( raise :arg1 ( monetary-quantity :unit ( cent :name ( name :op1 s-400 )  )  )  :manner ( use :arg1 60 )  :manner listing :time ( week :mod this )  )  :arg2 ( exchange :arg0 ( country :name ( name :op1 singapore )  :wiki singapore )  :arg1 stock )
say :arg0 ( yeah :mod ( country :name ( name :op1 ms )  )  )  :arg1 ( add :arg1-of direct :arg2 debt :mod also :polarity - )  :time ( come :arg1 ( lend :arg0-of ( while :arg1 ( cheap :arg0 some :arg1 ( rate :arg1-of ( offer :arg0 ( pawn :arg1 ( only :polarity - )  )  )  :arg1-of lend )  )  )  :arg1 ( discount :arg1 other )  :arg1-of fire )  :purpose ( rate :mod ( interest :arg1-of high )  )  )
say :arg0 she :arg1 ( and :op1 customer :op2 ( item :arg1-of mortgage )  :op3 ( already :mod that )  :op4 ( own :arg1 ( asset :arg1-of personal )  )  :op5 monetise :op6 ( increase :arg0 they :arg1 household :arg2 debt :polarity - )  )
mean :arg1 ( accept :arg1 society :arg1-of increase :arg2 pawnbrok )  :arg2 ( secure :arg1 ( secure :arg1-of finance )  :arg2 short )
stretch :arg0 ( person :arg0-of ( use :arg1 pawnbroker )  :mod type )  :arg1 only :manner finance
possible :arg1 ( command :arg0 ( watch :op2-of ( or :arg1-of ( pawn :arg0 ( person :location ( country :arg0-of ( purchase :arg1 60 :arg1-of ( price :location cash :op1-of ( cent :unit-of monetary-quantity )  )  )  :name ( name :op1 singapore )  :wiki singapore )  :mod wealthy )  :arg2-of ( use :arg1 outlet :mod also )  )  :op1 ( bar :mod gold )  )  )  )
see :arg0 we :arg1 customer :arg3 ( walk :mod life :quant all )
say :arg0 ( need :arg0 ( individual :arg0-of ( borrow :arg1 term :arg2 short )  )  :arg1 yeah :arg1-of ( need :arg0 ( or :arg1-of ( invest :arg0 ( or :arg1-of ( need :arg0 amr-unknown :arg1-of ( include :arg0 they :arg2 wealth )  )  :op1 business :op2 venture )  )  :op1 small :op2 business )  :op1-of ( over :op2 tide )  )  :arg1-of ( flow :arg0 cash )  )  :arg1 ( country :name ( name :op1 &quot; )  )
need :arg0 they :arg1 money :arg1-of ( quick :degree very )  :mod just :time sometimes
want :arg0 ( person :name ( name :op1 snowden )  )  :arg1 ( help :arg1 ( company :name ( name :op1 yahoo )  :op2-of ( and :op1 ( company :name ( name :op1 google )  :wiki google )  :source-of ( data :arg1-of siphon :poss ( organization :name ( name :op1 nsa )  )  )  )  :wiki yahoo! )  :arg0 person )
increase :arg1 ( explode :arg1 ( scandal :arg1-of ( clarify :arg0 ( person :name ( name :op1 edward :op2 snowden )  )  :arg1-of ( help :arg2 ( country :name ( name :op1 germany )  :wiki germany )  :arg2-of ( interest :arg1 ( whistleblow :mod ( organization :name ( name :op1 secret :op2 service )  )  )  :mod fundamental )  )  )  :mod espionage :mod ( organization :name ( name :op1 nsa )  )  )  )
state :arg0 ( person :name ( name :op1 hans-christian :op2 str√∂bele )  )  :arg1 ( have-org-role :arg0 ( person :arg0-of ( meet :arg1-of ( surprise :arg0 ( investigate :arg1-of ( say :arg0 ( person :arg0-of ( have-org-role :arg1 ( political-party :name ( name :op1 green :op2 party )  :wiki green_party_of_the_united_states )  :arg2 mp )  )  )  :op1-of or :op1-of committee :op1-of before )  :arg2 ( address :arg0 ( country :name ( name :op1 russia )  :wiki russia )  :arg1 condition )  )  )  :arg1-of ( employ :arg0 service )  )  :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2 attorney :purpose district :time ( former :mod-of secret )  )
say :arg0 ( he :arg0-of ( legal :arg1 ( situation :mod complex )  )  :arg1-of ( refer :arg0 ( person :name ( name :op1 snowden )  )  )  )  :arg1 ( program :mod panorama )
package :arg0-of ( rescue :arg1 ( health :mod ( thing :name ( name :op1 tassie )  )  )  )
insist :arg1 ( government-organization :arg0-of ( govern :arg1 federal )  :arg0-of ( rescue :arg1 ( attach :arg0 state :arg1 that :arg1-of ( ail :mod-of ( health :mod-of system )  )  :arg1-of tough :arg1-of ensure :arg1-of ( govern :arg0 ( government-organization :arg0-of ( waste :arg1 fund :polarity - )  )  )  :mod-of condition )  :op1-of package )  )
cause :arg0 crisis :arg1 ( take :arg0 ( organization :arg1-of ( have-org-role :arg2 ( minister :mod ( health :mod federal )  )  )  :name ( name :op1 commonwealth )  :wiki virginia )  :arg1 urgent :arg1-of announce :arg2 ( off :arg2-of ( age :arg0 state :arg1 island )  )  :arg3 head :op1-of ( and :arg1-of ( constrain :arg0 ( population :arg0-of ( high :arg1 rate )  )  )  :op2 of :op3 chronic :op4 disease :op5 system )  :purpose action )
decide :arg1 ( temporal-quantity :quant 4 :unit year )  :arg1-of fund :time ( after :op1 ( consult :arg0 ( government-organization :arg0-of govern )  :arg1 ( person :arg0-of ( depend :arg1 ( thing :name ( name :op1 tasmanian )  )  :polarity - )  :arg1-of ( have-org-role :arg0 person :arg2 mp )  :name ( name :op1 andrew :op2 wilkie )  )  )  )
say :arg0 ( person :arg1-of ( come :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 &quot; )  )  )  :arg0-of ( address :arg1 ( thing :arg2-of challenge )  :arg1-of ( believe :arg0 ( we :arg0-of ( face :arg1 state :arg2 by :time unique )  :arg1-of ( rescue :arg0 emergency :op1-of package )  )  )  )  )  )  :name ( name :op1 &quot; )  )  :arg1 today
include :arg1 ( blitz :arg1 ( surgery :arg1 31 )  :mod elective )  :arg2 package
orthopedic :op1-of ( and :op2 ( surgery :arg1-of ( clear :arg2-of ( help :arg0 ( operation :mod additional :time ( date-entity :year 2600 )  )  :arg1 backlog )  )  :arg2 cataract )  )
and :op1 ( walk :arg1 ( money :mod also )  :arg2 clinic :op1-of and )  :op2 ( good :op1-of after )  :op3 ( person :arg0-of ( specialize :arg1 medicine :arg2 mental )  :arg2-of ( train :arg1 ( record :arg1-of personal :arg1-of ( local :arg2 hospital )  :arg1-of system :mod-of ( health :mod electronic )  )  )  :arg2-of ( care :mod hospital )  )  :op4 health :op5 service
say :arg0 ( i :arg2-of ( tell :arg0 ( line :arg0-of ( tend :arg1 ( tasmania :mod-of ( health :mod ' :mod-of system )  )  )  )  :arg1 ( good :degree most )  :time clinician :time ( front :arg2-of ( invest :arg0 this :arg0-of ( respond :arg1 that )  :arg1 idea )  )  )  )  :arg1 way
insist :arg0 ( minister :arg2-of have-org-role )  :arg1 ( face :arg0 ( government-organization :arg0-of report :arg0-of accountable :arg0-of govern )  :arg1 ( and :consist ( regime :mod strict )  )  )
extra :mod-of ( fund :arg1-of ( spend :arg1-of ( report :manner ( temporal-quantity :unit month )  :op2-of ( and :op1 ( receive :arg1 ( cash :mod ( organization :name ( name :op1 commonwealth )  :wiki virginia )  )  :condition-of ( maintain :arg0 state :arg1 ( level :arg1-of fund :time current )  )  )  )  )  )  )
and :op1 ( effective :arg1 ( deliver :arg0 state :arg1 service :arg1-of ( ensure :arg0 ( commission :mod ( person :quant 3 )  )  )  )  )  :op2 ( possible :arg1-of efficient )
say :arg0 mr :arg1 ( put :arg0 ( public :mod-of ( health :mod-of system )  )  :arg1 tasmania :arg1-of ( follow :arg0 it )  :arg1-of ( foot :arg1-of ( sustain :degree more )  )  :arg1-of ( reform :arg0 genuine )  :arg2 ( count :arg0 325 :arg1 ( little :mod-of unles )  )  )  :time today
praise :arg0 he :arg1 ( government-organization :arg0-of govern :arg0-of ( respond :arg1 ( request :arg1 ( assist :arg1-of ( raise :arg0 ( he :arg0-of ( have-org-role :arg2 ( minister :mod prime )  )  )  :time ( begin :arg1 ( date-entity :month 5 )  )  )  :mod urgent )  )  )  )  :time nevertheles
say :arg0 ( i :arg0-of ( take :arg1 ' :arg1-of long :arg2 off :arg3 towards )  :arg0-of ( go :arg1 way :arg4 ( assist :arg0 federal :arg1 package :arg1-of hopeful )  )  )  :arg1 wilkie :arg2-of ( list :arg0 state :arg1 mr :arg1-of ( critical :arg0 ( public :mod-of ( health :mod-of system )  )  )  )
say :arg0 ( government-organization :arg0-of ( govern :arg1 state )  )  :arg1 ( reverse :arg0 ( procedure :mod elective :mod additional :mod this )  :arg1 ( cut :time recent )  :degree large )
contrast :arg1 federal :arg2 ( oppose :arg0-of ( have-org-role :arg2 spokesman )  :arg0-of ( believe :time ( today :time-of ( announce :arg0 band )  )  )  :arg1 ( aid :arg0 solution )  :mod-of health )
tell :arg0 ( we :mod-of reason )  :arg1 tv :name ( name :op1 abc )  :prep-against ( system :mod ( health :mod of :op1 it )  )  :time he :time million :time ( rip :arg0 state :arg1 430 :arg1-of ( govern :arg0 government-organization )  :arg2 out )  :time ( labor :mod that )  :time here
and :op1 300 :op2 ( pretend :arg0 ( government-organization :arg0-of ( rip :arg1 state )  :arg0-of govern )  :arg1 day :op4-of ( and :op1 ( monetary-quantity :unit dollar )  :op2 ( organization :name ( name :op1 commonwealth )  :wiki virginia )  :op3 ( put :arg0 you :arg1 ( almost :op1 half )  )  )  :polarity - )  :op3 ( good :mod-of news )
call :arg0 ( thing :name ( name :op1 mr :op2 dutton )  )  :arg1 ( thing :name ( name :op1 ms :op2 plibersek )  )  :arg1-of ( rescue :arg0 package )  :arg2 ( guarantee :arg1 ( spend :arg0 - :arg1 ( bureaucracy :mod additional )  :arg3 ( monetary-quantity :unit dollar )  )  )
contrast :arg1 ( heavy :mod also )  :arg2 ( and :op1 ( person :arg0-of ( recommend :arg1 it )  :name ( name :op1 guillaume )  )  :op2 ( produce :arg0 exceptional :arg1 ( thing :arg1-of adapt :mod-of of )  )  :op3 ( design :arg2-of ( boast :arg0 ( diderot :mod deni )  :mod novel )  )  :op4 period :op5 detail )
tell :arg0 ( unfold :arg0 ( country :name ( name :op1 france )  :wiki france )  :arg1 ( send :arg0 family :arg1 ( aristocrat :mod young )  :arg2 convent )  :location 1760 )  :arg1 ( story :mod grim :topic ( person :name ( name :op1 suzanne )  )  )
and :op1 ( experience :arg0 ( she :arg1-of ( rebel :arg0 ( person :mod another )  )  )  :arg1 ( cruel :mod extreme )  :arg2 ( hand :part-of ( country :mod sadistic :name ( name :op1 mother :op2 superior )  )  )  )  :op2 ( become :arg1 wanton :arg2 ( object :mod ( fascination :mod erotic )  )  )
and :op1 ( that :domain-of problem )  :op5-of ( or :op1 ( slip :arg1 film )  :op2 into :op3 prurience :op4 sensationalism )
resemble :arg0 ( hair :arg1-of ( risk :arg0 ( solemnity :mod ( earnest :poss-of too )  :poss story )  )  )  :arg1 ( ordeal :beneficiary audience )  :arg2 shirt
say :arg0 ( group :mod watchdog )  :arg1 ( destroy :arg0 ( country :name ( name :op1 syria )  :poss-of ability :wiki syria )  :arg1 ( weapon :mod chemical )  )
say :arg0 ( person :arg0-of ( have-org-role :arg2 agent )  :arg0-of ( store :arg1 site )  :arg0-of ( believe :arg1 of )  :mod toxic )  :arg1 ( and :op1 ( destroy :arg0 ( country :name ( name :op1 syria )  :wiki syria )  :arg1-of critical :arg2 ( weapon :mod chemical :mod globe :mod-of watchdog )  )  :op2 ( produce :arg0 equipment :arg1 ( weapon :mod chemical )  )  :op3 ( poison :arg1 gas )  :op4 munition )  :arg2-of ( clash :arg1 fierce :arg1-of ( rage :arg0 thursday :arg2 ( north :part-of ( close :quant 1 )  :part-of country )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :mod-of group :name ( name :op1 syria )  :wiki syria )  :arg2 activist )  :arg0-of ( start :arg1 ( war :location ( country :mod-of civil )  :mod-of nearly :mod-of ( temporal-quantity :quant 3 :unit year )  )  :time since )  :arg1-of ( kill :arg0 ( thursday :mod also )  )  )  :arg1 more
come :arg1 ( announce :arg1 ( organization :name ( name :op1 organization :op2 for :op3 the :op4 prohibition :op5 of :op6 chemical :op7 weapons )  )  )  :arg3 ( ahead :time day )
render :arg0 ( or :arg0-of ( operate :arg1 all )  :arg1-of ( destroy :arg0 ( organization :arg1-of ( base :location ( city :name ( name :op1 the :op2 hague )  :wiki the_hague )  :location ( city :name ( name :op1 damascus )  :wiki damascus )  :location deadline )  )  )  )  :arg1 ( and :op1 ( produce :arg1 weapon )  :op1-of ( and :arg0-of ( fill :arg1 munition )  :op2 ( mix :arg0 machinery :arg1 chemical )  :op3 ( gas :arg1-of ( poison :arg0 into )  )  )  :op2 facility )  :arg2 chemical :extent 1
aim :arg0 ( timeline :mod ambitious )  :arg1 that :arg1-of ( destroy :arg0 ( city :name ( name :op1 damascus )  :wiki damascus )  :arg2 ( weapon :mod chemical :mod ( mid :mod-of ( date-entity :year 2014 )  )  )  :quant all )  :arg1-of significant :arg1-of ( destroy :arg0 ( amr-unknown :arg2-of ( complete :arg0 of )  )  :mod ( stage :mod ( initial :mod essential )  :mod-of milestone )  )
mean :arg1 ( destroy :arg1 equipment )  :arg2 ( possible :arg1 ( produce :arg0 ( country :name ( name :op1 syria )  :wiki syria )  :arg1 ( weapon :mod chemical :mod new )  )  :polarity - )
stockpile :op2-of ( and :arg1-of ( destroy :arg1-of ( start :arg0 ( city :name ( name :op1 damascus )  :wiki damascus )  )  )  :op1 ( weapon :arg1-of ( exist :manner still )  )  )
and :op1 ( believe :arg1 country )  :op2 ( sarin :mod ( agent :mod nerve )  )  :op4-of ( and :op1 ( chemical :quant ( mass-quantity :unit ( ton :mod metric :quant around )  )  )  :op2 weapon :op3 ( mustard :mod-of gas )  )
storage :arg1-of ( fight :arg1-of ( rage :arg1-of ( say :arg0 ( person :arg0-of ( report :arg1 ( thing :name ( name :op1 britain-based :op2 syrian :op3 observatory )  )  :time-of ( come :arg1 ( announce :arg0 ( country :name ( name :op1 safira )  :name-of town )  :arg1 ( human :mod-of right )  )  )  )  :arg1-of expert )  :arg2 ( chemical :mod-of ( weapon :arg1-of ( produce :arg0 ( home :beneficiary facility )  )  )  )  )  :time thursday )  )  :location site
say :arg0 ( group :arg0-of ( have-org-role :arg1 ( country :location-of ( network :consist-of activist )  :name ( name :op1 syria )  :wiki syria )  :arg2 activist )  :arg0-of ( track :arg1 ( toll :mod ( die :arg1 thursday )  )  )  )  :arg1 ( die :arg1 person )
say :arg0 child :arg1 civilian
say :arg0 ( government-organization :arg0-of ( govern :arg1 side )  :arg0-of ( arm :arg1 ( person :name ( name :op1 assad )  :name ( name :op1 bashar )  :poss-of force :wiki bashar_al-assad )  )  :arg1-of ( have-org-role :arg0 ( person :arg0-of ( have-org-role :arg1 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 lebanon )  :op1-of ( and :op2 ( political-party :name ( name :op1 hezbollah )  :poss-of militant :wiki hezbollah )  )  :wiki lebanon )  )  :arg1-of ( fight :arg0 person )  )  :arg2 president )  )  :arg2 member )  )  :arg1 it
say :arg0 many :arg1 ( and :op1 ( defector :mod army )  :op2 ( person :arg0-of fight :arg0-of ( oppose :arg1 foreign )  :mod some )  )  :mod also :source dead
estimate :arg0 ( organization :name ( name :op1 u.n. )  :wiki united_nations )  :arg1 ( die :arg1 7 :arg2 ( conflict :arg1 25 :time since )  )  :time ( date-entity :year 2011 )  :time ( date-entity :month 3 )
update :arg0 it :arg1 ( figure :location since :mod that )  :polarity -
flee :arg0 ( person :arg1-of ( force :arg0 conflict )  :op1-of some :quant 2 )  :arg1 country
of :mod ( many :mod ( person :arg0-of ( rebel :arg1 troop )  :arg1-of ( battle :arg0 ( person :name ( name :op1 assad )  :wiki bashar_al-assad )  )  :arg2-of ( link :arg0 they :arg1 ( criminal-organization :name ( name :op1 al-qaida )  :op1-of group :wiki al-qaeda )  )  )  :quant-of ( temporal-quantity :unit week )  )
say :arg0 observatory :arg1 ( contrast :arg0 ( specific :polarity - )  :arg2 ( casualty :poss ( side :mod both :mod-of thursday )  )  )
danger :arg0-of ( inspect :arg1 ( weapon :mod chemical )  :arg1-of ( rid :arg0 ( country :mod-of of :name ( name :op1 syria )  :poss-of ( arsenal :mod toxic )  :wiki syria )  )  :arg1-of ( fight :arg1-of underscore )  :arg1-of ( face :arg0 ( they :arg0-of ( war :arg1 midst :mod ongo :mod civil )  :arg0-of ( tight :arg1 deadlin :op2-of ( against :op1 race )  )  )  :time mission )  )
state :arg1 ( and :arg1-of ( say :arg0 ( organization :name ( name :op1 united :op2 nations )  :poss-of ( close :arg2-of ( work :arg1 it )  )  :wiki united_nations )  )  :arg1-of ( see :arg0 ( team :arg0-of ( satisfy :arg1 that :mod now )  :poss it )  :arg1-of ( destroy :arg0 ( country :arg0-of ( produce :arg1 ( and :arg1-of ( mix :arg2 ( slash :arg0-of ( fill :arg1 equipment )  )  )  :arg1-of ( critical :arg1-of ( declare :arg0 of )  )  )  )  :name ( name :op1 syria )  :wiki syria )  )  :arg1-of verify )  :quant all )
add :arg0 it :arg1 ( inspect :arg1 further :arg1-of ( plan :time current )  :arg1-of activity :polarity - )
say :arg0 ( person :arg0-of inspect )  :arg1 ( complete :arg0 ( they :arg0-of ( visit :arg1 21 :arg2 ( site :arg1-of ( declare :arg0 ( city :name ( name :op1 damascus )  :wiki damascus )  )  )  )  )  :arg1 ( round :mod-of ( work :arg1 ( verify :arg1 23 )  )  )  )  :time ( early :op1 ( week :mod this )  )
say :arg0 ( person :arg0-of inspect :arg1-of ( concern :arg0 security :arg1-of ( cause :time-of ( visit :arg0 they :arg1 ( site :quant 2 )  )  )  )  )
say :arg0 location :arg1 ( and :arg1-of ( say :arg0 thursday )  :arg1-of abandon :arg1-of ( contain :arg0 they )  :op1 chemical :op2 ( program :op1-of weapon :poss ( country :name ( name :op1 syria )  :wiki syria )  )  :op3 ( move :arg0 item :arg1 ( inspect :arg0 site )  :arg1-of ( declare :arg0 other )  )  )  :time 2
possible :arg1 ( visit :arg0 ( person :arg0-of ( inspect :arg1 ( country :name ( name :op1 opcw )  )  )  )  :arg1 ( site :quant 2 )  :arg2 ( clear :arg0 it :arg1 ( facility :location ( country :name ( name :op1 safira )  )  )  :polarity - :time immediate )  )  :polarity -
plan :arg0 ( country :name ( name :op1 syria )  :wiki syria )  :arg0-of ( approve :arg1 committee :arg2 executive :op1-of ( next :mod-of ( temporal-quantity :unit month )  )  )  :arg1 ( destroy :arg0 it :arg1 of :arg1-of submit :arg1-of total :arg2 ( weapon :mod chemical :mod that )  )
say :arg0 ( you :arg0-of ( demonstrate :arg1 ( fulfill :arg0 ( i :arg0-of ( salute :arg1 ( and :op1 fortitude :op2 courage )  )  )  :arg1 ( challenge :arg0 most :arg1 mission )  )  :mod all )  )  :arg1 ( comment :arg0 uzumcu :arg1 ( release :arg0 ( organization :arg2-of ( undertake :arg0 ever :arg1 by )  :mod this )  :arg1 opcw )  )  :arg2-of ( general :arg0 watchdog :arg1 ahmet :arg1-of ( have-org-role :arg0 ' :arg2 director )  )
and :op1 ( person :name ( name :op1 assad )  :op1-of ( against :arg1-of ( rebel :arg0 ( person :arg2-of ( pit :arg0 year :arg1 civil :mod war :time now )  :mod ( religious-group :mod primary :name ( name :op1 sunni )  )  )  )  )  :wiki bashar_al-assad )  :op2 ( government-organization :arg0-of govern )  :op3 ( security :mod-of force )  :op4 ( person :arg0-of ( have-org-role :arg1 ( stack :arg0 he :arg1 ( offshoot :mod-of ( shiite :mod-of ( religious-group :name ( name :op1 islam )  :wiki islam )  )  )  )  :arg2 member )  )  :op5 sect
say :arg0 ( other :arg0-of ( develop :arg1 ( observatory :arg0-of ( have-org-role :arg1 ( country :location-of coast :name ( name :op1 syria )  :poss-of latakia :poss-of facility :wiki syria )  :arg2 chief )  )  )  )  :arg1 ramus :arg1-of ( strong :arg0-of ( explode :arg1 wednesday :arg1-of ( defend :arg0 air )  :arg2 inside )  )
say :arg0 he :arg1 ( know :arg1 ( cause :arg1 blast )  :polarity - )
anger :arg1 ( island :arg1-of ( sentence :arg1-of bomb )  :name ( name :op1 bali )  :wiki bali )
anger :arg2-of ( react :arg0 ( and :arg0-of ( kill :arg1 ( person :arg1-of ( have-rel-role :arg0 person :arg2 relative )  :quant 202 )  :time ( bomb :arg1 ( island :name ( name :op1 bali )  :wiki bali )  :time ( date-entity :year 2002 )  )  )  :arg0-of ( say :arg1 ( recommend :arg0 survivor :arg1 ( face :arg0 ( person :arg1-of ( sentence :arg1-of ( give :arg2 last :purpose ( face :arg0 plotter :arg1 justice )  )  )  :name ( name :op1 umar :op2 patek )  )  :arg1 ( squad :mod fire )  )  )  )  )  )
of :arg1-of ( run :arg0 ( person :arg0-of ( spend :op1-of ( almost :quant-of ( temporal-quantity :quant 10 :unit year )  )  )  :arg1-of ( sentence :arg0 ( want :arg0 ( he :arg0-of ( explode :arg1 ( use :arg1 device :arg1-of bomb )  :arg2 jail :duration ( temporal-quantity :quant 20 :quant 1 :unit year )  )  :arg0-of ( build :arg1 role )  )  :arg2 ( world-region :name ( name :op1 east :op2 asia )  :wiki east_asia )  :mod most )  :mod yesterday )  :name ( name :op1 patek )  )  )  :mod-of south_korea
possible :arg1 ( release :arg1 he )  :condition ( grant :arg0 ( temporal-quantity :quant 15 :unit year )  :arg1 parole )
and :op1 ( person :mod ( country :name ( name :op1 australia )  :wiki australia )  )  :op2 ( injure :arg1 more )  :op3 ( score :arg1-of ( leave :arg0 ( area :arg1-of ( popular :arg2 ( person :arg0-of tour :arg1-of ( attack :arg1-of ( murder :arg0 88 :arg2-of ( guilty :arg1 ( person :quant 202 )  :arg1-of ( find :arg2 old :concession ( temporal-quantity :quant 45 :unit year )  )  )  :degree mass )  )  )  )  :location-of ( nightclub :quant 2 )  )  )  )
find :arg0 he :arg1 ( guilty :arg1 ( date-entity :year 2000 )  :arg2 ( number :arg0-of ( relate :arg2 terrorism )  :quant-of ( charge :mod ( other :mod-of ( bomb :arg1 church :arg1-of wave :arg4 ( across :op1 ( country :name ( name :op1 indonesia )  :wiki indonesia )  )  )  :mod-of ( festival :name ( name :op1 christmas :op2 eve )  :wiki christmas_eve )  )  )  )  )  :mod also
push :arg1-of possible :arg1-of ( dub :arg0 ( man :prep-to man )  :arg2 ( he :arg0-of ( sentence :arg1 ( person :arg0-of prosecute :arg0-of demand :arg1-of ( sentence :arg0 they :arg2 although )  :poss-of life )  :arg2 die )  :arg0-of ( make :arg1 ( master :mod-of bomb )  )  :mod-of reputation )  )  :mod that :purpose demolition
and :arg1-of ( destroy :arg0 ( person :arg0-of ( have-rel-role :arg2 daughter )  :arg1-of ( lose :arg0 ( thing :name ( name :op1 ( june :mod ( person :arg0-of ( have-rel-role :arg1 ( country :name ( name :op1 perth )  )  :arg2 mother )  )  )  :op2 corteen )  :purpose-of ( reignite :arg0 decide :arg1 ( memory :arg0-of ( pain :arg1 almost )  )  )  )  )  :arg1-of ( twin :arg0 ( temporal-quantity :unit decade )  )  :age ( temporal-quantity :unit year )  )  :arg1-of ( unleash :arg0 ( and :mod 39 :mod old :op1 conspirator )  )  )  :op1 jenny
say :arg0 ( she :arg0-of ( fight :arg1 tear :direction back )  )  :arg1 ( recommend :arg1 ( sentence :arg1 ( person :name ( name :op1 patek )  )  :arg2 die )  )
feel :arg0 i :arg1 ( recommend :arg1 ( follow :arg0 he :arg1 ( footstep :poss ( guy :mod other )  )  )  )  :mod really
tell :arg0 ( person :arg1-of ( put :arg0 ( he :arg0-of ( fire :arg1 squad )  :arg0-of ( recommend :arg1 front )  )  :arg2 of )  :mod ( country :name ( name :op1 &quot; )  )  :name ( name :op1 &quot; )  )  :arg2 ( organization :name ( name :op1 &quot; )  )
and :arg1-of ( see :arg0 ( day :mod every )  :manner-of ( live :arg0 i )  )  :op1 ( person :arg0-of ( have-rel-role :arg1 more :arg2 grandchild )  :arg1-of ( have-rel-role :arg0 person :arg2 daughter )  )
park :arg1 ( van :arg2-of ( load :arg1 ( bomb :arg1-of ( detonate :arg0-of ( level :arg1 ( organization :name ( name :op1 sari :op2 club )  )  )  :time ( after :mod just :op1 11pm )  :time ( date-entity :day 12 :month 10 :year 2002 )  )  :mod massive )  )  )  :location outside
bar :arg0 paddy :arg1 ( person :arg0-of ( bomb :arg1 suicide )  :arg0-of ( load :arg1 explosive :arg2 early )  :arg0-of ( backpack :arg1 ( just :mod-of ( temporal-quantity :quant 20 :unit second )  )  )  :arg0-of ( detonate :arg1 hugh )  )
and :arg1-of ( bomb :arg0 ( he :arg0-of ( long :arg1 coma )  :arg0-of ( support :arg1 ( life :mod while )  )  :arg0-of ( wake-up :arg1 3 )  :arg0-of ( lapse :arg1 ( month :unit-of temporal-quantity )  )  )  )  :arg1-of die
say :arg0 ( thing :name ( name :op1 mr :op2 hughes )  )  :arg1 ( recommend :arg0 ( 4 :quant-of ( temporal-quantity :unit year )  )  :arg1 ( share :arg0 ( person :name ( name :op1 patek )  )  :arg1 ( fate :arg1-of same )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( cell :arg2-of ( responsible :arg0 ( criminal-organization :mod terror :name ( name :op1 jemaah :op2 islamiah )  :wiki jemaah_islamiyah )  :arg1 ( carnage :arg1-of ( execute :arg0 ( person :name ( name :op1 imam :op2 samudra )  :op3-of ( and :op1 ( person :name ( name :op1 amrozi )  )  :op2 ( person :name ( name :op1 mukhlas )  )  )  )  )  )  )  )  :arg2 member )  :mod other :quant 3 )  )  )
recommend :arg1 ( penalize :arg0 anybody :arg2 ( guy :mod this )  :manner die :time before :time really )
him :manner-of ( keep :arg0 alive :arg1 reason :arg3 alive :location there :manner well :polarity ( - :polarity-of ' )  )
and :quant ( many :degree-of ( injure :arg0 ( person :arg0-of ( get :arg1 it :arg3 20 :duration ( temporal-quantity :unit year )  )  :arg1-of ( kill :arg0 202 :time after )  )  :arg2 hundred :degree ( much :quant-of ' )  :polarity - )  )
face :arg0 ( person :arg3-of ( bomb :arg0 person :arg1 ( island :name ( name :op1 bali )  :wiki bali )  )  :domain-of last :name ( name :op1 patek )  )  :arg1 justice
contrast :arg0 almost :arg1 ( avoid :arg0 ( he :part 1 )  :arg1 ( capture :arg1 ( person :arg0-of ( have-org-role :arg1 ( criminal-organization :name ( name :op1 al-qaeda )  :wiki al-qaeda )  :arg2 chief :time former )  :arg1-of ( kill :arg0 ( force :mod ( country :name ( name :op1 us )  :wiki united_states )  )  )  :name ( name :op1 osama :op2 bin :op3 laden )  :time ( late :op1 ( date-entity :year 2011 )  :op2 ( temporal-quantity :op1-of less :quant 4 :unit month )  )  :wiki osama_bin_laden )  )  :duration ( temporal-quantity :unit decade )  )  :arg2 ( apprehend :location ( town :mod ( country :name ( name :op1 pakistan )  :wiki pakistan )  :name ( country :name ( name :op1 abbottabad )  )  )  :time eventual )
testify :arg0 ( agent :mod ( government-organization :name ( name :op1 fbi )  :wiki federal_bureau_of_investigation )  )  :arg1 ( reveal :arg0 ( report :arg0 intelligence )  :arg1 ( meet :arg0 ( person :name ( name :op1 patek )  )  :arg1 ( person :name ( name :op1 bin :op2 laden )  :op1-of ( and :op2 ( link :arg1 ( group :mod ( continent :name ( name :op1 asia )  :wiki asia )  :mod terrorist :mod south_korea )  :arg1-of ( establish :purpose-of effort )  :arg2 ( criminal-organization :name ( name :op1 al-qaeda )  :wiki al-qaeda )  )  )  :wiki osama_bin_laden )  :purpose-of ( country :name ( name :op1 pakistan )  :wiki pakistan )  )  )  :time trial
say :arg0 ( he :arg0-of ( do :arg1 ( give :arg1 m :polarity - )  )  )  :arg1 corteen
cause :arg0 ( he :poss-of ( person :mod other )  )  :arg1 ( feel :arg0 ( he :arg0-of ( do :arg1 amr-unknown :time ( recent :mod just :op1-of until )  )  :arg0-of ( sorry :arg1 ( much :quant-of grief )  :polarity - )  :poss-of really )  )
and :arg1-of ( mark :arg0 ( ceremony :location ( island :name ( name :op1 bali )  :wiki bali )  )  )  :op1 ( come :arg0 ( late :op1 ( year :mod this )  )  :arg1 ( verdict :arg1-of ( attack :topic-of ( anniversary :mod 10th )  )  )  :direction ahead )  :op2 ( country :name ( name :op1 australia )  :wiki australia )
say :arg0 ( person :mod ( country :name ( name :op1 &quot; )  )  :name ( name :op1 &quot; )  )  :arg1 there :time ( of :mod lot :mod-of ( tear :mod-of ( this :mod-of year )  )  )
appeal :arg0 ( person :name ( name :op1 patek )  )  :arg1 sentence :arg1-of possible :time yet
contrast :arg0 ( phone :mod cell :mod-of ( call :arg0 ( air :mod ( organization :name ( name :op1 faa )  )  )  :arg1 - )  )  :arg1 ( plane :arg2-of ( use :arg0 passenger :arg1 gadget :arg1-of ( possible :time now )  )  )
contrast :arg2 ( listen :arg1 music :op6-of ( and :arg0-of ( talk :arg1 cellphon )  :arg0-of ( anticipate :arg1 ( guideline :arg1-of ( issue :arg0 ( government-organization :mod aviation :mod federal :name ( name :op1 administration )  :wiki presidency_of_barack_obama )  :time thursday )  :mod new )  :quant much )  :op1 ( read :arg1-of gate :arg2-of ( use :arg0 ( passenger :mod airline )  :arg1 ( gate :arg1 ( device :mod electronic )  )  :arg1-of possible )  )  :op2 work :op3 ( play :arg1 - )  :op4 game :op5 ( watch :arg1 movie )  )  )
contrast :arg2 ( change :arg1-of ( recommend :arg0 passenger )  :arg1-of ( expect :arg0 immediate :time - )  )
say :arg0 ( person :mod administrator :name ( name :op1 michael :op2 huerta )  )  :arg1 ( vary :arg0 airline :arg1 ( organization :name ( name :op1 faa )  )  :time ( implement :arg1 change :frequency amr-unknown :manner fast )  )  :location ( conference :mod news )
show :arg0 ( organization :name ( name :op1 airlines )  :op1-of ( and :op2 ( meet :arg1 airplane )  :op3 ( guideline :mod new )  :op4 that :op5 ( train :arg1 ( crew :arg1-of flight :arg1-of ( update :arg0 they )  )  :op1-of ( and :op2 manual :op3 ( rule :arg1-of ( stow :arg0 device )  )  :op4 reflect :op5 ( guideline :mod new )  )  )  )  )  :arg1 amr-unknown
say :arg0 ( organization :name ( name :op1 faa )  )  :arg1 ( receive :arg0 electronic :arg1 ( plan :arg0 portable :arg1 ( expand :arg1 ( use :arg1 ( device :topic plane )  )  )  )  :arg2 ( airlin :quant some )  :time already )
and :arg1-of ( plan :arg1-of ( submit :arg0 ( airliner :wiki airbus_a320_family )  :time already )  )  :op1 ( organization :name ( name :op1 delta )  )  :op2 ( organization :name ( name :op1 jetblue )  )
state :arg1 ( expand :arg0-of ( use :arg1 device :arg2 very )  :arg1 electronic :arg1-of ( plan :arg0 condition :time of )  :arg1-of ( approve :arg0 we :arg2 soon )  :arg1-of depend :arg1-of possible )  :arg1-of ( say :arg0 ( organization :name ( name :op1 &quot; )  )  )
and :arg1-of ( require :arg0 passenger :time current )  :op1 smartphon :op2 tablet :op3 ( device :mod ( other :mod-of once )  )  :op4 ( close :arg0 plane :arg1 door )
suppose :arg0 they :arg1 ( go :arg0 ahead :arg1-of ( give :arg0 ( foot :arg0-of ( have-org-role :arg2 captain )  :op2-of ( and :op1 ( reach :arg0 plane )  )  )  :polarity - )  )  :arg1-of ( restart :arg0 until )
suppose :arg1 passenger :arg2 ( turn :arg0 ground :arg1 device :time ( descend :arg0 plane :arg1 ( and :op1 ( land :time ( until :op1 plane )  )  :op2 ( restart :polarity - )  )  )  )  :mod again
say :arg0 ( organization :name ( name :op1 faa )  )  :arg1 ( possible :arg1 ( allow :arg0 airlin :arg1 ( use :arg0 ( passenger :arg0-of ( protect :arg1 plane :arg2 ( interfere :arg1-of land :mod electronic )  :manner proper )  )  :arg1 device :arg2 ( and :op1 takeoff :op2 taxi )  )  :prep-under ( guideline :mod new :op1-of under )  )  )
cause :arg0 ( modify :arg1 ( plane :mod other :op2-of ( and :op1 ( airliner :arg0-of ( meet :arg1 criteria :arg1-of expect )  :mod new :mod most :wiki airbus_a320_family )  )  )  )  :arg1 ( possible :arg1 ( use :arg0 passenger :arg1 wifi :arg2 ( altitude :arg1-of high )  )  )
welcome :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 association :op2 of :op3 professional :op4 flight :op5 attendants )  )  :arg2 president )  :name ( name :op1 laura :op2 glading )  )  :arg1 change
state :arg0 ( and :arg1-of ( implement :arg0 safe )  )  :arg1 ( policy :mod new )  :arg1-of ( say :arg0 once :arg1-of ( win :arg0 ( we :arg0-of ( work :arg1 carrier :arg2 close )  :arg0-of ( do :arg1 that )  )  :arg1-of ( win :arg0 it )  )  )
tire :arg0 ( we :arg0-of ( monitor :arg1 hall )  :arg0-of ( feel :arg1 ( issue :arg0 this )  )  :arg1-of resemble :arg1-of come )  :arg1 frank
contrast :arg1 ( connect :arg1 ( data :arg0-of ( download :op3-of ( or :op1 ( email :arg1-of exchange )  :op2 text )  )  )  :arg2 ( internet :arg1-of surf )  )  :arg2 ( say :arg0 agency )  :condition ( prohibit :arg1 ( foot :op1-of below )  :mod still )
tell :arg1 ( switch :arg0 passenger :arg1 ( device :mod other :mod-of ( mode :manner airplane )  :op3-of ( and :op1 smartphon :op2 tablet )  )  )
cause :arg1 ( scrabble :arg0 ( game :mod ( online :arg1-of ( word :arg1-of ( have-rel-role :arg0 person :arg2 friend )  :arg2-of ( refuse :arg0 ( jet :arg1-of ( boot :arg0 ( famously :domain ( he :poss-of ( name :name-of ( thing :arg0-of ( play :arg1 actor :arg2 smartphone :time ( date-entity :year 2011 )  )  )  :op1 alec :op2 baldwin )  )  )  )  :mod airlin )  :arg1 ( turn :arg1 device :time ( park :arg1 plane :arg2 gate )  )  )  :mod still :polarity - )  )  )  :arg1 type )
cause :arg0 ( concern :arg1 ( possible :arg1 ( injure :arg0 ( they :arg0-of ( go :arg1 ( fly :arg1 heavy :location ( around :op1 cabin )  )  )  )  :arg1 someone )  )  :arg1-of ( stow :arg0 ( device :arg1-of ( continue :op1-of and )  )  :arg2 laptop )  )  :arg1 such
continue :arg1 ( prohibit :arg1 ( call :arg1 ( flight :arg1 in )  :mod cellphone )  )  :mod also
belong :arg0 ( authority :mod regulatory :topic ( call :arg1 ( - :polarity-of ( organization :name ( name :op1 faa )  )  )  :mod phone )  )  :arg1 ( organization :name ( name :op1 federal :op2 communications :op3 commission )  )
lift :arg0 ( organization :arg0-of take-off :name ( name :op1 faa )  )  :arg1 ( ban :arg1-of land )  :arg1-of possible :arg3 ( device :mod electronic :quant some )  :op1-of and
say :arg0 ( person :mod ( organization :name ( name :op1 national :op2 transportation :op3 safety :op4 board )  )  :name ( name :op1 mark :op2 rosenker )  )  :arg1 ( consider :arg1 ( risk :arg0 ( phone :mod cell )  )  :time still )  :purpose ( transport :arg2-of ( safe :arg0 ( temporal-quantity :unit ( month :mod last )  )  :arg1 ( organization :name ( name :op1 cbs :op2 news )  :wiki cbs_news )  :arg2-of ( expert :arg1 person )  )  :mod nation )
contrast :arg1 ( know :arg1 tower :arg1-of ( interfere :arg0 ( create :arg0 it :arg1 device :arg1-of ( possible :arg1-of ( cause :arg0 ( issue :arg0 ( cell :mod-of phone )  )  :mod ( just :mod-of ( potential :domain ( that :mod-of really )  )  )  :polarity - )  )  )  :arg2 navigational )  :arg1-of ( do :arg0 ( we :arg0-of ( say :arg1 ( possible :arg1 ( interfere :arg0 ( government-organization :name ( name :op1 fcc )  :wiki u.s._federal_communications_commission )  :arg1 ( cell :mod-of phone )  )  )  )  )  :arg2 they )  )  :arg2 ( say :arg0 air :arg1 rosenk )
recommend :arg0 ( committee :arg0-of ( advise :arg1 electronic )  :arg1-of ( create :purpose ( examine :arg0 ( organization :name ( name :op1 faa )  )  :arg1 issue )  )  :mod industry )  :arg1 ( permit :arg0 ( government-organization :arg0-of govern )  :arg1 ( use :arg1 ( device :arg1-of personal )  :mod great )  :time ( last :mod-of ( month :unit-of temporal-quantity )  )  )
build :arg0 ( pressure :arg0-of ( ease :arg1 ( restrict :arg1 use )  :purpose-of ( year :unit-of ( temporal-quantity :time recent )  )  )  )  :arg1 ( organization :name ( name :op1 faa )  )
prohibit :arg0 ( person :arg0-of ( criticize :arg1 such :example ( person :name ( name :op1 claire :op2 mccaskill )  )  )  )  :arg1 ( reason :arg1-of valid :arg1-of ( safe :arg1-of ( contend :arg0 ( d :mod-of mo )  :location there )  :polarity - )  )
become :arg1 ( use :arg1 device )  :arg1-of ( enforce :domain-of ( difficult :arg1-of increase :arg2-of ( become :arg1 restrict :mod also )  )  )  :arg2 ubiquitou
indicate :arg0 ( or :op1 ( ignore :arg0 third :arg1 ( direction :arg0-of ( turn :arg1 device :arg2 many )  :arg1-of ( forget :arg0 passenger )  )  )  )  :arg1 ( study :mod some )
respond :arg0 device :arg1 ( report :arg0 electronic :arg1 ( use :arg1 of :arg1-of ( begin :arg0-of ( restrict :arg1 passenger )  )  )  :arg1-of ( communicate :op2-of ( and :op1 navigation :op3 equipment :op4 ( carry :arg0 passenger :arg1 ( tech :arg1-of high :mod-of gadget )  :arg1-of begin :arg1-of radio :time day )  )  )  :arg1-of interfere :time ( date-entity :year 1966 )  )
contrast :arg1 ( reliant :beneficiary ( system :mod electricity )  :degree ( more :degree far )  )  :arg2 ( and :arg1-of ( approve :arg0 ( organization :name ( name :op1 faa )  )  )  :op1 ( design :arg0 ( airliner :mod new :wiki airbus_a320_family )  :arg1 they :mod ( also :mod-of ( interfere :arg1 ( aircraft :consist ( generation :time previous )  )  :arg1-of resist :mod electronic )  )  )  )
offer :arg0 ( organization :arg0-of ( cruise :arg1 altitude :arg2 passenger :duration ( several :op1 ( temporal-quantity :unit year )  )  )  :name ( name :op1 airlines )  )  :arg1 ( use :arg0 ( organization :name ( name :op1 wi-fi )  )  )
resist :arg1 ( plane :arg1-of ( modify :arg2 ( system :mod ( organization :name ( name :op1 wi-fi )  )  )  )  )  :arg2 interfere :degree ( more :degree also )
say :arg0 ( person :name ( name :op1 huerta )  )  :arg1 ( recommend :arg1 ( qualify :arg0 ( majority :degree vast :quant-of ( airliner :wiki airbus_a320_family )  )  :arg1 person :purpose ( use :arg0 ( guideline :mod new )  :arg1 ( device :mod electronic )  :mod great )  )  )
radio :arg2-of ( low :arg0 transmission :arg1 ( much :arg1-of ( general :arg0 device :arg2 electronic :arg3 of )  :arg1-of ( emit :arg0 today :arg2 previous :arg3 device )  :mod-of power )  :arg3 generation )
emit :arg0 e-reader :arg1 ( transmission :arg1-of minimal :arg2-of ( turn :arg0 example :arg1 page )  :mod only )
contrast :arg2 ( strong :arg1 transmission :arg1-of ( download :arg0 ( device :arg0-of ( send :arg1 data :op1-of or )  )  )  )
relax :arg0 ( press :arg1 that )  :arg0-of ( restrict :arg1 ( use :arg0 passenger :arg1 device )  )  :arg1 amazon.com
contrast :arg2 ( find :arg0 ( person :arg0-of ( have-org-role :arg1 company :arg2 official )  :arg0-of ( load :arg1 ( airliner :mod full )  )  )  :arg1 none :op2-of ( and :op1 ( fly :arg1 ( test :arg1 ( e-reader :mod ( organization :name ( name :op1 kindle )  )  )  :arg2 problem )  :mod around )  :time ( date-entity :year 2011 )  )  )
express :arg0 ( person :arg0-of ( have-org-role :arg1 ( committee :arg1-of advise :mod ( organization :name ( name :op1 faa )  )  )  :arg2 member )  )  :arg1 ( feel :arg1 ( present :arg1 ( risk :arg0 ( use :arg1 device )  :mod any )  )  :arg1-of mix )
say :arg0 ( person :name ( name :op1 douglas :op2 kidd )  :poss ( organization :name ( name :op1 national :op2 association :op3 of :op4 airline :op5 passengers )  )  )  :arg1 ( believe :arg0 ( he :domain-of ( genuine :domain ( interfere :arg0 device )  )  )  :arg1 ( minimal :arg1 risk :op1-of even )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 committee :arg2 member )  :mod other )  :arg1 ( and :arg1-of ( support :arg0 ( person :arg0-of pilot )  :arg1-of ( report :arg0 anecdotal :mod only )  )  :op1 ( interfere :arg1 device :arg1-of ( possible :arg1-of report )  :arg2 ( system :instrument-of aircraft )  )  :op2 ( old :degree very )  )  :op1-of most
recommend :arg0 committee :arg1 ( allow :arg0 ( organization :arg0-of ( shut-down :arg1 device :arg2 ( passenger :op1 instrument )  :time ( land :arg1 ( visibility :arg1-of low )  )  )  :arg1-of ( pilot :arg0 person )  :name ( name :op1 faa )  )  )
welcome :arg0 ( group :arg0-of ( call :arg1 ( accommodation :arg1-of ( sense :mod common )  )  )  :arg1-of travel :mod industry )  :arg1 ( change :arg1 ( bristle :arg1 ( public :arg0-of travel )  :instrument technology :time now )  )
say :arg0 ( we :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 u.s. )  :wiki united_states )  :arg2 ceo )  :arg0-of ( please :arg1 faa )  :arg0-of ( recognize :arg1 that :arg2 enjoyable :op1-of ( and :arg1-of ( experience :arg0 passenger :polarity - )  :op2 ( compatible :polarity - )  :op3 safe :op4 security :op5 ( travel :arg1 of )  )  )  )  :arg1 rog :arg2 dow
wild :arg2-of ( release :arg1 ( safe :arg0 ( rig :arg0 ( country :name ( name :op1 north :op2 sea )  )  )  :arg2-of ( airlift :arg1 bird )  )  :direction back )
exhaust :arg1 wild :arg1-of ( find :arg2-of ( rig :arg1 ( oil :mod ( country :name ( name :op1 north :op2 sea )  )  )  )  :op1-of ( after :op1-of ashore :time-of ( airlift :arg1 ( bird :arg1-of ( release :direction back )  )  )  )  )
put :arg1 rail :arg2 ( helicopter :destination ( country :name ( name :op1 aberdeen )  )  )  :time ( before :op1 ( temporal-quantity :unit ( month :mod last )  )  :op2 ( nurse :arg0 ( organization :arg1-of ( rescue :arg0 water :mod-of ( centre-left :location ( country :name ( name :op1 alloa )  )  )  )  :name ( name :op1 scottish :op2 spca )  )  :arg1 health :direction back )  )
say :arg0 ( person :arg0-of ( get :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :arg1-of ( catch :arg0 northern_ireland )  )  :arg0-of ( strong :arg1 ( country :name ( name :op1 centre )  :poss-of wind )  )  :arg0-of ( mean :arg1 this )  :arg1-of ( manage :arg0 centre )  :name ( name :op1 centre )  )  :arg1 ( water :arg1-of ( likely :arg0 rail )  :arg1-of ( migrate :arg0 winter )  )
and :op1 ( exhaust :arg2-of ( become :arg1 bird :arg1-of seem )  )  :op2 ( manage :arg1 ( oil :arg1-of rig )  )  :op3 ( find :arg1 refuge :arg2 it )
add :arg0 ( he :arg0-of fly :arg0-of ( contact :arg1 off :arg1-of ( cause :arg0 again )  :arg1-of ( help :arg0 we )  )  )  :arg1 it :arg1-of mean
and :op1 ( fit :arg0 ( time :time-of ( release :arg1 water )  )  :arg1 rail )
be :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :concession-of ( do :arg0 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :arg1 business :arg1-of ( ready :mod elite )  :arg3 interrogative )
pledge :arg1 ( bring :arg1 ( and :op1 business :op2 ( define :arg0 ( country :arg0-of ( launch :arg1 4 :manner business )  :name ( name :op1 britain )  :wiki united_kingdom )  :arg1 together :arg2 amr-unknown :op1-of ( and :arg1-of ( want :arg0 ( person :arg0-of ( create :arg1 ( change :arg1 ( see :arg0 we )  :arg1-of ( relation :arg2 ( country :name ( name :op1 uk )  :wiki united_kingdom )  )  )  )  )  )  :op2 wealth :op3 job :op4 ( organization :name ( name :op1 eu )  :wiki european_union )  )  )  )  )
and :op1 ( large :degree most )  :op1-of ( and :location-of ( think :arg1 ( thing :arg1-of ( ask :arg0 ( we :arg0-of ( commission :arg1 ( poll :arg0 ( person :arg0-of ( lead :arg1 business )  :mod ( country :name ( name :op1 britain )  :wiki united_kingdom )  )  :arg1 ( comprehensive :degree most )  )  )  :arg1-of ( end :mod that )  )  )  )  )  :op2 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :op3 business :op4 ( organization :name ( name :op1 eu )  :wiki european_union )  )
and :op1 ( represent :arg0 ( person :arg0-of ( lead :arg1 business )  :arg1-of ( poll :arg0 ( organization :name ( name :op1 yougov )  )  )  )  :arg1 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :op1-of of :op1-of broad :op1-of over )  :op2 business :op3 size :op4 sector :op5 region
conclude :arg1 ( thing :arg1-of ( come :prep-as ( surprise :arg1 many :arg1-of poll )  )  )
and :arg1-of ( stagnate :arg0 ( state :poss ( organization :name ( name :op1 eu )  :wiki european_union )  )  )  :op1 ( grow :arg1 ( country :arg2-of ( focus :arg0 ( we :arg0-of ( find :arg1 ( look :arg0 ( majority :degree vast :poss-of outside )  :arg1 ( export :arg0 business :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  )  :time now )  )  )  )  )  )
and :arg1-of ( see :arg0 they :arg1-of ( want :arg0 ( government-organization :arg0-of ( trade :mod new )  :arg0-of govern :arg0-of ( link :arg1 prioritise :arg1-of ( like :arg0 ( country :name ( name :op1 china )  :wiki china )  )  )  )  )  )  :op1 ( country :name ( name :op1 india )  :wiki india )  :op2 ( country :name ( name :op1 brazil )  :wiki brazil )  :op3 ( process :arg0 bogg :arg1-of ( reform :arg0 ( organization :name ( name :op1 eu )  :wiki european_union )  )  :op3-of ( and :op1 ( long :arg0 down )  :op2 arduous :op4 ( institution :op1-of arcane )  )  )
think :arg0 ( majority :arg0-of ( ask :arg1 ( view :arg1 ( range :arg3 ( regulate :arg0 monopoly :arg1 law )  :arg4 product )  )  :prep-on ( area :arg1-of specific :mod policy )  )  :quant-of ( person :arg0-of ( lead :arg1 business )  )  )  :arg1 ( return :arg1 ( control :arg1 ( competenc :arg1-of key :mod this )  )  :arg1-of recommend :arg4 ( city-district :name ( name :op1 westminster )  :wiki westminster_system )  )
say :arg1 ( market :arg1-of ( general :arg2 discontent )  :arg1-of single )  :location ( city :arg1-of cost :arg1-of ( regulate :arg2 ( outweigh :arg1 ( agree :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :arg1-of company )  :arg2 ( benefit :arg1 ( monetary-quantity :unit cent )  :arg2 ( trade :arg1 large :arg2 40 :location ( area :mod even )  )  :location ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :mod now :mod ( tradition :mod-of business :part most )  )  :location-of business :name ( name :op1 brussels )  :wiki brussels )
and :arg1-of ( pursue :arg0 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :arg1-of ( see :arg0 ( majority :arg1-of clear )  :arg1-of ( want :arg1-of ( find :arg0 ( poll :arg0 ( person :arg0-of ( lead :arg1 business )  )  :arg1 we )  )  :polarity ( - :polarity-of politics )  :arg0 majority )  )  )  :op1 ( change :arg0 ( tellingly :degree most )  :purpose treaty )  :op1-of and :op2 ( relation :arg0 final :arg1 all :arg1-of ( base :arg2 trade )  :arg2 ( organization :name ( name :op1 eu )  :wiki european_union )  )
push :arg0 business :arg1 ( show :arg1 that :arg1-of ( major :op2-of ( and :arg1-of reflect :example-of ( find :arg0 ( country :name ( name :op1 uk )  :wiki united_kingdom )  :arg1 this :prep-on across )  :op1 size :op3 business :op4 group )  )  )  :arg2 ( change :arg0 meaningful :arg1 ( power :arg1-of ( bring :arg0 back )  )  )
and :arg0-of ( achieve :arg1 ( change :arg1 16 :purpose treaty )  )  :arg1-of ( see :arg0 ( country :arg1-of ( deal :mod good )  :arg1-of ( stay :arg1-of ( vote :arg0 ( swing :mod ( monetary-quantity :unit cent )  )  )  :location ( organization :name ( name :op1 eu )  :wiki european_union )  :time referendum )  :name ( name :op1 britain )  :wiki united_kingdom )  :arg1-of ( stake :arg1-of high )  )
mean :arg1 ( show :arg0 ( he :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  :arg2 ( minister :mod prime )  )  :arg0-of ( renegotiate :arg1 ( country :name ( name :op1 britain )  :wiki united_kingdom )  )  :arg0-of ( plan :arg1 term :polarity - :time membership :time of )  :arg1-of ( back-up :arg0 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :mod business )  )  :arg1 that :arg1-of doubt :arg1-of poll :arg1-of recommend )  :mod this
show :arg0 it :arg1 ( expect :arg0 business :arg1 ( shift :arg0 renegotiation :arg1 ( balance :arg0 ( country :name ( name :op1 uk )  :wiki united_kingdom )  :arg1 power :time current )  :arg1-of significant :time back )  )  :mod also
and :op1 ( union :arg1 ( country :mod-of ( business :arg1-of ( deal :arg0 fiscal :arg0-of ( possible :op1-of and :time ( embark :arg0 eurozone :arg1 ( road :op1-of close )  )  )  :arg1-of increase :arg2 good )  )  :name ( name :op1 britain )  :wiki united_kingdom )  :mod economy )
prioritize :arg1 ( and :op1 job :op2 ( grow :arg1 ( thing :arg1-of ( find :arg0 ( we :arg0-of ( poll :arg1 show )  )  :time of )  )  :op1-of ( and :op2 ( country :name ( name :op1 britain )  :wiki united_kingdom )  )  )  :op3 ( focus :arg1-of renew :arg1-of ( mean :mod this :mod business )  :op1-of ( and :op2 trade :op3 ( change :arg1 fundamental :arg1-of ( approach :arg0 ( city :name ( name :op1 brussels )  :wiki brussels )  :arg1-of regulate )  )  )  )  )
say :arg0 ( country :arg0-of ( start :arg1 ( gas :mod-of ( era :mod new )  )  )  :name ( name :op1 bulgaria )  :wiki bulgaria )  :arg1 pipeline :arg1-of ( mill :arg0 ( organization :name ( name :op1 gazprom )  )  )
say :arg0 ( project :mod ( energy :mod ( large :degree most )  )  )  :arg1 ( construct :arg1 gas :arg1-of ( mark :arg0 ( country :arg0-of ( launch :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :manner pipeline :quant 1 )  :name ( name :op1 bulgaria )  :wiki bulgaria )  )  :arg1-of stream :arg1-of ( start :arg0 of )  )  :arg1-of ( have-org-role :arg2 chief )
state :arg0 ( and :op1 ( take :arg1 ( construct :arg0 landmark :arg1 bulgaria :arg1-of ( mean :arg2 section )  :arg1-of ( start :arg0 today )  )  :arg2 place :arg3 ( stream :arg0 south :arg1 gas :arg2 pipeline )  :time event )  :op2 ( scale :mod ( large :degree most )  )  :op3 ( project :mod important )  )  :arg1 thursday :arg1-of ( say :arg0 ( continent :name ( name :op1 europe )  :wiki europe )  :arg1-of ( mill :arg0 ( alexei :arg1-of ( have-org-role :arg0 of :arg2 chairman )  )  )  )
element :arg1-of key :domain ( project :mod this )  :mod ( security :mod energy :poss ( continent :mod whole :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  )
mean :arg0 ( country :arg0-of ( export :arg1 through :arg2 ( country :name ( name :op1 russia )  :wiki russia )  :mod-of route )  :arg0-of ( stream :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  )  :name ( name :op1 south )  )  :arg1 ( add :arg1 diversity )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 russia )  :poss-of of :wiki russia )  :arg2 official )  :arg2-of ( risk :arg0 ( layer :arg2-of ( add :arg0 most :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :arg1 gas )  :poss-of ( route :mod conventional )  )  :arg1 ( and :arg2-of ( dispute :arg0 ( country :arg0-of host :name ( name :op1 ukraine )  :wiki ukraine )  :arg1 ( between :arg1-of contract :poss ( it :poss-of counterpart )  )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :arg0-of ( risk :arg1 ( associate :arg1 ( country :arg0-of ( eliminate :arg1 forever )  )  )  :arg1-of transit :arg1-of mean :mod geopolitics )  :name ( name :op1 european :op2 union )  :wiki european_union )  :arg2 member )  :name ( name :op1 miller )  )  :arg1 ( connect :arg1 of :arg1-of direct :arg2 ( country :name ( name :op1 bulgaria )  :wiki bulgaria )  )
receive :arg0 ( person :arg0-of consume )  :arg1 gas :arg2 ( country :name ( name :op1 south :op2 stream )  )  :condition ( start :arg0 ( project :mod entire )  :arg1 ( operate :arg0 bulgaria )  :op1-of once :time ( date-entity :year 2015 )  )  :manner ( rate :arg1-of discount )
say :arg0 ( organization :name ( name :op1 gazprom )  )  :arg1 ( construct :arg1 ( other :mod-of downstream )  :arg1-of end :arg1-of ( recommend :arg0 year )  :arg1-of ( begin :arg0 country )  )
trillion :arg0-of ( design :arg1 pipeline :arg3 capacity )  :quant-of ( foot :mod ( volume-quantity :unit cubic-meter )  :quant-of ( gas :arg1-of ( natural :arg0 2.2 )  )  )
beat :arg0 nothing :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :location ( location :mod property :op1-of ( and :op2 ( person :arg0-of ( invest :mod international )  :mod nation )  )  )
and :op1 ( right :domain ( situation :arg0-of ( fantastic :arg1 ( option :arg1-of finance )  )  :mod economy )  )
of :arg3-of ( organize :arg0 9th :arg1 ( property :arg1-of ( exchange :arg0 stock :arg2 newspaper )  )  )  :value ( message :poss this )
and :op1 ( strength :arg1-of ( general :arg0 ( market :arg0-of ( benefit :arg1 ( property :arg1-of ( compare :arg0 ( rest :arg0-of ( compete :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :degree very )  :mod-of of )  )  )  )  :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :mod-of condition )  :poss ( country :mod-of economy )  )
point-out :arg0 ( person :arg0-of ( have-org-role :arg1 lasalle :arg2 ceo )  :arg2-of ( near :arg1 ( property :arg1-of ( organize :arg0 9th )  :arg1-of ( exchange :arg0 stock :arg2 newspaper )  )  :arg3 ( continent :name ( name :op1 europe )  :wiki europe )  :example ( and :op1 ( continent :name ( name :op1 africa )  :wiki africa )  )  )  :name ( name :op1 lang )  :wiki rein_lang )  :arg1 ( religious-group :name ( name :op1 christian )  :wiki christian )  :mod this
say :arg0 ( person :name ( name :op1 ulbrich )  )  :arg1 ( evident :domain ( extent :arg0-of ( seek :arg1 ( property :mod ( country :name ( name :op1 germany )  :wiki germany )  :mod commerce )  :manner ( after :polarity-of transact )  )  )  :location volume )
same :arg1 ( period :arg2-of ( compare :arg0 ( year :quant-of before )  :arg1 ( increase :arg1 ( year :mod this :time-of ( quarter :quant 3 )  )  :arg2 ( percentage-entity :value 31 )  )  )  )
stand :arg1 grow :arg2 ( country :name ( name :op1 france )  :op2-of ( and :op1 ( percentage-entity :mod just :value ( 6 :value-of ( percentage-entity :value 19 )  )  )  )  :wiki france )  :location ( country :name ( name :op1 great :op2 britain )  :wiki united_kingdom )
say :arg0 of :arg1 ( person :arg1-of ( return :arg1-of attract :arg1-of ( offer :arg0 ( invest :arg0 property :arg2 rate )  )  )  :name ( name :op1 &quot; )  )
and :op1 ( property :mod-of ( gap :mod ( yield :arg1 ( high :arg1 level :degree historical )  )  )  )  :op2 ( bond :mod ( government-organization :arg0-of govern :mod federal )  )
ease :arg0 ( organization :arg0-of ( prohibit :arg1 ( chat :arg1 cellphon )  :mod still )  :arg0-of ( use :arg1 ( gadget :mod electronic )  :arg1-of restrict :purpose airplane )  :name ( name :op1 faa )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 latakia )  )  :arg2 official )  )  :arg1 ( attack :arg0 warplan :arg1 ( store :location ( city :mod port )  :quant-of ( missile :source ( country :name ( name :op1 russia )  :wiki russia )  )  )  )
continue :arg0 it :arg1 apparent :arg1-of ( campaign :arg0 ( country :arg0-of ( keep :arg1 arm :arg1-of ( proliferate :arg0 ( world-region :name ( name :op1 mideast )  :wiki middle_east )  )  )  :name ( name :op1 israel )  :wiki israel )  )
controversy :poss-of ( against :arg1-of ( discriminate :arg0 tactic :arg2 minority :arg2-of ( rule :arg0 ( court :arg2-of ( appeal :arg0 federal :arg1 block )  )  :arg1 that :arg1-of judge )  )  )
hope :arg1 ( travel :arg0 ( person :arg0-of migrate :arg1-of ( die :time ( after :op1 ( break-up :arg0 ( truck :quant 2 )  :location ( middle :part-of ( country :name ( name :op1 sahara )  )  )  )  )  )  :arg1-of thirst :quant nearly :quant 100 )  :arg4 ( country :name ( name :op1 algeria )  :wiki algeria )  )
say :arg0 ( person :arg0-of ( chance :arg1 child :arg2 random :compared-to-of more )  :arg1-of expert :op1-of ( and :arg2-of ( leave :arg0 ( violence :arg0-of ( sign :arg1 ( violence :arg1-of ( grow :arg0 7 )  :location ( country :name ( name :op1 america )  :wiki united_states )  )  :polarity - )  )  :arg1 ( adult :quant 14 )  )  )  )  :arg1 nothing
probable :domain ( matter :arg1 ( government-organization :arg1-of ( focus :arg1-of ( keep :arg0 ( person :arg0-of invest )  :mod ( rather :arg1-of ( rattle :arg0 ( shutdown :mod ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 u.s. )  :wiki united_states )  )  )  )  )  )  )  )  :name ( name :op1 federal :op2 reserve )  :wiki federal_reserve_system )  :degree more )
possible :arg1 ( citation :mod ( kind :mod of )  )  :arg1-of ( challenge :arg0 ( woman :arg0-of ( say :arg1 ( make :arg0 ( eyewear :arg1-of ( connect :arg2 internet )  )  :arg1 navigation :time ( easy :arg1 it )  )  )  :mod ( state :name ( name :op1 california )  :wiki california )  )  :arg1-of plan )
say :arg0 police :arg1 ( video :arg0-of ( appear :arg2 ( show :arg1 ( pipe :arg1-of crack )  :arg2 ( smoke :arg0 they :arg3-of ( have-org-role :arg0 ( person :name ( name :op1 rob :op2 ford )  )  :arg2 mayor )  )  )  )  )
and :arg0-of ( hold :arg1 amr-unknown :arg2 back )  :arg2-of ( ally :arg1 ( thing :arg1-of ( find :arg0 angle )  )  :mod even )  :op1 ( work :arg0 another :arg1 every )
resemble :arg2 ( and :arg0-of ( issue :arg1-of sensitive :arg1-of ( handle :arg0 ( parish :location ( around :op1 globe )  :mod ( religious-group :name ( name :op1 catholic )  :wiki catholicism )  )  :arg1-of ( know :arg0 ( country :name ( name :op1 vatican )  )  :arg1-of ( want :arg0 country )  )  )  )  :op1 contraception :op2 divorce :op3 ( couple :mod gay )  )
charge :arg1 ( person :arg1-of ( employ :arg0 ( organization :name ( name :op1 ymca )  )  )  :quant 2 )  :arg1-of ( hear :arg0 ( organization :name ( name :op1 royal :op2 commission )  )  )  :arg2 ( sex :mod-of offence )  :time ( before :op1 ( allege :arg1 ( person :name ( name :op1 jonathan :op2 lord )  )  )  )
charge :arg1 ( person :arg1-of ( employ :arg0 ( organization :name ( name :op1 ymca )  )  :arg2 nsw )  :quant 2 )  :arg2 ( child :mod-of ( offence :mod sex )  )  :time ( before :op1 ( raise :arg0 ( child :arg1-of ( abuse :arg0 ( date-entity :year 2011 )  :arg1-of ( hear :arg0 ( organization :name ( name :op1 royal :op2 commission )  )  )  :manner sexual )  )  :arg1 allege :arg2 ( person :arg0-of ( care :arg1 child :arg1-of ( work :arg0 person )  :mod ( thing :name ( name :op1 caringbah )  )  )  :name ( name :op1 jonathan :op2 lord )  )  )  )
contrast :arg1-of ( state :arg1-of ( open :arg0 it )  )  :arg2 ( say :arg0 sexual :arg1 ( child :arg0-of ( tell :arg1 incident )  :arg0-of organize :arg0-of assault :arg2-of deal )  )
ask :arg1 ( case :time-of ( charge :arg1 ( and :condition ( convict :arg1 ( instructor :mod gym )  :arg2 ( offence :mod child :mod sexual :prep-against ( child :arg1-of ( care :arg0 ( thing :name ( name :op1 caringbah :op2 hall )  )  )  )  )  :time ( date-entity :year 1991 )  )  :op1 ( offence :mod pornography :mod child )  :op2 another )  :arg2 ( person :arg1-of ( employ :arg0 ( organization :name ( name :op1 ymca )  )  )  )  )  )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( executive :mod chief )  :arg2 officer )  :name ( name :op1 phillip :op2 hare )  )
contrast :arg1 ( know :arg0 he :arg1 ( tell :arg0 ( thing :name ( name :op1 mr :op2 hare )  )  :arg1 ( assist :arg0 counsel :arg1 commission )  :arg2 ( person :name ( name :op1 gail :op2 furness )  )  )  :topic case )  :arg2 ( know :polarity - :arg0 he )
state :arg0 also :arg1 commission :arg1-of ( open :arg0 ( he :arg0-of ( concede :arg1 ( child :arg1-of safe )  )  :arg0-of ( recognize :arg1 forefront )  :arg0-of ( claim :arg1 ( accurate :polarity - )  )  :arg0-of ( audit :arg1 external )  )  )
notify :arg0 4 :arg1 ( receive :arg1 ( rating :arg1-of possible :source ( organization :arg0-of ( audit :arg1 quality :arg2 8 )  :name ( name :op1 department :op2 of :op3 education :op4 and :op5 communities )  )  )  )  :arg1-of ( evidence :time ( before :op1 ( commission :arg0-of ( low :arg1 ( year :mod this )  :degree most )  )  )  )  :arg2 ( organization :name ( name :op1 ymca )  )
obligate :arg1 ( person :arg1-of ( fail :arg1-of sure :arg2 ( child :arg0-of ( breach :arg1 ( policy :arg1-of clear :arg1-of safe )  )  :mod report )  :op4-of ( and :op1 ( organization :name ( name :op1 mr )  )  :op2 ( fail :arg0 ( he :arg0-of ( concede :arg1 21 )  :arg0-of ( start :arg1 mr )  )  :arg1 ( person :name ( name :op1 mr )  )  :arg1-of manage :mod down )  :op3 ( person :arg1-of recruit :name ( name :op1 lord )  :wiki lord )  )  )  :arg2-of staff )  :arg2 ( thing :mod about )
convict :arg0 ( he :arg0-of ( work :arg1 ( temporal-quantity :quant 2 :unit year )  :arg2 ( organization :name ( name :op1 ymca )  )  )  )  :arg1 ( person :name ( name :op1 lord )  :wiki lord )  :arg2 ( offence :mod sexual )  :prep-against ( boy :quant 12 )  :time ( early :op1 ( year :mod this )  )
jail :arg1 he :arg2 ( minimum :mod-of ( temporal-quantity :quant 6 :unit year )  )
contrast :arg1 problem :arg2 ( reject :arg0 ( person :arg0-of ( prevent :arg1 ( report :arg0 ( person :arg0-of ( breach :arg1 ( child :arg0-of safe )  )  :name ( name :op1 lord )  :wiki lord )  )  )  :arg2-of staff )  :arg1 ( thing :arg1-of ( suggest :arg0 culture )  )  )
say :arg1 ( love :arg0 ( he :poss-of ( lap :arg2-of sit )  )  )  :op1-of ( and :arg1-of ( breach :domain-of alone )  :arg1-of ( observe :arg0 they :arg2 ( evidence :arg1-of ( give :arg0 ( staff :domain-of child )  )  )  )  :op2 ( let :arg1 ( play :arg0 ( person :name ( name :op1 lord )  :wiki lord )  :arg1 ( phone :arg1-of ( mobile :arg0 privately )  )  )  )  )
cause :arg0 ( she :arg0-of ( concern :arg1 about )  )  :arg1 ( ask :arg0 ( he :arg0-of ( behave :arg1-of testify :arg2-of ( find :arg0 she :arg1 ( child :arg1-of ( manage :mod service )  )  )  )  :arg0-of ( intimidate :arg1 ( and :op1 ( approach :arg0 ( person :arg1-of supervise :name ( name :op1 lord )  :wiki lord )  :arg1 ( of :mod-of time )  :arg1-of hard :arg2 lot )  )  :degree very )  )  :arg1 ( child :arg1-of protect :arg2-of train )  :arg2 ( person :name ( name :op1 danielle )  )  :op2-of ( and :arg1-of supervise :op1 ( person :name ( name :op1 lord )  :wiki lord )  )  )
say :arg0 ( he :arg0-of ( do :arg1 ( report :arg0 they :arg1 upwards :arg1-of ( comfortable :polarity - )  :arg1-of ( manage :arg0 person )  )  )  :arg0-of ( have-org-role :arg2 ceo )  :arg0-of ( accept :arg1 ( person :arg2-of staff )  :polarity - )  )  :arg1 ( evidence :arg1 that )
say :arg0 ( he :arg1-of ( report :arg0 ( person :name ( name :op1 lord )  :wiki lord )  :arg3-of ( cloud :arg0 friendship :arg1 judgement :mod rather )  )  )
say :arg0 ( he :arg0-of ( provide :arg1 ( he :arg0-of ( organize :arg1 lesson )  :arg0-of ( view :arg1 nsw :arg2 ( person :name ( name :op1 mr )  )  :mod mr :mod that )  :arg0-of ( report :arg1 incident :arg2 about :polarity - )  )  :arg2 ( organization :mod-of board :name ( name :op1 mr )  )  )  )  :arg1 ( and :arg1-of agree :op1 ( person :name ( name :op1 lord )  :wiki lord )  :op2 ( person :arg2-of staff )  :op3 board )
say :arg0 ( person :arg0-of ( decide :arg1 mr :time after :time soon )  :arg0-of ( sign :arg1 ( agree :arg1 confidentiality :arg1-of allege :arg1-of ( general :arg2 ( child :arg1-of manage :mod of :mod-of service )  )  :arg1-of emerge )  )  :arg2-of staff )
contrast :arg1 ( evidence :arg0 overzealou :arg1 ( intend :arg0 ( he :arg0-of ( say :arg1 and )  )  :arg1 ( execute :arg1 poor )  :arg1-of contaminate :arg1-of avoid )  )
tell :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 griffith :op2 university )  )  :arg2 professor )  :arg1-of ( abuse :arg0 ( person :arg1-of expert )  :arg2 ( sex :mod child )  )  :name ( name :op1 stephen :op2 smallbone )  )  :arg1 ( organize :arg0 ( nsw :mod ( organization :name ( name :op1 ymca )  )  )  :arg1 child :arg1-of safe :polarity - )  :arg2 commission :op4-of ( and :op1 ( employ :arg1 ( person :name ( name :op1 jonathan :op2 lord )  )  :time time )  :op2 ( date-entity :year 2009 )  :op3 ( date-entity :year 2011 )  )
screen :arg0 ( he :arg0-of ( say :arg1 ( and :arg1-of train :arg1-of ( supervise :arg0 ( person :arg2-of staff )  )  )  )  )  :arg1 ( recruit :arg0 serious :arg1 problem :arg1-of induct )
adjourn :arg0 20 :arg1 hear :time ( until :op1 12 )
contrast :arg1 ( return :arg1 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :arg1-of ( chance :arg1-of ( say :arg0 ( person :arg0-of ( have-org-role :arg2 ( minister :mod prime )  )  :name ( name :op1 tony :op2 blair )  :wiki tony_blair )  )  )  :arg1-of ( acknowledge :arg0 comeback )  :arg1-of ( likely :polarity - )  :arg1-of ( seize :arg0 he )  )
air :arg0 old :arg1 ( view :arg0 ( policy :mod domestic :mod various )  :arg1 year )  :time ( interview :arg1 59 :arg2 ( mark :arg1 ( anniversary :mod fifth :topic ( depart :arg1 office )  )  :arg2 overnight )  )
and :op1 ( comment :arg0 ( person :arg0-of ( have-org-role :arg1 ( quartet :beneficiary ( peacemaker :mod ( world-region :name ( name :op1 middle :op2 east )  :wiki middle_east )  )  )  :arg2 envoy )  :arg0-of lead )  :arg1 large :arg1-of ( confine :arg0 ( person :arg0-of ( avoid :arg1 ( discuss :arg1 ( politics :mod ( country :name ( name :op1 britain )  :wiki united_kingdom )  )  )  )  :arg0-of ( stand :arg1 he :direction ( down :mod-of ( date-entity :month 6 :year 2007 )  )  :op1-of since :time ( after :op1 ( decade :unit-of temporal-quantity )  )  )  :mod mr :name ( name :op1 blair )  :wiki tony_blair )  :degree most )  )  :op2 ( affair :mod foreign )  :op3 role
contrast :arg1 ( likely :arg1 ( return :arg1 ( person :arg0-of ( have-org-role :arg2 minister )  :arg2-of ( quote :arg1 ( city :name ( name :op1 london )  :wiki london )  )  :name ( name :op1 blair )  :wiki tony_blair )  :arg1-of ( cause :arg0 ( he :arg0-of ( say :arg1 ( mean :arg1 yes )  :arg1-of even )  )  )  :arg1-of ( cause :polarity - )  :arg1-of ask :op1-of ( post :op2 ( of :arg1 prime )  )  )  )  :arg1-of sure
know :arg0 ( they :arg1-of ( battle :arg0 crowd :arg1-of ( gather :arg0 ( person :arg1-of expert )  :location cardiff )  )  )  :arg1 ( tough :arg1 ( compete :arg2 ( year :time-of horse )  )  )  :arg1-of ( show :arg0 horse )
contrast :arg2 ( ready :arg1 nobody :arg2 ( thing :mod ( old :quant ( temporal-quantity :quant 3 :unit year )  )  :name ( name :op1 fenton :op2 kirkland )  )  :degree quite )
trail :arg0 pet :arg1 ( person :arg0-of oppose :arg0-of ( take :arg1 ( step :arg1 - :arg1-of ( toddle :op1-of ( and :arg1-of ( trot :path ( round :arg0-of ( take :arg1 ( prize :mod top :wiki - )  :arg1-of ( ease :arg0 ( temporal-quantity :unit ( month :mod ( just :polarity yet )  )  )  )  :op2-of ( and :op1 school )  )  :quant 3 )  )  :op2 ( country :name ( name :op1 shetland )  )  :op3 ( organization :mod pony :name ( name :op1 toffee )  )  )  )  )  )  :arg1-of leave :mod adult :quant 30 )  :arg3 behind
commend :arg1 ( pair :arg0 ( height :arg1-of same )  :arg1-of separate )  :arg2 ( contest :arg1 ( near :arg1 ( country :name ( name :op1 rudry )  )  :arg2 ( country :name ( name :op1 cardiff )  )  )  :arg1-of ( run :arg0 ( country :name ( name :op1 sunnybank :op2 equestrian :op3 centre )  )  )  )  :purpose ( appear :op1-of ( and :op2 behave :op3 style )  )
and :op1 ( parade :arg0 ( he :arg0-of ( tip :arg1 ( cap :mod flat )  :arg2 ( angle :mod jaunty )  )  :arg0-of ( take :arg1 ( and :op1 man :op2 woman )  :arg3 ( stage :arg0-of ( smart :arg1 ( hat :arg1-of bowl )  )  )  )  )  :arg1 ( toffee :mod ( old :quant ( temporal-quantity :quant 2 :unit year )  )  )  :location ( around :op1 ring )  )
laud :arg0 ( judge :arg0 ( beyond :op1 ( temporal-quantity :unit year )  )  :arg1 ( skill :arg1-of handle :arg1-of natural )  )  :arg1 ( person :name ( name :op1 fenton )  )
and :op1 ( receive :arg0 ( organization :name ( name :op1 toffee )  )  :arg1 ( thing :arg0-of mark :mod top )  :purpose ( appear :op1-of ( and :op2 personality )  )  )
and :op1 ( give :arg0 ( birthday :location present )  :arg1 ( organization :mod ( every :mod-of day )  :name ( name :op1 toffee )  )  :arg2 ( person :name ( name :op1 fenton )  )  )  :op2 ( date-entity :mod last :month 3 )  :op3 ( practise :arg1 ( pony :mod ( country :name ( name :op1 shetland )  )  )  :time since )
say :arg0 ( he :arg0-of ( double :arg1 ( act :arg1 great )  )  :arg1-of ( have-rel-role :arg0 ( person :poss-of 30 )  :arg2 mother )  )  :arg1 and
contrast :arg1 2 :arg2 ( walk :arg0 they :arg1 ( and :op1 ( cup :consist-of gold )  :op2 rosette )  :arg2 ( all :quant-of comer )  )
and :op1 ( ecstatic :domain we :time win )  :path-of ( compete :arg0 he :arg2 all :manner ( organization :name ( name :op1 toffee )  )  :time ( time :domain it :mod only )  )
think :arg0 ( stranger :arg1-of complete :location arena )  :arg1 ( phenomenal :domain ( he :arg2-of ( want :arg0 ( they :arg1-of ( take :arg0 all )  )  :arg1 photo )  )  )
follow :arg0 youngst :arg1 ( footstep :mod ( village :poss ( country :name ( name :op1 nantyglo )  )  )  :poss ( person :arg2-of ( show :arg0 ( country :name ( name :name-of south_korea :op1 wales )  :wiki wales )  :arg1 horse :arg3 ( near :arg0 more :arg2 ( country :name ( name :op1 ebbw :op2 vale )  )  )  :duration ( temporal-quantity :quant 10 :unit year )  )  :mod aunt :name ( name :op1 sharon :op2 howells )  )  )
say :arg0 ( person :mod mr :name ( name :op1 mrs )  )  :arg1 ( and :op1 ( place :mod whole )  :op2 electric :op3 ( everybody :arg1-of ( cheer :op1-of ( and :arg1-of clap )  )  )  )  :arg2-of ( mean :arg1 the )
and :op1 ( run :arg1 ( he :arg0-of ( sand :arg1 even :duration arena )  )  :prep-in ( length :mod full )  :time down )  :time ( look :arg0 he :arg1 ( job :mod marvellou )  :arg2 tiny )
and :op1 ( get :arg0 ( he :arg0-of ( love :arg1 horse :arg1-of ( mad :domain ( person :name ( name :op1 fenton )  )  )  :op1-of ( and :op2 tractor :op3 farm )  )  )  :arg1 ( chicken :arg1-of ( look :arg0 animal :time after )  :quant 2 )  )
show :arg0 ( he :arg1-of ( start :arg0 he :manner way :time year )  )  :arg1 ( and :op1 ( horse :mod-of of )  :op2 ( i :arg0-of ( sure :arg1 ( he :arg0-of ( do :arg1 well )  )  )  )  )  :arg1-of long :time before
contrast :arg1 3 :arg2 ( know :arg0 ( he :arg0-of ( have-org-role :arg2 spokesman )  :arg0-of ( say :arg1 ( show :arg0 ( he :arg1-of handle :poss-of pony )  :arg1 horse :arg1-of mean )  )  )  :arg1 amr-unknown :mod only )
team :domain they :mod great :mod-of together
mark :arg0 judge :arg1 ( person :name ( name :op1 fenton )  :op1-of ( and :op2 ( organization :name ( name :op1 toffee )  )  )  )  :arg2 ( and :op1 ( turn :arg1 they )  :op2 ( way :arg2-of ( present :arg1 show )  )  :op3 ring )
and :example-of ( handle :arg0 ring :manner ( good :degree most )  :op2-of ( and :op1 pony )  :purpose ( look :arg0 they :arg1 ( teamwork :mod good )  )  )  :op1 ( person :name ( name :op1 fenton )  )  :op2 ( organization :name ( name :op1 toffee )  )
sure :arg0 i :arg1 ( look :arg0 ( he :arg0-of ( help :arg1 cute )  :poss-of really )  :arg1 clothes )
plead :arg0 ( country :name ( name :op1 china )  :wiki china )  :arg1 ( paper :arg1-of overhaul )
say :arg0 ( regulator :mod press )  :arg1-of ( report :arg1-of ( release :arg1-of ( appeal :arg0 ( newspaper :arg0-of ( overhaul :arg1 defamation )  :mod ( country :name ( name :op1 china )  :wiki china )  )  :mod ( page :mod front )  )  )  :arg1-of accuse )
plead :arg0 ( organization :name ( name :op1 guangzhou-based :op2 new :op3 express )  )  :arg1 ( release :arg1 ( city :name ( name :name-of journalist :op1 yongzhou )  :wiki yongzhou )  )  :arg1-of rare :arg2 ( person :name ( name :op1 chen )  :wiki - )  :mod public
contrast :arg2 ( admit :arg0 ( person :mod mr :name ( name :op1 chen )  :wiki - )  :arg1 ( take :arg0 he :arg1 ( bribe :arg1 ( fabricate :arg1 ( story :topic ( company :arg1-of ( own :arg0 state )  )  )  )  )  )  :location television :time subsequent )
say :arg0 regulator :arg1 ( rectify :arg1 full :arg1-of ( express :arg0 now :arg1-of undergo )  )
and :arg1-of rectify :arg1-of ( come :op1-of ( and :arg1-of radio :arg1-of film :op2 television )  )  :op1 ( organization :name ( name :op1 the )  )  :op2 publication
express :arg0 group :arg1 ( report :arg0 untrue :arg1 period :arg1-of ( list :arg0 company :arg2 of )  :arg1-of ( investigate :arg0 preliminary :arg0-of ( show :arg1 that )  :arg1-of even :arg2 ( 8 :mod-of ( date-entity :year 2013 )  )  )  :arg1-of ( publish :arg0 several )  :arg2 about :time ( date-entity :month 9 )  )  :mod new :time ( date-entity :year 2012 )
state :arg0 ( disorder :arg1-of manage )  :arg1 ( express :arg0 new :arg1 ' :arg2 editorial )  :arg1-of ( say :arg0 regulator )
say :arg0 ( person :arg0-of ( report :arg1 license )  :arg0-of ( revoke :arg1 ( city :name ( name :op1 yongzhou )  :wiki yongzhou )  )  :arg1-of penalize :name ( name :op1 chen )  :wiki - )  :arg1 it :arg1-of ( decide :arg0-of ( impose :arg1 administrate )  )
express :arg0 ( person :arg0-of ( express :arg1 and )  :arg0-of ( instruct :arg1 it :arg1-of ( even :arg0 also )  )  :arg0-of ( express :arg1 ( and :arg1-of recommend )  )  :arg0-of ( lead :arg1 team )  :arg0-of ( responsible :arg1 ( investigate :arg0 they :arg1 ( rectify :arg1 ( undertake :arg1 group )  :arg1-of complete )  :arg1-of relevant )  )  )  :arg1 ( revise :arg1 immediate )
write :arg0 ( person :arg0-of ( call :arg1 ( company :arg0-of ( construct :arg1 equipment )  )  )  :mod mr :name ( name :op1 chen )  :wiki - )  :arg1 ( article :quant several )  :arg2 ( organization :arg0-of ( allege :arg1 ( irregulariti :mod finance )  )  :name ( name :op1 new :op2 express )  )
publish :arg0 newspaper :arg1 ( appeal :arg0 ( page :mod front )  :arg0-of ( say :arg1 ( back :arg1 journalism )  )  :arg1 release :quant 2 )  :time ( after :op1 ( detain :arg1 he )  )
contrast :arg2 ( appear :arg0 ( person :arg0-of ( admit :arg1 ( publish :arg0 he :arg1 ( story :mod false )  :beneficiary money )  :manner ( television :mod state )  )  :mod mr :name ( name :op1 chen )  :wiki - )  :time then )
cause :arg0 in :arg1 ( and :op1 ( damage :arg0 ( i :arg1-of case )  :arg1 ( trust :arg0 ' :arg1 ( he :arg0-of ( tell :arg1 state :arg2 ( broadcast :arg0 public :arg1 cctv )  )  )  :arg1-of earn )  :op1-of ( and :op2 media :op3 ( industry :mod news :mod whole :mod also :mod this )  :op4 it :op5 ability )  )  :op2 zoomlion )
cause :arg0 ( hanker :arg0 i :arg1 i :time ( after :op1 ( and :op1 money :op2 fame )  )  )  :arg1 this :mod main
realize :arg0 i :arg1-of ( wrong :arg0 i )
say :arg0 ( person :arg0-of ( express :arg1 ( issue :arg1 front )  :arg1-of apologize :location page )  :arg1-of follow :name ( name :op1 chen )  :wiki - )  :arg1 ( fail :arg1 ( check :arg0 proper :arg1 report )  :arg1-of apologize )
suspect :arg2 ( person :arg0-of ( confess :arg1-of ( televise :time recent )  )  :mod ( profile :arg1-of high )  :quant several )
say :arg0 ( person :arg1-of expert :arg1-of ( force :arg0 ( year :mod this )  :arg2 ( incriminate :arg0 anyone )  :arg2-of ( ban :arg1 authority )  )  )  :arg1 ( coerce :arg1 ( confess :arg1 early )  :concession ( change :arg1 law )  :manner routine :mod still )
find :arg0 railway :arg1 ( tunnel :mod ( country :name ( name :op1 mexico )  :wiki mexico )  :mod ( country :name ( name :op1 us )  :wiki united_states )  :mod drug )
and :op1 ( country :arg2-of ( smuggle :arg0 ( tunnel :arg1-of ( find :arg1-of ( complete :arg0 ( system :mod ( rail :mod electric )  :op3-of ( and :op1 ( light :arg1 1 )  :op2 ventilation )  )  )  )  :mod ( sophisticated :degree most )  )  :arg1 drug )  :name ( name :op1 usa )  :wiki united_states )  :op2 ( country :name ( name :op1 mexico )  :wiki mexico )
discover :arg0 they :arg1 ( passage :arg2-of ( describe :arg0 ( authority :mod ( country :name ( name :op1 us )  :wiki united_states )  )  :arg1 foot )  :mod secret :mod ( sophisticated :degree most )  )  :arg2 4 :op1-of 3 :op1-of ( foot :mod-of tunnel )  :time ever
and :arg2-of ( near :arg1 ( warehouse :arg1-of ( link :arg0 ( tunnel :arg0-of ( zigzag :arg1 length )  )  :manner-of ( pitch :arg1 football :quant nearly :quant 6 )  )  )  )  :op1 ( country :name ( name :op1 tijuana )  )  :op2 ( country :name ( name :op1 mexico )  :wiki mexico )  :op3 ( country :location-of ( city :name ( name :op1 san :op2 diego )  :wiki san_diego )  :name ( name :op1 usa )  :wiki united_states )
fill :arg1 area :arg2 ( warehouse :mod nondescript )  :arg2-of ( load :arg0-of ( conceal :arg1 truck :arg1-of easy )  :arg1 drug )
say :arg0 ( authority :arg0-of ( shut-down :arg1 tunnel :time before )  )  :arg1 ( any :mod-of ( drug :poss-of undetect )  )
say :arg0 ( authority :arg0-of ( discover :arg1 ' )  :arg0-of ( connect :arg1 with :arg2 tunnel :mod cocaine )  :arg0-of ( seize :arg1 ( 8 :quant-of ( mass-quantity :mod half :unit ton )  )  :op1-of ( and :op2 of :op3 marijuana :op4 327 )  :op1-of and )  )  :arg1 ( record :mod court )
say :arg0 authority :arg1 ( work :arg0 ( man :quant 3 )  :arg1 ( charge :arg1 ( person :arg0-of drive )  :arg2 ( possess :arg1 ( and :op1 marijuana :op2 ( cocaine :arg1-of ( distribute :arg1-of intend )  )  )  )  )  )
face :arg0 ( they :arg0-of ( convict :arg1 ( and :op1 ( temporal-quantity :quant 10 :unit year )  :op2 ( imprison :mod life )  )  )  :arg1-of sentence )  :arg1 prison
smuggle :arg0 ( state :name ( name :op1 arizona )  :wiki arizona )  :arg1 ( tap :arg1 ( canal :mod vast :mod ( drainage :mod underground )  )  )  :arg2 ( country :name ( name :op1 nogales )  )
pass :arg1 tunnel :arg1-of major :arg1-of ( discover :location ( city :name ( name :op1 san :op2 diego )  :wiki san_diego )  :time ( since :op1 ( date-entity :year 2006 )  )  )  :mod eighth
harvest :arg0 marijuana :arg1 ( present :arg1 ( drug :mod-of cartel )  :arg1-of challenge :arg3-of ( get :arg0 ( person :arg0-of ( consume :arg1 product )  )  :arg1 amr-unknown :arg1-of quick )  )  :time ( date-entity :month 10 :time-of ( discover :arg0 ( country :name ( name :op1 mexico )  :poss-of central :wiki mexico )  :arg1 ( large :degree most :mod-of tunnel )  :arg3 ( of :mod some )  :time after )  )
tijuana :mod-of ( home :poss-of ( kitchen :arg1-of ( extend :arg0 ( track :arg2-of ( equip :arg1 ( pass :arg1-of ( find :arg0 authority )  :mod yard :mod ( 700 :mod roughly )  :time ( date-entity :year 2010 )  )  )  :mod rail )  :arg4 ( warehouse :location ( city :name ( name :op1 san :op2 diego )  :wiki san_diego )  :quant 2 )  )  )  )
love :arg0 ( and :op1 ( person :name ( name :op1 orlando :op2 bloom )  )  :op2 ( person :name ( name :op1 miranda :op2 kerr )  )  )  :arg1 ( other :mod each )  :mod still
want :arg0 ( and :op1 ( person :mod actor :name ( name :op1 orlando :op2 bloom )  )  )  :arg1 ( go :arg0 ( person :arg0-of separate :arg1-of model :name ( name :op1 miranda :op2 kerr )  )  :arg1 way )
say :arg0 ( person :name ( name :op1 bloom )  :op1-of ( and :op2 ( person :name ( name :op1 kerr )  )  )  )  :arg1 ( love :arg0 he :arg1 ( other :mod each )  :mod still )  :time interview
parent :arg2-of ( have-rel-role :arg0 person :arg1 ( person :domain-of ( old :quant ( temporal-quantity :quant 2 :unit year )  )  :name ( name :op1 orlando :op2 bloom )  :op2-of ( and :op1 ( person :name ( name :op1 miranda :op2 kerr )  )  )  )  )
announce :arg0 ( person :mod actor :name ( name :op1 orlando :op2 bloom )  )  :arg1 separation :arg2 ( person :arg0-of ( have-rel-role :arg2 wife )  )  :manner ( supermodel :mod-of ( person :name ( name :op1 miranda :op2 kerr )  )  )
say :arg0 ( friday :arg1-of local )  :arg1 ( bloom :arg1 ( go :arg0 sometimes :arg1 ( life :arg1-of ( do :arg0 ( country :arg0-of ( broadcast :arg1 journalist )  :arg1-of interview :name ( name :op1 us )  :wiki united_states )  )  )  :arg1-of ( hope :arg0 exact :op1-of or )  :arg1-of ( plan :arg0 we )  :polarity - )  )  :time time
love :arg0 ( he :domain-of ( old :quant ( temporal-quantity :quant 36 :unit year )  )  )  :arg1 ( other :mod each )  :mod still :op2-of ( and :op1 ( person :name ( name :op1 kerr )  )  )
and :op1 ( support :arg0 we :arg1 ( person :arg0-of ( have-rel-role :arg1 flynn :arg2 parent )  :mod other )  )  :op2 1 :op3 ( love :arg0 another :arg1 each )
and :arg1-of ( marry :time ( since :op1 ( date-entity :year 2010 )  :time-of ( date-entity :year 2011 )  :time-of ( have-rel-role :arg0 person :arg1 ( person :name ( name :op1 kerr )  )  :arg2 son )  :time-of ( bear :arg1 ( person :name ( name :op1 flynn )  )  )  )  )  :op1 ( person :name ( name :op1 bloom )  )
dictionari :arg0-of ( say :arg1 ( sub :mod-of category :topic vegetarianism )  :op1-of ( yet :op2 ( differ :arg0 veganism :arg1 considerable )  )  )  :poss 2
or :arg1-of ( consume :arg0 ( indulgenc :mod this )  :arg1-of ( allow :arg0 vegetarian :condition-of menu )  )  :op1 ( tart :arg1-of cream )  :op2 ( cream :arg0 vegan :arg1 ice )  :op3 ( country :arg1-of strong :name ( name :op1 edam )  )
and :arg1-of ( avoid :arg0 - :op1-of alongside )  :arg2-of ( permit :arg0 cheese :arg1 ( honey :mod even )  )  :op1 ( meat :op1 ( originate :arg1 animal :arg2 ( product :arg1-of ( eat :arg0 ( refrain :arg1 egg )  :prep-in-of vegan )  :quant all )  :op1-of ( product :name ( name :op1 milk )  :wiki milk_[film] )  )  )  :op2 fish
ask :arg0 ( you :arg0-of leave )  :arg1 ( inspect :arg1 ( resourcefulnes :mod great )  :arg2 ( world :mod ( nutrition :mod vegan )  )  :manner close )  :arg1-of possible
host :arg0 ( person :arg0-of ( own :arg1 of )  :arg0-of ( local :arg1 health :arg2 food )  :arg2-of ( popular :arg0 very :arg1 ( explain :arg1 ( person :name ( name :op1 &quot; )  )  :arg1-of spread )  )  )  :arg1 ( product :arg1-of special )  :arg1-of ( provide :arg0 store :arg2 vegan )
visit :arg0 ( person :arg0-of ( like :arg1 ( thing :name ( name :op1 reuben )  )  :mod also )  :name ( name :op1 reuben )  )  :arg1 store
and :op1 ( adjust :arg1 i :op3-of ( and :op1 ( thing :name ( name :op1 the )  )  :op2 ( he :arg0-of ( find :arg1-of possible :manner vegan :manner 13 )  )  :quant ( temporal-quantity :unit year )  )  )  :op2 diet :op3 ( become :arg1 ( he :arg0-of ( need :arg1 ( everything :mod almost )  :arg1-of get :mod that )  )  :arg2 i :time ( date-entity :year 1997 )  )  :op4 vegetarian
and :op1 ( become :arg0 ( i :arg0-of ( turn :arg1 millennium )  )  :arg1 ( step :mod next )  :arg2 vegan )
contrast :arg1 ( choose :arg0 i :arg1 ( prefer :arg0 proctor :arg0-of ( normal :arg1 leather )  :arg1 artificial :arg1-of ( say :arg0 howev )  :arg2 leather :extent amr-unknown :op1-of over :polarity - )  :arg1-of ( convince :arg0 it :arg2 i :mod that :mod ( just :mod-of diet )  )  :op1-of of :op1-of shoe )  :arg2 also
realize :arg0 he :arg1 ( possible :arg1 ( overcome :arg0 you :arg1 ( concern :arg1 ( product :mod animal )  :mod other :quant all )  :mod also )  )
and :op1 ( foremost :mod-of ( vegan :domain ( matter :topic ethic )  )  )
say :arg0 ( i :arg0-of ( behave :arg1-of ( consume :arg0 of )  :arg2-of ( apply :arg0 vegan :arg1 all )  :arg2-of ( express :arg0 ( want :arg0 ( i :arg0-of ( do :arg1 die )  )  :arg1 animal :polarity - )  :arg1 maxim )  )  )  :arg1 proctor
discover :arg0 ( vegan :arg0-of ( miss :arg1 ( burger :op1-of ( or :op2 ( egg :arg1-of scramble )  :op3 ( thing :manner-of bear )  )  )  :topic-of rather )  )  :arg1 ( product :arg0-of ( inspire :mod really )  :mod new )  :arg1-of quick :manner entire
contrast :arg2 ( rather :mod-of ( convert :arg0 you :arg1 ( choose :arg0 you :arg1 ( put :arg0 proctor :arg1 this :arg2 ( force :mod-of habit )  :direction down )  :arg1-of reduce :arg1-of ( regard :arg0 asceticism :arg2 assumption :polarity - )  :arg1-of ( enhance :arg0 ( do :arg0 about :arg1 it :arg2 ' :arg2-of ( actual :arg0 it :arg1 fact )  :polarity - )  )  :op1-of option :op1-of meal :op1-of of )  :arg2 diet :mod that :mod ( double :arg0-of ( say :arg1 vegan :time now )  :mod-of bonus )  )  )
and :op1 ( condition :arg0 many :arg1-of ( result :arg2 ( fail :arg1 ( attempt :mod intention :mod well )  )  )  :manner precise :mod this )
say :arg0 temptation :arg1 ( person :arg0-of ( compare :arg1-of ( provide :arg0 factor )  )  :arg2-of ( give :arg0 decisive :arg1 ( smoke :arg1-of ( cause :arg0 factor )  :arg1-of resemble )  :arg1-of ( quick :arg0 many )  )  :name ( name :op1 &quot; )  )
and :example - :op1 he :op2 ( argue :arg1-of produce :arg1-of ( link :location animal )  :domain-of flavour :domain-of certain )
flavour :arg1-of ( provide :arg0 ( type :mod-of prepare :op2-of ( or :mod often :op1 herb )  )  )
possible :arg1 ( effect :arg0 you :arg1 ( explain :arg1 vegan )  :arg1-of ( create :arg0 howev )  :arg1-of ( same :arg2 ( other :mod-of way )  )  )
bring :arg0 ( person :arg0-of ( attend :arg1 ( party :arg0-of barbecue )  )  :name ( name :op1 proctor )  )  :arg1 aubergin :arg2 ( and :op1 mushroom :op2 ( sausag :mod vegan :quant few )  )  :mod also :purpose example
ensure :arg0 he :arg1 ( diet :arg1-of vary :arg1-of balance )  :time-of ( recommend :arg1 ( flavour :mod good :mod hearty )  :arg2 everything :mod also )
want :arg0 you :arg1 ( enough :degree-of ( fair :domain that )  )  :arg2 ( bit :mod-of something :quant-of bite )
contrast :arg1 this :arg2 ( say :arg0 food :arg1 ( recommend :arg0 it :arg1 tasty )  :arg1-of ( base :arg0 necessarily )  :arg2-of ( mean :arg1 animal :polarity - )  )
or :op1 ( suffer :arg0 he :arg1 ( damage :arg1 health :purpose ( spread :arg1 ( assumption :mod another )  :arg1-of wide )  )  :polarity - )  :op2 ( eat :arg1 disorder )  :quant any
effect :arg0 convert :arg2 i :mod positive
and :op1 ( consume :arg0 ( i :arg0-of ( increase :arg1 ( take :arg1 vitamin )  :polarity - )  )  :arg1 ( cholesterol :mod foreign :mod any )  )
exclusive :arg0 ( top :mod-of athlete )  :arg1 ( diet :mod vegan :mod also )
excellent :arg0 i :arg2 ( i :arg0-of ( check :arg1 ( value :mod blood )  :arg2 ( regular :arg1 ( person :arg1-of reveal :name ( name :op1 &quot; )  )  )  )  )
warn :arg0 veganism :arg1 ( critic :quant many )  :location ( particular :topic ( lack :arg0 ( location :name ( name :op1 b )  :wiki - )  :arg1 12 :arg2 vitamin )  )
cause :arg1 ( animal :arg0-of ( feed-up :arg1 ( instead-of :arg0 fodder :arg1 ( of :arg0-of ( graze :arg1 ( location :name ( name :op1 b )  :wiki - )  :arg2 vitamin )  )  :arg2 ( sell :arg0 meat :arg1 ( comment :arg0 ( content :quant 12 )  :arg1 proctor :arg1-of ( high :arg0 actual )  )  :arg2 freezer :arg2-of ( dubious :arg0 it :arg1 wheth )  )  )  )  )
tablet :mod-of ( form :manner-of ( take :arg0 also :arg1 enzyme :arg2 vegan :mod-of option )  )
explain :arg0 he :arg1 ( value :mod ( location :name ( name :op1 b )  :wiki - )  :quant 12 )  :arg1-of ( fine :arg0 i )
buy :arg0 - :arg1 food :arg1-of ( travel :arg0 ( person :name ( name :op1 proctor )  )  :degree far )
and :op1 ( foodstuff :arg2-of ( available :arg1 now :location everywhere )  :mod basic )  :op2 ( supermarket :mod every )  :op3 ( milk :mod soya :op1-of ( and :op2 ( product :mod other )  )  )
possible :arg1 ( find :arg0 i :arg1 ( everything :arg1-of ( need :arg0 ( i :arg0-of local )  )  )  )
and :mod again :op1 ( purchase :arg0 i :arg1 ( item :arg1-of special )  :mod only :time now )
overlook :arg0 ( person :arg0-of ( ready :arg1 product :arg2 ( expensive :mod-of ( know :arg0 it :arg1 this :arg2 also :mod well )  )  :mod though :mod even )  :arg0-of ( normal :arg1 ( product :arg1-of ( ready :arg0 vegan )  )  :arg1-of case )  :quant many )  :arg1 that :arg2 fact
and :op1 ( cheap :arg1 ( prepare :arg1 ( dish :arg1 vegan :arg2 ( case :mod any )  )  )  :degree much )  :op2 ( assume :arg1 ( time :arg1-of ( consume :arg0 common :arg2 less )  )  )
say :arg0 ( you :arg0-of ( achieve :arg1 sometimes :arg1-of ( tweak :arg0 minor )  :arg1-of ( possible :arg0-of ( cause :arg1 good :polarity - )  )  :arg2-of ( discover :arg0 ( there :arg2-of ( cook :arg0 in :arg1 much :arg4 home )  )  :arg1 few )  :op1-of good )  )  :arg1 ( person :name ( name :op1 &quot; )  )  :arg1-of result
cheese :arg1-of ( cake :arg0 ( law :arg1-of ( astonish :arg0 ( person :name ( name :op1 proctor )  :op5-of ( and :op1 ( person :name ( name :op1 margarine )  )  :op2 place :op3 ( powder :arg0 egg :arg1-of ( bake :arg0 butter )  )  :op4 bicarbonate :quant ( more :quant little )  :quant-of ( place :prep-in-of soda )  )  )  :arg1-of ( manage :mod even :arg0 person )  )  )  )  :mod vegan
add :arg0 vegan :arg1 ( spice :arg1 ( party :poss family )  :mod new )
dynamic :arg1-of ( cook :arg0 you :arg2-of ( take :arg0 ( cook :arg0 new )  :arg1 value )  :manner together )  :mod certain
say :arg0 ( person :arg2-of ( vary :arg0 ( possible :arg1 ( arise :arg0 ( situation :mod that )  :arg1 themselv )  )  )  )  :arg1 ( person :name ( name :op1 &quot; )  )
meet :arg0 he :arg1 scepticism :time already
like :arg0 you :arg1 food :arg2 ( any :mod-of more )  :mode interrogative :polarity -
cause :arg0 ( i :arg0-of ( feel :arg1 ( bad :arg1 ( matter :mod such :mod tactful )  :arg1-of ( recommend :arg2 you :mode interrogative )  :arg2 ( i :arg0-of ( drink :arg1 milk :time now )  )  )  )  )  :arg1 vegan
say :arg0 ( society :mod this )  :arg1 ( choose :arg0 ( person :arg0-of ( explain :arg1 that )  :name ( name :op1 &quot; )  )  :arg1 life :arg1-of ( isolate :arg0 he )  :arg1-of ( do :arg0 ( i :arg0-of ( disapprove :arg1 of :arg2 person )  )  :arg2 i :polarity - :polarity - )  )
cause :arg0 quite :arg1 ( and :arg1-of appear :example - :example-of - :example-of vegan :example-of ( and :op1 ( close :location ( world :mod everyday )  )  :op2 observation )  :op1 vegan :op2 ( limit :arg1 ( life :arg1-of ( assume :mod common )  :mod everyday :mod quite )  )  )
permit :arg1 ( food :mod fast )  :mod also
everywhere :arg2-of ( available :arg1 chip )
say :arg0 ( thing :mod vegetarian :mod even :name ( name :op1 &quot; )  :op2-of ( or :op1 ( offer :arg0 ( many :mod-of done )  :arg1 falafel :mod house :mod kebab )  )  )  :arg1 ( person :name ( name :op1 &quot; )  )
habit :arg1-of ( question :arg0 all :mod ( just :mod-of ( cheese :prep-without-of ( avoid :arg0 ( he :arg0-of ( dish :arg1 pasta )  )  :arg1 ( or :op1 ( order :mod just )  )  :time pizzeria )  )  )  :op1-of pizza )
adapt :arg0 restaurant :arg2 thing :manner slow
say :arg0 ( i :arg0-of ( eat :arg1 vegan )  :arg0-of ( begin :arg1 ( diet :mod-of 13 :quant-of ( temporal-quantity :unit year )  )  )  )  :arg1 ( thing :name ( name :op1 &quot; )  :op3-of ( and :op1 ( thing :mod ago )  :op2 ( difficult :degree ( more :mod even )  )  :op4 ( he :arg0-of ( mean :arg1 they :arg2 ( person :arg1-of ( talk :arg0 you )  )  :mod out )  :mod-of point )  )  )
hope :arg0 he :arg1 ( expand :arg1 menu :arg1-of ( incline :arg0 they )  :arg1-of ( request :arg0 enough :arg2 perhaps )  )
open :arg1 ( restaurant :mod vegan )  :arg2 ( or :op1 such :op2 ( organization :location ( country :name ( name :op1 mannheim )  )  :name ( name :op1 komb√ºse )  )  )
hope :arg0 ( person :name ( name :op1 proctor )  )  :arg1 ( dish :arg0 ( restaurant :mod other )  :arg1 menu :mod vegan :mod also )
dish :arg1 everyone :compared-to-of essential :mod vegan
possible :arg1 ( eat :arg0 anyone :arg1 ( they :arg1-of ( opposite :mod exact :time exclusive )  )  )
sense :arg0 ( true :arg1-of ( exclusive :arg0 ( other :arg1-of ( dish :arg0 meat )  )  )  )  :arg1 ( of :mod-of word )  :arg2 ( person :arg1-of ( assess :arg0 ( other :arg1-of ( rule :arg0 they :arg2 out )  )  )  :name ( name :op1 &quot; )  )  :manner hand
say :arg1 ( person :arg2-of ( want :arg0 ( you :arg0-of ( avoid :arg1 veganism :arg2 food )  )  :arg0-of ( rule :arg1 ( of :mod majority :mod-of scandal )  :arg2 out :manner ( way :arg1-of safe )  )  :arg1 scandal )  :name ( name :op1 &quot; )  )  :time outset
possible :arg1 ( difficult :domain ( start :arg1 ( product :mod ( vegan :arg0-of purchase )  )  )  )
and :arg0-of ( follow :arg1 person :arg2 ( code :part-of ethic :time-of ( lose :arg0 ( you :arg0-of ( understand :arg1 ( possible :arg1 ( contain :arg0 peanut :arg1 ( additiv :mod particular :mod animal )  :arg2 colourant :mod also )  )  )  :arg1-of ( come :arg2 understand )  )  :arg1 courage :arg1-of seem :arg1-of quick )  )  )  :op1 ( hurdle :quant many )  :op2 pitfall
ingredient :op2-of ( and :arg1-of ( explain :arg0 ( person :name ( name :op1 therefore )  :op3-of ( and :op1 ( person :mod other :name ( name :op1 therefore )  :op2-of ( and :op1 ( reason :mod this )  )  )  :op2 ( person :arg0-of ( write :arg1 book )  :name ( name :op1 therefore )  )  )  )  :arg1-of ( hide :arg0 ingredient :arg2 ( person :arg0-of ( have-org-role :arg2 agent )  :op1-of ( and :arg1-of ( clean-up :arg0 foodstuff )  :mod both )  )  )  :mod-of many )  :op1 animal )
and :op1 ( thing :arg1-of symbolize :arg1-of ( know :arg0 you :arg1-of ( internal :arg0 you )  :op3-of ( and :op1 ( develop :arg0 gradual :arg1 ( look :arg0 you :arg1 ( person :arg0-of ( learn :arg1 that )  :arg0-of ( take :arg1 ( step :arg0 it :arg1 rather :mod small :op1-of ( or :arg0-of stumble :arg1-of stand :op2 still )  )  :degree too :manner good :time sometimes )  :name ( name :op1 &quot; )  )  :arg2 out )  )  :op2 scann )  )  )  :op2 logo
compass :arg0-of ( effect :arg1 consciousness )  :arg1-of moral :mod important
contrast :arg1 altogether :arg2 ( he :arg0-of ( manage :arg1 least )  :arg0-of ( question :arg1 critical :mod-of habit )  :arg1-of ( teach :arg0 ( he :arg0-of ( help :arg2 you )  :arg0-of ( manage :arg1 perhaps :polarity - )  )  :arg2 ( person :arg0-of consume )  )  :poss-of ( habit :mod old )  )
keep :arg0 ( thing :name ( name :op1 nasdaq :op2 omx )  :poss-of customer )  :arg1 ( person :arg0-of operate :arg1-of ( stock :arg1-of exchange )  )  :arg2 tenterhook
interrupt :arg0 afternoon :arg1 ( time :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg2 ( trade :arg2 ( market :domain-of friday :mod option )  )
cite :arg0 ( person :arg0-of announce :arg0-of operate )  :arg1 ( problem :mod technical :topic reason )
nasdaq :op1-of ( name :name-of ( thing :arg0-of ( operate :arg1 2 :arg1-of ( normal :arg2-of ( continue :arg1 business :arg4 ( market :mod option :mod eleven :mod other )  )  )  :mod also )  )  :op2 omx )
and :mod both :op1 large :op2 ( breakdown :arg1-of ( suffer :arg0 ( person :arg0-of operate :arg0-of ( exchange :arg1 stock )  )  )  :mod small )  :topic-of ( series :location-of ( incident :domain-of ( late :degree most )  :time ( recent :degree most )  )  )
calculate :arg0 tuesday :arg1 ( index :mod ( thing :name ( name :op1 nasdaq )  )  )  :arg3 ( transfer :arg0 last :arg1 data :instrument error )  :duration ( temporal-quantity :unit hour )  :polarity - :time recent
breakdown :location ( week :arg1-of ( single :arg0 ( year :mod this :time-of 8 )  )  )  :quant 2
send :arg0 ( company :arg0-of ( invest :arg1 all :arg2 ( country :name ( name :op1 us )  :wiki united_states )  )  :location bank :name ( name :op1 goldman :op2 sachs )  :wiki goldman_sachs )  :arg1 ( quantity :mod large )  :arg2 ( market :arg3-of ( purchase :arg1 ( technical :mod-of problem )  :mod-of ( order :arg1-of ( correct :polarity - )  )  )  :mod option )
require :arg0 ( person :arg0-of ( exchange :arg1 stock )  :arg0-of operate :arg0-of ( delete :arg1 order :op2-of ( and :op1 look )  )  )  :arg2 ( day :mod ( entire :mod almost )  )  :arg2-of result
come :arg0 ( country :arg0-of ( exchange :arg1 ( thing :name ( name :op1 nasdaq )  )  :arg2-of ( fail :arg0 ( several :op1 ( temporal-quantity :unit hour )  )  :arg1 computer )  )  :arg0-of ( deal :arg1 ( stock :quant all )  )  :name ( name :op1 usa )  :wiki united_states )  :arg1 half :arg4 standstill :time ( late :op1 ( temporal-quantity :quant 2 :unit day )  )
cause :arg0 ( listing :poss ( company :arg2-of ( exchange :arg0 ( last :mod-of year )  :arg1 stock )  :name ( name :op1 facebook )  :wiki facebook )  )  :arg1 ( furore :mod quite )  :time furthermore
and :op1 ( purchase :arg1 ( system :arg0-of ( cope :arg1 10 :arg1-of possible :polarity - )  :mod ( thing :name ( name :op1 nasdaq )  )  )  )  :op2 ( order :arg1-of ( flood :arg1-of ( penalize :arg1-of ( impose :arg0 ( organization :arg1-of ( establish :time ( date :mod late )  )  :name ( name :op1 exchange :op2 supervisory :op3 authority )  )  :arg2 company )  :arg2 ( monetary-quantity :unit dollar )  :mod record )  )  )
knock :arg1 ( man :age ( temporal-quantity :quant 63 :unit year )  :mod old )  :mod ( cyclist :degree ( country :name ( name :op1 konstanz )  )  )
say :arg0 police :arg1 ( occur :arg0 ( accident :arg0-of ( cycle :arg1 ( man :age ( temporal-quantity :quant 26 :unit year )  :mod ( old :mod-of ( lady :mod-of ( bicycle :location ( direction :mod p.m. :mod-of 10 )  )  )  )  )  :prep-on ( footpath :mod left )  )  )  :arg1 evening :time ( around :quant-of thursday )  )
pub :arg3-of ( step-in :arg0 ( cyclist :arg0-of ( brake :arg1 time )  :arg1-of ( say :arg0 police )  )  :arg1 ( man :age ( temporal-quantity :quant 63 :unit year )  :mod old )  :manner sudden :time ( onto :op1 footpath )  )
and :op1 ( throw :arg1 pedestrian :arg1-of ( collide :mod subsequent )  :arg2 ( wall :arg0-of ( build :arg1 15 )  )  )  :op2 ( fall :arg1 around :time ( onto :op1 ground )  :time then )  :op3 ( suffer :arg1 laceration :arg2 ( head :arg0-of ( measure :arg1 ( length :location-of centimetr )  )  )  )
bring :arg0 ( team :mod ambulance )  :arg1 ( man :arg1-of ( injure :compared-to medicine )  )  :purpose ( treat :arg1 clinic )
serve :arg0 ( police :mod ( country :name ( name :op1 britain )  :wiki united_kingdom )  )  :arg2 ( person :arg1-of ( notice :mod extradite )  :name ( name :op1 assange )  )
request :arg0 embassy :arg1 asylum :arg2 ( city :name ( name :op1 london )  :wiki london )  :op2-of ( and :op1 ( take :arg0 ( country :name ( name :op1 ecuador )  :wiki ecuador )  :arg1 refuge :arg1-of ( found :arg0 wikileak )  :arg2 amr-unknown :arg3 ( notice :arg1 ( thing :name ( name :op1 btitish )  )  :arg1-of extradite :arg1-of ( serve :arg0 police )  )  :time today )  )
say :arg0 ( they :mod-of ( serve :mod-of ( fail :arg1-of ( cause :arg0 40 )  :arg1-of ( liable :mod further :mod-of arrest )  :mod that :mod add :mod ( old :mod-of ( require :arg1 appear :mod ( country :name ( name :op1 australia )  :wiki australia )  )  :mod-of year )  :mod ( station :mod police )  :mod ( notice :arg1-of surrender )  )  )  )  :mod ( organization :name ( name :op1 scotland )  )
appeal :arg0 ( government-organization :name ( name :op1 supreme :op2 court )  :wiki supreme_court_of_new_south_wales )  :arg1-of ( overturn :arg2 ( extradite :arg1 ( law :mod ( country :name ( name :op1 britain )  :wiki united_kingdom )  )  )  :purpose-of ( exhaust :arg1 option :purpose-of ( face :arg0 ( person :name ( name :op1 assange )  )  :arg1 ( extradite :arg1 ( country :name ( name :op1 sweden )  :wiki sweden )  )  :arg2 ( allege :arg1 ( crime :arg1 sex )  )  )  )  :time ( early :time-of ( month :mod this :unit-of temporal-quantity )  )  )
fear :arg1 ( he :arg0-of ( seek :arg1 refuge :arg2 ( country :name ( name :op1 us )  :wiki united_states )  :location ( city :location-of ( embassy :mod ( country :name ( name :op1 ecuador )  :wiki ecuador )  :mod-of ( date-entity :month 6 )  )  :name ( name :op1 london )  :wiki london )  :manner pas )  :arg0-of ( ask :arg1 ( continent :name ( name :op1 south :op2 america )  :wiki south_america )  :arg2 ( politics :mod country :op1-of asylum )  :mod 19 )  )
say :arg0 ( we :arg1-of ( choose :arg1-of attend :arg1-of ( have-org-role :arg2 spokesman )  :arg1-of ( notice :arg1-of ( surrender :mod ( serve :mod ( organization :name ( name :op1 scotland )  )  )  )  )  :arg1-of ( require :mod ( that :mod-of ( time :mod and :mod date :mod ( old :mod-of ( year :mod 40 )  :mod-of man )  :mod ( station :mod police )  :mod-of of )  )  )  )  )
remain :arg1 ( he :arg0-of ( breach :arg1 ( condition :mod bail-out )  )  )
decline :arg0 embassy :arg1 ( comment :arg3 ( notice :arg1 ( serve :arg1 police )  )  )
fear :arg0 ( person :name ( name :op1 assange )  )  :arg1 ( extradite :arg1 ( he :arg0-of ( face :arg1 ( charge :arg1-of possible :arg2 espionage )  )  )  :arg2 ( country :name ( name :op1 sweden )  :wiki sweden )  :arg3 ( country :name ( name :op1 united :op2 states )  :wiki united_states )  :time ( after :op1 ( release :arg1 ( cable :arg0 ( country :name ( name :op1 us )  :wiki united_states )  :arg1 diplomacy :location ( website :mod ( secrecy :arg1-of ( oppose :arg0 wikileak )  )  )  :quant more )  )  )  )
speed :arg1 ( drive :arg1 ( leg :arg1-of ( drink :arg0 130mph :op1-of between )  :arg1-of ( fine :arg0 gbp )  :arg1-of ( hot :arg0 at )  )  )
fine :arg0 motorist :arg1 ( drive :arg1 ( leg :arg1-of ( drink :arg0 ( he :arg0-of ( balance :arg1 between )  )  )  :arg1-of ( hot :arg0 slash )  )  )
spot :arg1 ( drive :arg0 ( person :name ( name :op1 andrew :op2 howie )  )  :arg1 ( organization :name ( name :op1 mercedes :op2 benz )  )  :arg2 120 :time ( date-entity :mod-of ( province :name ( name :op1 essex )  :wiki essex )  :month 5 )  :time ( 27 :poss-of 35 )  :topic ( country :name ( name :op1 tiptree )  )  )
discover :arg0 they :arg1 ( drink :arg0 leg :arg1 takeaway )  :condition ( stop :arg0 police )
charge :arg0 ( court :arg0-of ( admit :arg1 magistrat )  )  :arg1 ( attend :arg1 and :arg1-of drive :arg1-of care )
add :arg1 point :arg2 ( licence :arg0-of ( result :arg1 ( receive :arg0 7 :arg1 ( ban :arg1-of drive :arg2 ( temporal-quantity :quant 6 :unit month )  )  )  )  )
order :arg0 ( person :arg0-of ( pay :arg1 of :mod also :op1-of ( and :arg1-of cost :op2 90 :op3 victim :op4 surcharge )  )  :name ( name :op1 howie )  )  :arg1 100
' :arg0-of ( bubble :arg1 ( property :arg1-of tax :arg1-of ( own :arg0 ( person :arg0-of ( burst :arg1 ( city :name ( name :op1 london )  :wiki london )  )  :mod foreign )  )  )  )
contrast :arg1 ( measure :arg1 ( cost :arg1 provisional )  )  :arg2 ( await :arg1 ( decide :arg1 percentage-entity :op1-of ( and :arg2-of ( charge :arg0 duty :arg1 ( person :arg0-of ( buy :arg1 ( choose :arg1 ( rather :mod-of company )  :arg1-of ( introduce :arg0 7 )  :arg1-of ( stamp-out :arg0 of )  :arg1-of cost :arg1-of ( hold :arg0 individual :time home )  )  )  )  :manner home :mod more )  :op2 rate )  :time final :time ( date-entity :year 2012 )  :time budget )  )
and :arg2-of ( total :arg0 ( combine :arg0 ( slash :op1 13 :op2 tax :time ( date-entity :year 2012 )  )  :arg1 ( country :name ( name :op1 northern :op2 ireland )  :wiki northern_ireland )  :arg2 ( country :name ( name :op1 wales )  :wiki wales )  :arg2-of ( exceed :arg0 year :arg1 ( property :arg1-of ( stand :arg0 borough )  :arg1-of ( take :arg0 duty :arg1-of ( stamp-out :arg0 already )  :arg2 residence :op1-of ( and :location ( city-district :name ( name :op1 westminster )  :wiki westminster_system )  )  )  )  )  )  :arg1 north_korea )  :op1 ( world-region :mod north_korea :name ( name :op1 west )  :wiki western_world )  :op2 ( county :name ( name :op1 yorkshire )  :wiki yorkshire )  :op3 ( and :op1 ( put :arg0 ( country :name ( name :op1 scotland )  :wiki scotland )  :arg2 together :mod humb )  )
say :arg0 ( person :arg0-of ( stamp-out :arg1 duty )  :arg0-of ( increase :arg1 ( argue :arg1 ( property :arg1-of value )  :arg1-of ( high :arg0 of )  :arg1-of ( oppose :arg0 avoidance )  :arg1-of associate :arg1-of high :arg1-of ( tax :mod-of ( system :mod ( council :arg1-of ( date :arg0 effect :arg2 out )  )  )  )  :arg1-of ( tax :mod-of irrespective )  :arg1-of introduce :arg1-of follow :domain-of ( difficult :degree very :domain that :domain it :domain legislation )  :op1-of under )  :op1-of ( and :op2 value :op3 home )  )  :name ( name :op1 mr )  )  :arg1 mr
add :arg0 he :arg1 ( property :arg1-of ( buy :arg0 ( person :arg0-of ( invest :arg1 reticent )  )  :arg1-of possible :arg2 ( city :name ( name :op1 london )  :wiki london )  :arg2-of ( contrast :arg1 ( move :arg0 this :arg1 some :arg2 foreign )  )  :op1-of ( or :op2 current )  )  )  :arg1-of ( sell :arg0 ( person :arg0-of ( own :arg1 reluctant )  )  )
increase :arg0 ( percentage-entity :mod ( top :mod-of ( percentage-entity :value 10 )  )  )  :arg1 ( stretch :arg0 ( property :mod prime )  :arg1 ( belt :location ( city :name ( name :op1 london )  :wiki london )  :part ( west :mod south )  )  :arg2 5 :arg4 wimbledon )  :arg2 ( percentage-entity :mod record )  :arg2-of ( house :arg0 market :time ( price :arg0 ( past :mod-of year )  :arg1 affluence )  )
contrast :arg1 percentage-entity :arg2 ( and :arg1-of ( say :arg0 an :arg2-of ( research :arg0 uptick :op1-of ( from :op2 savill )  )  )  :arg1-of ( experience :mod all )  :op1 ( grow :arg0 year :arg1 ( thing :arg2-of ( price :arg1 ( continue :arg0 ( city :name ( name :op1 london )  :wiki london )  :arg1 ( show :arg0 year :mod-of steady )  :mod central )  )  )  :op1-of of )  :op2 ( south :mod-of west :part-of ' :part-of city )  :op3 north :op4 7.4 :op5 east :op6 ( 6.5 :mod-of percentage-entity )  :quant percentage-entity )  :arg2-of ( overshadow :arg0 5.6 :arg1 ( by :arg0-of ( burgeon :arg1 ( market :mod domestic :mod-of with )  )  )  )
shed :arg0 ( person :arg0-of ( have-org-role :arg2 scientist )  :arg0-of ( light :arg1 ( move :arg1 of :arg2 dog )  :arg2 amr-unknown :degree more )  )  :arg1 ( link :arg1 it :arg1-of ( tail :arg0 ' )  :arg2 mood )
reveal :arg1 ( happy :arg0-of ( tail :arg1 ( dog :mod-of ( view :arg0 ' :arg1 ( nervous :arg0 while :arg1 ( dog :arg0-of ( dominate :arg1 ( swish :arg0 left )  )  )  )  :mod of :mod point :mod right )  )  :degree ( more :degree-of ( wag :arg0 dog :arg1 their )  )  )  :arg0-of ( research :arg1 that :arg2 early )  )
contrast :arg1 ( possible :arg1 ( and :arg1-of ( say :arg0 scientist :time now )  :op1 spot :op2 ( respond :arg0 ( canin :mod fellow )  :arg1 ( differ :arg1 subtle :arg1-of tail :mod this )  )  )  )
say :arg0 ( organization :name ( name :op1 prof )  )  :arg1 ( and :arg1-of ( know :degree very :manner ( well :arg1 human )  )  :op1 leave :op2 ( right :arg1 ( brain :arg0-of ( differ :arg1 ( or :arg1-of invoke :op1 positive :op2 negative )  :arg2 ( involve :arg1 emotion )  )  )  )  :op3 side )  :arg2-of ( mean :arg1 it )
attempt :arg0 we :arg1 ( look :arg1 ( species :mod other )  :arg0 we )  :location here
add :arg0 he :arg1 ( and :arg1-of ( responsible :arg0 ( side :mod right )  :op1-of ( and :op2 ( versa :mod vice )  :op3 ( play :arg0 ( hemispher :quant 2 )  :arg1 ( role :arg1-of ( differ :mod just )  )  )  :op4 emotion :poss brain )  )  :op1 ( movement :arg0 dog :arg1 human :arg1-of ( hand-over :arg2 left )  )  )
side :arg1 ( wag :arg1 dog :arg1-of ( research :arg0 ( person :arg0-of ( monitor :arg1 animal :time ( watch :arg0 ( they :arg0-of ( find :arg1 more )  )  :arg1 ( film :mod dog )  )  )  :op1-of other )  )  :arg1-of ( react :arg0 dog :time other )  :arg1-of tail )  :arg1-of lop
and :op1 pet :op2 rate :op3 analyse :op4 ( behave :arg0 heart :arg1-of ( measure :arg0 they )  )
tail :arg0-of ( go :arg1-of ( understand :arg0 we :op2-of ( before :op1 ( long :arg0 ( sometimes :mod-of other )  :arg1 it :domain-of probable )  )  )  :frequency sometimes :manner way )  :arg1 -
say :arg0 ( person :mod prof :name ( name :op1 prof )  )  :arg1 ( present :arg0 ( we :arg0-of ( rid :arg1 ( issue :arg1-of ( confound :mod other :mod any )  :arg1-of ( movement :arg0 ( we :arg0-of ( tail :arg1 more )  :arg0-of ( tail :arg1 ( or :op1 left :op2 right )  :op1-of ( and :op2 present )  )  )  )  :op1-of ( and :arg1-of possible :op2 doctor )  )  :arg2 ( version :mod naturalistic :mod dog :mod either :mod of :mod movie :op1-of ( or :op2 silhouette )  )  )  )  :arg1 dog )
right :arg2 ( move :arg1 ( otherwise :arg0-of ( wag :arg1 ( dog :arg0-of ( view :arg1 ( stay :arg1-of ( relax :arg0 they )  :arg1-of perfect )  :arg2 point )  )  :arg2 tail )  :arg1-of ( see :arg0 animal )  )  :arg1-of tail :arg2 dog )
contrast :arg1 ( look :arg0 they :arg1 anxious :arg1-of ( pick-up :arg0 heart )  :arg1-of ( view :arg2 rate :mod point :mod ( dog :arg1-of ( swish :arg1-of tail )  )  :mod again )  :op1-of and )  :arg2 ( they :arg0-of spot :arg0-of ( tail :arg1 ( veer :arg1 predominant )  )  )
say :arg0 ( he :arg0-of ( think :arg1 ( dog :mod that )  :polarity - )  :arg0-of ( move :arg1 ( each :arg1-of ( communicate :arg0 intentional )  :mod-of other :mod-of through )  :mod this )  )  :arg1 prof
and :arg1-of ( recommend :arg0 they )  :arg1-of ( recommend :arg0 ( he :arg0-of believe :arg0-of ( learn :arg1 dog )  :arg0-of ( worry :arg1 about :arg1-of ( feel :arg0 they )  :polarity - )  :arg0-of ( move :arg1 ( amr-unknown :arg1-of experience )  )  :arg1-of instead-of )  )
say :arg0 ( he :arg0-of ( associate :arg1 way )  :arg0-of ( behave :arg0-of ( behave :arg0-of ( friendly :arg1 less )  :arg1-of experience :arg1-of ( produce :arg0 side )  :arg1-of ( respond :arg0 you )  )  :arg0-of ( friendly :arg1 more )  :arg0-of ( right :arg1 and )  )  :arg1-of mean )  :arg1 ( and :arg1-of ( tail :arg0 ( you :arg0-of ( meet :arg1 several )  )  :arg1-of ( wag :arg0 other )  )  :arg1-of ( frequent :arg0 dog )  )
say :arg0 ( person :arg0-of ( find :arg1 ( thing :arg1-of ( give :arg1-of possible :arg2 ( person :arg0-of own )  )  )  )  :arg0-of ( research :arg1 emotion )  )  :arg1 ( and :op1 ( vet :arg1 animal )  :op2 ( train :arg1 into )  :op3 ( good :mod-of insight )  )
say :arg0 ( science :mod veterinary )  :arg1 this :arg2 ( study :arg0 ( person :arg0-of ( visit :arg1 ( fellow :mod-of school :mod-of of )  :arg2 ( behave :arg0 dog :arg0-of ( expert :arg1 person )  )  )  :name ( name :op1 john )  :wiki - )  :arg1 first :arg1-of ( examine :op1-of ( and :op2 wheth :op3 left :op4 ( right :mod-of ( important :mod-of canin )  )  :polarity - )  )  )
and :op1 ( right :arg0-of ( look :arg1 ( dog :mod happy )  )  :arg1 ( year :mod last )  )  :time-of ( look :arg1 ( dog :mod aggressive )  :condition-of ( turn :arg0 dog :arg1 ( person :arg0-of ( head :arg1 ( country :name ( name :op1 lincoln )  )  )  :poss ( organization :name ( name :op1 university )  )  )  :arg1-of ( find :arg0 team )  :destination left )  )
say :arg0 ( he :arg0-of ( dog :arg1 ( approach :arg0 ( country :name ( name :op1 canada )  :wiki canada )  :arg1 dog :arg1-of ( likely :degree more )  :location robot )  )  :arg0-of ( wag :arg1 ( study :arg1-of tail :arg1-of opposite :arg2-of ( become :arg1 ( country :name ( name :op1 italy )  :wiki italy )  :location anxious :location ( around :op1 way )  )  )  :example right :location rather )  )  :arg1 ( and :op1 ( research :arg1 ( paper :mod another )  :location ( state :name ( name :op1 victoria )  :wiki victoria_[australia] )  )  )
say :arg0 he :arg1 ( possible :arg1 ( interpret :arg0 ( differ :arg1 ( dog :topic ( study :arg1-of differ )  )  )  :arg1 animal :degree ( full :polarity - )  )  :arg1-of ( cause :arg0 ( or :op1 ( film :op1 canin )  :op2 robo :op3 dog )  )  )
respond :arg0 dog :arg1 dog :arg2-of ( study :arg0-of ( help :arg1-of ( possible :arg1-of ( explain :arg0 he )  )  )  :arg1 real )
say :arg0 ( he :arg1-of ( except :arg0 dog :polarity - )  )  :arg1 ( and :arg1-of ( hammer :arg0 ( many :arg2-of ( evidence :arg0 considerable :arg1 that :arg2-of ( while :arg1 there )  )  :mod-of ( differ :arg1 mammal :arg2 2 )  )  :arg2 out )  :op1 ( detail :arg0 ( side :mod-of of )  :arg1 still :arg1-of ( use :arg0 brain :arg2 ( purpose :arg2-of ( differ :arg1 much )  )  )  )  )
possible :arg1 ( record :arg0 ( ease :arg1-of give )  :arg1 ( behave :arg0 - :arg1 ( sometimes :mod-of other )  )  )  :op1-of ( before :op2 ( long :domain-of probable )  :op3 ( understand :arg0 we :arg1 ( go :arg0 tail :frequency sometimes :manner way )  )  )
gig :arg2-of ( postpone :arg0 ( organization :arg0-of ( monkey :arg1 illness )  :name ( name :op1 arctic )  :name ( name :op1 turner )  )  :arg1 ( city :name ( name :op1 glasgow )  :wiki glasgow )  )  :mod-of due
gig :arg1-of ( postpone :arg0 ( organization :name ( name :op1 arctic :op2 monkeys )  )  :manner ( band :poss ( company :name ( name :op1 northern :op2 rock )  :wiki northern_rock )  )  :time ( after :op1 ( diagnose :arg1 ( person :arg0-of sing :arg0-of lead :location-of ( city :name ( name :op1 glasgow )  :wiki glasgow )  )  :arg2 laryngiti )  )  )
schedule :arg1 ( perform :arg0 ( group :mod ( country :name ( name :op1 sheffield )  )  )  :arg1 ( venue :mod ( thing :name ( name :op1 hydro )  )  )  :location city )  :arg3 friday
show :arg0 ( person :arg0-of sing :arg1-of ( force :arg0 illness :arg2 they :name ( name :op1 turner )  )  :arg1-of lead )  :arg1-of reschedule
announce :arg0 band :arg1 arena :arg1-of ( come :accompanier ( name :op1 birmingham )  :time ( after :time-of ( force :arg0 they :arg1 thursday :arg2 ( postpone :arg0 similarly :arg1 gig )  )  )  )
state :arg0 ( person :arg0-of ( decide :arg1 ( show :arg1 ( and :arg0-of ( advise :arg1 medicine )  :op1 ( seek :arg0 ( country :arg0-of ( show :arg1 ( city :location-of ( 11 :month-of ( date-entity :day 1 )  )  :name ( name :op1 glasgow )  :wiki glasgow )  :arg1-of ( postpone :arg0 also )  )  :name ( name :op1 in )  :name ( name :op1 birmingham )  )  :arg1 tonight :time after )  )  :arg1-of monkey )  :arg1-of postpone )  :arg0-of ( say :arg1 ( monkey :arg1 website )  :arg1-of follow :arg1-of mean )  :arg0-of ( have-org-role :arg2 official )  )  :arg1 friday
and :arg1-of ( perform :arg0 regrettably :arg1-of ( possible :polarity - )  )  :arg1-of ( diagnose :arg0 ( name :op1 turner )  )  :op1 laryngiti
and :op1 ( take :arg1 place :time now :time ( date-entity :month 11 :op1 ( name :op1 birmingham )  )  )  :op2 ( show :arg1 20 :arg2 ( thing :name ( name :op1 glasgow :op2 hydro )  )  )  :op3 ( take :arg0 ( show :arg0 21 :arg1 ( country :name ( name :op1 lg :op2 arena )  )  )  :arg1 place :time now :time ( date-entity :month 11 )  )
remain :arg1 ( ticket :quant all )  :arg2 ( valid :arg1 ( show :mod this )  )
cause :arg0 this :arg1 ( inconvenience :arg1-of ( apologize :arg0 we :arg1-of ( wish :arg0 we )  :arg2 ( person :arg0-of ( hold :arg1 ticket )  :quant all )  )  :mod any )
contact :arg1 ( please :arg1 any )  :arg1-of ( assist :degree further )  :location ( office :arg2-of ( purchase :arg0 you :arg1 ticket :arg3 box )  :location-of ( service :poss customer )  )
name :arg0 ( thing :name ( name :op1 pope :op2 francis )  )  :arg1 cardinal
create :arg0 ( thing :name ( name :op1 pope :op2 francis )  )  :arg1 ( cardinal :mod new :poss ( organization :name ( name :op1 catholic :op2 church :op3 for )  )  )  :arg2 ( country :arg0-of ( announce :arg1 thursday )  :name ( name :op1 vatican )  )  :arg3 time :op1-of 22
cause :arg0 ( one :arg0-of ( rank :arg1 clergy :arg1-of ( high :arg0 cardinal :degree most )  )  :arg0-of ( choose :arg1 man :arg1-of succeed :arg1-of ( help :arg0 ( he :arg0-of ( appoint :arg1 ( group :mod-of of )  :arg2 first )  )  )  :op1-of ultimate :op4-of ( and :op1 ( below :mod ( religious-group :name ( name :op1 catholic :op2 church )  :wiki catholic_church )  )  :op2 pope :op3 they )  )  :arg0-of ( elect :arg1 amr-unknown :arg2 pope )  )
cardinal :mod now
permit :arg0 ( he :arg0-of ( fall :arg1 group :mod this )  :arg0-of ( elect :arg2 pope )  :arg0-of ( participate :arg1 120 :arg2 elector :mod ( once :mod-of cardinal )  :mod 80 :polarity - )  :arg2-of reach )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 vatican )  )  :arg2 spokesman )  )  :arg1 ( hold :arg1 ( meet :arg0 ( cardinal :arg1-of ( exist :arg0 all )  )  :arg0-of ( elevate :arg1 ( cardinal :arg1-of ( know :arg2 consistory )  :mod new )  )  )  :time ( before :op1 ceremony )  )  :medium ( state :arg0 ( person :arg1-of ( have-rel-role :arg0 person :arg2 father )  :name ( name :op1 federico :op2 lombardi )  )  :arg0-of ( announce :arg1 news )  )
say :arg0 ( he :arg0-of ( decide :arg1 ' )  :arg0-of ( participate :arg1 world :arg1-of ( advance :arg0 consistory )  :arg1-of involve :arg2 cardinal )  :arg0-of ( plan :arg1 of :time ( date-entity :month 2 )  )  :arg0-of convoke :arg0-of ( facilitate :arg1 meet )  :arg1-of ( decide :arg0 pope )  :arg1-of communicate )  :arg1 lombardi :arg2-of ( differ :arg0 other :arg1 part )
say :arg0 ( person :arg1-of ( voice :mod ( religious-group :name ( name :op1 catholic )  :wiki catholicism )  )  :name ( name :op1 jack :op2 valero )  )  :arg1 ( likely :arg1 ( drop :arg1 ( number :quant-of ( elector :mod cardinal )  )  )  )
say :arg0 ( he :arg0-of ( need :arg1 ( raise :arg0 80 :arg1 ( number :quant-of ( elector :mod cardinal )  )  :arg4 back )  )  :arg1-of ( name :arg0 pope :arg2 ( cardinal :quant many )  :arg2-of ( age :arg1 ( cardinal :quant many )  :arg1-of ( want :arg0 he )  )  )  )  :arg1 and :arg2 120 :mod usual
say :arg0 ( consistory :arg0-of ( cause :arg1 ( it :arg1-of significant )  )  :quant ( temporal-quantity :quant next :unit year )  )  :arg1 this :arg1-of ( elect :arg2 franci :time ( date-entity :month 3 )  :time since )  :quant ( temporal-quantity :unit year )
and :arg1-of ( bias :arg0 especially :arg2 ( continent :name ( name :op1 europe )  :wiki europe )  :manner ( moment :poss-of ( country :name ( name :op1 italy )  :wiki italy )  )  :mod sort )
say :arg0 ( he :arg0-of ( see :arg1 wheth :arg1-of ( interest :arg0 it :arg2 pope )  )  :arg1-of ( restore :arg0 of )  :arg1-of ( balance :arg0 ( rest :arg2-of ( nominate :arg0 new :arg1 cardinal )  )  )  )  :arg1 world
contrast :arg1 ( percentage-entity :mod-of ( religious-group :name ( name :op1 roman :op2 catholic )  :wiki roman_catholic_[term] )  :value forty )  :arg2 ( number :domain they :mod tiny :quant-of ( cardinal :mod ( continent :name ( name :op1 south :op2 america )  :wiki south_america )  )  )
form :arg0 ( person :name ( name :op1 francis )  )  :arg1 ( organization :name ( name :op1 council :op2 of :op3 cardinals )  )  :arg2 ( world :arg0-of ( look :arg1 way :arg1-of ( task :arg0 also )  :arg2 ( reform :arg1 church :location ( cardinal :consist group )  )  )  :op1-of around )  :op1-of ( since :time-of ( choose :arg0 8 :arg1 cardinal )  )
decide :arg0 pope :arg1 everything :time past
say :arg0 ( person :arg2-of ( help :arg0 ( person :arg0-of ( select :arg1 this :arg2 8 :time now )  :name ( name :op1 &quot; )  )  )  :name ( name :op1 &quot; )  )  :arg1 cardinal
say :arg0 ( he :arg0-of advise :arg0-of ( ask :arg1 cardinal )  )  :arg1 ( possible :arg1 quite )
contrast :arg1 ( situation :arg1-of ( complete :mod ( all :mod new )  )  :mod-of ( before :time-of it )  :polarity - )  :arg2 we
contrast :arg1 ( know :arg0 ( he :arg0-of ( elevate :arg1 large :arg2 place :manner ( typical :arg1 ( position :mod-of cardinal :mod-of of )  :arg1-of ( say :arg0 ( person :name ( name :op1 valero )  :name name )  )  )  :manner bishop :manner pope )  )  :arg1 ( thing :arg2-of ( surprise :arg0 full :arg1 we )  :mod that )  :arg1-of cause :polarity - )
recall :arg0 ( organization :arg0-of ( fix :arg1 seatback )  :name ( name :op1 gm )  )  :arg1 ( truck :location ( country :name ( name :op1 u.s. )  :wiki united_states )  :mod pickup :mod new :mod some )
and :op1 ( recall :arg0 ( organization :arg0-of ( repair :arg1 problem :arg2 ( truck :mod pickup )  )  :name ( name :op1 general :op2 motors :op3 co )  )  :arg1-of ( say :arg0 ( notice :arg1 ( recline :arg1 seatback :manner manual )  )  :arg2 ( safe :arg1 auto :arg2 ( country :name ( name :op1 u.s. )  :wiki united_states )  :mod-of regulator :time friday )  )  )  :op2 ( thing :mod nearly :mod ( new :mod-of all )  :mod ( date-entity :year 2014 )  :name ( name :op1 chevrolet :op2 silverado )  )  :op3 ( thing :name ( name :op1 gmc :op2 sierra )  )
possible :arg1 ( defect :arg0 ( seat :arg0-of ( recline :arg1 ( truck :quant some )  )  :mod front )  :arg1 mechanism )
fail :arg1 ( auto :arg1-of ( safe :mod federal :mod-of standard )  )  :arg2 ( comply :arg0 seatback :arg1 ( restrain :mod head )  )  :arg2-of result
say :arg0 ( person :arg0-of ( increase :arg1 ( injure :arg0 vehicle :arg1 website :arg1-of ( risk :arg0 ( behind :arg0-of ( head :arg1 restraint )  )  :arg2 of :polarity - )  :arg1-of strike )  )  :arg0-of occupy :arg1-of ( protect :arg0 proper :arg1-of possible )  )  :arg1 ( post :arg1 ( organization :name ( name :op1 &quot; )  )  :arg1-of notice )
build :arg0 8 :arg1 ( model :arg1-of ( recall :op1-of 10 )  )  :op1-of ( and :op2 ( 9 :quant 1 )  )
and :op1 ( organization :name ( name :op1 gm )  )  :op2 ( begin :arg1 ( truck :mod-of roll )  :op1-of out )  :op3 ( date-entity :month 6 )  :op4 ( represent :arg1 ( vehicle :mod-of ( launch :arg0 ( country :arg0-of ( bankrupt :arg1 it :arg1-of ( restructure :arg0 since )  )  :mod-of automak :name ( name :op1 u.s. )  :wiki united_states )  :arg1 no. :arg2 1 :mod ( important :mod most )  :time ( date-entity :year 2009 )  )  )  )
tell :arg0 ( organization :name ( name :op1 gm )  )  :arg1 ( defect :arg1 ( half :time ( date-entity :month 10 )  )  )  :arg2 ( person :arg0-of ( own :arg1 truck )  )
possible :arg0 ( 16 :quant-of ( temporal-quantity :unit day )  )  :arg1 ( review :arg0 ( organization :name ( name :op1 nhtsa )  )  :arg1 ( letter :mod notification :mod ( person :arg0-of own )  )  :purpose ( grow :arg1 auto :arg1-of ( temper :arg0 ( shutdown :mod ( government-organization :arg0-of govern )  )  )  :time ( date-entity :month 10 )  )  )  :polarity -
say :arg0 ( organization :name ( name :op1 gm )  )  :arg1 ( and :op1 ( organization :name ( name :op1 silverado )  )  :op2 ( organization :name ( name :op1 sierra )  )  :op3 ( truck :arg1-of ( redesign :arg0 ( percentage-entity :op1-of ( about :op2 ( temporal-quantity :quant 10 :unit month )  )  :value 20 )  :purpose ( year :mod model :time ( date-entity :op1-of year :year 2014 )  )  )  :consist sal )  )  :location friday
sell :arg0 ( organization :name ( name :op1 gm )  )  :arg1 ( and :op1 ( organization :name ( name :op1 silverado )  :part pickup )  :op2 ( truck :mod ( organization :name ( name :op1 sierra )  )  )  )  :time ( date-entity :month 10 )
share :mod ( organization :name ( name :op1 gm )  :part-of ( organization :location friday :name ( name :op1 new :op2 york :op3 stock :op4 exchange )  :poss ( afternoon :poss ( 1.4 :value-of percentage-entity )  )  )  )
despair :arg1 ( person :arg0-of ( vote :arg1 ( person :name ( name :op1 obama )  :wiki barack_obama )  )  :arg0-of ( cry :arg1 of )  )
vote :arg0 ( i :arg0-of ( share :arg1 hope :arg2 ( possible :arg1 ( change :arg1 ( person :name ( name :op1 obama )  :wiki barack_obama )  )  )  )  )  :arg1 ( have-org-role :arg2 president )
say :arg0 he :arg1 ( effort :arg1-of ( thwart :arg0 obstructionism :arg2 ( person :name ( name :op1 obama )  :part ( political-party :name ( name :op1 gop )  :wiki republican_party_[united_states] )  :wiki barack_obama )  )  :mod worthy )
excuse :arg1 ( thing :mod-of ca :name ( name :op1 obstructionism )  )  :arg2 ( website :mod-of ( wo :mod-of ( drone :arg1-of attack )  )  )  :polarity -
possible :arg1 ( amr-unknown :arg2-of ( remind :arg1 of :arg1-of ( sad :arg0 ( person :arg0-of ( campaign :arg1 memoir :time ( date-entity :year 2008 )  )  :name ( name :op1 obama )  :wiki barack_obama )  )  )  )
person :arg0-of ( study :arg1 ( university :name ( name :op1 harvard )  :wiki harvard_university )  :duration ( temporal-quantity :unit year )  :location ( school :mod medical )  )  :domain ( person :name ( name :op1 nathaniel :op2 p. :op3 morris )  )
read :arg0 ( i :arg0-of ( sad :arg1 terrible )  )  :arg1 ( book :poss ( this :mod-of ( day :unit-of temporal-quantity )  )  )
sense :arg0 ( i :arg0-of ( think :arg1-of ( uplift :arg0 i )  )  :poss-of ( book :poss it )  )  :arg1 medicine :manner ( hope :arg1 doldrums :op3-of ( and :op1 ( renew :arg0 year :arg1 school )  :op2 i )  )
and :op1 ( call :arg0 ( person :name ( name :op1 barack :op2 obama )  :wiki barack_obama )  :arg1 it :arg2 audacity )  :op2 ( win :arg0 ( person :arg0-of ( have-org-role :arg1 memoir :arg2 president )  :arg1-of campaign :poss-of ( 2008 :year-of date-entity )  )  )
and :arg1-of possible :purpose-of ( take :arg0 i :arg1 speech :arg2 ( politics :arg2-of ( inspire :arg0 ( person :arg0-of ( write :arg1 up )  :arg0-of ( have-rel-role :arg1 ( i :arg0-of finish )  :arg2 patient )  )  :arg1 ( and :arg2-of ( return :arg0 book :arg1 bed )  )  )  )  :purpose breathe :purpose away :time time :time night )
and :op1 ( turn :arg0 elect :arg1 landslide )  :op2 ( pause :arg1 ( reflect :arg1 ( anchor :arg1 news )  :arg2 ( nature :mod history :poss ( temporal-quantity :unit hour )  )  )  )
and :op1 ( cry :arg0 ( classmate :poss i )  )  :op2 ( save :arg0 ( person :arg0-of ( have-rel-role :arg1 joy :arg2 parent )  )  :arg1 ( newspaper :arg1-of ( find :arg0 they :arg1-of possible )  :mod every )  )
and :op1 ( head :arg1 ( team :mod young )  :arg2 ( government-organization :name ( name :op1 white :op2 house )  :wiki white_house )  )  :op2 ( ready :arg1 nation :arg2 ( change :arg0 visionari )  )
approve :arg0 ( person :arg0-of transition :name ( name :op1 obama )  :poss-of office :wiki barack_obama )  :arg1 percentage-entity :arg1-of ( rate :arg0 ( he :poss-of 82 )  )  :time ( date-entity :year 2008 )
and :op1 ( close :arg0 i :arg1 book :time then )
awaken :arg1 ( cut :arg2 ( present :mod-of dream )  )  :arg1-of ( rude :arg1-of ( resemble :mod snap )  )
seem :arg1 optimism :arg1-of ( distant :arg0 ( they :arg0-of ( go :arg1 opportunity :arg1-of ( sad :arg0 memory )  :arg1-of ( remember :arg0 ( it :arg1-of hard )  )  :arg1-of remind :arg4 ( temporal-quantity :unit day )  )  )  )
change :arg0 ( i :arg0-of ( cast :arg1 ballot :op1-of ( since :time-of ( temporal-quantity :unit year )  )  )  )  :location indeed
possible :arg1 ( imagine :arg0 i :arg1 ( nothing :mod simple )  :domain-of it )
tell :arg0 ( i :arg0-of ( credit :arg1 ( person :arg0-of ( pass :arg1 of )  :name ( name :op1 obama )  :op1-of ( and :arg1-of accomplish :arg1-of vary :op2 great )  :wiki barack_obama )  )  )  :arg1 ( ask :arg1 care )  :arg2 ( person :arg1-of ( kill :arg0 ( we :arg1-of act :arg1-of ( exit :arg0 military )  )  )  :name ( name :op1 osama :op2 bin :op3 laden )  :wiki osama_bin_laden )  :polarity - :polarity - :purpose ( end :arg1 ( country :name ( name :op1 iraq )  :wiki iraq )  )
and :op1 ( reform :arg1 ( immigrate :arg0 ( health :arg1-of ( care :arg0 ( i :arg0-of ( believe :arg1 ( effort :purpose ( push :arg0 ( obstructionism :mod partisan )  :arg1 ( nation :poss we )  :arg2 forward )  :quant ( many :degree too )  )  :mod moreover )  )  )  )  :arg1 other )  )  :op2 ( close :arg0 ( option :mod public )  :arg1 base )  :op3 ( bay :name ( name :op1 guantanamo :op2 bay )  :wiki guant√°namo_bay )
contrast :arg2 ( and :arg1-of ( provide :arg0 i :arg1-of possible :time ( explain :arg0 ( person :arg0-of administrate :arg1-of ( find :arg0 i :arg2 defend :time after :time countless )  :name ( name :op1 obama )  :wiki barack_obama )  :arg1-of limit :arg1-of ( reach :arg0 i )  )  )  :op1 colleagu :op2 peer )
despair :arg0 point :arg1 ( politics :arg1-of ( reach :arg0 i )  )
possible :arg1 ( explain :arg0 ( obstructionism :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  :arg1 ( bug :arg0-of ( strike :arg1 ( child :arg1-of innocent )  :arg2 drone :location overseas )  :arg1 ( person :arg0-of lead :mod foreign )  :arg1-of allow )  )  :polarity -
wrong :arg0 ( government-organization :arg0-of govern )  :arg1 ( explain :arg0 it :arg1 ( government-organization :arg0-of ( prosecute :arg1 blower :arg3 whistle-blower )  :arg0-of ( collect :arg1 data )  :mod ( person :mod ( country :name ( name :op1 america )  :wiki united_states )  :poss-of ( life :arg1-of private )  )  :name ( name :op1 national :op2 security :op3 agency )  :wiki national_security_agency )  :arg1-of ( possible :polarity - )  )  :arg1-of reveal
and :arg1-of ( shirk :arg0 ( person :arg1-of ( assassinate :arg1-of ( account :arg0 it :arg1-of ( possible :polarity - )  )  :manner trial )  :name ( name :op1 anwar :op2 al-awlaki )  )  )  :op1 ( fund :arg0 public )  :op2 ( limit :arg1 ( spend :arg1 citizen )  :arg2 ( campaign :arg1 ( person :arg0-of ( have-org-role :arg2 president )  )  )  )
say :arg0 ( government-organization :arg0-of ( silence :arg1 effort )  :name ( name :op1 white :op2 house )  :wiki white_house )  :arg1 ( thing :arg1-of ( find :arg0 ( person :arg1-of ( administer :arg0 since )  :name ( name :op1 nixon )  :poss-of ( aggressive :degree most )  :wiki richard_nixon )  )  :arg1-of ( justify :arg0 ( possible :arg1 it )  :polarity - )  :arg1-of ( report :arg0 media )  )
excuse :arg1 ( fail :arg2 ( design :arg1 ( website :arg1-of simple )  :time ( since :op1 ( sign :arg1 ( thing :name ( name :op1 affordable :op2 care :op3 act )  )  :arg2 law )  :quant ( temporal-quantity :quant 3 :unit year )  :quant more )  )  )  :arg1-of ( possible :op1-of and )  :polarity - :time ( recent :degree most )
expect :arg0 ( i :arg1-of recommend )  :arg1 ( know :arg0 i :arg1 this :polarity - )
suppose :arg0-of ( contradict :arg1 ( campaign :arg0-of ( precede :arg1 old )  :arg1 politics )  :arg1-of possible )  :arg1 i :arg2 ( figure :arg1 ( govern :arg1 ( 18 :quant-of ( temporal-quantity :unit year )  )  :mod that )  :arg0 i )
predict :arg0 office :arg1 ( and :op1 ( oppose :arg1 event )  :op2 politics :op3 party :op4 random :op5 ( shape :arg1 ( we :arg0-of ( obvious :arg1 elective )  )  :arg1-of ( converse :arg0 public )  :arg1-of ( massacre :arg0 such )  )  )  :polarity -
list :arg0 ( i :arg0-of ( choose :arg1 yet :arg1-of administrate :arg1-of ( seem :arg0 they :mod large )  )  )  :arg1 ( example :mod all )  :arg2 above
that :quant ( all :arg0-of ( trouble :arg1 i :manner most )  )
contrast :arg1 ( vote :arg0 i :arg1 ( person :name ( name :op1 obama )  :wiki barack_obama )  :time ( date-entity :year 2012 )  )  :arg2 ( excite :arg0 candidacy :arg1 i :arg1-of ( cause :polarity - )  )  :mod again
or :arg2-of ( lock :arg0 ( person :arg0-of ( present :arg1 ( alternative :op3-of ( and :op1 confuse :op2 unrefin )  )  )  :name ( name :op1 mitt :op2 romney )  :wiki mitt_romney )  :arg1 policy :arg1-of ( seem :arg1-of ( possible :polarity - )  )  )  :op1 position
feel :arg0 i :arg1 ( fulfill :arg0 ( person :arg1-of ( free :arg2 ( pressure :arg0 ( elect :arg1 long :mod future )  )  )  :name ( name :op1 obama )  :wiki barack_obama )  :arg1 ( hope :arg0 term :arg1 ( hear :arg1 we )  )  )
sink :arg1 ( return :arg1 percentage-entity :arg1-of ( rate :arg0 ( person :arg0-of ( approve :arg1 45 :mod still )  :name ( name :op1 obama )  :wiki barack_obama )  )  :arg1-of ( become :arg0 book :arg2 ( hard :arg1 much )  )  :mod ( week :mod this )  :mod-of ( date-entity :year 2008 )  )  :mod-of below
make :arg0 it :arg1 ( yearn :arg0 i :arg1 ( promise :arg1-of disappear )  :duration many )
read :arg0 ( i :arg0-of ( describe :arg1 ( suffer :arg0 ( person :name ( name :op1 obama )  :wiki barack_obama )  :arg1 ( loss :mod huge )  :arg2 ( person :location ( country :mod-of primary :name ( name :op1 pennsylvania )  )  :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  )  :consist portion )  )  :arg1 book :time ( week :mod this )
cause :arg1 ( tell :arg0 ( he :arg1-of ( staff :arg2 person )  )  :arg1 ( need :arg0 they :arg1 ( and :op1 stay :op2 true )  )  :arg2 person :time ( meet :arg1 ( track :op1-of back )  :mod ( campaign :arg1 mortem )  :time post )  )  :poss-of purpose
say :arg0 he :arg1 ( get :arg0 ( i :arg0-of ( want :arg1 mojo :arg2 back )  )  :arg1 we )
remember :arg0 we :arg1 ( get :arg0 we )
and :arg1-of possible :arg1-of ( agree :arg0 you :degree more :polarity - )  :op1 ( thing :name ( name :op1 mr. :op2 president )  :time ( late :poss it :quant ( 5 :quant-of ( temporal-quantity :unit year )  )  )  :wiki mr._president_[title] )  :op2 i
opine :arg1 sole :arg1-of ( express :manner ( comment :arg0 ( person :name ( name :op1 nathaniel :op2 morris )  )  :arg1 this )  )
claim :arg0 ( person :name ( name :op1 clive :op2 palmer )  )  :arg1 ( company :arg0-of ( conflict :arg1 parental :arg2-of ( interest :arg1 ( scheme :arg0-of ( leave :arg1 pm )  )  )  )  :name ( name :op1 abbott )  :wiki abbott_laboratories )
say :arg0 ( person :mod billionaire :name ( name :op1 clive :op2 palmer )  )  :arg1 ( and :arg1-of ( possible :arg1-of ( cause :arg0 pregnant )  )  :op1 ( benefit :arg1 ( person :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( have-org-role :arg1 ( company :arg0-of ( conflict :arg2-of ( interest :arg1 parental :mod-of prime :purpose ( leave :arg0 scheme )  )  )  :mod ( thing :name ( name :op1 minister :op2 tony )  )  :name ( name :op1 abbott )  :wiki abbott_laboratories )  :arg2 mp )  )  :arg2 daughter )  )  )  )
carbon :arg3-of ( tax :topic-of ( bill :arg1-of ( pay :arg0 ( magnate :arg0-of ( question :arg1 ( he :arg0-of ( try :arg1 brush :time-of ( claim :arg1 ( conflict :arg1 6 )  )  )  )  )  :arg1-of mine )  :arg1-of dispute )  )  )
and :op1 ( possible :arg1 ( control :arg0 ( organization :name ( name :op1 palmer :op2 united :op3 party )  )  :arg1 ( vote :arg0 ( possible :arg1 ( crucial :compared-to decide )  )  :arg1 ( government-organization :name ( name :op1 senate )  :wiki united_states_senate )  )  )  )  :op2 carbon :op3 mine :op4 ( tax :arg1 4 )
contrast :arg1 ( claim :arg0 ( person :arg0-of ( have-org-role :arg2 minister )  :mod only )  )  :arg2 ( and :arg1-of ( say :arg0 ( person :arg0-of ( have-rel-role :arg2 daughter )  )  )  :arg1-of possible :arg2-of ( interest :arg0 ( company :name ( name :op1 abbott )  :wiki abbott_laboratories )  :arg1 ( policy :arg1-of ( stand :time personal )  :arg1-of ( benefit :arg0 it )  )  :arg2-of conflict )  )
say :arg0 ( he :arg0-of ( interest :arg1 wheth :arg1-of direct :arg2 - )  :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( get :arg1 pregnant :arg1-of ( cause :arg0 ' )  )  :arg1-of ( interest :arg0 ( he :arg0-of ( pay :arg1 parental )  :arg0-of leave :arg0-of ( get :arg1 that )  :arg0-of ( cause :arg1 any )  :arg0-of ( conflict :arg1 of )  )  :arg1-of major :arg2 it )  :arg1-of come )  :arg2 daughter )  )  :arg1 ( or :op1 ( leave :arg0 they )  )  :arg1-of ( palm :arg0 mr )
declare :arg0 ( commission :arg0-of ( elect :arg1 53 )  :arg0-of ( vote :arg1 ( country :mod-of seat :name ( name :op1 sunshine :op2 coast )  )  )  )  :arg1 ( thing :name ( name :op1 mr :op2 palmer )  )  :manner official :time ( after :op1 elect :quant ( temporal-quantity :quant 2 :unit month )  )  :time ( after :op1 ( recount :arg1 ( name :op1 fairfax )  )  )  :time winn
call :arg1 ( thing :name ( name :op1 mr :op2 palmer )  )  :arg2 ( count :arg1 ( speed :arg1 ( process :arg1 ( elect :arg1-of overhaul )  )  )  )
and :op1 ( company :name ( name :op1 abbott )  :wiki abbott_laboratories )  :op2 ( person :arg0-of ( have-rel-role :arg1 ( person :name ( name :op1 tony )  )  :arg2 daughter )  )  :op3 franc
recommend :arg1 ( decide :arg1 ( elect :mod this )  :time ( after :op1 ( stop :arg0 we )  :op2 vote :quant ( temporal-quantity :quant 2 :unit month )  )  )  :mode interrogative
say :arg0 he :arg1 ( need :arg0 we :arg1 ( good :mod-of system )  )
result :arg1 interrogative :arg2 ( and :op1 ( vote :arg1 computer :time ( walk :arg0 you :arg1 system :arg1-of possible :arg1-of ( detail :arg0 ( we :arg0-of ( recommend :arg1 it )  )  )  :arg1-of punch :polarity - :time-of night )  )  :op2 immediate )
criticize :arg0 ( thing :name ( name :op1 mr :op2 palmer )  )  :arg1 ( use :arg1 pencil :arg2 ( mark :arg1 ballot )  :mod also )
cause :arg0 ( possible :arg0-of ( cause :mode interrogative )  :arg1-of be )  :arg1 ( result :arg1 ( someone :polarity - )  :arg1-of rub :arg1-of resemble )
seem :arg0 pencil :arg1 extraordinary :op3-of ( and :mod this :op1 day :op2 age )
and :op1 ( study :arg0 ( country :name ( name :op1 new :op2 zealand )  :wiki new_zealand )  :arg1 option :arg2 ( organization :arg0-of ( vote :mod electronic )  :name ( name :op1 electoral :op2 commission )  )  )  :op2 ( release :arg1 ( paper :arg1-of ( discuss :mod joint )  )  :time recent )
say :arg0 ( he :arg0-of ( include :arg1 ( and :op1 ( he :arg0-of ( coast :arg1 policy )  )  :op2 ( take :arg0 ( person :mod mr :name ( name :op1 mr )  )  :arg1 ( job :mod new )  :arg2 very :arg3 serious )  )  :arg2 ( international :mod-of airport )  )  )  :arg1 59
service :domain ( office :arg1-of public )  :mod ( public :mod about )
say :arg0 ( he :arg1-of ( critical :arg0 ( we :arg1-of ( seek :arg0 ( we :arg0-of ( except :arg1 ( reward :arg1 of )  )  :arg0-of reward )  :polarity - )  )  :arg1-of possible :arg2 ( community :arg2-of ( serve :arg0 history :arg1 this :time time )  )  )  )  :arg1 that
suspend :arg0 ( company :name ( name :op1 rbs )  :wiki the_royal_bank_of_scotland_group )  :arg1 ( trader :mod forex :quant 2 )
say :arg0 ( person :arg1-of ( familiarize :arg2 situation )  :arg2-of ( suspect :arg1 ( manipulate :arg0 regulator :arg1 ( market :mod currency )  :arg1-of ( probe :arg0-of ( gain :arg1 traction :arg1-of ( sign :mod another )  :manner rapid )  :mod globe )  )  )  :quant 2 )  :arg1 ( suspend :arg0 ( thing :name ( name :op1 royal :op2 ( bank :poss ( country :name ( name :op1 scotland )  :wiki scotland )  )  )  )  :arg1 ( trader :arg0-of ( exchange :mod foreign )  :purpose division :quant 2 )  )
investigate :arg0 regulator :arg1 ( large :degree most )  :arg1-of ( operate :arg0 they )  :arg2 into :arg3 ( market :arg3-of ( change :arg1 hand :arg2 ( each :mod-of day )  )  )  :op3-of ( and :op1 bank :op2 ( confirm :arg0 ( company :name ( name :op1 rbs )  :wiki the_royal_bank_of_scotland_group )  :arg1 ( large :degree most :poss ( world :poss of :poss some :poss-of bank )  )  :arg3 ( name :op1 ubs )  )  )  :poss-of ( world :poss-of finance )
scandal :arg2-of ( echo :arg0 ( probe :arg0 ( widen :arg0 ( manipulate :arg1 lend )  )  :arg1 ( suspend :arg1 ( person :arg1-of ( employ :arg0 ( company :name ( name :op1 rbs )  :wiki the_royal_bank_of_scotland_group )  )  :domain ( trader :quant 2 )  )  )  )  :arg1 ( thing :name ( name :op1 libor )  )  )
decline :arg0 ( bank :arg0-of ( confirm :arg1 ( receive :arg1 ( request :arg1 ( information :source regulator )  )  )  )  )  :arg1 ( comment :arg1 ( this :mod-of ( month :unit-of temporal-quantity )  )  :arg3 suspension )
say :arg0 ( we :op3-of ( and :op1 ( continue :arg0 we :arg1 ( we :arg0-of ( operate :arg1 full :arg2 ( other :mod-of regulator )  )  )  :arg1-of ( inquire :arg2 into )  :op3-of ( and :op1 ongo :op2 ( matter :mod this )  )  )  :op2 fca )  )  :arg1 ( 2 :quant-of ( temporal-quantity :unit week )  )  :arg2 ago :time bank
say :arg0 ( person :location ( close :op1 situation )  )  :arg1 ( turn :arg0 ( company :name ( name :op1 rbs )  :wiki the_royal_bank_of_scotland_group )  :arg1 ( record :op1-of ( and :op2 ( message :mod instant )  :op3 ( organization :name ( name :op1 financial :op2 conduct :op3 authority )  )  )  :topic ( email :arg1 ( last :mod-of ( month :unit-of temporal-quantity )  )  )  )  :arg2 ( regulator :mod ( country :arg0-of ( send :arg1 and :arg2 ( trader :time former )  )  :name ( name :op1 uk )  :wiki united_kingdom )  )  )
and :op1 ( leave :arg0 ( trader :mod this )  :arg1 ( company :name ( name :op1 rbs )  :wiki the_royal_bank_of_scotland_group )  :time ( date-entity :year 2010 )  )  :op2 ( understand :arg0 ( person :arg0-of ( head :arg1 ( trade :mod spot )  :time ( continent :name ( name :op1 europe )  :wiki europe )  )  :name ( name :op1 richard :op2 usher )  )  :arg1 ( give :arg1 ( leave :arg0 forex :arg1 jpmorgan_chase :arg2 ( position :time current )  )  )  )
and :arg1-of ( go :arg0 ( person :arg0-of ( leave :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  )  :arg1-of ( suspend :arg0 ( organization :name ( name :op1 standard :op2 chartered )  )  :time ( week :mod this )  )  :name ( name :op1 rohan :op2 ramchandani )  )  :time ( week :mod this )  )  :op1 ( organization :mod ( country :arg2-of ( trade :arg1 former :arg1-of ( head :arg0 ( person :name ( name :op1 matt :op2 gardiner )  )  )  :mod spot )  :mod-of ( trader :mod senior )  :mod-of currency :name ( name :op1 citi )  :name ( name :op1 ubs )  )  :name ( name :op1 barclays )  )
accuse :arg1 ( person :arg1-of ( wrong :arg0 ( trader :mod this )  :mod any )  :quant none )
say :arg0 ( person :mod-of close :op2-of ( and :arg1-of ( include :arg0 instant :arg2 ( banker :arg1-of ( usher :arg0 mr )  )  :mod group :mod message )  :op1 barclay )  )  :arg1 situation
say :arg1 ( take :arg0 ( person :arg1-of employ :quant some )  :arg1 action :time ( after :op1 ( say :arg0 ( person :name ( name :op1 finma )  )  :arg1 ( investigate :arg0 regulator :arg1 ( manipulate :arg0 ( number :quant-of bank )  :arg1 ( market :mod ( exchange :arg1 ( name :op1 ubs )  :mod foreign )  )  :arg1-of suspect )  )  )  )  )  :time ( week :mod this )
and :location ( city :location-of ( look :arg0 ( organization :name ( name :op1 european :op2 commission )  :wiki european_commission )  :arg1 ( authority :arg0-of ( collude :arg1 banker )  :arg0-of ( move :arg1 ( market :mod currency )  )  :mod ( country :name ( name :op1 us )  :wiki united_states )  )  :arg1-of ( allege :arg0 ( authority :arg1-of ( compete :arg0 ( authority :mod 6 :mod-of globe )  )  :mod ( country :name ( name :op1 switzerland )  :wiki switzerland )  )  )  )  :location-of justice :name ( name :op1 hong :op2 kong )  :wiki hong_kong )
say :arg1 ( launch :arg0 ( and :op1 ( organization :name ( name :op1 citigroup )  )  :op2 jpmorgan_chase :op3 ( organization :name ( name :op1 credit :op2 suisse )  )  :op4 ( receive :arg0 ( organization :name ( name :op1 hsbc )  )  :arg1 ( request :arg1 information )  :arg2 regulator )  :op5 ( person :arg1-of ( familiarize :arg2 situation )  )  )  :arg1 ( probe :arg1-of internal )  :mod also :op1-of ( or :op2 receive )  )
email :arg0 bank :arg0-of ( scour :arg1 through )  :arg0-of ( search :arg1-of wrong :arg2 instance :duration ( temporal-quantity :unit year )  )  :arg1 worth :arg2 of :op3-of ( and :op1 instant :op2 message )
contrast :arg1 ( past :quant-of ( temporal-quantity :quant 1 :unit year )  )  :arg2 ( challenge :arg1 ( person :arg0-of ( profit :arg1 of :mod big )  :arg0-of ( invest :arg1 bank :arg2 ( area :arg2-of ( rattle :arg0 ( probe :mod about )  :arg1 trader )  :mod that )  )  :arg0-of ( drive :arg1 ( trade :arg1 unit )  )  )  :manner-of ( low :arg0 ( year :mod this )  :arg1 volatility :arg2 ( opportunity :arg2-of ( cut :arg0 currency :arg1 speculator )  )  )  )
contrast :arg0 almost :arg1 ( try :arg0 ( banker :quant some )  :arg1 ( play :arg1 affair :manner ( say :arg1 ( and :op1 ( vast :mod-of ( market :arg1-of manipulate :mod ( exchange :arg1 this :mod foreign )  )  )  :op2 ( liquid :degree high )  )  )  )  )  :arg2 ( say :arg0 ( trader :mod senior )  :arg1 ( true :degree necessarily :polarity - )  )
say :arg0 ( trader :mod senior )  :arg1 ( and :arg2-of ( trade :arg1 ( between :mod-of ( differ :arg0 liquidity )  )  )  :op1 platform :op2 ( increase :arg0 bank :arg1 ( use :arg1 ( exchange :arg0 of :arg1 ( volume :mod huge )  :arg1-of fragment :arg1-of trade :mod foreign )  :arg1-of ( own :arg0 ( you :arg0-of ( mean :arg1 platform )  :arg0-of ( get :arg1 ( market :arg1-of ( impact :arg0 quite )  )  :arg1-of possible )  :arg0-of ( start :arg1 ( price :arg1 ( ticket :mod small )  )  )  )  )  :arg1-of internal )  )  )  :arg2 ( despite :mod that )
loss :arg1-of ( cause :arg0 he :op1-of ( after :quant ( week :mod this )  :time-of ( dismiss :arg0 ( organization :name ( name :op1 credit :op2 suisse )  )  :arg1 ( trader :arg0-of ( trade :arg1 ( desk :mod fund )  )  :location ( city :arg1-of ( exchange :arg0 ( last :mod-of ( year :op1-of late )  )  )  :name ( name :op1 london )  :wiki london )  )  :arg1-of ( announce :arg0 organization )  )  :time-of ( come :arg1 news :time ( day :arg1-of ( same :arg0 nearly )  )  )  )  )
notify :arg0 bank :arg1 ( authority :arg1-of relevant )  :manner prompt :op1-of ( and :op2 ( operate :arg2 regulator )  )
say :arg0 ( organization :name ( name :op1 &quot; )  )  :arg1 ( and :op1 ( act :arg1 ( matter :mod that )  )  :op2 alone )  :arg1-of ( contain :arg0 ( we :arg0-of ( confident :arg1 trader )  )  )
hoard :arg1 ( plot :arg0 ( person :name ( name :op1 bechtle )  )  :arg2-of paint )
lift :arg1 ( face :arg0 ( citizen :arg0-of ( give :arg1 initiative :arg1-of hoard :arg2-of ( belong :arg1 group )  )  )  :arg1 ( bad :arg1 spa :arg1-of promenade :arg1-of plot )  )
announce :arg1 ( release :arg0 press :arg1 ( they :arg0-of ( clean :location addition :op1-of and )  :arg0-of ( widen :arg1 footpath )  )  )
permit :arg0 ( premise :arg2-of ( risk :arg1 ( collapse :arg0 ( reason :mod ( safe :arg1 ( plot :topic-of rear )  )  )  :arg1 - )  )  )  :arg1 ( house :arg1-of ( coverage :arg2 ( thing :arg1-of plan )  )  :mod dilapidate )
lift :arg0 ( citizen :mod-of initiative )  :arg1 ( arrange :arg0 ( person :mod-of abel :name ( name :op1 alfred )  )  :arg1 face :arg1-of ( manage :mod current )  :arg1-of ( cooperate :arg0 he :arg2 colleague )  :mod site )
favor :arg0 ( we :arg1-of ( message :arg0 banner )  )  :arg1 ( put :arg0 project :arg1 ( initiate :arg0 citizen :arg1 before )  )
distract :arg0 little :arg1 ( or :domain this :op1 20 :op2 ( person :arg0-of ( have-org-role :arg2 member )  )  :op3 ( citizen :mod-of project :mod-of initiative )  )
state :arg1 ( we :arg0-of ( finish :arg1 building :polarity - )  )  :mod large :mod billboard :mod motto
recommend :arg1 ( fail :arg0 ( day :mod huge :time-of project )  :arg1 ( person :name ( name :op1 schweizer :op2 wiese )  :topic-of ( ruin :mod ( big :mod even )  )  )  )  :purpose-of ( want :arg0 ( they :arg0-of do )  :arg1 ( point :arg1 danger :arg0 they )  )
plan :arg0-of ( regard :arg1 ( construct :arg0 site :arg1-of ( chat :arg0 many )  :arg1-of ( pass :arg0 person )  :arg2-of ( become :arg1 ( execute :arg1 ( thing :degree ( much :degree good )  :domain-of ( town :mod-of many )  )  :arg1-of clear :arg1-of ( believe :arg0 ( citizen :mod-of many )  )  :arg1-of ( of :arg0 project )  )  )  )  :arg1-of ( initiate :arg1-of question :arg1-of same )  :arg2 ( scale :mod citizen )  )  :arg1 project
state :arg1 ( provide :arg0 they :arg1 ( continue :arg1 town :arg1-of begin :arg1-of resign :arg1-of stall )  :arg1-of answer )  :arg1-of ( say :arg0 ( citizen :mod-of initiative )  )
tell :arg1 ( thing :arg1-of ( impact :mod also )  :arg1-of ( state :arg0 public )  )  :arg2 ( we :arg0-of ( have-org-role :arg2 mayor )  )  :time now
say :arg0 he :arg1 ( fear :arg1 ( outcome :poss spa )  :arg0 he )  :time ( meet :arg0 ( organization :name ( name :op1 town :op2 council )  )  :arg1 ( person :name ( name :op1 schweizer :op2 wiese )  :op4-of ( and :arg1-of ( plan :arg0 ( referendum :arg1-of local )  :arg0-of ( vote :arg1 population :arg1-of recommend )  )  :op1 spa :op2 wellnes :op3 complex )  )  )  :time ( date-entity :month 5 )
appear :arg2 ( utter :arg0-of ( frighten :arg1 ( continue :arg0 population :arg1 ( press :arg1-of ( release :arg0 ( citizen :poss-of ( initiative :poss it )  )  )  )  :arg1-of ( perceive :arg0 other )  :arg1-of blackmail :arg1-of ( attempt :arg3 blatant )  )  )  )  :arg3 some
and :arg2-of ( thank :arg0 ( citizen :arg0-of ( lend :arg1 hand )  )  :arg1 initiative )  :op1 ( donate :arg1 paint )  :quant all
dive :arg0 mane :arg1 ( ref :arg0-of ( scold :arg1 ( person :name ( name :op1 rangnick )  )  )  )  :polarity -
equal :arg1 ( express :arg0 ( person :arg0-of ( win :arg1 ( thing :arg1-of ( bull :arg0 red )  :name ( name :op1 as )  )  )  :arg0-of ( have-org-role :arg1 ( sport :arg1 salzburg )  :arg2 director )  :arg1-of ( satisfy :arg0 ( form :mod present )  )  :name ( name :op1 as )  )  :arg1 ( bull :arg1 table )  :arg1-of referee :arg1-of disappoint )
say :arg0 ( he :arg0-of ( tricky :arg1 ( person :arg0-of play :arg1-of ( offense :arg0 thursday )  )  )  :arg0-of ( defend :arg1 of :arg2 2 )  :arg2-of ( dub :arg0 ( and :arg2-of ( trend :arg0 there :arg1 press :time current )  :op1 dangerous :op2 mane )  :arg1 diver )  )  :arg1 conference :arg2 salburg
suppose :arg0 penalise :arg1 ( person :arg0-of ( criticize :arg1 ( yellow :arg1 card )  :arg1-of ( cause :arg0 ( recent :degree most )  )  )  :arg0-of ( act :arg1 ( admittedly :mod-of this )  :arg1-of play )  :arg0-of ( show :arg1 ( tv :mod-of footage )  :arg1-of ( justify :polarity - )  )  :arg1-of strike :arg2-of ( mean :arg1 mane :mod 3 :op1-of ( against :mod 0 :mod ( last :mod-of sunday )  )  )  :mod ( country :name ( name :op1 senegal )  :wiki senegal )  )
refer :arg0 ( person :arg2-of ( decide :arg0 wrong :arg0-of ( comment :arg1 amr-unknown )  :time blatant )  :name ( name :op1 &quot; )  )  :arg1 of :arg2 ( person :arg0-of ( complete :arg1 ( he :op1-of depth )  :arg2 out )  :name ( name :op1 &quot; )  )
and :op1 ( person :arg0-of play :mod also :name ( name :op1 harkam )  )  :op2 ( person :arg1-of ( coach :arg0 ( he :arg0-of ( escalate :arg1 between )  )  )  :mod ( country :name ( name :op1 harkam )  )  :name ( name :op1 harkam )  )  :op3 ( person :arg2-of ( train :arg1 game )  :name ( name :op1 harkam )  )  :time after
mean :arg0 individual :arg1 compatriot :arg2 ( behave :arg0 i :arg0-of ( same :arg1 ( person :name ( name :op1 he )  )  :mod way )  :arg1 ( situation :mod ( each :arg1-of ( firm :arg0 ( he :arg1-of ( defend :arg0 ( country :name ( name :op1 germany )  :wiki germany )  )  )  )  )  )  )
wish :arg0 ( person :name ( name :op1 schmidt )  )  :arg1 ( contact :arg0 ( person :arg1-of ( skirmish :op1-of after )  :name ( name :op1 h√ºtter )  )  :arg1 colleagu :mod any )  :polarity -
know :arg0 i :polarity -
emphasise :arg1-of ( insult :arg3 i :extent ( amr-unknown :op1 1 )  :time ( after :op1 all )  )  :mod-of ( 46 :mod-of ( year :mod old )  )
praise :arg0 team :arg1 ( sing :arg1 he :arg1-of ( regard :arg2 run )  :arg1-of win )
state :arg0 ( he :arg2-of ( mean :arg0 there :arg1 it :op1-of really )  )  :arg1 good :mod ( only :mod-of ( word :mod 2 )  )
criticize :arg0 you :arg1 ( lot :polarity - )  :arg1-of possible
impress :arg0 all :arg1 manner :arg1-of ( play :arg0 team :arg2 most )
and :op1 ( keep :arg0 ( we :arg1-of ( stay :arg3 compose )  )  )
change :arg0 squad :arg1 ( window :mod transfer )  :arg2 winter :manner hardly :mod any
reason :arg1-of major :polarity - :purpose ( change :arg1 anything )
express :arg0 ( thing :arg0-of play )  :arg1 ( and :op1 ( come :arg1 ( person :arg1-of ( explain :arg0 club :arg1-of ( desire :arg0 unles :arg0-of leave )  )  :name ( name :op1 &quot; )  )  )  :op2 forward )
uphold :arg0 ( government-organization :name ( name :op1 supreme :op2 court )  :wiki supreme_court_of_new_south_wales )  :arg1 ( law :mod ( person :name ( name :op1 obama )  :wiki barack_obama )  :topic ( care :arg1 health )  )
sign :arg0 ( government-organization :arg0-of ( major :arg1 constitution )  :arg0-of ( administrate :arg1 ( person :name ( name :op1 obama )  :wiki barack_obama )  )  :arg1-of ( rule :arg0 ( country :name ( name :op1 us )  :wiki united_states )  :time today )  :name ( name :op1 supreme :op2 court )  :wiki supreme_court_of_new_south_wales )  :arg1 ( person :arg0-of ( care :arg1 law )  :name ( name :op1 barack :op2 obama )  :poss-of health :wiki barack_obama )
penalize :arg0 ( buy :arg0 citizen :arg1 health :arg1-of ( mandate :arg0 individual )  :arg1-of insure :arg1-of ( vote :arg0 ( government-organization :arg0-of ( govern :arg1 ( power :arg1-of tax )  )  )  :arg0-of ( rule :arg1 justic )  )  :arg1-of require :op2-of ( and :arg1-of protect :op1 ( act :arg1 care )  )  )  :arg1 ( or :arg1-of ( pay :time ( date-entity :year 2014 )  )  :op1 else )  :arg2 constitution
side :arg0 ( person :arg1-of ( dissent :arg0 ( and :op1 ( person :name ( name :op1 justices :op2 scalia )  )  :op2 ( person :name ( name :op1 thomas )  :wiki - )  :op3 ( person :name ( name :op1 alito )  )  :op4 ( person :name ( name :op1 kennedy )  :quant 4 )  )  )  :mod chief :name ( name :op1 justice :op2 john :op3 roberts )  )  :arg1 ( person :arg0-of ( have-org-role :arg1 court :arg2 member )  :arg1-of ( liberal :degree more )  )
and :op1 ( remain :arg1 of :arg1-of ( uphold :arg0 court :mod also )  :op1-of section :time ( date-entity :year 2700 )  )  :op2 page :op3 law :op4 ( hold :arg0 further :arg1 ( that :mod-of health )  )  :op5 ( increase :arg0 state :arg1 ( program :name ( name :op1 medicaid )  :op1-of ( or :arg0-of ( lose :arg2-of ( care :arg1 law :polarity - )  )  :arg1-of require :op2 eligibility :op3 else :op4 ( program :arg1-of ( fund :arg2-of ( coerce :arg0 unconstitutionally )  )  :mod federal :mod all :name ( name :op1 medicaid )  )  )  )  )
bring :arg0 ( and :op1 ( state :quant 26 )  :op2 ( country :name ( name :op1 national :op2 federation :op3 of :op4 independent :op5 business )  )  )  :arg1 ( suit :arg1 ( block :arg1 law )  )
oppose :arg0 law :arg1 ( each :mod-of ( candidate :arg1-of major :mod ( political-party :arg1-of ( have-org-role :arg0 person :arg2 president )  :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  )  :arg2 ( nominate :arg0 ( date-entity :year 2012 )  :arg1 ( person :name ( name :op1 mitt :op2 romney )  :wiki mitt_romney )  :arg1-of presume )  :time vigorous :time ( season :mod primary )
mirror :arg0 ( country :name ( name :op1 norway )  :wiki norway )  :arg1 ( country :mod-of village :mod-of light :name ( name :op1 norway )  :wiki norway )  :mod huge
bring :arg0 ( person :arg0-of ( use :arg1 ( mirror :mod huge )  )  :arg0-of ( reside :arg1 ( village :mod ( country :name ( name :op1 norway )  :wiki norway )  )  )  )  :arg1 light :arg2 ( valley :mod dreary )
languish :arg0 ( village :poss ( country :name ( name :op1 rjukan )  )  )  :arg1 ( shadow :arg0 ( until :op1 spring )  :arg1 ( mountain :arg1-of ( surround :arg0 due :arg2 ( country :mod-of valley :name ( name :op1 vestfjord )  )  )  )  )  :arg1-of ( normal :arg0 autumn )  :arg3 ( level :arg1-of low :mod-of sunshine )
metr :arg1-of ( mirror :accompanier-of ( come :arg0 tall :arg1 ( dream :arg0 each :duration ( temporal-quantity :unit century )  :mod old )  :arg2 true :time wednesday )  :mod gigantic :quant 3 )  :quant 45
inaugural :mod-of ( ceremony :arg1-of ( rave :arg0 expressive :arg1-of ( have-org-role :arg2 mayor )  :time final )  :op1 ( televise :arg1 ( broadcast :arg1 tv )  :arg2 2 )  )
lay :arg0 ( person :arg0-of ( reside :arg1 valley )  :arg1-of ( put :arg0 other :arg2 sunglass :manner safe )  :quant some )  :arg1 ( lounger :mod sun )  :direction back
hunger :arg1 ( up :arg1 ( until :op1 now )  )  :arg2 sunshine :time ( winter :arg0-of ( travel :arg4 ( peak :arg1 ( car :mod cable )  :location nearby )  )  )
ten :arg0-of ( direct :arg1 sun :arg1-of ( propose :arg1-of ( present :arg0 ( person :mod ( artist :arg1-of local )  :name ( name :op1 martin :op2 andersen )  )  )  )  :manner ( use :arg0 valley :arg1 ( mirror :arg1 ( temporal-quantity :unit year )  )  )  )
talk :arg1 ( idea :mod basic :mod this )  :location location :time ( since :op1 ( date-entity :year 1913 )  )
approve :arg0 ( organization :name ( name :op1 town :op2 council )  )  :arg1 ( project :arg0-of ( cost :arg1 krone )  )  :time ( after :op1 ( several :op1 ( temporal-quantity :duration-of ( debate :arg0 5 :op1-of around :op1-of ( thing :name ( name :op1 eur )  )  )  :unit year )  )  )  :time final
provide :arg0 ( construct :arg1 ( resemble :arg1 ( country :mod-of alpine :name ( name :op1 italy )  :wiki italy )  :op1-of ( number :quant-of ( year :unit-of temporal-quantity )  )  )  )  :arg1 sunshine :arg2 ( resort :location ( country :name ( name :op1 viganella )  )  )
empty :arg1 post :arg2 sunday :mod hardly :time ever
cause :arg0 ( and :op1 town :op2 centre-left :op3 it :op4 ( district :arg1-of ( indicate :arg0 ( citizen :arg0-of ( find :arg1 box :arg1-of ( collect :arg0 ( post :op1 sunday )  )  :arg2 ( many :op1-of post )  :manner still :polarity - :time yet )  :arg0-of ( notice :arg1 that )  :mod-of many )  :arg1-of ( dot :arg0 red )  )  :wiki pulwama_district )  )  :arg1 ( you :arg0-of ( print :arg1 ( yellow :arg0 howev :arg1 ( box :arg0-of ( operate :arg1 by :arg2 ( organization :arg0-of ( quick :arg1 ( find :arg0 ( you :arg0-of ( empty :arg1 ( and :op1 sunday :op2 ( announce :arg0 holiday :arg1 ( organization :name ( name :op1 &quot; )  )  )  )  :arg1-of long :polarity - )  )  :arg1 box :arg2 out )  )  :name ( name :op1 &quot; )  )  )  )  )  :mod small )  :arg0-of read )
confirm :arg0 ( inquire :arg0 ( organization :name ( name :op1 fdp )  )  )  :arg1 this
and :arg1-of ( build :arg0 front :location ( organization :mod-of ( box :arg1-of ( empty :arg0 36 :mod still )  :mod post :mod ( only :op1 1 )  )  :name ( name :op1 ernst-ludwig-stra√üe )  )  :time ( post :mod-of office )  )  :op1 m√ºll
address :arg0 still :arg1 ( person :name ( name :op1 rosengarten )  :op2-of ( and :op1 ( country :location-of collection :location-of sunday :name ( name :op1 hofheim )  )  )  )  :arg2 ( inquire :arg0 ( organization :name ( name :op1 fdp )  :poss-of wheth )  )  :polarity -
and :arg2-of ( relate :arg0 this :arg1 affair )  :op1 ( person :arg0-of ( want :arg1 ( dig :arg1 ( deep :arg1 society )  )  )  :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 fdp )  )  :arg2 spokesperson )  )  :op2 youth
collect :arg1 sunday :arg2-of ( schedule :arg1 ( post :arg1-of ( case :manner especially )  )  )  :domain-of ( service :mod important :mod postal )
and :op1 radical :op2 unacceptably :op3 ( increase :arg0 despite :arg1 letter :arg1-of ( price :arg1-of ( cut :arg0 company :arg2 back )  )  :arg2 ( date-entity :year 2013 )  :mod this :time ( date-entity :month 1 )  )
and :op1 ( person :name ( name :op1 thomas )  )  :op2 ( organization :name ( name :op1 thomas )  )  :op3 ( organization :arg1-of ( have-org-role :arg0 ( person :arg0-of ( have-org-role :arg2 member )  :mod ( fellow :mod ( he :arg0-of support :arg0-of ( cancel :arg1 ( or :op1 ( change :arg1 quiet :arg1-of ( collect :arg0 ( i :arg1-of ( annoy :arg0 amr-unknown )  )  :mod that )  :location here )  )  )  )  :mod-of group :mod-of fact )  )  :arg2 chairman )  :name ( name :op1 thomas )  )
postal :mod-of ( service :arg1-of ( come :arg1-of do :arg4 ( access :arg0 public )  :condition-of ( distance-quantity :location ( off :op1 mark )  :unit mile )  )  )
say :arg0 ( person :arg0-of ( empty :arg1 sunday :mod still )  :name ( name :op1 &quot; )  :op5-of ( and :op1 ( box :op3-of ( post :op1 at :op2 least )  )  :op2 ( district :wiki pulwama_district )  :op3 of :op4 ( country :name ( name :op1 &quot; )  )  :op6 must )  )  :arg1 ( and :op1 ( person :name ( name :op1 &quot; )  )  :op2 ( person :name ( name :op1 &quot; )  )  :op3 unison )
collect :arg1 sunday :arg2 particular :arg2-of ( access :arg0 ( citizen :arg0-of ( mobile :arg1 ( case :arg0 it :arg1 ( centre-left :mod town )  :mod also )  :polarity - )  )  :arg1 ( box :mod post )  :arg1-of ( possible :mod also )  )  :location foot
ask :arg0 ( person :name ( name :op1 r√∂hrenbeck )  )  :arg1 ( plan :arg0 ( organization :arg0-of ( discuss :arg1 ( service :arg0-of ( regard :arg1 ( matter :mod this )  )  :mod postal )  )  :name ( name :op1 town :op2 council )  )  )  :location ( organization :name ( name :op1 town :op2 parliament )  )
respond :arg0 ( person :arg0-of ( have-org-role :arg2 mayor )  :name ( name :op1 erich :op2 maier )  )  :arg1 ( communicate :arg1 ( service :mod postal )  :arg2 ( country :name ( name :op1 lampertheim )  )  :polarity - )
knowledge :arg0-of ( collect :arg1 sunday :location ( country :name ( name :op1 hofheim )  )  )  :quant ( good :degree most )
speak :arg1 ( party :arg0-of ( favor :arg1 privatisation )  )
say :arg0 elsewhere :arg1 ( person :name ( name :op1 &quot; )  )  :time then :time decision
park :arg0 ( country :arg0-of ( increase :manner dramatic )  :name ( name :op1 frankfurt )  )  :arg1 fee
possible :arg1 ( expensive :degree more :domain ( park :location ( country :name ( name :op1 frankfurt )  )  )  :domain soon )  :arg1-of notice
discuss :arg0 ( organization :mod-of today :name ( name :op1 city :op2 magistrate )  )  :arg1 ( thing :arg1-of ( submit :arg0 ( head :arg0 ( person :name ( name :op1 stefan :op2 majer )  )  :arg1 ( department :purpose transport )  )  )  )  :arg2 ( political-party :name ( name :op1 green :op2 party )  :wiki green_party_of_the_united_states )
say :arg0 ( propose :arg1 ( 50 :arg1-of ( park :mod-of ( fee :arg1-of increase )  )  )  )  :arg1 ( monetary-quantity :unit cent )
contrast :arg2 ( price :arg1 ( 20 :quant-of ( temporal-quantity :unit minute )  )  :arg1-of ( raise :arg0 30 )  :arg1-of ( result :arg2 ( increase :arg1 ( and :arg0-of ( permit :arg1 ( interval :arg1-of ( reduce :arg0 - )  :mod time )  )  :op1 ( distance-quantity :arg1-of park :unit meter )  :op2 ticket :op3 machine :topic-of fact )  :mod this )  )  )
reach :arg0 ( organization :arg0-of ( decide :arg2 this :time 12 )  :name ( name :op1 city :op2 council )  )
and :op1 ( organization :mod-of of :name ( name :op1 the )  )  :op2 ( organization :arg0-of ( believe :arg1 ( that :mod-of this )  )  :name ( name :op1 the )  )  :op3 commerce :topic-of ( idea :mod ( good :polarity - )  )
underestimate :arg1 ( advantage :mod ( right :mod-of of :mod-of ( park :arg1 option )  :mod-of ( outside :op1 business )  )  :mod ( small :mod-of ( retailer :mod that )  )  )  :polarity -
opine :arg1 of :time ( after :time-of ( increase :arg0 ( country :arg0-of ( club :arg1 traffic )  :name ( name :op1 germany )  :wiki germany )  :arg1 ( 2 :quant-of ( temporal-quantity :unit decade )  )  :mod that :op2-of ( and :arg1-of complete :op1 ( organization :name ( name :op1 the )  )  :op3 ( appropriate :arg1 ( long :arg1 overdue )  )  :op4 actual )  )  )
become :arg1 ( transport :arg0 public :arg1-of local )  :arg2 ( expensive :degree more )  :mod also
surprise :manner-of ( take :arg0 ( move :arg1 ( country :name ( name :op1 freudenstadt )  )  )  :arg1 ( host :arg1 quick )  )
face :arg0 team :arg1 school :arg2 ( alb :mod-of region )  :arg3 i :time ( step-in :arg0 ( team :poss man )  :arg1 ( squad :op1-of slender )  )  :time schill :time herr
doubt :arg0 ( side :arg2-of ( stand :arg0 alb :arg1 man )  :mod net :mod other )  :arg1 ( experience :arg1 team :degree more )  :polarity -
evident :arg2-of ( become :arg1 ( possible :arg1 ( keep :arg0 they :arg1 ( pace :mod fast :poss ( team :mod ( country :name ( name :op1 freudenstadt )  )  )  )  :mod really )  :manner age :polarity - )  :time soon )
and :op1 ( cope :domain-of ( difficult :arg1-of ( find :arg0 ( person :name ( name :op1 g√∂nningen )  )  )  :degree extreme )  )  :op2 ( hard :arg1 ( offense :arg0-of move )  )  :op3 ( position :mod well )
and :op1 ( pass :arg1-of ( miss :arg0 they :arg1-of ( repeat :arg0 - )  )  )  :op2 attack :op3 ( come :arg1 ( person :name ( name :op1 eduard :op2 schulz )  :op2-of ( and :op1 ( person :name ( name :op1 simon :op2 schenk )  :op1-of ( and :op2 ( game :arg1-of ( block :arg0 scratch )  )  )  )  :topic-of net )  )  :manner cleanly )
demonstrate :arg0 ( victori :arg1-of ( clear :arg0 ( all :quant-of ( area :location-of ( team :mod ( country :name ( name :op1 freudenstadt )  )  )  )  )  )  :quant-of ( set :quant 2 )  )  :arg1 superiority :arg1-of clear
determine :arg1 3 :op4-of ( and :op1 ( face :arg0 ( win :arg1 set :time ( follow :arg1 this :arg2 ( perform :arg1 13 :arg2 22 :op3-of ( and :op1 ( tame :arg1 25 :degree somewhat )  :op2 spiritles )  )  :op1-of 25 :op1-of 14 )  )  :arg1 25 )  :op2 overwhelm :op3 ( match :arg1 0 :arg2 ( score :mod final )  )  :op5 perform )
victory :arg1-of ( manage :arg0 ( thing :arg1-of ( play :arg0 ( they :arg0-of ( face :arg1 ( person :arg0-of oppose :arg1-of ( strong :arg2 ( date-entity :month 11 )  :mod much :op1-of 2 )  )  :arg1-of ( step :time ( onto :op1 court )  )  )  )  )  :name ( name :op1 tv :op2 baiersbronn )  )  )  :arg1-of clear :location ( country :name ( name :op1 nagold )  )
and :op1 ( organization :name ( name :op1 tsv :op2 freudenstadt )  :quant i )  :op2 ( person :name ( name :op1 dominik :op2 b√§uerle )  )  :op3 ( person :name ( name :op1 yannik :op2 b√ºchle )  )  :op4 ( person :name ( name :op1 sebastian :op2 d√∂lker )  )  :op5 ( person :name ( name :op1 felix :op2 p√§lchen )  )  :op6 ( person :name ( name :op1 stefan :op2 r√§ller )  )  :op7 ( person :name ( name :op1 simon :op2 schenk )  )  :op8 ( person :name ( name :op1 eduard :op2 schulz )  )
face :arg0 ( and :example-of ( team :quant 2 )  :op1 ( class :mod ( location :name ( name :op1 b )  :wiki - )  )  :op2 ( country :name ( name :op1 baiersbronn )  )  :op3 ( country :name ( name :op1 freudenstadt )  )  )  :location ( organization :name ( name :op1 murgtalhalle )  )
produce :arg0 they :arg1 ( match :arg1-of ( fight :arg1-of hard )  :duration ( temporal-quantity :quant 2 :unit hour )  )
result :arg0 ( receive :arg1 ball )  :arg2 error :op1-of ( and :op1-of ( and :op2 ( see :arg0 overeagernes :arg1 ( point :arg1-of waste :mod potential )  :op2-of ( and :op1 ( lack :arg1 ( pass :arg1 even )  )  )  :time ( moment :arg1-of ( critical :arg0 particular )  :quant some )  )  )  :op2 ( lose :arg0 ( nerve :poss ( side :mod both )  )  :arg1 point )  )
commit :arg0 ( team :mod both )  :arg1 spite :arg2-of ( prove :arg0 ( team :arg0-of ( even :arg0-of ( match :arg1 game )  :arg1 ( effort :mod great :mod physical )  :mod this )  )  :arg1 decisive )  :op1-of tremendous
day :mod small
meet :arg0 ( person :arg0-of ( follow :arg1 ( maintain :arg0 fifth :arg1 amr-unknown :manner day :time then )  )  :arg0-of ( participate :arg1 ( dedicate :arg0 upper :arg1 group )  :arg2 englishman :mod small :time ( date-entity :time-of project :year 2000 )  )  )  :arg1 cottage
say :arg0 ( person :arg0-of ( have-org-role :arg2 mayor )  :name ( name :op1 helmut :op2 kaiser )  )  :arg1 ( valley :arg0-of ( clear :arg1 ( cottage :arg0-of ( follow :arg2 ( thing :arg1-of ( suggest :arg0 population )  )  )  :mod-of area )  )  )
say :arg0 ( person :arg0-of ( view :arg1-of fantastic :purpose-of ( framework :arg1-of ( provide :arg0 landscape )  :mod ideal )  )  :name ( name :op1 kaiser )  )  :arg1 ( refer :arg0 ( hiker :quant many )  :arg1 ( area :mod this )  :arg2 ( showpiece :poss ( country :name ( name :op1 schluchtensteig )  )  )  )
and :op1 person :op2 ( nature :arg1-of ( connect :arg1-of ( strengthen :purpose-of ( instrument :arg1-of suitable )  :time ( day :time-of ( maintain :arg1-of ( cooperate :arg1-of ( will :arg0 ( he :arg0-of ( thank :arg1 present :op1-of and )  )  )  )  )  )  )  )  )
offer :arg0 he :arg1 ( opportunity :purpose ( focus :arg0 ( citizen :mod every )  :arg2 nature )  )
recommend :arg1 ( take :arg0 ( person :arg0-of tour :mod-of ( aspect :compared-to-of ( time :arg1-of same )  )  )  :arg1 ( aspect :mod environment )  :arg3 consider :mod also )
and :op1 ( take :arg1 ( succeed :arg1 ( role :poss patron )  :mod every )  )  :op2 ( wish :arg0 ( person :arg0-of ( greet :arg2-of ( follow :arg1 ( explain :arg0 ( person :name ( name :op1 friederike :op2 tribukait )  :poss ( organization :name ( name :op1 department :op2 of :op3 nature :op4 conservation )  :poss ( organization :name ( name :op1 freiburg :op2 regional :op3 council )  )  )  )  :arg1 ( aspect :mod environment :mod this )  )  )  )  :mod ( councillor :mod region )  :name ( name :op1 tilman :op2 bollacher )  )  :arg1 campaign )
coincide :arg1 ( objective :poss ( person :arg0-of tour )  :poss vision )  :arg1-of ( say :arg0 ( person :name ( name :op1 tribukait )  )  )  :arg2 ( goal :mod ( preserve :arg1 ( pasture :arg0 ( thing :name ( name :op1 allmend )  )  :arg1 ( graze :arg1 ( specific :arg1 ( habitat :arg1-of protect )  )  )  :arg1-of ( overgrow :degree extreme :time now )  )  :manner ( and :op1 ( open :arg1 ( land :arg1-of ( exist :time still )  )  )  :op2 ( connect :arg1 ( graze :arg1 old )  )  )  )  )
possible :arg0 such :arg1 ( barrier :mod past )  :manner-of ( rare :arg0 ( forest :mod-of ( area :mod-of form )  )  :arg1 ( butterfly :op1-of ( or :example-of ( species :mod certain )  :op2 grasshopper )  )  )  :polarity -
require :arg0 they :arg1 ( pathway :arg1-of clear :mod this )  :purpose ( preserve :arg1 species )
say :arg0 ( opportunity :arg1-of ( use :arg1-of ( fail :arg0 she :arg1-of ( want :arg1-of ( say :arg0 ( person :name ( name :op1 tribukait )  )  )  :polarity - :arg0 she )  )  )  :mod this )  :arg1 ( word :arg2-of ( defend :arg1 ( area :arg1-of plan :mod biosphere )  )  )
integrate :arg0 ( measure :arg1 current )  :arg1 ( plan :mod this )  :polarity -
recognize :arg1 ( status :mod ( organization :name ( name :op1 unesco )  )  )  :mod international :op2-of ( and :op1 ( offer :arg0 ( area :mod biosphere )  :arg1 ( chance :arg1 ( and :arg1-of sustain :op1 ( develop :arg1 ecology :mod economy )  )  )  )  :op3 ( offer :arg1 extend :arg4 ( achieve :arg0 and :arg1 ( organization :name ( name :op1 life :op2 project )  :poss-of ( temporal-quantity :op1-of previous :unit ( day :arg0-of care )  )  )  :arg2 far )  :time thus-far )  )
state :arg1 thing :arg3 various :op1-of ( after :time-of ( divide :arg0 ( and :op1 ( person :arg0-of ( range :arg1 forest )  :name ( name :op1 christoph :op2 wehle )  )  :op2 ( person :name ( name :op1 cornelia :op2 bischoff )  )  )  :arg1 helper :arg2 ( group :mod-of ( organization :arg1-of manage :name ( name :op1 life :op2 project )  )  )  )  )
require :concession-of ( call :arg0 ( tree :arg1-of ( cut :direction down :manner advance )  :mod large )  :arg1 ( tractor :mod forest )  )
junip :mod-of ( bush :arg1-of ( clear :arg0 helper :arg2-of ( take :arg0 ( group :mod 1 )  :arg1 ( care :arg1 ( and :op1 ( maintain :arg1 ( wall :arg1-of ( dry :mod-of stone )  )  )  )  )  )  )  )
create :arg0 objective :arg1 ( view :arg0 viewpoint :arg1-of clear )
candidate :mod only :mod still
and :arg0-of ( register :arg1 ( and :arg0-of ( describe :arg1 ( thus-far :mod-of ( - :mod ( far :mod-of 1 )  )  )  :arg1-of ( possible :arg0 information )  )  :op1 ( person :arg0-of ( reside :arg1 online )  )  :op2 ( infrastructure :mod intact )  :op3 ( energy :mod municipality )  :op4 company )  :arg3 ( candidate :mod mayoral )  )  :op1 school :op2 youth :op3 ( policy :arg0-of ( look :arg1 forward )  :topic ( citizen :mod senior :mod ( country :name ( name :op1 baar )  :name-of ( town :mod small )  )  )  )
age :arg1 - :arg1-of ( cause :arg0 ( and :op1 bank :op2 ( k√∂pfl :mod ( diet :mod ( economist :mod business )  )  )  )  )  :arg2 ( temporal-quantity :quant 46 :quant-of old :unit year )  :time-of ( account :arg1-of ( run :arg0 ( person :arg0-of ( have-org-role :arg1 far :arg2 mayor )  :arg1-of ( succeed :arg0 ( candidate :mod only )  )  :name ( name :op1 norbert :op2 brugger )  )  )  )
p.m. :mod-of ( application :mod 6 :time ( deadline :domain-of monday :time ( date-entity :month 11 :quant 11 )  )  )
sue :arg0 ( company :name ( name :op1 google )  :wiki google )  :arg1 ( organization :name ( name :op1 huawei )  )  :arg2 ( patent :arg0 ( organization :name ( name :op1 nortel )  :part-of ( organization :name ( name :op1 samsung )  )  )  )
outbid :arg0 former :arg1 company :topic ( auction-off :arg1 ( bankrupt :arg1-of ( patent :arg0 ( organization :name ( name :op1 nortel )  )  :arg1-of ( patent :arg0 ( company :name ( name :op1 google )  :wiki google )  :mod-of lawsuit )  :manner-of ( file :arg0 ( group :arg0-of ( own :arg1 thousand )  )  :arg1 ( barrage :poss ( person :arg0-of ( manufacture :arg1 ( phone :mod cell )  )  :beneficiary-of thursday )  )  )  )  )  )
patent :arg0 ( organization :name ( name :op1 nortel )  )  :arg1 4 :arg1-of ( buy :arg0 ( consortium :op1-of ( and :arg1-of ( sue :arg0 ( country :name ( name :op1 rockstar )  )  :arg2 ( infringe :arg1 ( patent :arg1 4.5 :mod ( state :name ( name :op1 texas )  :wiki texas )  )  :location ( court :mod ( thing :name ( name :op1 u.s. :op2 district )  )  )  )  )  :op2 ( organization :name ( name :op1 samsung :op2 electronics :op3 co :op4 ltd )  )  :op3 ( organization :name ( name :op1 htc :op2 corp )  )  :op4 ( organization :name ( name :op1 huawei )  )  :op5 ( company :mod other )  )  )  )
and :op1 ( organization :arg0-of ( own :arg1 ( country :name ( name :op1 rockstar )  )  :manner joint )  :name ( name :op1 apple )  )  :op2 ( company :name ( name :op1 microsoft )  :wiki microsoft )  :op3 blackberry :op4 ( organization :name ( name :op1 ericsson )  )  :op5 ( organization :name ( name :op1 sony )  )
accuse :arg1 ( company :arg0-of ( patent :arg1-of infringe :quant 7 )  :name ( name :op1 google )  :wiki google )
advertise :arg1 ( search :arg0 term :arg1 internet :arg1-of cover :arg1-of ( help :arg0 ( technology :mod that )  )  :arg1-of patent :arg1-of relevant :arg1-of match :arg2 ( say :arg0 lawsuit :arg1 ( search :arg0 ( company :name ( name :op1 google )  :wiki google )  :arg1 core :arg2 of :time business )  )  )
possible :arg1 ( reach :arg1 ( represent :arg1 ( organization :name ( name :op1 samsung )  :op1-of ( and :op2 ( organization :name ( name :op1 htc )  )  :op3 ( country :name ( name :op1 rockstar )  )  )  )  )  )  :polarity - :prep-in ( organization :name ( name :op1 huawei )  )  :time immediate
and :arg1-of ( operate :arg0 ( company :name ( name :op1 google )  :wiki google )  :mod android :mod-of system )  :arg1-of ( operate :arg1-of ( manufacture :arg0 phone :mod all :op2-of ( and :op1 ( organization :name ( name :op1 samsung )  )  )  )  :mod that )  :op1 ( compete :arg1 fiercely )  :op2 apple :op3 ( mobile :arg0 ( company :name ( name :op1 microsoft )  :wiki microsoft )  :arg1 product )
bid :arg1 ( initial :arg1-of ( place :arg0 ( company :name ( name :op1 google )  :wiki google )  :time ( date-entity :year 2011 )  )  )  :arg1-of patent
increase :arg0 ( company :name ( name :op1 google )  :wiki google )  :arg1 ( bid :arg1 4.4 :arg0 company )  :purpose ( offer :arg1 much :time ultimate )  :time several
drive :arg0 part :arg1 ( go :arg0 ( company :name ( name :op1 google )  :wiki google )  :arg1-of ( lose :op1-of after )  :arg1-of ( acquire :arg0 mobility )  :arg1-of patent )  :arg1-of ( patent :arg0 library )  :arg1-of deal
say :arg0 lawsuit :arg1 ( and :op1 ( continue :arg1 infringe :arg1-of ( acquire :arg0 it :arg1-of ( lose :arg0 despite )  :arg1-of attempt )  :arg1-of auction-off :arg1-of ( suit :arg1-of patent )  :arg1-of ( infringe :arg0 ( company :name ( name :op1 google )  :wiki google )  )  )  )
say :arg0 willful :arg1 ( claim :arg0 ( company :name ( name :op1 google )  :wiki google )  :arg1 it :arg1-of ( patent :arg0 ( company :name ( name :op1 google )  :wiki google )  :arg1-of infringe )  )  :arg1-of ( complain :arg0 ( country :arg0-of ( increase :op1-of against )  :arg0-of ( seek :arg1 damage )  :name ( name :op1 rockstar )  )  )
swear :arg0 ( country :name ( name :op1 egypt )  :wiki egypt )  :arg1 ( free :arg2-of ( elect :arg1 ( president :arg2-of have-org-role )  )  )
contrast :arg1-of triumph :arg2 ( likely :arg1 ( mark :arg0 ( person :arg0-of ( take :arg1 ( oath :mod office )  )  :name ( name :op1 mohamed :op2 morsi )  )  :arg1 day :arg2 ( end :arg1 ( strife :location ( country :name ( name :op1 egypt )  :wiki egypt )  :mod politics )  )  )  :polarity - )
oust :arg0 ( he :arg0-of ( elect :arg1 ( president :arg2-of ( have-org-role :arg0 ( person :arg1-of succeed :name ( name :op1 hosni :op2 mubarak )  :wiki hosni_mubarak )  :arg1 ( country :mod new :name ( name :op1 egypt )  :wiki egypt )  )  )  :arg2 ( free :arg1 ( of :mod oath )  :arg2 office :arg2-of ( become :arg1 country )  :manner first )  )  :arg0-of ( promise :arg1 islamist )  )  :arg1 ( 16 :quant-of ( temporal-quantity :unit month )  )  :arg2 ago
and :location ( country :location-of ( elect :arg0 court :arg1 ( free :arg1 ( world :mod ( ethnic-group :mod also :name ( name :op1 arab )  :wiki arabs )  )  :arg1-of ( head :arg0 ( he :arg0-of ( have-org-role :arg1 ( religious-group :name ( name :op1 islamism )  :wiki islam )  :arg2 president )  :arg0-of ( inaugurate :arg1 constitutional )  :arg1-of become :poss-of before )  )  :arg1-of ( overthrow :arg0 since :location state :location ( 60 :mod some :mod-of ( temporal-quantity :unit year )  )  :location monarchy )  )  )  :name ( name :op1 egypt )  :wiki egypt )
rob :arg0 ( he :arg0-of ( black :arg1 18 )  :arg0-of ( build :arg1 ( seat :arg0 side :arg1 nile )  :arg2-of ( resemble :arg1 ancient )  :location ( country :mod-of temple :name ( name :op1 egypt )  :wiki egypt )  )  )  :arg1 oath :arg1-of ( judge :arg0 court )  :time before
say :arg0 ( person :arg0-of ( live :arg1 television :arg1-of ( show :arg0 ( ceremony :mod solemn )  )  :location state )  :name ( name :op1 &quot; )  :op5-of ( and :arg1-of ( aspire :arg0 we )  :op1 ( good :mod-of tomorrow )  :op2 new :op3 ( country :name ( name :op1 egypt )  :wiki egypt )  :op4 republic )  )  :arg1 during
say :arg0 ( person :arg0-of ( lay :arg2 of :op1-of foundation :op1-of ( and :op2 ( free :arg0 today :arg1 ( country :arg0-of ( train :arg2 ( person :arg0-of ( engineer :arg1 group )  :arg0-of ( spend :arg1 most :mod that )  )  )  :mod old :name ( name :op1 us )  :wiki united_states )  :arg2 stability :manner absolute )  :op3 genuine :op4 democracy :op5 ( organization :arg0-of ( organize :arg1 ( harsh :arg1 ( target :arg0 year :arg1 by :arg2 ( succeed :arg0 fundamental :arg1 ( government-organization :arg0-of govern )  :arg1-of ( outlaw :arg0 ( 84 :mod-of ( temporal-quantity :unit year )  )  )  :arg1-of ( inception :arg0 it :time since )  )  )  )  )  :name ( name :op1 muslim :op2 brotherhood )  :wiki muslim_brotherhood )  )  )  :mod ( country :name ( name :op1 egypt )  :wiki egypt )  :poss-of ( life :mod new )  )  :arg1 60 :arg2 ( person :name ( name :op1 &quot; )  )
arrive :arg0 ( person :name ( name :op1 morsi )  )  :arg1 ( hundred :mod soldier :op1-of ( and :arg0-of ( guard :arg1 ( build :arg1 ( small :mod-of motorcade )  )  )  :op2 policeman )  )  :time ( after :op1 ( time :arg1-of local )  :op1-of short )
and :op1 ( halt :arg0 ( person :arg0-of ( cheer-on :arg1 ( president :arg2-of ( have-org-role :arg0 ( person :name ( name :op1 mubarak )  )  :arg1 ( link :arg0 ( road :mod ( busy :mod usual )  )  :arg1 ( centre-left :mod city )  :arg2 ( suburb :mod south )  )  )  :mod new )  :arg1-of ( gather :location ( outside :op1 court )  )  )  :arg0-of ( depart :arg1 ( pomp :op1 ( temporal-quantity :unit year )  :poss ( person :arg0-of ( have-org-role :arg2 president )  )  )  )  :arg0-of support :mod only :quant several )  :arg1 traffic :arg2 ( allow :arg0 ( briefly :polarity only )  :arg1 motorcade )  )
contrast :arg1 ( want :arg0 ( person :mod ( religious-group :name ( name :op1 islamism )  :wiki islam )  :mod just :quant all )  :arg1 ( work :arg0 ( candidate :arg0-of ( speak :arg1 present )  :arg0-of ( spare :arg1 ( prestige :arg1-of personal )  )  :arg1-of ( deliver :op1-of ( and :arg1-of ( surge :arg0 since )  :op2 ( of :arg1 friday )  :op3 ( try :arg0 ( organization :arg0-of deride :name ( name :op1 brotherhood )  :wiki muslim_brotherhood )  )  )  )  )  :arg1 ( uprise :arg1 authoritarian :op1-of ( 2011 :year-of date-entity )  )  :arg1-of complete )  :polarity - )
tell :arg0 ( person :arg0-of ( wear :arg1 blue )  :arg2-of ( modern :arg0 today :arg1 state :op4-of ( and :op1 civil :op2 nation :op3 constitution )  )  :name ( name :op1 &quot; )  :op1-of ( and :arg1-of ( suit :arg0 ( country :name ( name :op1 egypt )  :wiki egypt )  :arg2 red )  :op2 business )  )  :arg1 of :arg2 ( he :arg0-of ( take :arg1 office :arg2 oath )  :arg1-of judge :arg2-of ( panel :arg0 wood :arg1 chamber )  )  :time tie
travel :arg0 ( person :name ( name :op1 morsi )  )  :arg1 ( he :poss-of ( inauguration :mod-of address )  )  :arg2 ( organization :name ( name :op1 cairo :op2 university )  )  :time late
welcome :arg1-of ( give :arg0 ( band :arg0-of ( play :arg1 ( anthem :mod nation )  :condition ( stand :arg1 ( he :arg0-of ( attend :arg1 army )  )  )  )  )  :arg2 he )  :mod official
marshal :arg0 ( person :arg1-of ( rule :arg0 ( person :arg0-of ( field :arg1 military )  )  )  :name ( name :op1 hussein :op2 tantawi )  )  :arg1 attendance
chant :arg1 ( person :arg0-of ( lecture :arg1 room :mod main )  :arg1-of arrive :op2-of ( and :arg1-of ( greet :arg0 ( he :arg0-of ( gather :arg1 university )  )  )  :op1 army )  :poss hand )
become :arg1 ( organization :arg0-of ( establish :arg2 ( bastion :topic ( educate :arg1 1970 :mod secular )  )  :time ( date-entity :year 1908 )  )  :name ( name :op1 cairo :op2 university )  )  :arg2 ( stronghold :poss ( group :consist-of ( person :arg0-of study )  :mod ( religious-group :name ( name :op1 islamism )  :wiki islam )  )  )  :time late
oust :arg0 ( he :arg0-of ( strip :arg1 ( reclaim :arg0 ( year :mod last )  :arg1 power :arg1-of ( uprise :arg0 of )  :arg1-of ( vow :arg0 ( person :arg0-of ( symbolize :arg1 oath :arg2 friday )  :arg0-of ( birth :arg2 ( square :wiki - )  )  :name ( name :op1 morsi )  )  :op2-of ( and :op1 ( end :arg1 ( rule :mod authoritarian )  :mod that )  :op3 military )  )  :arg1-of ( have-org-role :arg0 person :arg2 president )  )  )  :mod-of office )  :arg1 ( person :arg0-of ( lead :arg1 ( council :mod-of over )  )  )
contrast :arg1 ( agree :arg0 ( he :arg0-of bow :arg0-of ( contest :arg1 ( continue :arg1 power :arg1-of ( indicate :arg0 military )  )  )  )  :arg1 court :time-of ( take :arg0 ( person :arg0-of ( have-org-role :arg2 official )  )  :arg1 oath :purpose rather :purpose customary :time before :time ( before :time-of parliament )  )  )
fill :arg0 speech :arg1 dramatic :arg2 ( person :arg0-of ( gesture :arg1 populist )  :name ( name :op1 morsi )  )  :mod ( square :wiki - )
make :arg0 club :arg1 ( evening :arg1-of wonderful :quant 2 )
club :arg1-of ( begin :arg0 ( thing :mod ( new :mod-of season )  :name ( name :op1 the )  )  )
pump :arg2 ( event :arg2-of ( take :arg0 ( evening :value ( friday :mod this )  )  :arg1 ( continue :arg0 festiviti :op1-of over )  :arg4 ( place :poss-of ( party :value 25 )  )  :example late :example 1 :prep-on day :prep-on while :prep-on-of ( party :mod this )  :purpose ( evening :value saturday )  )  )
promise :arg0 organiser :arg1 ( and :op1 ( beat :mod fat )  :op2 ( sound :arg1-of cool )  )  :arg2 ( temporal-quantity :mod both :unit night )
injure :arg1 ladder :degree ( serious :arg0-of ( fall :arg1 work )  )
and :op1 ( fall :arg1 ( person :arg0-of work :arg0-of ( replace :arg1 ( sensor :mod break :mod external )  )  :age ( temporal-quantity :unit year )  :mod old :mod 51 )  :arg2 ladder :arg4 thursday )  :op2 ( injure :degree serious )
want :arg0 man :arg1 ( replace :arg0 ( person :name ( name :op1 lamprechtshausen )  )  :arg1 ( sensor :arg2-of heat :mod break )  :arg2 ( facade :mod external :part-of ( house :mod guest )  )  )
and :op1 ( slip :arg0 ( he :arg0-of ( rest :arg1 ( gutter :mod roof )  )  :arg0-of ( climb :arg1 ladder )  )  :direction away )  :op2 ( fall :arg1 man :location below :time ( onto :op1 concrete )  )
and :arg1-of ( injure :arg0 ( he :arg0-of ( suffer :arg1 serious )  :arg0-of ( rescue :arg1 helicopter )  )  )  :op1 ( take :arg0 6 :arg1 region :arg3 ( hospital :wiki - )  )
sentence :mod ( life :quant 2 )  :purpose-of ( country :name ( name :op1 south :op2 africa )  :wiki south_africa )
nine :quant-of ( temporal-quantity :quant-of ( after :mod-of 2 :op1 ( and :op1 ( rape :arg0-of brutal )  :op2 mutilation )  :op2 ( girl :location ( country :name ( name :op1 south :op2 africa )  :wiki south_africa )  :mod old :mod ( 17 :quant-of ( temporal-quantity :unit year )  )  )  :time-of ( condemn :arg1 ( person :arg0-of perpetrate :arg1-of ( sentence :arg0 friday :mod life )  )  )  )  :unit month )
report :arg1 ( this :arg1-of broadcast )
die :arg1 victim :arg2-of ( result :arg1 ( injure :mod serious )  )  :time late
find :arg1 ( person :arg1-of ( guilty :arg2 ( crime :time ( start :arg1 week )  )  )  :name ( name :op1 johannes :op2 kana )  )  :time already
cause :arg0 crime :arg1 ( horror :mod nationwide )
anene :op1-of ( name :name-of ( thing :arg1-of ( near :arg0 industry :arg2 ( city :name ( name :op1 capetown )  :wiki cape_town )  )  :poss ( old :arg1-of ( rape :arg0 ( 21 :time then )  :arg2 estate :time year )  )  )  :op2 booysen )
battle :arg0 doctor :arg1 ( save :arg0 ( ultimate :mod-of vain )  :arg1 ( life :poss victim )  )  :duration ( temporal-quantity :quant 14 :unit hour )
and :arg0-of ( require :arg1 ( person :arg0-of ( support :mod psychological )  :arg2-of staff )  )  :op1 carer :op2 ( nurse :arg1 ( sight :arg1 ( girl :mod young )  :domain-of horrific )  )
attack :arg1 ( bar :arg1 ( person :name ( name :op1 booysen )  )  )  :arg1-of ( admit :arg0 ( person :name ( name :op1 kana )  )  :time trial )  :topic-of night
and :op1 ( beat :arg1-of ( admit :arg0 ( he :beneficiary-of ( deny :arg0 he :arg1 ( responsible :arg1 ( die :arg1 girl )  )  )  )  :mod also )  )  :op2 ( rape :arg1 she )
release :arg0 ( they :arg1-of ( assume :arg0 police :time initial )  )  :arg1 ( person :arg0-of ( evidence :arg1 ( multiple :quant-of ( person :arg0-of attack )  )  :arg1-of ( suffice :polarity - )  )  :arg2-of suspect :quant 2 :source custody )
attack :arg0 also :arg1 ( prosecute :arg0 public :arg1 ( they :arg1-of ( convince :arg0 ( person :name ( name :op1 kana )  )  )  )  :arg1-of ( proceeding :arg0 alone )  )  :mod time
rap :arg0 ( life :location ( country :name ( name :op1 south :op2 africa )  :wiki south_africa )  :mod everyday )  :arg1 ( assault :arg0 almost :arg1 year :arg1-of ( report :arg0 every :location around )  :mod sexual )
high :arg1 ( number :quant-of ( person :arg0-of ( reside :arg1 ( country :name ( name :op1 germany )  :wiki germany )  )  :mod ( country :name ( name :op1 germany )  :wiki germany )  :mod this :quant many )  )  :compared-to ( country :mod ( almost :mod-of much )  :mod-of person :name ( name :op1 south :op2 africa )  :poss-of population :wiki south_africa )  :op1-of 82 :op1-of 50
and :op1 police :op2 woman :op3 association :op4 ( country :arg0-of ( estimate :arg1 ( number :arg1-of case :arg1-of high :arg1-of ( assault :arg0 sexual )  :quant-of unreport :quant-of of )  )  :mod-of howev :name ( name :op1 south :op2 africa )  :wiki south_africa )
visit :arg0 jumbo :arg1 ( home :poss ( ham :arg1 ( forest :arg1-of black )  )  )
galileo :mod-of ( program :arg0-of ( visit :arg1 star )  :mod tv :mod ( good :degree most :mod-of ( ham :arg2-of ( search :arg0 jumbo :arg1 world )  )  )  )
establish :arg0 presenter :arg1 right :arg1-of ( ham :arg0 ( thing :domain-of good )  :arg1-of ( provide :arg0 ( fatten :arg0 turbo :arg1 this )  :polarity - )  :arg4-of ( come :arg1 ( thing :domain-of ( leg :part-of pork )  :mod ( important :degree most )  )  )  )  :arg2 outset
possible :arg1 ( good :domain ( ham :arg1-of ( buy :time supermarket )  )  :domain ( product :mod quality )  :mode interrogative )
explain :arg0 ( person :arg0-of ( have-org-role :arg2 boss )  :name ( name :op1 uli )  )  :arg1 amr-unknown :arg1-of ( operate :arg0 ( person :mod ( country :mod-of company :name ( name :op1 uli )  )  :name ( name :op1 uli )  )  )  :arg1-of ( ham :arg0 of :arg2 factory :mod large )  :mod ( country :name ( name :op1 uli )  )  :mod-of jumbo
say :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 ( present :arg1 ( black :arg0 jumbo :arg1 ( forest :arg1 ham )  )  :arg1-of ( ham :arg0 most )  :arg1-of ( love :arg0 ' )  )
possible :arg1 ( enter :arg0 ( he :arg0-of ( wear :arg1 ( protect :arg1 hair :op1-of ( and :op2 ( coat :mod white )  )  )  )  )  :arg1 factory :mod only )
microphone :arg1-of ( reach :arg0 he :arg1-of ( possible :arg0 also )  :op1-of before :purpose-of ( hand :part-of jumbo )  )
see :arg0 ( jumbo :arg0-of ( keep :arg1 something )  )  :arg1 ( country :location-of ( restaurant :mod ( fast :mod-of food )  )  :name ( name :op1 waldshut )  )
astonish :arg0 television :arg1 by :arg1-of ( produce :arg0 ( person :arg0-of ( forest :arg1 ( ham :arg0 ( they :arg0-of ( work :arg1 huge :location here )  )  )  :arg1-of ( black :arg0 ( of :arg1-of ( produce :arg0 mass )  )  )  )  :arg1-of ( comment :arg0 quantity )  )  )
speak :arg0 joint :arg1 week :arg2 meat
require :arg0 ( weight :op1-of ( and :op2 ( content :arg1-of fat )  :op3 colour )  )  :arg1-of ( explain :arg0 ( person :name ( name :op1 uli )  )  )  :arg2 ( quality :mod ( good :degree most )  )
slaughter :arg1 ( majority :quant-of ( pig :mod-of ( temporal-quantity :quant 6 :unit month )  )  )  :arg2 old
standard :mode interrogative
detail :arg0-of ( play :arg1 role )  :arg1 such :arg1-of specific :example ( value :arg1 meat :mod ph )  :mod even
value :arg1 ( ph :arg1-of ( high :arg0 ( meat :arg1-of dark )  )  )
say :arg0 ( person :arg1-of ( measure :arg0 ( you :arg1-of ( cause :arg0 ( amr-unknown :arg1-of ( curious :arg0 i )  )  )  )  )  :name ( name :op1 &quot; )  )  :arg1 jumbo :arg2 cynically
present :arg1 ( standard :mod ( produce :arg0 here :arg1 television :arg1-of private )  )  :manner ( form :mod pure )
worth :polarity-of ( watch :arg0 nonetheles )
see :arg0 view :arg1 ( carve :arg0 hand :arg1 joint :mod still )
arrive :arg1 ( ham :arg1 ( forest :arg1 all :arg1-of black )  )  :arg4 ( boneles :mod shelf )  :manner tradition :time after
mix :arg1 ( combine :arg0 herb :arg1 ( secret :topic ham )  :arg2 salt )
remind :arg0 ( and :arg0-of ( appear :arg1 ( tower :arg1-of smoke )  )  :op1 furnace :op2 submarine )  :arg1 jumbo
fir :mod-of ( branch :arg2-of ( provide :arg0 ( person :arg0-of smoke )  :arg1 ( flavour :arg1-of special :beneficiary ( ham :arg0 ( country :name ( name :op1 black :op2 forest )  )  :arg1 trick )  )  )  :location here )
smoke :arg1-of ( ham :arg0 ( 20 :quant-of ( temporal-quantity :unit day )  )  :arg1-of ( black :degree almost :mod final :time after )  )
say :arg0 ( he :arg0-of ( announce :arg1 ( he :arg0-of ( sample :arg1 of )  )  :op3-of ( and :op1 now :op2 ( disappear :arg0 slice :arg1 inside :arg2 jumbo )  )  )  )  :arg1 product
say :arg0 ( delicious :mod ( that :mod-of really )  )  :arg1 ( star :arg1-of ( conclude :arg0 tv )  )
involve :arg1 all :arg1-of ( evaluate :compared-to-of happy :mod that )
thing :domain ( person :arg0-of ( have-org-role :arg2 ( agent :arg1-of ( think :arg0-of ( thank :arg1 internet :time past )  )  :mod ( travel :arg1 interrogative )  )  )  )
seem :arg1 ( buck :arg0 ( organization :name ( name :op1 flight :op2 centre )  )  :arg1 trend )
and :arg1-of ( earn :arg0 holidaymaker :arg1-of ( look :arg0 ( company :arg0-of ( upgrade :arg1 ( forecast :arg1 ( profit :mod ( full :mod-of year )  )  )  :op1-of and )  )  )  :location ( country :name ( name :op1 australia )  :wiki australia )  :mod record )  :op1 ( country :name ( name :op1 united :op2 kingdom )  :wiki united_kingdom )
and :arg1-of ( forecast :arg1-of ( tax :arg1-of compare :op1-of ( before :time-of ( profit :arg0 ( company :arg0-of travel :arg0-of ( expect :arg1 year :time now )  )  :arg1-of underlie :mod full )  )  )  :time previous )
represent :arg0 ( achieve :arg0 12 :arg1 ( guide :arg1 17 :time current )  )  :arg1 ( grow :arg0 slash :arg1 ( monetary-quantity :unit cent )  )  :arg1-of ( profit :arg1-of ( achieve :arg0 12 :time ( date-entity :year 2011 )  )  :mod record )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 uk )  :wiki united_kingdom )  :arg2 director )  :arg0-of ( manage :arg1 - )  :name ( name :op1 graham :op2 turner )  )  :arg1 ( and :arg1-of ( profit :arg0 ( monetary-quantity :unit cent )  :arg2 half )  :op1 ( start :arg0 ( organization :name ( name :op1 flight :op2 centre )  )  :arg1 half :arg1-of strong :op1-of ( and :op2 ( travel :arg1 8 :manner especially :mod ( business :mod ( country :name ( name :op1 australia )  :wiki australia )  )  )  )  )  )
say :arg0 ( he :arg2-of ( contribute :arg0 year :arg1 record :op3-of ( and :arg1-of ( interest :arg0 full :arg2 tax )  :op1 ( earn :arg0 year )  :op2 before )  )  )  :arg1 ( and :op1 date :op2 10 :op3 country :op4 ( profitable :arg0 we :arg1 track :arg2 several )  )
include :arg1 ( and :op1 ( country :name ( name :op1 united :op2 kingdom )  :wiki united_kingdom )  :op2 ( large :arg1-of ( typical :arg1-of ( profit :arg0 ( country :name ( name :op1 australia )  :wiki australia )  :mod-of ( generator :poss we )  )  )  :degree most )  )  :arg2 this
rebound :arg0 leisure :arg1 business :location ( country :name ( name :op1 australia )  :wiki australia )  :time ( half :arg0-of ( offset :arg1 ( market :mod ( travel :arg1 ( slight :degree-of weak )  :arg2 corporation )  :mod domestic )  )  )
leisure :mod-of ( perform :arg0 similarly :arg1 centre :arg1-of ( have-rel-role :arg0 ( country :arg0-of ( spend :arg1 less )  :name ( name :op1 uk )  :wiki united_kingdom )  :arg2 client )  :arg2 ( while :mod-of corporation )  :mod business )
and :op1 ( recover :arg0 ( business :mod ( country :name ( name :op1 us )  :wiki united_states )  :poss ( it :poss consecutive )  )  :arg1 loss :time ( half :mod weak )  )  :op2 ( deliver :arg1 ( profit :arg0 year :arg1 seasonally :mod full )  :arg1-of expect )
share :mod ( organization :name ( name :op1 flight :op2 centre )  :op1 yesterday )
urge :arg0 school :arg2 ( focus :arg1 more :arg2 ( maths :op1-of ( and :op2 spell :op3 grammar )  )  :arg0 school )
require :arg0 ( course :mod ( language :name ( name :op1 english )  :wiki english_language )  :mod literature )  :arg1 ( study :arg0 pupil :arg1 ( and :op1 ( person :arg0-of ( play :arg1 ( onward :time ( date-entity :year 1914 )  )  )  :name ( name :op1 shakespeare )  )  :op2 ( novel :duration ( temporal-quantity :unit century )  :mod 19th )  :op3 ( poetry :mod romantic )  :op4 ( fiction :mod ( country :name ( name :op1 britain )  :wiki united_kingdom )  :time contemporary )  )  )
feature :arg1 exam :arg1-of ( text :arg0 unseen :op1-of ( and :arg1-of encourage :op2 ( read :arg1-of wide )  )  )  :mod also
and :arg1-of scrap :arg1-of combine :op1 ( literature :mod ( language :name ( name :op1 english )  :wiki english_language )  )  :op2 language
require :arg1 ( take :arg0 pupil :arg1 gcse :prep-in language :purpose ( choose :arg1 ( literature :mod ( language :name ( name :op1 english )  :wiki english_language )  )  :arg1-of ( incentivize :arg0 thing :arg1-of strong )  :arg2 ( qualify :arg1 ( date-entity :year 2015 )  :arg1-of separate )  )  )
subject :arg0-of ( undergo :arg1 ( department :arg0-of ( release :arg1 ( syllabus :mod new )  :medium ( language :name ( name :op1 english )  :wiki english_language )  :op1-of ( and :op2 ( maths :time tomorrow )  )  )  )  :arg2 ( overhaul :arg1 education :mod radical )  )
subject :arg1-of ( change :arg0 it )  :mod ( core :mod-of ( year :mod next )  )  :mod other
unveil :arg0 ( person :arg0-of ( move :arg1 less :arg1-of separate )  :name ( name :op1 ofqual )  )  :arg1 ( shake :arg1 structure :arg2 ( and :op1 ( system :instrument-of ( grade :arg0 gcs :arg1 ( exam :mod-of regulator )  )  :mod new )  :op2 coursework )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 consensus :arg2 secretary )  :arg0-of ( speak :arg1 education )  :mod summer :name ( name :op1 speaking )  )  :arg1 ( need :arg0 we :arg1 ( examine :arg1 ( confident :arg1 ( and :degree more :op1 ( challenge :arg1 more )  :op2 ambitious :op3 rigorous )  :arg1-of ( restore :degree more )  :arg1-of public :arg1-of insist )  :arg1-of ( reform :arg0 we )  :mod-of system )  :arg1-of wide )
show :arg0 ( study :arg1 ( term :mod-of time )  :mod ( country :quant most )  :time ( year :op2-of ( or :domain week :op1 ( temporal-quantity :unit hour )  :op3 ( temporal-quantity :quant 3 :unit hour )  )  )  )  :arg1 ( devote :arg0 ( school :mod ( language :name ( name :op1 english )  :wiki english_language )  )  :arg1 ( time :quant less )  :arg2 maths )
and :op1 ( provide :arg0 ( school :mod ( country :name ( name :op1 australia )  :wiki australia )  )  :arg1 ( average :arg1 ( temporal-quantity :mod 143 :unit hour )  )  :manner compare :time year )  :op2 pupil :op3 ( around :quant-of ( country :name ( name :op1 singapore )  :wiki singapore )  :quant-of ( temporal-quantity :unit hour )  )
say :arg0 ( source :mod coalition )  :arg1 ( likely :arg1 ( encourage :arg0 ( gcse :arg1-of extensive :arg1-of ( combine :arg0 - :arg2 ( weight :arg0 subject :arg1 ( table :poss league )  :degree more )  )  :mod maths )  :arg1 school :arg2 ( provide :arg1 ( teach :arg1 extra )  :arg0 school )  )  )  :condition ( require :arg1 ( devote :arg1 ( more :degree-of timetable )  :arg2 maths )  :arg1-of while :mod formal )
syllabu :mod-of ( focus :arg0 place :arg1 ( world :mod ( real :mod-of finance )  :mod problem )  :arg2 mathematics :mod great )
entice :arg1 ( tart :mod delicious :op2-of ( and :op1 ( animal :mod beautiful )  )  )
present :arg1 ( rabbit :arg1 breed :arg1-of ( beautiful :degree most )  :op1-of ( and :mod various :op2 colouring )  )  :arg2 ( thing :name ( name :op1 district :op2 exhibition )  )  :arg3 ( centre-left :mod community )  :time ( weekend :mod this )
evaluate :arg2 already :purpose-of thursday
exhibit :arg1-of ( organize :arg0 ( associate :arg1 ( thing :name ( name :op1 w514 )  )  :arg1-of ( local :arg0 ( once :mod-of again )  )  )  )  :mod this :mod large
exhibit :arg0 ( individual :arg0-of ( show :arg1 ( rabbit :arg0 ( breeder :mod here :source ( club :location ( district :location ( country :name ( name :op1 soest )  )  )  :mod-of young )  )  :arg1 wicked )  :mod also )  :arg1-of private )  :arg1 ( animal :mod ( good :degree most )  )
and :op1 ( assess :arg0 ( adjudicator :quant 6 )  :arg1 ( rabbit :arg1 thursday :quant numerous )  )  :op2 ( possible :arg1 ( assign :arg1 ( thing :arg1-of ( award :arg2 ( animal :mod exceptional )  )  )  )  )
show :arg1-of ( visit :arg0 ( person :arg0-of ( evaluate :arg1 ( animal :arg1-of ( post :arg2 cage )  :quant all )  )  :arg1-of ( keep :manner inform )  )  )
open :arg0 ( person :arg0-of ( have-org-role :arg1 30 :arg2 mayor )  :name ( name :op1 hermann :op2 arndt )  )  :arg1 ( exhibit :time 14 )  :manner official
and :arg1-of ( visit :arg0 ( person :arg2-of ( follow :arg0 10 :arg1 ( ceremony :mod ( prize :wiki - )  )  )  :quant all )  :arg2-of ( open :arg0 ( sunday :location-of ( p.m. :quant 30 )  )  :arg1 ( show :arg0 ( until :location-of a.m. :op1 3 )  :arg1 ( rabbit :arg0 ( saturday :location-of a.m. )  )  )  :time 10 )  )
invite :arg1 guest :mod also :purpose ( take :arg1 tombola :manner ( prize :arg1-of impress )  :op1-of ( and :op2 ( sample :arg1 ( food :mod delicious :quant some )  :arg2 cafeteria )  )  )
debut :arg0 ( chop :arg0 ( person :name ( name :op1 pamela :op2 anderson )  :wiki pamela_anderson )  :location ( off :op1 ( lock :arg1 dramatic :mod blonde :mod iconic )  )  )  :arg1 ( cut :arg1 pixie :mod new )
show :arg0 ( she :arg2-of ( lock :arg0 ( person :name ( name :op1 pam )  )  :arg1 famou :mod blonde )  :quant-of role )  :mod tv :mod sexy
celebrity :beneficiary ( fan :arg1-of ( shock :arg2 ( dramatic :mod-of ( new :mod-of hairdo )  )  )  )  :domain ( person :name ( name :op1 pamela :op2 anderson )  :wiki pamela_anderson )  :mod ( late :degree most )
babe :arg0-of ( favor :arg1 crop )  :arg0-of ( lock :arg1-of long :arg2 ( pixie :mod platinum )  :mod blonde )  :mod ex
reveal :arg0 ( actres :mod ( old :quant ( temporal-quantity :quant 46 :unit year )  )  )  :arg1 ( while :arg1-of look :time ( late :degree most )  )  :medium la :op1-of and :op1-of ( and :arg0-of ( share :arg1 ( snap :arg1 ( page :mod ( product :name ( name :op1 twitter )  :wiki twitter )  )  )  )  :op2 wednesday )
and :op1 ( beauty :op1-of blonde )  :op2 short :op3 ( love :arg0 it :arg1 ( we :poss-of hair )  )  :op4 ( change :arg0 ( time :quant-of ( temporal-quantity :quant 20 :unit year )  )  :arg1 demure )
think :arg0 you :arg1 amr-unknown :mod-of about :mode ( interrogative :mode-of hair )
comment :arg0 ( thing :arg1-of think )  :arg1-of share :direction below
person :name ( name :op1 salem )  :poss-of ( organization :location-of ( person :name ( name :op1 johanna :op2 rahner )  )  :name ( name :op1 ecumenical :op2 discussion :op3 forum )  )  :wiki -
approach :arg0 we :arg1 amr-unknown :mod ( notion :mod-of ( end :arg1 ( focus :arg0 ( organization :mod next :name ( name :op1 at )  :poss-of monday :poss-of ( 21 :mod-of ( date-entity :month 10 )  )  )  :arg1 ( country :name ( name :op1 at )  )  :arg1-of ( will :arg0 ( country :name ( name :op1 at )  )  )  :mod-of topic )  )  :mod-of hell :mod-of hell )  :mod now :mod reflection :mod theological
speak :arg0 person :arg2 ( person :name ( name :op1 johanna :op2 rahner )  )
initiative :domain ( organization :name ( name :op1 ecumenical :op2 discussion :op3 forum )  )  :quant-of ( and :op1 ( thing :name ( name :op1 protestant )  )  :op2 ( church :location ( and :op1 ( person :name ( name :op1 salem )  :wiki - )  :op2 ( person :name ( name :op1 salem )  :wiki - )  :op3 ( castle :wiki sch√∂nbrunn_palace )  :op4 ( country :name ( name :op1 lake :op2 constance :op3 district :op4 cultural :op5 office )  )  )  :mod ( religious-group :name ( name :op1 catholic )  :wiki catholicism )  )  )
address :arg0 ( want :arg0 ( person :name ( name :op1 at )  )  :arg1 forum )  :arg1 ( amr-unknown :mod-of ( view :arg0 ( person :arg1-of die )  :mod today :mod after )  )  :arg1-of question :arg1-of end
hope :arg0 ( person :arg0-of ( while :arg1 ( past :quant-of ( temporal-quantity :unit century )  )  )  )  :arg1 characterise :manner certain :manner consummation :op4-of ( and :arg2-of ( focus :arg0 it :arg1 picture :op1-of conscious :op1-of over )  :op1 hell :op2 ( define :arg0 we :arg1 ( or :degree ( more :degree-of bashfulnes )  :op1 even :op2 speechlessnes )  :op1-of until :time now )  :op3 ( teach :arg0 prophetic :time contemporary )  :quant heaven :topic-of idea )
say :arg0 ( critic :arg2-of ( hope :arg0 great :op1-of ( and :mod well :op2 ( cast :arg0 truly :arg1 of :arg2 out )  )  )  )  :arg1 ( person :arg0-of ( speak :arg1 ( religion :op1-of ( by :mod ( religious-group :name ( name :op1 christian )  :wiki christian )  )  )  )  )
cause :arg0 ( many :arg0-of question )  :arg1 ( provide :arg0 they :arg1 ( lose :arg0 ( we :arg0-of mark :arg1-of seem )  :arg1-of ( exclaim :arg0 ( we :arg0-of mark )  )  )  )
fear :arg1 die :arg1-of ( remain :arg1-of ( continue :arg0 ( person :name ( name :op1 johanna )  )  :arg1-of ( mean :arg2 howev )  )  :arg2 ( challenge :arg0 crucial )  :mod this :op1-of of )
long :arg0 of :arg1 ( thing :arg1-of dream :mod-of ( everything :arg1-of ( end :manner good )  )  )  :arg2 ( matter :arg1-of associate :mod this )  :mod that
and :op1 ( study :arg1-of ( bear :arg0 ( person :name ( name :op1 johanna )  )  :arg2 rahn :time ( date-entity :year 1962 )  )  :mod-of ( religious-group :name ( name :op1 catholic )  :wiki catholicism )  )  :op2 theology :op3 biology :op4 ( date-entity :year 1982 )  :op5 albert :time ( date-entity :year 1989 )
graduate :arg0 ( she :mod ( country :name ( name :op1 freiburg )  )  )  :arg1 also :arg2 ( doctor :consist-of theology )  :time ( date-entity :year 1997 )
and :arg1-of ( follow :arg0 ecumenical :time ( date-entity :year 2003 )  )  :arg2-of ( lecture :arg0 doctoral :arg1 ( qualify :arg0 post :arg2 fundamental )  )  :op1 theology
chair :arg0 ( country :name ( name :op1 kassel )  )  :arg1 ( thing :name ( name :op1 systematic :op2 theology )  )  :arg1-of ( occupy :arg0 ( person :arg0-of ( institute :arg1 ( thing :name ( name :op1 catholic :op2 theology )  )  )  :name ( name :op1 johanna :op2 rahner )  )  :time ( since :op1 ( date-entity :year 2010 )  )  )
profession :arg1-of ( confirm :arg0 ( country :name ( name :op1 geislingen )  )  :manner-of ( stand :arg1 ( catholicism :mod young :quant ( more-than :op1 100 )  )  :manner together )  )  :poss ( thing :name ( name :op1 kleiner :op2 heuberg )  :poss-of faith )
and :arg1-of ( be :arg0 15 )  :arg2-of ( care :arg0 unit :arg1 pastoral :mod ( thing :name ( name :op1 kleinen :op2 heuberg )  )  :op1-of 101 )  :op1 ( confirm :arg0 year :arg1 old :arg2 16 :location ( service :quant 2 )  )
feature :arg0 afternoon :arg0-of ( spirit :arg1 ( youth :op1 choir )  )  :arg1 group :arg2-of ( accompany :arg1 morning :op1-of service )  :op1-of service
and :op1 ( accept :arg1 ( baptize :arg1 person )  )  :op2 ( ask :arg0 ( person :arg0-of ( receive :arg1 ( sacrament :arg1-of confirm )  )  :mod young )  :arg1 ( power :poss ( country :name ( name :op1 holy :op2 spirit )  )  )  )
and :arg1-of ( prepare :arg2 ( day :arg1-of special )  )  :op1 ( direction :arg2-of confirm )  :op2 ( person :name ( name :op1 deacon :op2 reiner :op3 dehner )  )  :op3 ( assist :arg0 ( person :arg0-of ( have-org-role :arg1 church :arg2 member )  :quant several )  :arg1 ( over :op1 ( temporal-quantity :unit ( month :mod recent )  )  )  )
learn :arg0 they :arg1 ( task :arg1 ( project :mod various )  :arg1-of ( involve :arg2 ( country :name ( name :op1 untermachtal )  )  :op1-of ( and :mod together :op2 ( attend :arg1 ( thing :name ( name :op1 youth :op2 day )  )  )  )  :time ( life :mod ( religious-group :name ( name :op1 christian )  :wiki christian )  :mod church )  )  :arg1-of differ )
illmensee :arg0-of ( second :arg3 ( race :mod-of ( participate :arg0 ( person :arg1-of ( enthuse :arg0 mountain )  )  :arg1 bike )  )  )
lake :op1-of ( around :op1-of ( and :arg0-of ( come :arg1 ( cyclist :arg0-of ( take :arg1 circuit )  )  :arg3 ( weather :arg1-of ( fantastic :arg0 hill )  )  )  )  )
announce :arg0 ( person :name ( name :op1 ulrich :op2 knobel )  :poss ( organization :arg1-of organize :mod ( organization :name ( name :op1 illmensee )  )  :name ( name :op1 sports :op2 club )  )  )  :arg1 this
metre :arg1-of ( climb :arg0 ( person :arg0-of participate )  :time ( hobby :arg1-of ( practice :arg1-of ( chance :arg0 300 :arg1-of ( want :arg0 ( cyclist :mod amateur :quant numerous )  )  :time ( particular :topic ( distance :arg0 also :arg1 ( distance-quantity :quant 15 :unit kilometer )  :duration short )  )  )  :arg2 ( environment :arg1-of compete )  )  )  )
and :arg0-of ( come :arg1 bad :arg3 ( recommend :arg1 ( championship :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg2 ( achieve :arg1 ( position :mod good )  :mod also )  :arg2-of ( compete :arg1 ( cyclist :mod junior :mod ( top :mod-of class )  :quant 2 )  )  )  :manner linz )  :op1 ( start :arg1 line )  :op2 ( thing :name ( name :op1 bad :op2 waldsee )  )  :op3 ( thing :name ( name :op1 pascal :op2 treubel )  )
manage :arg1 ( break-up :arg1 pair :arg2 ( keep :arg0 field )  :direction away :manner expect )
and :op1 case :op2 ( manage :arg0 ( person :name ( name :op1 felix :op2 bader )  )  :arg1 ( hold :arg1 right :arg0 person )  )  :op3 ( lead :mod small )  :op4 ( end :arg1 ( year :mod previous )  )  :op5 ( defend :arg1 title :arg2 ( winn :mod overall :mod ( race :mod short :mod distance )  )  )
place :poss ( person :name ( name :op1 pascal :op2 treubel )  :op1-of ( once :mod-of again )  )
race :arg0 lady :arg1 ( it :arg3-of ( take :arg0 ( team :arg0-of manage )  :arg1 top :location place :location podium :time theresa )  )
and :op1 place :op2 ( person :name ( name :op1 leonie :op2 treiber )  :op2-of ( and :op1 ( person :name ( name :op1 adel )  :wiki saif_al-adel )  )  :source ( country :name ( name :op1 owingen )  )  )
or :op1 ( live :arg1 ( develop :arg1-of fantastic )  :location area )  :op2 ( work :arg0 ( rider :quant ( number :arg1-of increase )  )  )
and :arg1-of ( represent :arg0 ( only :mod-of about )  )  :op1 ( perform :arg1 ( range :arg1 ( ability :mod athletic )  :mod entire )  :polarity - :quant top )
with :arg2-of ( range :arg0 ( age :mod participant )  :arg1-of ( start :arg0 ( at :mod-of ( ten :quant-of ( temporal-quantity :unit year )  )  )  :mod young )  :arg1-of ( wide :mod also )  :arg3 ( up :mod ( old :mod-of ( over :mod ( old :degree most )  :op1 70 )  )  )  )
athlete :location ( line :arg1-of ( start :arg0 ( year :mod this )  )  )  :mod ( top :mod ( race :mod main )  )  :mod absolute :mod ( more :mod even )
manage :arg1 ( break-up :arg0 ( cyclist :quant 4 )  :arg1 ( racer :mod region :mod top )  :direction away )
include :arg1 ( person :name ( name :op1 philipp :op2 pangerl )  )  :arg1-of ( race :arg0 ( team :arg0-of ( black :arg1 tusk )  :arg0-of ( bike :arg1 mountain :mod ( professional :mod semi )  )  )  )  :arg2 this
crown :arg0 together :arg1 ( thing :name ( name :op1 world :op2 champion )  )  :arg2 ( person :arg1-of ( have-rel-role :arg0 person :arg2 mate :manner team )  :name ( name :op1 pangerl )  )  :location ( race :mod ( hour :unit-of ( temporal-quantity :quant 12 )  )  )  :time already
become :arg1 he :arg2 ( thing :name ( name :op1 european :op2 champion )  )  :manner ( discipline :arg1-of special :mod this )  :time ( year :mod this )
compete :arg1 ( person :arg0-of ( claim :arg1 ( championship :mod ( country :name ( name :op1 germany )  :wiki germany )  :quant 2 )  :time already )  :name ( name :op1 roland :op2 ballerstedt )  )  :mod also
neck :op2-of ( and :op1 neck :op2-of ( and :op1 ( climb :arg1 metr :arg1-of ( lead :arg0 ( rider :arg0-of ( straight :arg1 ( front :poss ( thing :name ( name :op1 drei-seen-hall )  )  )  :mod final )  )  )  )  :op2-of ( after :op1 ( distance-quantity :quant 45 :unit kilometer )  )  )  )
speed :arg0 ( person :name ( name :op1 pangerl )  )  :arg1 ( line :arg1-of finish )  :direction over :prep-in place
manage :arg0 only :arg1 ( take :arg0 ( person :arg1-of experience :name ( name :op1 ballerstedt )  )  :arg1 place :manner ( standing :mod overall )  )  :time late
reach :arg0 ( and :op1 ( thing :name ( name :op1 warthmann )  )  )  :arg1 ( line :arg1-of finish )  :arg2 ( take :arg0 ( person :name ( name :op1 hermann )  )  :arg1 ( third :mod joint )  :manner ( standing :mod overall )  )  :time then :time simultaneous
race :arg1 lady :arg1-of ( achieve :arg0 ( fast :degree most :mod-of time )  :arg1-of ( race :arg0 main )  )
thing :name ( name :op1 binzwangen )  :source-of ( person :name ( name :op1 areane :op2 blersch )  :poss-of ( place :poss ( person :name ( name :op1 natascha :op2 werner )  :op1-of ahead :source ( country :name ( name :op1 stuttgart )  )  )  )  )
and :compared-to-of ( satisfy :arg1 ( and :op1 athlet :op2 assistant )  :arg1-of seem :degree very )  :op1 smooth :op2 ( organize :arg1 ( run :arg1 event )  :mod well )
trek :arg1 ( provide :arg1 ( care :arg1-of free :mod medicine )  :arg2 ( and :op1 mud :op2 river :op3 jungle )  )
bring :arg0 ( person :mod dr. :name ( name :op1 georges :op2 bwelle )  )  :arg1 ( care :arg1 health :arg1-of free )  :arg2 ( village :location ( country :name ( name :op1 cameroon )  )  :mod rural )
spend :arg0 and :arg1 ( weekend :frequency ( every :mod almost )  )  :purpose ( see :arg0 ( person :arg1-of ( have-rel-role :arg0 person :arg2 patient )  :name ( name :op1 bwelle )  :poss-of team )  :arg1 hundred )
and :mod just :op1 ( doctor :mod-of ( many :polarity - )  )  :op2 west :op3 country :op4 ( person :arg1-of every )
or :op1 ( cast :arg1 vote :location here )  :op2 ( device :arg1-of mobile )
thing :mod ( top :quant 10 )  :name ( name :op1 cnn :op2 heroes )  :topic ( dr. :mod-of ( person :name ( name :op1 georges :op2 bwelle )  )  :poss-of ( date-entity :year 2013 )  )
possible :arg0 ( hero :mod other :mod any )  :arg1 ( vote :arg0 you :arg1 or :arg2 10 :purpose ( thing :name ( name :op1 cnn :op2 hero )  :time year )  )  :arg2 top
receive :arg0 ( person :arg0-of ( continue :arg1 ( work :mod extraordinary )  )  :mod that )
ill :arg0 ( he :arg0-of help :arg0-of ( travel :arg1 consciousness :arg1-of ( equip :arg0 hospital :polarity - )  )  :arg0-of ( slip :arg1 and )  :arg1-of ( have-rel-role :arg0 person :arg2 father )  )  :arg1 ( watch :arg1 ( 21 :quant-of ( temporal-quantity :unit year )  )  )
injure :arg1 ( person :name ( name :op1 jamef )  )  :arg2 ( near :arg1 capital :mod car :mod accident )  :time ( date-entity :year 1981 )
contrast :arg2 ( develop :arg1 brain :op1-of ( and :op2 ( spread :arg1 ( infect :arg1-of ( break :mod-of ( arm :arg0-of ( create :arg1 ( hematoma :arg0-of ( affect :arg1 ( rest :part-of life )  )  )  )  :arg1-of ( suffer :arg0 he )  :mod only )  )  )  )  )  )
say :arg0 ( person :mod ( country :name ( name :op1 &quot; )  )  :name ( name :op1 &quot; )  )  :arg1 ( neurosurgeon :polarity - )  :condition there
take :arg0 we :arg1 ( we :poss-of money )  :time ( country :name ( name :op1 cameroon )  )
and :arg1-of ( have-rel-role :arg0 ( person :arg1-of ( escort :arg0 ( person :arg0-of ( spend :arg1 ( temporal-quantity :unit year )  :arg1-of instead-of )  :arg0-of ( treat :arg1 they :arg1-of possible :mod whatever )  :name ( name :op1 bwelle )  )  )  )  :arg2 father )  :op1 ( clinic :mod overcrowd )  :op2 hospital
say :arg0 bwelle :arg1 ' :arg1-of ( easy :arg0 it :polarity - )
possible :arg1 ( and :op1 ( leave :arg0 ( you :arg0-of ( run :arg1 - :arg2 hospital )  )  :arg1 home :arg2 you :time ( a.m. :quant 5 )  )  )
patient :arg2-of ( have-rel-role :arg0 ( person :quant lot )  )
possible :arg1 ( die :arg1 ( person :mod some )  :arg1-of ( cause :arg0 ( they :arg1-of wait )  )  )
pass :arg0 ( person :arg0-of ( have-rel-role :arg2 father )  )  :arg1 ( situation :arg1-of ( change :polarity - :time since )  )  :time ( away :mod much )  :time ( date-entity :year 2002 )
say :arg0 ( organization :name ( name :op1 world :op2 health :op3 organization )  :wiki world_health_organization )  :arg1 ( every :mod-of ( person :beneficiary-of ( doctor :mod only )  :mod ( country :name ( name :op1 cameroon )  )  )  )
ratio :poss ( country :name ( name :op1 united :op2 states )  :poss-of ( doctor :name-of ( person :arg0-of ( compare :arg1 sake )  :quant every )  )  :wiki united_states )
and :op1 even :op2 ( see :arg0 they :arg1 physician :arg1-of possible :location many )  :op3 ( possible :arg1 ( afford :arg1 it )  :polarity - )
and :op1 2 :op2 5 :op3 country :op4 ( live :arg0 person :arg1 3 :op1-of below )  :op5 poverty :op6 ( line :arg0-of ( care :arg1 ( spend :arg1 ( private :arg1 quarter )  )  :mod ( health :mod country )  )  )  :op7 nearly
say :arg0 ( person :name ( name :op1 &quot; )  )  :arg1 ( poverty :poss they )  :time ( problem :mod only )
possible :arg1 ( enjoy :arg0 they :arg1 life )  :op2-of ( and :op1 poverty )  :polarity -
and :op1 ( see :arg1 ( person :arg0-of ( have-rel-role :arg2 father )  )  )  :op2 ( determined :arg0 ( person :name ( name :op1 bwelle )  )  :arg1 ( do :arg0-of ( suffer :arg1 ( countryman :quant many )  )  :arg1 something :arg0 person )  )
and :op1 ( person :arg0-of ( perform :arg1 ( surgeri :arg1-of free )  )  :mod dr. :name ( name :op1 georges :op2 bwelle )  :poss-of ( team :consist-of ( person :arg0-of ( volunteer :arg1 ( year :mod ( past :op1 700 )  )  )  )  )  )
become :arg0 ( hospital :wiki - )  :arg1 ( he :arg0-of ( work :arg1 surgeon :location vascular )  )  :arg2 doctor
travel :arg1 ( organization :name ( name :op1 ascovime )  )  :arg2 ( area :mod rural )  :purpose ( provide :arg0 weekend :arg1 ( care :arg1 ( and :op1 ( start :arg0 he :arg1 nonprofit )  )  :arg1-of free :mod medicine )  )
help :arg0 he :arg2 ( person :quant nearly )  :op2-of ( and :op1 ( group :consist-of ( person :arg0-of volunteer )  )  )  :time ( since :op1 ( date-entity :year 2008 )  )
and :arg1-of ( supply :arg0 friday :arg2 roof :mod medicine )  :location ( across :op1 ( terrain :arg1-of ( rough :arg0 ( every :mod almost )  )  )  )  :op1 ( jam :arg0 ( he :op1-of and )  :arg1 van )  :op2 tie :op3 ( travel :arg1 need :purpose ( visit :arg0 ( person :quant 30 )  :arg1 village )  )
luck :arg1-of ( hold :polarity - :time always )
push :arg0 they :arg1 vehicle :op1-of ( and :op2 river :op3 mud :op4 more :op5 once )
contrast :arg1 ( arrive :arg0 they )  :arg2 ( and :op1 ( sing :arg1-of feast :arg1-of welcome :time-of ( true :mod-of hero )  :time-of ( offer :arg1 accommodation :arg1-of possible )  :time-of and :time-of ( receive :arg0 they )  :time-of ( good :degree most )  :time-of ( dance :arg2 community )  )  )
cause :arg0 ( care :arg1 ( and :op1 ( smile :arg1 ( village :mod this )  :mod big )  :op2 ( energy :arg1-of ( bound :polarity - )  )  )  :arg1-of free :mod medicine )  :arg1 celebrate :op1-of ( and :op2 ( person :arg0-of ( join :arg1 fun :domain-of ( happy :quant more )  )  :name ( name :op1 bwelle )  )  )
begin :arg1 ( meet :arg0 team :arg1 ( hundred :poss ( person :arg0-of ( have-rel-role :arg2 patient )  )  )  )  :time ( morning :mod next )
say :arg0 ( person :arg1-of ( trip :arg0 person )  :name ( name :op1 &quot; )  )  :arg1 ( each :arg1-of ( receive :arg0 we :arg2 500 )  )
and :op1 ( come :arg0 they )  :op2 village :op3 ( come :arg0 ( 60 :quant-of ( distance-quantity :unit kilometer )  )  :arg1 they )  :op4 ( foot :op1-of around )
provide :arg0 ( clinic :mod weekend :mod this :mod each )  :arg1 ( variety :mod-of ( care :mod medicine )  )
and :arg2-of ( treat :arg1 ( person :quant many )  :purpose malaria )  :op1 tuberculosi :op2 malnutrition :op3 diabetes :op4 parasite :op5 ( disease :arg1-of ( transmit :time sexual )  )
contrast :arg1 school :arg2 ( require :arg0 ( ' :mod that )  :arg2-of ( free :arg1 documentation :arg1-of ( donate :arg0 of )  :arg1-of ( afford :arg0 ( family :arg0-of ( impoverish :arg2 ( simple :mod-of ca )  :mod ( many :mod that )  )  )  :polarity - )  :arg1-of receive :arg1-of ( possible :mod other )  :arg1-of ( pair :arg0 crutch )  :arg1-of ( birth :arg0 certificate )  :op2-of ( or :op1 eyeglass )  )  )
do :arg0 team :arg1 ( surgeri :arg1-of simple )  :arg3 ( anesthesia :arg1-of local )  :time evening
and :op1 ( walk :arg0 ( person :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( do :arg1 operation :arg2 ( or :op1 schoolhouse :op2 ( hall :mod town )  :op3 home )  :mod usual )  :mod next )  :arg2 patient )  )  :arg1 way :arg4 ( area :arg1-of recover )  :op1-of ( and :time ( after :op1 procedure )  )  )
and :arg1-of ( operate :arg0 ( group :arg1-of ( light :arg0 generator )  )  )  :arg1-of ( sanitize :arg0 room )  :op1 equipment :op2 ( person :arg0-of ( volunteer :arg1 he )  :arg0-of ( work :arg1 ( early :time-of morning :time-of ( temporal-quantity :unit hour )  )  :location sunday )  :op1-of and )
contrast :arg1 ( pace :arg0 ( team :arg0-of ( motivate :arg1 ( keep :arg0 it :arg1 village :manner-of ( help :arg0 musician :arg1 usual )  )  )  )  :arg1 backbreak )
say :arg0 ( person :name ( name :op1 &quot; )  )  :arg1 ( and :op1 ( continue :arg1 ( work :arg0 we )  :arg1-of ( beat :arg0 ( they :arg0-of ( drum :arg1 all )  )  )  :arg1-of ( keep :arg0 night )  :arg1-of awake )  )
contrast :arg1 ( tire :arg1 ( team :arg0-of ( head :arg1 sunday :arg2 city :location back )  )  :arg2 ( work :compared-to-of proud )  )
and :arg1-of ( mix :arg0 ( year :mod past )  :op1-of ( and :op2 ( person :arg0-of study :mod medicine :mod foreign )  :op3 ( perform :arg0 group :arg1 ( surgeri :arg1-of free )  )  :op4 ( know :arg0 ( they :poss-of ( help :arg0 ( thing :name ( name :op1 cameroonian )  )  :arg0-of ( differ :mod-of world )  )  )  :arg1 ( possible :arg1 ( help :arg1 700 )  )  )  )  )  :op1 doctor
receive :arg0 ( he :arg1-of surgery :arg2-of ( free :arg1 hernia :arg1-of ( explain :arg0 man )  :arg3 1 :mod that )  )  :arg1 ( work :arg1 again :arg1-of allow )
say :arg0 man :arg1 family :condition ( change :arg0 this :arg1 i :arg2 i )  :time future
and :manner hospital :op1 ( hold :arg1 ( clinic :mod this )  :arg2 addition )  :op2 ( work :arg0 ( country :name ( name :op1 yaounde )  :op1-of ( around :location-of ( clinic :arg1-of private :mod medicine )  )  )  :arg1 weekend :arg2 surgeon )  :op3 ( person :arg0-of ( work :arg1 ( temporal-quantity :unit night )  :mod also )  :name ( name :op1 bwelle )  )
say :arg0 ( he :arg0-of ( donate :arg1 ( private :arg0 ( rest :arg0-of ( cover :arg1 percentage-entity )  :op2-of ( and :op1 nonprofit )  )  :arg1 60 )  )  :poss-of fund :poss-of about :poss-of ( job :poss it )  )  :arg1 this
say :arg0 ( he :arg0-of ( sleep :arg1 medicine :arg2 malley )  :arg1-of ( sure :arg0 i :polarity - )  )  :arg1 katie :arg2 ( person :name ( name :op1 o'reilly )  :op1-of ( and :op2 ( person :arg0-of ( study :arg1 drexel )  )  :op3 ( city :name ( name :op1 philadelphia )  :wiki philadelphia )  :op4 ( volunteer :arg0 year :arg1 group :arg2 bwelle )  )  :wiki bill_o'reilly_[political_commentator] )
cause :arg0 ( try :arg0 he :arg1 organization :op2-of ( or :op1 hospital )  )  :arg1 ( go :arg0 ( he :arg1-of ( campaign :arg0 either :mod this )  )  :arg1 always :arg1-of possible :time-of money )
and :op1 ( nurse :arg0 ( he :arg0-of ( join :arg1 it :op2-of ( and :location ( country :name ( name :op1 united :op2 states )  :wiki united_states )  :op1 ( continent :name ( name :op1 europe )  :wiki europe )  :op3 hand :op4 opportunity :op5 ( get :arg1 they :location home )  )  )  :poss-of mission )  )  :op2 ( person :arg0-of ( study :arg1 medicine )  )  :op3 such :op4 ( person :arg1-of come :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )
say :arg0 ( person :arg2-of ( help :arg0 ( we :arg0-of blot )  :arg1 ( or :arg1-of possible :op1 ( away :mod blood )  :op2 ( hold :arg0 ( we :arg0-of ( scrub :arg1 surgeri )  )  :arg1 bwelle :arg2 dr. :op1-of tool )  )  )  :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )  :arg1 malley
something :arg1-of ( do :arg0 ( you :arg0-of ( get :arg1 ( person :arg0-of ( study :arg1 medicine )  :quant-of ( temporal-quantity :unit year )  )  :arg3 ever )  )  :arg2 ( country :name ( name :op1 america )  :wiki united_states )  :arg3 - )  :domain that
donate :arg1 ( supply :arg0-of ( arrive :frequency often :purpose-of ( pay :arg0 ( person :arg0-of volunteer :arg2-of ( study :arg0 person )  :poss-of way )  :mod usual :purpose ( country :name ( name :op1 cameroon )  )  )  )  :mod medicine )
contrast :arg2 ( and :arg1-of ( cover :arg0 ( person :name ( name :op1 bwelle )  )  :time ( once :op1 ( arrive :arg1 ( they :arg1-of transport )  :arg4 ( country :name ( name :op1 yaounde )  )  )  )  )  :op1 board :op2 instruction )
say :arg0 ( he :arg0-of ( doubt :arg1 malley :arg2 ( person :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )  )  )  :arg1 ( hero :mod ' )
and :op1 ( give :arg0 he :arg1 life :arg2 ( organization :mod this )  )  :op2 ( desire :arg1 ( help :arg2 person )  )  :op3 ever
hardship :arg1-of ( work :arg0 constant :arg1-of near )  :polarity -
fulfill :arg0 ( something :arg0-of ( bring :arg1 ( joy :mod great )  )  )  :arg1 ( promise :arg0 ( he :arg0-of ( help :arg1 ( other :arg0-of ( live :arg1 happy )  :arg0-of live )  )  :arg1-of ( have-rel-role :arg0 person :arg2 father )  )  )
say :arg0 ( person :name ( name :op1 &quot; )  )  :arg1 ( happy :arg1-of ( cause :arg0 i )  )  :arg1-of ( work :arg0 ( i :arg0-of ( do :arg1 this )  )  )
think :arg0 ( i :arg1-of ( have-rel-role :arg0 person :arg2 father )  )  :op1-of and
hope :arg0 i :arg1 ( see :arg1 ( do :arg0 i :arg1 he )  :arg0 i )
the :arg1-of ( reduce :arg0 ( person :arg0-of ( laugh :arg1 ' :arg2 ( i :arg0-of ( do :arg1 this )  )  :purpose-of make )  )  :arg2 ( pain :arg1 that :arg2 why )  )
check-out :arg1 ( website :poss ( organization :name ( name :op1 ascovime )  )  )  :op1-of ( and :op2 ( see :arg1 help )  )
master :arg1 struggle :arg2 perfection
and :arg1-of ( suit :arg0 ( of :quant-of role )  :arg1-of perfect :arg2 horst )  :op1 ( man :mod old :poss-of novel )  :op2 ( man :mod old )  :op3 sea
profession :arg4-of ( come :arg1 ( person :arg0-of ( act :arg1 old :mod-of art )  :domain-of hand :name ( name :op1 janson )  )  )
good :degree most :time ( there :arg1-of ( fish :arg4-of ( come :arg0 ( man :mod old )  :arg1 ( person :name ( name :op1 santiago )  )  )  )  )
complement :arg0 ( superbly :degree another )  :arg1 pair :arg2 such
think :arg0 you :arg1 ( see :arg0 you :arg1 neck :arg1-of ( fold :arg0 ( man :arg0-of ( speak :arg1 ( fisherman :op1-of young )  )  :mod old )  )  :arg1-of possible )  :op1-of almost
tire :arg0 life :arg1 ( chair :arg1-of ( arch :arg0 ( person :arg1-of sit :name ( name :op1 santiago )  )  )  :mod-of ( emotion :domain this )  :mod-of ( person :name ( name :op1 janson )  )  )  :arg2 genuine
and :op1 furthermore :op2 ( person :domain-of ( old :mod-of excellently :mod-of ( fisherman :poss-of ( role :domain-of ( role :mod character )  )  )  )  :name ( name :op1 janson )  :poss-of master )
result :arg1 ( and :arg1-of strong :op1 ( knowledge :poss ( he :arg0-of ( battle :arg1 fish :op1-of against )  :arg2-of ( give :arg1 ( and :op1 courage :op2 man :op3 ( win :arg0 ( person :arg0-of ( tell :arg1 ( story :arg0-of ( fight :arg1 of )  )  )  :name ( name :op1 hemingway )  )  :mod ultimate )  )  :polarity - )  )  )  )
perform :arg0 ( person :domain ( person :arg0-of ( long :arg1 period )  :name ( name :op1 janson )  )  :mod only )  :arg1 stage
result :arg1 ( attend :arg0 ( moment :mod just :mod even )  :arg1 audience :arg1-of ( focus :arg0 ( he :arg1-of manage )  )  :arg1-of bore :arg1-of ( become :arg0 monologu :arg2 - )  )
question :arg1 ( sea :arg0-of ( illuminate :arg1 water :arg2 blue )  :arg1-of ( consist :arg0 ( person :arg0-of ( forget :domain-of ( genuine :domain ( effort :poss he :purpose ( pull-out :arg0 fish :arg2 ( surface :quant-of water )  :time final )  )  )  )  :arg0-of ( have-org-role :arg1 audience :arg2 member )  )  :arg2 ( volume-quantity :unit bottle )  :mod mere )  )
front :manner-of ( perform :arg1 ( boat :location-of ( man :mod old )  )  :arg1-of ( have-org-role :arg0 ( person :name ( name :op1 jens :op2 hasselmann )  )  :arg2 director )  )  :poss ( country :name ( name :op1 fischerdorf )  )
bar :arg0 ( he :arg0-of ( activity :arg1 respective )  :arg0-of ( illuminate :arg1 scene )  :arg1-of perform )  :arg1 ( and :op1 ( person :arg0-of ( sing :arg1 song :arg1-of ( beautiful :arg0 ( country :name ( name :op1 cuba )  :wiki cuba )  :op1-of ( and :op2 voice )  )  :time-of lifestyle )  :arg0-of ( sing :arg1 cabin )  )  )
accompany :arg0 musician :arg1 ( rhythm :mod ( country :name ( name :op1 cuba )  :wiki cuba )  :poss-of ( time :arg1-of ( same :arg0 4 )  )  )  :op1-of ( and :arg1-of bar :op2 guest )
descent :mod-of tourism
preserve :arg1 ( metr :quant ( around :prep-at-of ( measure :arg1 ( sewage :mod-of ( channel :source ( thing :name ( name :op1 roman :op2 times )  )  )  )  )  :quant-of length )  :quant 120 )  :time ( beneath :op1 ( country :name ( name :op1 cologne )  )  )
possible :arg1 ( miss :arg0 ( country :name ( name :op1 cologne )  )  :arg1 cathedral )  :arg1-of ( visit :arg0 anyone )  :polarity -
metr :arg0-of ( build :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :arg2-of ( make :arg0 it :mod ( heaven :mod ( into :arg1-of extend )  )  )  :mod church :mod ( tall :degree most )  )  :op2-of ( around :op1 ( measure :arg0 ( tower :mod 2 )  )  )
realize :arg0 ( person :arg0-of ( marvel :arg1 ( tower :mod ornate :part-of church :quant 2 )  )  :arg0-of visit :arg0-of ( discover :arg1 cathedral :arg2 beneath :domain-of much )  :quant ( few :mod only )  )
underworld :arg4-of ( come :arg1 ( person :domain-of ( person :arg1-of expert )  :name ( name :op1 rainer :op2 schulze )  )  )  :mod ( country :name ( name :op1 cologne )  )
meet :mod-of ( point :arg0-of ( tour :arg0-of ( right :arg1 cathedral )  )  :domain-of ( organization :name ( name :op1 cologne :op2 tourism :op3 service :op4 centre )  )  )
say :arg0 ( we :arg0-of ( begin :arg1 underground :arg2-of ( mean :arg1 fashion :mod ( unspectacular :mod somewhat )  )  )  :arg1-of ( begin :arg1-of tour )  )  :arg1 ( park :mod car )
and :op1 ( want :arg0 ( father :arg2-of ( have-rel-role :arg0 ( city :mod-of ( wall :part ( section :arg1-of ( remain :arg0 1970 )  :mod only )  )  )  :arg1 city :mod old )  )  :arg1 ( city :arg1-of ( friendly :arg0 ( too :degree-of ( tall :polarity - )  )  :arg2 car )  )  )
hurry :arg1 ( past :op1 ( relic :mod ( religious-group :name ( name :op1 roman :op2 catholic )  :wiki catholic_church )  )  )  :op1-of ( and :op2 ( drop :arg0 ( majority :quant-of ( user :poss ( garage :arg1-of park )  )  )  :arg1 car :mod simple )  )  :time now
discover :arg0 ( anyone :arg0-of ( take :arg1 ( look :arg1 ( d :arg1-of park :mod level )  :arg3 2 :mod close )  )  :arg0-of ( cordon :arg1 ( railing :consist-of metal )  )  )  :arg1 ( site :mod archaeological )
palm :arg0 5 :arg1 hand :arg1-of ( discover :arg2-of ( wait :arg1 ( ruin :arg1 ( metr :mod tall )  :arg1-of measure )  )  )  :poss-of ( size :op1-of ( around :location-of stone )  )
explain :arg0 ( organization :mod first :name ( name :op1 &quot; )  )  :arg1 ( person :name ( name :op1 &quot; )  )  :arg1-of ( build :arg0 ( of :mod ( remnant :mod this )  )  :arg2 half :duration ( temporal-quantity :unit century )  :location ( city :location-of ( religious-group :name ( name :op1 roman :op2 catholic )  :wiki catholic_church )  :location-of wall )  )
park :arg1 ( return :arg1 ( person :arg0-of ( take :arg1 glance :arg3 ( shaft :arg1-of dark :mod ( metre :quant 15 )  )  )  :arg1-of ( participate :arg0 person )  :name ( name :op1 schulze )  )  :arg4 daylight :op1-of before )  :mod upper :mod-of level
notice :arg1 ( well :domain this :poss ( cathedral :mod old )  )  :arg3 ( temporal-quantity :unit ( day :mod this :mod all )  )  :degree bare
praetorium :arg1-of ( descend :arg0 ( person :arg0-of ( tour :arg1-of stop )  :arg0-of ( participate :arg1 next )  )  :arg2 depth :mod ( again :mod once )  )
alp :op1 ( reside :arg0 ( man :arg1-of ( powerful :degree most )  :mod once )  :arg1 ( organization :name ( name :op1 praetor :op2 of :op3 the :op4 ccaa )  )  :arg1-of ( find :arg0 we :arg2 north :location here )  )
want :arg0 ( person :arg0-of visit :quant 1 )  :arg1 ( know :arg1 ( mean :arg1 ( organization :name ( name :op1 ccaa )  )  )  :arg0 person )
and :op1 ( abbreviation :mod-of stand )  :op2 ( person :arg0-of ( have-org-role :arg1 ( thing :name ( name :op1 &quot; )  )  :arg2 emperor :arg2-of ( found :arg0 ( thing :name ( name :op1 &quot; )  )  :arg1 ( person :arg0-of ( site :arg1 altar )  :name ( name :op1 &quot; )  )  )  )  :mod colonia :name ( name :op1 &quot; )  )  :op3 ( amount :mod basic )  :op4 ( country :name ( name :op1 &quot; )  :op1-of under )  :op5 ( religious-group :name ( name :op1 roman :op2 catholic )  :wiki catholic_church )  :op6 law :op7 of
refer :arg1 former :op1-of ( and :example ( and :op1 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 roman :op2 empire )  :wiki roman_empire )  :arg2 governor )  )  :op2 palace :op3 centre-left :op4 power :op5 rhine )  )
lead :arg0 tunnel :arg1 ( sew :arg1 ( exhibit :arg0 vestibule )  :arg1-of preserve :mod ( religious-group :name ( name :op1 roman :op2 catholic )  :wiki catholic_church )  )  :arg2 ( measure :arg1 ( around :quant-of length :quant-of ( metr :quant 120 )  )  )
say :arg0 ( you :arg0-of ( want :arg0-of ( encourage :arg1 guest )  :arg0-of ( cause :arg1 ( call :arg0 of :arg1 cloaca :arg2 maximum )  )  :arg1 ( take :arg0 ( you :arg0-of ( stroll :arg1 along )  )  :arg1 peaceful :arg1-of possible :arg2 section )  )  )  :arg1 schulze
surprise :arg0 ( person :name ( name :op1 schulze )  )  :degree more
lead :arg0 ( he :arg0-of ( collect :arg2 ( desk :mod information )  )  :arg0-of ( key :arg1 ( access :arg1 ( shaft :mod ( metre :quant 16 )  )  )  )  )  :arg1 group :time once
explain :arg0 we :arg1 ( thing :name ( name :op1 &quot; )  :time now )  :arg1-of ( bathe :arg0 ( ritual :mod-of ( religious-group :name ( name :op1 jew )  :wiki jews )  )  :arg2 he )
ritual :arg1-of ( wash :purpose-of ( essential :mod-of ( groundwat :arg1-of ( reach :arg0 ( congregation :arg0-of ( bathe :arg1-of ( build :arg1-of deep :arg2 ground )  )  :mod ( religious-group :name ( name :op1 jew )  :wiki jews )  )  )  )  )  )
cause :arg0 ( level :arg1-of ( vary :arg0 ( eighth :mod-of ( century :unit-of temporal-quantity )  )  )  :poss ( country :name ( name :op1 rhine )  :poss-of water )  )  :arg1 ( level :arg1-of ( read :arg1-of possible :arg2 ( day :mod this )  :time ( end :arg1 ( thing :arg1-of ( trace :arg0 origin :direction back )  :name ( name :op1 mikwe )  )  :arg1-of low )  )  :arg1-of differ )
begin :arg0 ( organization :arg1-of ( form :arg0 ( thing :name ( name :op1 mikwe )  )  )  :mod-of ( area :mod archaeological )  :name ( name :op1 town :op2 hall :op3 square )  )  :arg1 ( work :arg1 ( construct :arg1 short )  )
before :op1 ( complete :compared-to-of ( temporal-quantity :op1-of few :unit year )  )
leg :arg1-of ( hack :arg2-of ( retrial :arg1 rock )  :mod almost )
investigate :arg0 bloody :arg1 4 :arg1-of ( rock :arg0 ( within :arg1-of attack )  :arg2 scene )  :arg2 more :duration ( temporal-quantity :unit year )  :time after
begin :arg1 ( 2 :era 30 )  :time ( before :op1 ( court :arg0-of ( bring :arg1 ( harm :arg1 bodily :mod grievou )  :op3-of ( and :op1 ( murder :arg1 year :arg1-of ( attempt :arg0 old )  :purpose-of proceeding )  :op2 ( damage :arg1 material )  )  )  :mod ( thing :name ( name :op1 frankfurt :op2 district )  )  )  )
accompany :arg0 ( precaution :mod ( security :mod strict )  )  :arg1 they
remain :arg1 accuse :arg3 silent :time initial
say :arg0 ( they :arg0-of ( belong :arg1 time )  )  :arg1 ( and :op1 ( activity :arg1 ( scene :arg1-of rock )  )  )
accuse :arg0 ( person :arg0-of ( know :arg1 accomplice :polarity - )  :arg0-of prosecute :arg1-of ( public :arg0 together )  )  :arg1 ( country :location-of car :name ( name :op1 finowfurt )  )  :arg2 ( stab :op1-of ( and :op2 ( beat-up :arg1 ( man :quant 3 )  )  )  )
injure :arg1 ( victim :quant all )  :condition ( lose :arg0 man :arg1 leg :mod almost )  :degree serious
say :arg0 victim :arg1 ( compete :arg0 gang :arg1 ( angel :mod-of hell )  :arg1-of belong )
say :arg1 ( have-org-role :arg1 ( city :name ( name :op1 berlin )  :wiki berlin )  :arg1-of ( rank :arg0 1 :arg1-of high )  :arg2 member )
seem :arg1 ( precede :arg0 ( car :arg2-of ( involve :arg1 ( car :quant several )  :arg1-of chase )  )  :arg1 attack )  :arg2 it
say :arg0 accuse :arg1 ( and :op1 ( represent :arg1 ( demonstrate :arg1 this :arg2 ( power :mod-of ( war :mod turf )  )  )  )  )
acquit :arg1 ( accuse :quant 2 )  :location ( trial :mod initial )  :time ( begin :arg1 ( date-entity :year 2012 )  )
say :arg0 ( person :arg0-of ( speak :arg2 court )  )  :arg1 ( possible :arg1 ( prove :arg1 ( involve :arg1 man :arg2 ( feud :mod bloody )  :mod actual )  :polarity - )  )  :time time
and :op1 ( recognize :arg0 ( person :arg0-of assail :arg1-of ( mask :arg2 ( thing :arg1-of wear )  )  )  :polarity - )
appeal :arg0 ( government-organization :arg0-of ( follow :arg1 verdict )  :arg0-of ( repeal :arg1 federal )  :name ( name :op1 supreme :op2 court )  :wiki supreme_court_of_new_south_wales )  :arg1 ( district :arg1-of case :arg1-of ( prosecute :arg1-of public :op1-of ( and :op2 office :op3 ( refer :arg1 back )  )  )  :mod-of court )
serve :arg1 time :arg2 ( prison :arg1-of ( open :arg1-of ( accuse :quant 1 )  )  :location ( account :mod ( offence :mod another )  )  )  :time current
involve :arg0 proceeding :arg1 ( reconstruct :arg1 ( series :quant-of ( event :time ( night :mod crime )  )  )  :mod initial )  :mod main
invite :arg1 ( person :arg0-of ( inspect :arg1 police )  :arg0-of ( responsible :time time )  )  :arg2 ( person :arg0-of witness )
and :op1 accuse :op2 ( party :arg1-of ( intercept :arg0 police )  :mod ( central :mod-of ( point :mod ( focus :arg0 ( phone :arg1-of mobile :mod-of conversation )  )  )  )  )
say :arg1 ( nothing :mod absolute )  :time ( before :op1 court :time-of ( appear :arg1 ( make :arg0 amr-unknown :arg1 ( difficult :domain thing )  )  :arg1-of ( consider :arg0 they :arg1-of ( observe :arg0 rocker :time ( always :mod almost )  )  :arg2 ( silence :arg1-of complete )  )  )  )
apply :arg1 this :mod also :time ( case :arg1 victim )
speak :arg0 victim :arg1 only :time trial
say :arg0 ( ask :arg1 prosecute :arg1-of public )  :arg1 ( prosecute :arg1-of public )  :arg1-of ( evidence :arg0 new :arg2-of ( come :arg1 previous )  :arg2-of ( light :arg1 since )  )
schedule :arg1 ( temporal-quantity :duration-of proceeding :op1-of eleven :unit ( day :mod further )  )  :purpose trial
think :arg0 ( society :mod throwaway )  :polarity -
contrast :arg0 music :arg1 ( long :arg0 atmosphere :arg1 ( night :domain-of loud )  )  :arg2 ( and :op1 good )  :purpose ( go :arg0 everyone :arg1 ( point :mod some )  :arg4 home )
and :arg1-of stomach :op1 passenger :op2 ( seat :mod back )  :op3 ( strike :arg2 hunger :time except )
possible :arg0 down :arg1 ( or :op1 ( cocktail :mod odd )  :op2 glass :op3 bubbly )  :arg2 this
possible :arg1 ( natural :arg1 ( pull-out :arg1 through :arg2 ( drive :arg1 interrogative :mod next )  :manner casual :purpose ( pick :arg1 ( treat :mod little )  )  )  :degree more )  :arg1-of cause
possible :arg1 ( or :op1 ( pick :arg0 ( you :arg1-of ( case :arg0 ( morning :time early )  )  :compared-to-of right )  :arg1 ( food :mod fast :quant some )  :arg2-of ( come :arg0 ( admit :arg0 i )  :arg1 i )  :time ( late :op1 night )  )  )
and :arg2-of ( straight :arg0 then :arg1 home :op4-of ( and :op1 ( chip :quant few )  :op2 coke :op3 burg )  )  :op1 bed
and :op1 ( i :arg1-of ( differ :arg1-of ( become :arg2 evident )  :arg1-of clear :domain-of ( way :mod-of home )  )  )  :op2 ( clubber :arg1-of hunger :mod other )
window :arg2-of ( throw :arg0 ( person :arg2-of ( wrong :arg1 amr-unknown :mode interrogative )  )  :arg1 ( bag :location-of ( food :mod fast )  )  :arg1-of continue )  :mod car
possible :arg0 particular :arg1 ( find :arg1 ( bag :arg1-of ( discard :purpose-of ( park :arg1 car :arg2 weekend )  )  :mod paper )  :location ( and :op1 side :op2 road )  )
ask :arg0 i :arg1 why :mod this :mode interrogative
bin :arg1 rubbish :arg1-of ( near :degree most )  :arg2-of ( throw :arg1 interrogative :op2-of ( or :op1 ( take :arg0 ( person :arg1-of be :domain-of ( stupid :degree too )  )  :arg1 ( home :mod bag )  )  )  )
spoil :arg0 ( paper :mod waste )  :arg1 ( landscape :arg1 all )  :arg2 more :time after
cause :arg0 ( cover :arg1 ( facility :mod transport )  :manner-of ( see :arg1 ( bag :arg0-of ( crash :arg1 barrier )  :arg1 such )  :mod also )  )  :arg1 accident :time thus-far
mean :arg0 term :arg1 ( know :arg0 they :arg1 ( thing :arg1-of ( think :arg0 society :arg2-of ( call :arg0 throwaway :arg1 ( probable :polarity - )  )  )  :mod such :mod about )  :extent amr-unknown :mod even :polarity - )  :mod even
and :op1 often :op2 ( possible :arg1 ( look :arg0 you :arg1 ( seat :mod back )  :arg2 ( resemble :arg1 evening )  :time after )  :arg1-of ( know :arg0 you :time ( often :degree more )  )  :polarity - :purpose ( begin :arg0 ( and :op1 ( person :location car :quant several )  :op2 ( clothes :mod night )  :op3 ( volume-quantity :unit bottle )  :op4 ( rubbish :mod other )  )  :arg1 pile )  )
contrast :arg2 ( want :arg0 1 :arg0-of ( trample :arg2 ( other :mod-of ( people :poss food )  :poss-of leftover )  )  :arg1 street :concession-of ( differ :arg0 ( bag :mod-of few )  :arg1 much :arg2 there :mod of )  :polarity - :polarity - )
and :arg1-of ( feed-up :arg0 ( i :arg0-of ( operate :arg1 ( chain :arg1 ( food :mod fast )  )  :arg2 ( bag :purpose-of ( scheme :arg0-of deposit )  )  )  :arg0-of ( see :arg1 come :arg1-of possible :op1-of and :time day )  )  :arg2 ( clear :arg0 town )  )  :op1 municipality
care :arg1-of ( walk :arg0 ( person :mod-of health :name ( name :op1 obama )  :wiki barack_obama )  :arg2 back )
possible :arg1 ( walk :arg0 ( person :arg0-of ( have-org-role :arg1 ( criticize :arg0 ( he :arg0-of ( repeat :arg1 oft )  :arg0-of ( promise :arg1 unambiguou )  )  :arg1 firestorm )  :arg2 president )  :name ( name :op1 obama )  :wiki barack_obama )  :arg1 yesterday :time-of back :time-of ( plan :arg0 ( you :arg1-of resemble )  :arg1 it :time health )  )  :arg1-of ( keep :arg0 you )
thousand :arg0-of ( provide :arg2-of ( receive :arg0 hundred :arg1 ( notice :arg1 cancellation )  :arg1-of ( slam :arg0 ( person :arg0-of ( mislead :arg1 public )  :arg0-of ( have-org-role :arg2 president )  :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  :topic-of ( day :time recent :unit-of temporal-quantity )  )  )  )
tweak :arg0 ( person :arg0-of ( pledge :mod original )  :name ( name :op1 obama )  :wiki barack_obama )  :arg1 yesterday
say :arg0 ( he :arg0-of ( speak :arg1 ( city :name ( name :op1 boston )  :wiki boston )  )  :arg1-of ( keep :arg0 ( you :arg2-of ( work :arg0 vast :arg1 it :arg1-of ( insure :arg0 ( person :mod ( of :mod majority )  )  :op1-of health )  :mod that )  )  :arg1-of possible )  )  :arg1 amr-unknown
address :arg1 ( he :arg0-of ( call :arg1 ( person :arg0-of ( urge :arg1 ( person :arg0-of ( notice :arg1 shop )  :arg0-of ( receive :arg1 this )  :arg1-of ( cover :mod new )  :mod ( country :name ( name :op1 america )  :wiki united_states )  )  )  :name ( name :op1 obama )  :wiki barack_obama )  :arg2 news )  )
plan :arg0 comprehensive :arg1 ( health :arg1-of care )  :arg2 ( price :arg1-of same )  :manner ( good :quant-of ( or :arg1-of ( possible :arg2 ( person :quant most )  )  :arg1-of ( cheap :compared-to project :mod even )  )  )
say :arg0 ( he :arg2-of deal )  :arg1 ( get :arg0 you :arg1 good )
say :arg0 ( population :arg0-of ( force :arg1 ( switch :arg0 ( plan :arg0-of cause :arg0-of ( cover :arg1 meet :polarity - )  :arg1 ( act :arg1 care )  :time ( require :arg1 ( standard :mod new )  :op1-of under )  )  :arg1 affordable )  :arg1-of ( possible :arg1-of own )  )  :arg0-of ( purchase :arg1 of :arg1-of insure :time-of ( surprise :arg0 5 :arg1 that :arg2 percentage-entity :polarity - )  )  )  :arg1 ( recommend :arg1 it :arg1-of come )  :arg1-of administrate
say :arg0 ( i :arg1-of ( let :arg0 ( you :arg0-of ( deserve :arg1 good )  )  :arg2 ( person :arg0-of ( mean :arg1 ( city :name ( name :op1 washington )  :wiki washington,_d.c. )  :arg2 ( say :arg0 ( person :arg0-of ( testify :arg1 ( organization :name ( name :op1 &quot; )  )  )  :name ( name :op1 &quot; )  )  :arg1 before )  )  :arg1-of direct :mod ( country :name ( name :op1 america )  :wiki united_states )  )  )  )  :arg1 this
say :arg0 ( thing :arg0-of ( launch :arg1 miserably )  :arg1-of oversee :name ( name :op1 sebelius )  )  :arg1 ( go :arg0 ( person :arg0-of ( implement :arg1 of )  :name ( name :op1 sebelius )  )  :arg1 ( since :mod-of ( date-entity :month 10 )  )  :arg4 online :mod marketplace )
say :arg0 she :arg1 ( and :op1 ( frustrate :arg0 i :arg1 anyone )  :op2 angry )
eager :arg1 ( earn :arg0 i :arg1 ( confidence :direction back )  )
require :arg1 ( recommend :arg0 ( she :arg0-of ( enroll :arg1 ( exchange :arg1 ( person :name ( name :op1 billy )  :wiki billy_thorpe )  :arg1-of long :arg1-of ( hear :arg0 ( she :arg0-of ( catch :arg1 ( phrase :arg1-of exasperate :arg1-of utter :mod that )  )  )  :arg1-of follow :arg1-of ( have-org-role :arg0 ( person :arg0-of ( seat :arg1 behind )  :arg1-of hot )  :arg2 aide )  :arg1-of ( house :arg0 yesterday )  )  :arg1-of contentious )  )  :arg1-of over )  :arg1 wheth )
plan :arg0 ( government-organization :arg0-of govern :arg0-of ( sponsor :arg1 ( insure :arg1 ( purchase :arg0 ( person :arg0-of ( repeat :arg1 why :arg2 ( long :arg1 architect :arg1-of ( hear :arg2 ( into :quant-of ( temporal-quantity :quant 3 :unit hour )  )  )  :arg2 than )  )  :arg1-of ( press :arg0 more-than )  :name ( name :op1 more )  )  :arg1 ( she :arg0-of ( pitch :arg1 ( person :mod ( country :name ( name :op1 america )  :wiki united_states )  )  )  )  )  )  :arg1-of ( volunteer :arg2 of )  )  :arg1-of ( forgo :arg0 ( thing :name ( name :op1 more )  :polarity - )  )  )  :arg1 through :time now
fail :arg1 ( government-organization :arg0-of ( govern :arg1 airforce )  )  :arg2 ( confirm :arg0 ( city :name ( name :op1 jerusalem )  :wiki jerusalem )  :arg1 ( attack :arg1 ( base :mod ( country :name ( name :op1 syria )  :wiki syria )  )  )  )
state :arg0 ( person :arg0-of ( have-org-role :arg1 ( government-organization :arg0-of ( govern :arg1 ( country :mod-of ( town :name ( country :name ( name :op1 latakia )  )  )  :name ( name :op1 syria )  :wiki syria )  )  )  :arg2 official )  :arg0-of ( state :arg1 ( attack :arg0 ( plane :arg0-of fight :source ( country :name ( name :op1 israel )  :wiki israel )  )  :arg1 ( base :mod airforce )  :time before )  )  :arg1-of ( remain :arg1-of wish :arg3 anonymous )  )  :arg1 day :arg2 ( publication :arg0-of ( broadcast :arg1 news )  :name ( name :op1 cnn )  :wiki cnn )  :time thursday
say :arg0 ( political-party :mod ( country :name ( name :op1 lebanon )  :wiki lebanon )  :name ( name :op1 hezbollah )  :poss-of ( publication :name ( name :op1 cnn )  :wiki cnn )  :wiki hezbollah )  :arg1 ( intend :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 israel )  :wiki israel )  )  )  :arg1 ( and :arg1-of target :arg1-of relate :op1 missile :op2 equipment )  :arg1-of fear )
report :arg0 and :arg1 ( fire :arg1 ( base :location ( town :mod port :name ( country :name ( name :op1 latakia )  )  )  )  :arg2 wednesday :arg3 thursday :time night )  :op2-of ( and :op1 ( station :arg0-of ( broadcast :arg1 ( language :name ( name :op1 arabic )  :wiki arabic_language )  )  :name ( name :op1 al-arabiya )  :wiki al_arabiya )  :op3 ( identify :arg0 ( media :mod ( country :name ( name :op1 syria )  :wiki syria )  :mod ( country :name ( name :op1 lebanon )  :wiki lebanon )  )  :arg1 ( person :mod ( country :name ( name :op1 israel )  :wiki israel )  )  :arg2 ( party :arg0-of responsible )  )  )  :time previous
say :arg0 ( channel :arg1 2 )  :arg1 ( and :op1 ( range :arg1 3 :arg2 ( distance-quantity :quant 35 :unit kilometer )  )  :op2 ( possible :arg1 ( transport :arg0 ( image :arg1-of ( show :arg0 ( organization :arg0-of ( broadcast :arg1 television :mod ( country :name ( name :op1 israel )  :wiki israel )  )  :name ( name :op1 channel )  )  )  :mod satellite :topic ( base :arg0-of ( see :arg1 ( missile :arg0-of ( defend :arg1 ( person :mod ( country :name ( name :op1 russia )  :wiki russia )  :name ( name :op1 s-125 :op2 newa-type )  )  )  :op1-of ( and :op2 ( battery :quant-of ( missile :source ( country :name ( name :op1 sa )  :wiki south_africa )  )  )  )  )  :arg1-of possible )  :location ( country :name ( name :op1 latakia )  )  )  )  :arg1 ( warhead :arg0-of ( weigh :arg1 ( mass-quantity :quant 70 :unit kilogram )  )  )  )  )  )  :time 2
confirm :arg0 sure :arg1 ( attack :arg0 ( city :location-of ( government-organization :arg0-of govern )  :name ( name :op1 jerusalem )  :wiki jerusalem )  )  :mod official :polarity -
contrast :arg1 ( carry-out :arg0 ( country :name ( name :op1 israel )  :wiki israel )  :arg1 attack :arg1-of ( believe :arg0 he :arg1-of ( say :arg0 ( person :arg0-of ( have-org-role :arg1 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 israel )  :wiki israel )  )  )  :arg2 official )  :mod anonymous )  :arg1-of ( quote :arg0 ( organization :mod ( agency :mod press )  :name ( name :op1 reuters )  )  :mod also :arg2 person )  )  )  )  :arg2 ( sure :polarity - )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 israel )  :wiki israel )  :arg2 spokesperson )  :arg0-of ( comment :arg1 ( we :arg0-of ( report :arg1 this )  )  :polarity - )  :name ( name :op1 ministry :op2 of :op3 defence )  )  :arg1 ( case :arg1 any )  :arg1-of mean
succeed :arg0 ( person :arg0-of ( write :arg1 ( thing :name ( name :op1 ( yedioth :mod newspaper )  :op2 ahronoth )  )  )  :name ( name :name-of ( journalist :arg0-of ( deliver :arg1 ground :arg1-of ( attempt :arg0 ( regime :mod ( country :name ( name :op1 syria )  :wiki syria )  )  :medium ( case :mod some )  :time previous :time already )  :arg2 ( missile :destination air )  :arg4 ( political-party :name ( name :op1 hezbollah )  :wiki hezbollah )  )  )  :op1 ron :op2 ben-yishai )  )
respond :arg0 military :arg1 ( result :arg1 ( or :arg1-of ( attempt :arg0 ( government-organization :arg0-of ( repeat :arg1 ( warn :arg1 that :time previous )  )  :arg0-of ( govern :arg1 ( country :name ( name :op1 israel )  :wiki israel )  )  )  :mod any )  :arg1-of ( supply :arg0 ( country :name ( name :op1 syria )  :wiki syria )  )  :arg1-of ( cross :arg0 ( line :mod red )  )  :op1 ( political-party :name ( name :op1 hezbollah )  :poss-of chemical :wiki hezbollah )  :op2 ( other :mod-of weapon :mod-of dangerous )  )  )
say :arg0 ( person :arg0-of ( spy :arg1 ( far :arg1-of ( admit :arg0 ( precedent :polarity - )  )  :arg1-of ( reach :arg0 ( person :name ( name :op1 john )  :wiki - )  )  :mod-of inappropriately :mod-of too )  )  :name ( name :op1 kerry )  :wiki john_kerry )  :arg1 ( country :name ( name :op1 us )  :wiki united_states )
indicate :arg0 ( person :name ( name :op1 john )  :wiki - )  :arg1 ( person :arg0-of ( spy :arg1 ( far :arg1-of reach :arg1-of ( admit :arg0 ( precedent :polarity - )  )  :arg1-of ( occasion :arg0 ( country :arg0-of ( stand :arg1 ( program :arg1-of ( surveil :arg0 it )  )  :mod defensive )  :name ( name :op1 united :op2 states )  :wiki united_states )  :mod that )  :mod-of inappropriately :mod-of too )  )  :arg0-of ( soften :arg1 of )  :name ( name :op1 kerry )  :wiki john_kerry )
reveal :arg0 ( he :arg0-of ( pilot :arg1 automatic )  :arg0-of ( guilty :arg1 ( person :arg0-of ( have-org-role :arg1 of :arg2 secretary )  :name ( name :op1 barack :op2 obama )  :wiki barack_obama )  :arg2 along )  :arg0-of ( spy :arg1 ( activity :arg1 ( emerge :arg0 ( nsa :mod about )  :arg1 ( edward :mod whistleblow )  )  )  )  :arg2-of ( admit :arg0 state :mod also :mod that )  )  :arg1 incendiary
put :arg0 ( leak :arg1-of ( ally :accompanier-of ( storm :mod diplomacy )  )  )  :arg1 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 us )  :wiki united_states )  )  )  :arg2 centre-left
say :arg0 ( person :arg0-of ( speak :arg1 ( difficult :degree very :domain back :mod-of ( temporal-quantity :unit year )  :op1-of ( and :op2 ( war :name ( name :op1 cold :op2 war )  :wiki cold_war )  :op3 then :op4 ( event :mod-of 11 :name ( name :op1 9/11 )  :wiki september_11_attacks )  )  :op2-of ( and :op1 ( war :mod-of 2 )  )  )  )  :arg0-of ( have-org-role :arg1 ( government-organization :arg0-of govern :arg0-of ( pilot :arg1 automatic )  :mod other )  :arg2 president )  :arg2-of ( link :arg0 ( government-organization :arg0-of govern :arg0-of ( open :arg1 conference )  )  :arg1 ( city :location-of video :name ( name :op1 london )  :wiki london )  )  :name ( name :op1 kerry )  :wiki john_kerry )  :arg1 ( and :arg0-of ( cause :arg1 ability )  :op1 ( i :arg0-of ( learn :arg1 ( thing :arg1-of happen :arg1-of question :mod some :polarity - )  :arg2 there :mod actual )  )  :op2 and )
contrast :arg0 ( line :arg0-of ( abuse :arg1 right )  :arg0-of ( cross :arg1 ( rank :arg1 - :arg1-of ( have-org-role :arg0 ( he :arg0-of ( become :arg1 then )  )  :arg2 member )  :arg1-of high :arg1-of ( spy :arg0 ( country :name ( name :op1 us )  :wiki united_states )  )  :arg1-of ( admit :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 united :op2 states )  :wiki united_states )  )  )  )  )  )  )  :arg1 emphasise
say :arg0 ( he :arg0-of ( mean :arg1 ( far :arg1-of ( reach :arg0 too )  )  )  :arg0-of ( case :arg1 some )  )  :arg1 inappropriately
sense :arg0 nobody :arg1 ( abuse :arg1 ( review :arg1-of ( do :op2-of ( and :op1 ( determined :arg0 ( have-org-role :arg0 person :arg2 president )  :arg1 ( try :arg1 ( and :op1 clarify :op2 clear )  )  )  :op1-of and )  :time now )  :manner thorough )  )
assure :arg0 i :arg1 ( you :arg0-of ( abuse :arg1 ( person :arg1-of innocent )  :arg2 ( process :mod this )  :polarity - )  )
insist :arg0 ( person :mod mr :name ( name :op1 kerry )  :wiki john_kerry )  :arg1 ( and :op1 ( organization :domain-of force :name ( name :op1 nsa )  )  :op2 ( save :arg0 ( operation :arg0-of ( surveil :arg1 good )  )  :arg1 life :arg2 many )  )
add :arg0 ( he :arg0-of ( blow :arg1 ( person :arg0-of ( will :arg1 world )  )  )  )  :arg1 new :arg1-of mean :arg1-of ( deal :arg0 we )
determined :arg0 world :arg1 ( try :arg1 ( kill :arg1 ( and :op1 person )  )  :arg2 ( and :op1 ( person :arg0-of blow )  :op2 ( attack :arg1 ( government-organization :arg0-of govern )  )  )  )  :op3-of ( and :op1 hell :op2 ( bend :arg1 ( extremism :mod radical )  )  )
cause :arg1 ( possible :arg1 ( intercept :arg0 you :arg1 that :op1-of ( and :op2 stop )  :time ( happen :op1-of before )  )  )  :mode interrogative
cause :arg0 ( and :arg1-of ( plan :arg0 ( we :arg0-of ( prevent :arg1 airplane :mod actual )  )  :time time )  :arg1-of possible :op1 ( person :arg0-of ( assassinate :arg1 ( building :arg1-of ( blow :arg0 down )  )  )  )  :op2 ( learn :arg0 we :arg1 ahead )  )
say :arg0 ( subcommittee :mod ( government-organization :arg1-of ( have-org-role :arg2 chairman )  :name ( name :op1 senate )  :wiki united_states_senate )  :purpose ( affair :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :arg1 ( and :arg1-of ( head :arg2 ( continent :name ( name :op1 europe )  :wiki europe )  :purpose ( help :arg0 ( lawmaker :mod ( country :name ( name :op1 u.s. )  :wiki united_states )  )  :arg1 ( concern :arg0 address :location abroad )  :arg2 ( country :name ( name :op1 u.s. )  :wiki united_states )  )  :time meanwhile )  :arg3-of ( need :arg1 ( continue :arg1 ( effort :mod joint :purpose ( oppose :arg1 terrorism )  )  )  )  :op1 ( spy :arg0 ( country :name ( name :op1 u.s. )  :wiki united_states )  :arg1-of allege )  :op2 ( convince :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :location thursday
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 connecticut )  )  :arg2 senator )  :name ( name :op1 chris :op2 murphy )  )  :arg1 ( speak :arg0 ( he :arg1-of ( concern :arg0 ( threaten :arg1 ( stop :arg1 ( participate :arg1 ( organization :arg0-of ( oppose :arg1 terrorist )  :arg1-of ( frustrate :arg0 ( surveil :arg0 ( government-organization :name ( name :op1 national :op2 security :op3 agency )  :wiki national_security_agency )  )  :arg0-of cause )  )  )  )  )  )  )  :arg1 ( and :op1 other )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 european :op2 parliament )  :wiki european_parliament )  :arg2 member )  )  :op1-of and :time ( week :mod this )  )
say :arg0 ( affair :op1 ( continent :name ( name :op1 europe )  :wiki europe )  )  :arg1 ( interview :arg0 ( government-organization :arg1-of ( have-org-role :arg0 ( term :op5-of ( and :op1 ( security :op1-of interest :op1-of nation )  :op2 ( respect :arg0 ( country :name ( name :op1 u.s. )  :wiki united_states )  :arg1 ( we :arg0-of ( endeavor :arg1 thing )  )  :arg1-of ( stay :arg0 ( important :mod ( ' :mod-of really :op1 it )  )  :arg2 board :location ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :op3 ( oppose :arg0 mutual :arg1 terrorism )  :op4 first :op6 democratic_party_[united_states] :op7 of :op8 ( relation :mod foreign )  )  )  :arg2 chairman )  :name ( name :op1 senate )  :wiki united_states_senate )  :arg1 ( city :name ( name :op1 washington )  :wiki washington,_d.c. )  )
anger :arg1 ( program :arg1-of ( work :arg0 they :arg1-of ( continue :arg0 ( i :op1-of ( and :location ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :arg1-of ( need :arg0 we :arg1-of ( clear :arg0 it )  )  )  :location together :location ( terrorism :arg1-of combat )  :location notwithstand )  :mod nsa :mod this )
say :arg0 agency :arg1 ( and :arg1-of reflect :arg1-of ( share :arg0 ( they :arg0-of ( report :arg1 that :arg1-of ( sweep :arg0 nsa :arg2 million )  )  )  :op1-of ( and :arg1-of ( collect :arg1-of ( ally :arg0 ( military :name ( name :op1 nato )  :wiki nato )  :arg2 ( country :arg0-of ( relation :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :arg1-of ( fray :arg0 ( record :mod ( of :mod-of phone )  )  )  :arg2 ( country :arg1-of ( have-org-role :arg0 ' :arg2 chief )  :arg2-of ( ally :arg0 though :mod some )  :name ( name :op1 u.s. )  :wiki united_states )  )  :name ( name :op1 united :op2 states )  :wiki united_states )  :mod that )  )  )  )  :op1 ( accurate :polarity - )  :op2 ( misunderstand :arg1 metadata )  )  :time ( week :mod this :mod that )
reveal :arg1 ( cite :arg1 document :arg2-of ( leak :arg1 that )  :mod other :op1-of ( and :op2 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2 chancellor )  :arg1-of monitor :name ( name :op1 angela :op2 merkel )  :wiki angela_merkel )  :op3 cellphone :op4 that :op5 of :op6 ( person :arg0-of lead :mod ( other :mod-of 34 :mod-of world )  )  )  )
say :arg0 it :arg1 ( and :arg2-of ( ally :arg0 clapp :mod ( spy :arg1 ( intelligence :arg1-of jam :arg1-of ( have-org-role :arg2 director )  :mod nation )  :arg1-of defend )  :time ( side :mod both )  )  :op1 commonplace )
say :arg0 ( person :name ( name :op1 murphy )  )  :arg1 ( and :op1 ( arrange :arg0 office :arg1 ( trip :mod ( government-organization :name ( name :op1 congress )  :wiki united_states_congress )  )  )  :op2 ( expect :arg1 ( take :arg1 place )  :time ( this :mod-of year )  )  :op3 ( hope :arg1 ( include :arg0 delegation :arg1 ( and :op1 ( chamber :mod both )  )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( party :mod both )  :arg2 member )  )  )  )  )  :time uproar
come :arg1 ( day :unit-of temporal-quantity )  :arg2-of ( release :arg0 ( name :arg1 ( lawmaker :arg1-of participate :mod other )  )  )
say :arg0 ( he :arg0-of ( work :arg1 itinerary :mod still )  )
say :arg0 ( he :arg0-of ( say :arg1 ( while :arg1 purpose )  :arg1-of trip )  :arg0-of love :arg0-of ( help :arg1-of ( improve :arg1-of relation )  )  :arg0-of ( dispense :arg1 also )  :arg1-of tough :arg1-of will )  :arg1 some
say :arg0 ( he :arg0-of ( use :arg1 ( program :mod espionage :mod they :poss person )  :arg2 ( kind :mod about )  :time-of ( temporal-quantity :unit year )  )  )  :arg1 ( need :arg1 honest :arg1-of ( lead :arg0 person )  )  :location ( continent :name ( name :op1 europe )  :wiki europe )
say :arg0 ( one :mod only )  :arg1 ( need :arg0 ( we :arg0-of ( surveil :arg1 program :arg2 ( of :mod ( right :mod-of ( fact :mod that )  )  )  )  :arg0-of ( protect :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :manner good )  :arg1-of ( amend :arg0 ( we :arg1-of while )  :arg1-of ( possible :polarity - )  )  )  :arg1 term :mod also :purpose-of ( come :arg0 they :arg1 we )  )  :arg2-of ( spy :arg0 ( there :op1-of out )  :arg1 murphy )
and :op1 ( person :arg0-of ( head :arg1 ( weekend :mod this )  :arg2 ( world-region :name ( name :op1 middle :op2 east )  :wiki middle_east )  :condition ( address :arg0 ( country :name ( name :op1 poland )  :wiki poland )  :arg1 ( rancor :topic ( strategy :location ( country :name ( name :op1 syria )  :op1-of ( and :location-of ( activity :arg0 ( country :name ( name :op1 u.s. )  :wiki united_states )  :arg1 surveil )  :op2 ( country :name ( name :op1 egypt )  :wiki egypt )  :op3 ( country :name ( name :op1 iran )  :wiki iran )  )  :wiki syria )  :mod ( country :name ( name :op1 u.s. )  :wiki united_states )  )  )  )  )  :arg1-of ( schedule :time meanwhile :arg2 head )  :mod mr :name ( name :op1 kerry )  :wiki john_kerry )
m√ºll :arg2-of ( threaten :arg1-of ( match :arg0 away )  :arg1-of ( injure :arg0 stubborn :arg2 ( deploy :arg0 of )  :mod ankle )  :arg1-of prevent )
concern :arg1 ( country :name ( name :op1 mainz )  )  :time ( regard :arg1 ( available :arg2 ( person :name ( name :op1 nicolai :op2 m√ºller )  )  )  )
attempt :arg0 he :arg1 ( train :arg1 tomorrow :arg2 team :arg0 he )
manage :arg0 he :arg1 ( train :manner individual )  :mod only :time ( up :arg1 ( until :op1 now )  )
say :arg0 ( he :arg0-of play :arg1-of ( decide :arg0 we )  :arg2-of ( regard :arg0 short :arg1 wheth )  )  :arg1 ( manage :arg1 ( person :name ( name :op1 &quot; )  )  )
hope :arg0 old :arg1 ( strike :arg0 year :arg1 ( team :poss 40 )  :arg2 ( goal :quant 6 )  :mod ( good :degree most )  )
and :op1 already :op2 ( person :arg0-of ( key :arg1 ( person :arg0-of play )  )  :arg1-of injure :name ( name :op1 niki :op2 zimling )  )  :op3 ( person :name ( name :op1 julian :op2 baumgartlinger )  )  :op4 ( person :mod ( country :name ( name :op1 mainz )  )  :name ( name :op1 niko :op2 bungert )  )
time :arg3-of ( appeal :arg0 woman :arg1 ( country :name ( name :op1 thailand )  :wiki thailand )  :mod ( country :name ( name :op1 australia )  :wiki australia )  )  :mod jail
claim :arg1 ( assault :arg0 ( person :arg0-of ( drive :arg1 taxi )  )  :arg1 she )  :arg3-of ( sentence :arg1 ( woman :arg0-of ( grant :arg1 ( bail-out :arg1 jail )  :op2-of ( and :op1 ( appeal :arg1 verdict )  )  )  :mod ( city :name ( name :op1 sydney )  :wiki sydney )  :mod ( old :quant ( temporal-quantity :quant 21 :unit year )  )  )  :arg2 ( temporal-quantity :quant 15 :unit day )  )  :manner false
tell :arg1 ( police :poss ( country :name ( name :op1 thailand )  :wiki thailand )  )  :arg2 ( person :arg0-of ( drive :arg1 ( taxi :arg1-of ( local :arg0 10 )  )  )  )  :op1-of ( after :time-of ( claim :arg0 ( person :arg1-of ( guilty :arg0 ( court :mod ( country :name ( name :op1 phuket )  )  :mod province )  :arg1-of ( find :time initial )  :arg2 ( date-entity :month 6 :op1-of ( early :op2 ( temporal-quantity :duration-of ( thing :name ( name :op1 sunday :op2 june )  )  :unit hour )  )  )  )  :name ( name :op1 stevie :op2 rochelle :op3 bamford )  )  :arg2 ( man :arg0-of ( restrain :arg1 ( she :arg1-of ( assault :arg0 15 :arg1-of carry )  )  )  :mod other :quant 2 )  :mod false )  )
reveal :arg0 ( footage :mod cctv )  :arg1 ( return :arg1 she :arg4 hotel :manner safe :time ( after :op1 ( become :arg2 ( separate :arg2 ( person :arg0-of ( have-rel-role :arg2 boyfriend )  :mod ( country :name ( name :op1 australia )  :wiki australia )  )  )  )  )  )  :time late
interview :arg0 ( police :mod ( country :name ( name :op1 phuket )  )  )  :arg1 ( person :name ( name :op1 bamford )  )  :time ( before :op1 ( confess :arg0 ( she :arg0-of ( fabricate :arg1 story :location ( temporal-quantity :quant 2 :unit day )  )  )  )  )
hold :arg0 she :arg1 ( cell :arg1-of local :mod police )  :time ( before :op1 ( hear :arg1 court )  )
outskirt :mod-of ( of :mod ( rather :arg1-of ( low :arg0 ( term :mod prison )  :arg2 ( serve :arg0 ( person :arg1-of sentence :name ( name :op1 bamford )  )  :arg1 ( 15 :mod-of day )  )  :mod ( security :mod-of centre-left :mod-of detention )  )  :mod-of jail :mod-of woman :mod-of adult )  )
appeal :arg0 ( person :arg1-of ( have-rel-role :arg0 ( person :domain she )  :arg2 daughter )  :arg1-of ( play :arg0 thing )  :mod ( country :mod-of ( league :mod former )  :name ( name :op1 australia )  :wiki australia )  :name ( name :op1 peter :op2 tunks )  )  :arg1 department :arg2 ( assist :arg0 ( government-organization :name ( name :op1 foreign :op2 affairs )  :wiki ministry_of_foreign_affairs_[russia] )  :arg1 ( person :arg0-of ( have-rel-role :arg2 daughter )  )  )  :location ( city :name ( name :op1 canberra )  :wiki canberra )
tell :arg0 ( person :name ( name :op1 tunks )  :name ( name :name-of ( publication :wiki the_daily_telegraph )  :op1 telegraph )  )  :arg1 ( ' :mod-of sunday )  :arg2 ( he :arg0-of ( want :arg1 ( and :op1 welfare :op2 she :op3 ( country :name ( name :op1 australia )  :wiki australia )  )  :direction back )  :arg1-of ( have-rel-role :arg0 ( person :arg1-of ( concern :arg0 ( family :mod whole )  :location about :mod extreme )  )  :arg2 daughter )  )  :location ( city :name ( name :op1 sydney )  :wiki sydney )
contrast :arg1 ( we :arg0-of ( hopeful :arg1 safe :arg1-of ( obvious :arg0 ' :arg2 back )  :arg2 ( she :arg0-of ( say :arg1 tunk :arg1-of ( possible :time soon )  )  :poss-of home )  )  :arg1-of ( worry :arg0 it :arg2 time )  )
and :op1 ( appeal :arg0 ( person :name ( name :op1 bamford )  )  :arg1 ( sentence :arg1 ( monetary-quantity :unit baht )  )  )  :op2 ( grant :arg1 bail-out )
say :arg0 ( report :arg1 ( country :name ( name :op1 thailand )  :wiki thailand )  :location ( country :name ( name :op1 australia )  :wiki australia )  )  :arg1 ( holiday :arg0 she :arg1 meantime :arg2 ( area :location ( country :name ( name :op1 krabi )  )  :mod resort )  )
contrast :arg2 ( warn :arg0 ( source :arg0-of ( say :arg1 ( represent :arg0 ( lawyer :arg1-of local )  :arg1 ( 2 :quant-of ( temporal-quantity :unit year )  )  )  )  :arg1-of ( base :location ( country :name ( name :op1 thailand )  :wiki thailand )  )  :arg1-of legal )  :arg1 ( lead :arg0 ( appeal :arg1 adult )  :arg1 ( and :op1 ( increase :arg1 sentence )  :op2 ( force :arg2 ( serve :location prison )  )  )  :arg1-of possible :arg2 court )  )
possible :arg1 ( look :arg1 ( repair :arg0 ( country :arg0-of ( lead :arg4 acquittal )  :name ( name :op1 thailand )  :wiki thailand )  :arg1 ( image :arg1-of batter :mod ( person :arg0-of tour )  )  )  :arg1-of ( follow :arg2 ( murder :arg1 ( person :location ( country :name ( name :op1 phuket )  )  :mod ( agent :mod ( travel :arg1 ( country :name ( name :op1 australia )  :wiki australia )  )  )  :name ( name :op1 michelle :op2 smith )  )  :time recent )  )  :mod also )
