receive :arg0 ( person :name ( name :op1 obama )  :wiki barack_obama )  :arg1 ( person :name ( name :op1 netanyahu )  :wiki benjamin_netanyahu )
and :op1 ( person :arg0-of relation :name ( name :op1 obama )  :wiki barack_obama )  :op2 ( person :name ( name :op1 netanyahu )  :wiki benjamin_netanyahu )  :op3 ( friendly :mod exact :polarity - )
and :arg1-of ( want :arg0 2 :arg0-of ( talk :arg1 about )  :arg0-of ( implement :arg1 of )  )  :op1 ( agree :arg1 ( city :name ( name :op1 teheran )  :wiki tehran )  :mod international )  :op2 ( activity :arg1 destabilise :op1-of ( world-region :name ( name :op1 middle :op2 east )  :wiki middle_east )  )
plan :arg1 ( meet :arg0-of ( cover :arg1 ( conflict :arg1 ( country :name ( name :op1 palestine )  :wiki state_of_palestine )  :op1-of ( and :op2 ( solution :arg2-of dispute :mod state :quant 2 )  )  )  )  )  :mod also
strain :arg1 relation :arg2 ( temporal-quantity :unit year )  :manner ( and :op1 ( person :name ( name :op1 obama )  :wiki barack_obama )  :op2 ( person :name ( name :op1 netanyahu )  :wiki benjamin_netanyahu )  )
and :op1 ( accuse :arg0 ( city :arg0-of ( build :arg1 settlement :arg1-of continue :location ( country :name ( name :op1 israel )  :wiki israel )  )  :name ( name :op1 washington )  :wiki washington,_d.c. )  :arg1 ( person :name ( name :op1 netanyahu )  :wiki benjamin_netanyahu )  :arg2 ( lack :arg0 ( process :arg1 peace )  :arg1 initiative )  )
cause :arg0 further :arg1 ( deteriorate :arg1 ( between :arg1-of ( relation :arg0 ( country :arg1-of ( negotiate :arg0 ( person :arg2-of ( deal :arg1 of )  :mod that :name ( name :op1 obama )  :wiki barack_obama )  )  :name ( name :op1 iran )  :poss-of ( program :mod atom )  :wiki iran )  :arg2 2 )  )  )
see :arg0 ( speech :mod controversy )  :arg1 ( organization :name ( name :op1 us :op2 congress )  )  :arg2 ( affront :arg0 ( date-entity :month 3 )  :arg1 ( person :name ( name :op1 obama )  :wiki barack_obama )  :arg2 ( invite :arg0 ( person :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  :arg1 ( person :name ( name :op1 netanyahu )  :wiki benjamin_netanyahu )  :arg2 part )  )
impend :arg1 time :arg1-of ( meet :arg1-of ( reject :arg0 ( person :arg0-of ( agree :arg1 speech :polarity - )  :name ( name :op1 obama )  :wiki barack_obama )  :manner ( reference :arg1 elect )  )  )  :arg2 ( country :name ( name :op1 israel )  :wiki israel )
admit :arg0 ( professor :arg2-of have-org-role )  :arg1 ( thing :name ( name :op1 shooting :op2 girlfriend )  )  :time ( call :arg1 911 )
and :op1 voice :op2 ( shaky :degree slight :mod only )  :op3 ( tell :arg0 ( person :arg0-of ( have-org-role :arg1 college :arg2 professor )  :name ( name :op1 shannon :op2 lamb )  )  :arg1 ( shoot :arg0 ( he :arg1-of ( have-rel-role :arg0 ( person :arg1-of call )  :arg2 girlfriend )  )  :arg1 911 )  :arg2 police )  :op4 ( need :arg0 ( person :arg0-of ( have-org-role :arg2 officer )  :poss-of house )  )
say :arg0 ( he :arg0-of ( sweet :arg1 dog )  :arg0-of ( say :arg2 point )  )  :arg1 ( and :op1 ( upset :arg0 there :arg1 ( probable :op2-of ( and :op1 alive :op3 ( contact :arg0 ( person :name ( name :op1 lamb )  )  :arg1 dead :arg1-of possible :arg1-of ( find :arg0 ( she :mod-of phone )  )  :arg2 family )  )  )  )  :op2 woman )
say :arg0 ( she :arg0-of ( love :arg1 ever )  :op1-of ( and :op2 ( woman :mod only )  )  )  :arg1 ( authority :arg0-of ( lamb :arg1 ( take :arg0 ( i :arg1-of possible )  :arg1-of ( love :arg0 i )  :arg3 back :location it :op2-of ( and :arg1-of ( write :arg0 ( person :arg0-of ( note :arg1-of ( legal :arg0 white )  :arg1-of ( scribble :arg0 body )  )  :arg0-of ( find :arg1 home :manner prentis )  :arg0-of ( have-org-role :arg1 inside :arg2 officer )  )  )  :op1 hand )  :time ( wish :arg0 i :arg1 ( sorry :arg1 ( i :arg0-of ( cause :arg1 ( mean :arg1 pad )  )  )  :degree very )  )  )  )  :arg0-of ( sign :arg1 letter )  :arg1-of ( read :arg0 i )  )
indicate :arg1 ( travel :arg0 ( he :arg1-of ( shoot :arg2 ( he :arg1-of doorway :part office )  :op2-of ( and :arg1-of kill :op1 police )  )  :arg1-of campus :arg2-of ( believe :arg1 ( like :arg1 history :arg1-of ( have-org-role :arg2 professor )  :arg2 schmidt )  )  )  :arg1 school :arg1-of ( distance-quantity :unit mile )  :arg1-of already :arg1-of 300 )  :arg2 ( teach :arg2 2 :location online :location ( state :location-of class )  )  :polarity -
say :arg0 ( person :arg0-of ( have-org-role :arg1 police :arg2 chief )  :name ( name :op1 lynn :op2 buford )  :quant 10 )  :arg1 ( hear :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 delta :op2 state :op3 university )  :poss university )  :arg2 official )  )  :arg1 ( shoot-down :arg1 ( a.m. :location-of 18 )  )  )
say :arg0 ( he :arg2-of ( call :arg0 ( person :name ( name :op1 lamb )  )  :arg1 911 :direction ( sometime :op1 ( after :op1 that )  )  :mod fateful )  )
close :arg0 ( person :name ( name :op1 lamb )  :poss-of life )  :arg1 ( police :arg0-of ( die :arg1 ( day :arg1-of end )  :degree more )  )
try :arg0 authority :arg1 ( piece :mod together )  :arg2 ( motivate :arg1 ( person :name ( name :op1 lamb )  )  )  :time still :time ( after :op1 day :op2 ( force :arg0 ( shoot-down :arg1 school )  :arg1 ( person :arg0-of study )  :arg2 ( hide :arg0 ( and :op1 faculty )  :location ( behind :op1 ( door :arg1-of lock )  )  )  )  )
contrast :arg1 talent :arg1-of ( teach :arg1-of ( trouble :arg1-of possible )  :purpose-of ( picture :op1-of ( paint :arg1-of ( help :arg0 ( person :arg2-of staff )  :arg1-of ( know :arg0 ( and :op1 ( state :arg1-of ( end :mod both :time-of ( release :arg0 ( person :arg0-of investigate )  :arg1 detail )  )  )  :op2 ( person :arg0-of study )  )  )  )  )  )  )
say :arg0 ( person :arg0-of study )  :arg1 ( look :arg0 they :arg1 class :direction forward )
say :arg0 ( police :location ( country :name ( name :op1 gautier )  )  )  :arg1 ( history :polarity - )  :arg2 ( or :op1 violence :op2 ( record :mod ( criminal :arg1 he :arg2 ( person :arg1-of die :name ( name :op1 prentiss )  )  )  )  )
write :arg0 ( he :arg0-of ( include :arg1 ( person :name ( name :op1 schmidt )  )  :arg2 ( person :name ( name :op1 schmidt )  )  )  )  :arg1 book :arg2 ( he :arg0-of ( wonderful :arg1 ( person :poss-of ( life :mod academia :poss ( he :arg1-of ( share :arg0 he )  )  )  )  )  :arg1-of acknowledge )
and :op1 ( teach :arg0 ( person :arg0-of ( study :arg1 course )  :quant many )  :arg1 both :op1-of ( and :arg0-of ( list :arg1 ( person :arg0-of ( have-org-role :arg1 faculty :arg2 member )  :quant 17 )  )  :mod both :op2 ( organization :name ( name :op1 social :op2 sciences )  )  :op3 history )  :time division )
inclination :quant some :quant-of ( problem :arg0-of ( same :arg1 time )  )
say :arg0 ( he :arg0-of ( agitate :arg1 jittery )  :poss-of ( person :arg1-of ( lamb :arg0 ( person :arg0-of study :arg0-of praise )  )  :name ( name :op1 a )  )  :poss-of ( something :arg1-of ( resemble :arg2 there )  :arg1-of wrong )  )  :arg1 ( and :op1 ( seem :mod also )  )
say :arg0 ( person :arg0-of study :mod ( another :mod-of ( person :name ( name :op1 mikel :op2 sykes )  )  )  )  :arg1 ( tell :arg0 ( person :name ( name :op1 lamb )  )  :arg2 ( he :arg0-of stress :arg0-of ( deal :time ( end :arg1 ( year :mod academia )  )  )  )  )  :time ( date-entity :day 15 :month 14 :year 20 )
ask :arg0 ( person :arg0-of ( leave :arg1 ( absent :arg1 ( he :arg1-of ( issue :arg0 ( sort :mod some )  :mod health )  )  )  :mod medicine )  :arg0-of say :name ( name :op1 lamb )  )  :arg2 ( organization :name ( name :op1 delta :op2 state :op3 university )  )  :time early
teach :arg0 he :arg1 ( 2 :quant-of ( class :mod online :quant only )  )  :arg2 ( this :mod-of year )
cause :arg0 ( work :arg0 doctorate :arg1 ( policy :arg1-of mean :arg1-of ( hire :arg0 university :arg2 ( change :arg1 recent )  )  )  :arg1-of lamb :arg1-of hard :arg2-of ( guarantee :arg1 automatic :polarity - :time earn )  :location that )  :arg1 ( assist :arg1-of ( become :arg2 ( tenure :mod-of track )  )  :arg1-of ( have-org-role :arg2 professor )  )
contrast :arg1 something :arg2 ( and :arg1-of ( say :arg0 ( he :arg0-of ( know :arg1 of :polarity - )  :arg0-of ( lamb :arg1 mr. :mod-of mind )  :arg0-of ( have-org-role :arg2 president )  :arg0-of ( obvious :arg1 there )  )  )  :op1 ( lamb :arg1 ( between :arg1-of ( conflict :mod any )  )  )  )
question :arg1 that :arg1-of ( answer :arg0 ( person :name ( name :op1 lamb )  )  :arg1-of ( possible :polarity - )  )
pick-up :arg0 police :arg1 trail :arg1-of ( lamb :arg0 ( he :arg0-of ( cross :arg1 back )  :poss-of mississippi )  :time ( after :op1 ( flee :arg1 campus )  )  )  :time late
say :arg0 ( he :arg1-of ( have-rel-role :arg0 ( person :poss-of home )  :arg2 parent )  :poss-of outskirt :poss-of ( distance-quantity :op1 ( south :arg1-of ( lamb :arg0 ( he :arg0-of ( apprehend :arg1 ( person :name ( name :op1 johnson )  :wiki - )  )  :arg0-of ( single :arg1 caliber )  :arg0-of kill :arg1-of ( possible :time before )  )  )  )  :quant home :quant pistol :quant backyard :unit mile )  )  :arg1 greenville :location ( city :location-of ( county :wiki pingtung_city )  :name ( name :op1 washington )  :wiki washington,_d.c. )  :time mississippi
run :arg1 ( car :poss he )  :manner driveway :time still
say :arg0 ( person :arg0-of ( go :arg4 ( home :mod that )  :time-of ( clear :arg0 it :polarity - :time immediate )  )  :name ( name :op1 lamb )  )  :arg1 ( believe :arg0 ( person :name ( name :op1 johnson )  :wiki - )  :arg1 ( know :arg0 ( he :arg0-of ( live :location there )  )  :arg1 person )  :arg2 she )
grow :arg0 area :arg1 ( person :name ( name :op1 lamb )  )
and :op1 ( teach :arg0 ( university :location-of ( work :arg1 about :arg1-of ( start :arg0 ( person :name ( name :op1 lamb )  )  )  )  )  :arg1 ( person :arg0-of ( study :location city )  )  :op1-of and )  :op2 geography :op3 ( educate :arg1 ( date-entity :year 2009 )  )  :op4 class
receive :arg0 he :arg1 doctorate :arg2 ( educate :arg1 spring )
funny :op2-of ( and :arg1-of smart :arg1-of ( describe :arg0 ( person :arg0-of ( have-rel-role :arg1 longtime :arg2 friend )  :arg1-of ( lamb :arg0 1 )  )  )  :op1 charisma )
say :arg0 ( person :arg1-of ( have-rel-role :arg0 ( person :arg1-of ( meet :arg0 they :arg2 15 )  :mod mutual )  :arg2 friend )  :name ( name :op1 carla :op2 hairston )  )  :arg1 ( and :op1 ( person :name ( name :op1 lamb )  )  )  :arg2 she :time 20
and :op1 ( person :arg0-of ( have-rel-role :arg1 ( she :poss-of ( school :arg1-of high )  )  :arg2 friend )  :op1-of and )  :op2 ( guy :arg0-of ( try :arg1 ( teach :arg1 ( temporal-quantity :op1-of several :unit year )  :arg2 ( play :arg1 guitar )  )  )  :arg1-of cool :domain he :mod old )
heartthrob :mod quite :op1 he :time ( then :mod back )
say :arg0 ( he :arg0-of ( melt :arg1 girl )  :op1-of around )  :arg1 ( and :op1 ( person :name ( name :op1 all )  )  :op2 40 :op3 ( live :arg0 ( person :mod suburb :name ( name :op1 jackson )  :wiki michael_jackson )  :arg1 of )  :op4 ( person :name ( name :op1 all )  )  :quant all )  :time now
date :arg0 ( and :op1 ( person :name ( name :op1 lamb )  )  :op2 ( person :name ( name :op1 prentiss )  )  )  :arg1 ( time :quant some )  :manner apparent
contrast :arg1 ( say :arg0 ( i :arg0-of ( kill :arg1 ( person :arg0-of ( have-rel-role :arg1 i :arg2 wife )  )  )  )  :arg1 ( call :arg0 911 :arg1 ( record :polarity - )  :arg1-of lamb :arg2 ( marry :arg0 they :arg1 ever )  )  )
bayou :arg2-of ( back-up :arg0 ( house :arg0-of brick )  :time ( live :arg0 they :location ( dog :arg0-of lightning )  )  )  :location ( country :name ( name :op1 gautier )  )
say :arg0 police :arg1 ( okay :arg1 dog )
contrast :arg1 ( remain :arg1 ( amr-unknown :mod-of ( ' :mod-of ( now :mod-of 19 )  )  )  :op1-of ago :op3-of ( and :op1 ( person :name ( name :op1 prentiss )  )  :op2 ( person :arg0-of ( say :arg1 steen :arg2-of ( divorce :arg0 they :arg1 ( 15 :quant-of ( temporal-quantity :unit year )  )  )  )  :mod shawn :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )  :op4 ( person :arg0-of ( have-rel-role :arg2 friend )  )  :op5 ( person :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( have-rel-role :arg2 husband :time ex )  )  :arg2 daughter )  )  )  )
say :arg0 ( she :arg0-of ( devastate :arg1 steen )  :arg0-of ( complete :arg1 ( person :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )  )  )  :arg1 of :arg2 ( he :arg1-of ( have-rel-role :arg0 person :arg2 daughter )  )
and :op1 ( person :arg0-of ( have-rel-role :arg1 ( she :arg1-of ( have-rel-role :arg0 person :arg2 ( friend :mod ( good :degree most :mod absolute )  )  )  )  :arg2 mother )  )
contrast :arg1 ( hear :arg0 ( he :arg0-of ( lamb :arg1 that )  :arg1-of ( have-rel-role :arg0 person :arg2 daughter )  )  :arg1 through :op1-of ( and :op2 music :op3 play :op4 blue )  :polarity - )  :arg2 ( interest :arg0 ( he :arg0-of ( lamb :arg1 ( meet :arg0 ( person :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )  )  )  :arg0-of ( say :arg1 steen )  )  )
meet :arg0 ( person :arg1-of ( perform :arg0 both :location ( fair :mod summer )  :op3-of ( and :op1 he :op2 ( person :name ( name :op1 abigail )  )  )  )  :name ( name :op1 lamb )  )  :arg1 ( person :name ( name :op1 prentiss )  :quant ( 3 :quant-of ( temporal-quantity :unit year )  )  )
play :arg0 they :manner together :manner ( gig :frequency occasional )  :time late
say :arg0 ( he :arg0-of ( write :arg1 ( sing :arg0 ( person :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )  :arg1 music :arg1-of ( own :arg0 she )  :op1-of and )  )  :arg1-of ( have-rel-role :arg0 person :arg2 daughter )  )  :arg1 steen
nurse :arg0 ( person :arg0-of ( work :arg2 ( company :mod various )  :purpose online )  :domain ( person :name ( name :op1 prentiss )  )  )
say :arg0 ( and :arg0-of ( finish :arg1 ( sparse :mod-of crowd )  )  :arg0-of ( play :arg1 guitar :op1-of ( and :op2 harmonica :time ( after :op1 5 )  )  )  :op1 ( person :name ( name :op1 mike :op2 shaffer )  )  :op2 bartend :op3 ( coordinator :location ( thing :name ( name :op1 julep :op2 room )  )  :mod ( entertain :arg1 sometimes )  )  )  :arg1 ( see :arg0 ( he :poss-of ( country :arg2-of ( near :arg1 ( bar :arg1-of ( light :degree dimly )  )  )  :name ( name :op1 gautier )  )  )  :arg1 ( and :op1 ( person :name ( name :op1 prentiss )  )  )  :arg2 ( person :name ( name :op1 lamb )  )  :time last :time night :time ( date-entity :month 9 )  )
sign :arg1 anything :polarity -
say :arg0 he :arg1 ( couple :mod happy :mod just )
and :op1 ( cut :arg0 ( we :arg0-of ( throw :arg1 liner )  )  :arg1 ( each :mod-of other )  )  :op2 one
mean :arg0 i :arg1 ( sense :arg0 wit :arg1 ( they :mod both )  :mod good )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( language :name ( name :op1 english )  :wiki english_language )  :arg2 professor :time school )  :name ( name :op1 don )  :wiki - )  :arg1 ( and :op1 ( direct :arg0 ( person :arg0-of ( have-org-role :arg1 colony :arg1-of ( slay :arg0 ( temporal-quantity :unit year )  )  :arg2 professor )  :name ( name :op1 schmidt )  )  :arg1 ( program :mod seminar )  )  :op2 specialize )  :medium ( thing :name ( name :op1 allan :op2 mitchell )  )  :op3-of ( and :op1 ( ethnic-group :name ( name :op1 native :op2 america )  :wiki native_americans_in_the_united_states )  :op2 history )
and :op1 ( marry :arg0 3 :arg1 he )  :op2 ( child :mod young )
and :op1 ( fraternity :arg1-of ( have-org-role :arg1-of ( govern :arg0 government-organization )  :arg2 president :op2-of ( and :op1 ( study :arg0 ( he :part ( name :op1 kansas )  )  :arg1 ( organization :name ( name :op1 emporia :op2 state :op3 university )  )  )  )  )  )  :op2 ( person :arg0-of study )
attend :arg0 ( person :arg1-of ( study :arg0 person )  :arg1-of ( staff :arg2 person )  :poss-of ( campus :location ( country :location tuesday :name ( name :op1 cleveland )  )  :mod ( thing :name ( name :op1 delta :op2 state )  )  )  :quant about )  :arg1 ( memorial :mod ( candlelight :mod-of night )  :mod ( and :op1 ( person :arg0-of ( have-org-role :arg1 faculty :arg2 member )  )  :op2 ( person :arg0-of ( have-org-role :arg1 community :arg2 member )  )  )  )
and :op1 ( sing :arg0 ( person :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( attend :arg1 vigil :mod also )  :name ( name :op1 jeff )  :op1-of and :wiki - )  :arg2 brother )  )  :arg2 wife )  :name ( name :op1 schmidt )  )  :arg1 choir :arg1-of grace :arg1-of ( bright :arg0 during )  :arg1-of amaze :time-of university )  :op2 morn
resume :arg1 class :time wednesday
say :arg0 ( person :arg0-of study :arg1-of ( come :direction back )  :arg1-of ( get :arg0 ( we :arg0-of ( try :arg1 we )  )  )  )  :arg1 laforge
crisis :domain-of over
day :domain this :time-of heal
and :arg1-of ( report :arg0 ( person :name ( name :op1 rogelio :op2 solis )  )  :arg2 ( country :name ( name :op1 cleveland )  )  )  :op1 ( person :mod ( country :name ( name :op1 mississippi )  )  :name ( name :op1 amy )  )
and :op1 ( country :mod-of ( publication :name ( name :op1 associated :op2 press )  :wiki associated_press )  :name ( name :op1 greenville )  )  :op2 ( contribute :arg0 ( person :location ( city :name ( name :op1 new :op2 orleans )  :wiki new_orleans )  :name ( name :op1 rebecca :op2 santana )  )  :arg1 ( person :arg1-of ( write :arg0 person )  :location ( country :name ( name :op1 mississippi )  )  :name ( name :op1 emily :op2 wagster :op3 pettus )  )  :arg2 ( report :mod this )  )
indicate :arg0-of ( refer :arg1 ( person :name ( name :op1 prentiss )  )  :arg2 ( person :arg0-of ( have-rel-role :arg2 wife )  )  :time call )  :arg1 911 :arg1-of ( marry :arg0 2 :time ever )  :op2-of ( and :arg1-of ( reflect :arg0 ( story :arg1-of correct :mod this )  )  :op1 ( say :arg0 police :arg1 ( person :arg0-of ( call :arg1 911 )  :arg0-of ( shoot-down :arg1 ( person :name ( name :op1 schmidt )  )  :op1-of after )  :name ( name :op1 lamb )  )  :time now )  )  :polarity -
plan :arg0 ( u :mod r )  :arg1 ( thing :mod ( country :name ( name :op1 hire )  )  :name ( name :op1 fewer :op2 holiday :op3 season :op4 workers )  )
contrast :arg1 ( year :mod last )  :arg2 ( and :arg1-of ( say :arg0 ( person :arg0-of ( retail :arg1 product )  :arg0-of ( give :arg1 current :arg2 ( person :arg1-of employ :op1-of ( and :op2 seasonal :op3 ( person :arg0-of work :arg0-of ( chance :arg1 ( more :quant-of ( temporal-quantity :unit hour )  )  :arg1-of ( work :arg0 ( person :arg1-of employ :arg2-of ( hire :arg0 it :arg1 ( say :arg0 ( organization :mod-of r :name ( name :op1 toys )  )  :arg1 u )  :polarity - )  :mod season :quant ( many :mod-of holiday )  )  )  )  )  )  )  )  )  )  :op1 toy :op2 baby )
say :arg0 ( company :arg0-of ( plan :arg1 ( hire :arg1 person :arg2 ( work :arg2 ( and :op1 ( center :arg0-of ( distribute :arg1 down )  )  )  :location store :time ( around :op1 country )  )  )  )  )  :arg1-of ( hire :arg0 ( season :mod holiday :time ( date-entity :year 2014 )  )  )
time :name-of ( job :quant most )
say :arg0 ( company :arg0-of ( start :arg1 ( interview :arg0 ( date-entity :month 10 )  :arg1 ( person :arg0-of apply )  )  :purpose ( rise :arg0 12 :arg1 ( level :mod ( person :arg2-of staff )  )  )  )  )  :arg1 ( temporal-quantity :unit ( month :mod this )  )
and :op1 sell :op2 ship :op3 ( deliver :arg1 product )  :op3-of ( and :op1 ( help :arg1 ( store :poss ( person :arg2-of staff )  )  :arg2-of ( hire :arg0 company :arg1 ( person :arg1-of employ )  :arg2-of ( prepare :arg0 ( season :mod ( shop :arg1 temporary )  :mod holiday )  :arg1 holiday :op3-of ( and :arg0-of ( while :arg1 away )  :op1 ( temporal-quantity :unit month )  :op2 ( draw :arg1 close )  )  )  )  )  :op2 sell )
joke :arg0 ( he :arg2-of ( date :arg1 ( person :name ( name :op1 princess :op2 diana )  :wiki diana,_princess_of_wales )  )  )  :arg1 about :arg2 ( person :name ( name :op1 michael )  :name ( name :op1 fox )  :wiki michael_jackson )
of :arg1-of ( premiere :arg0 ( moment :mod huge :mod future :mod-of ( person :mod professional :name ( name :op1 the )  )  )  :arg2 back )
cause :arg0 ( reason :arg1-of ( personal :arg0 too )  )  :arg1 ( noteworthy :domain it )
say :arg0 ( he :arg2-of ( sit :arg1 i :op1-of next :op4-of ( and :op1 ( come :arg1 ( person :arg1-of ( dawn :arg0 it :arg2 i )  :name ( name :op1 princess :op2 diana )  :wiki diana,_princess_of_wales )  :op2-of ( and :op1 ( sit :arg0 we :arg1 i :arg2 theater )  :op3 ( realize :arg0 i :arg1 that :arg2 next :arg2-of ( wait :arg1 royal )  )  )  )  :op2 seat :op3 ( empty :arg1 ( documentary :mod upcoming :mod-of ( time :mod back )  )  )  )  )  )  :arg1 trailer
and :arg1-of ( fake :arg0 i )  :op1 ( and :op1 ( start :arg0 i :arg1 movie )  :op2 ( occur :arg0 it :arg1 that )  )  :op2 ( yawn :arg1 date )  :op3 ( thing :arg1-of stretch :arg1-of ( arm :arg0 ( country :mod-of ( of :mod ( princess :wiki ubolratana_rajakanya )  )  :name ( name :op1 wales )  :wiki wales )  )  :mod-of away )
interview :arg0 back :arg1 ( person :name ( name :op1 &quot; )  :name ( name :op1 fox )  :op1-of ( and :op2 ( person :name ( name :op1 &quot; )  )  :op3 executive :op4 ( person :arg1-of ( produce :arg0 well )  :name ( name :op1 steven :op2 spielberg )  :wiki steven_spielberg )  )  :op2-of ( and :op1 ( documentary :op1-of about :time ( time :mod back )  )  :op3 ( person :arg0-of ( have-org-role :arg2 director )  :name ( name :op1 lloyd )  :wiki peter_lloyd_[abc_correspondent] )  )  )  :arg1-of ( feature :arg0 future )
premiere :arg0 back :arg1 ago :arg2 ( temporal-quantity :unit year )  :op1-of 30 :time future
say :arg0 i :arg2 ( person :arg0-of ( travel :arg1 ( put :arg0 ( it :op1-of really )  :arg1 film :arg2 inarguably :time ever :time ( time :mod ( great :degree most )  )  )  :arg2 movie )  :name ( name :op1 &quot; )  )
and :op1 back :op2 ( organization :arg0-of ( select :arg1 movie :arg2 theater :time ( date-entity :month 10 )  )  :arg1-of ( available :arg0 time )  :name ( name :op1 &quot; )  )  :op3 dvd
say :arg0 ( chief :mod ( organization :name ( name :op1 un )  :wiki united_nations )  )  :arg1 ( be :arg0 solution :arg1 military :location ( country :name ( name :op1 syria )  :wiki syria )  )  :arg2 -
say :arg0 ( he :arg0-of ( step-in :arg1 ( 5 :mod nearly )  :mod ( country :name ( name :op1 russia )  :wiki russia )  )  :arg0-of ( support :arg1 ( country :name ( name :op1 syria )  :wiki syria )  :mod military )  :arg0-of ( worsen :arg1 ( person :mod of )  :arg2 ( and :mod ( violence :mod-of misery )  )  :mod only :mod ( weapon :mod more )  :polarity - )  :arg1-of ( respond :arg0 ( person :arg0-of ( have-org-role :arg2 secretary )  :mod ( general :mod-of ( solution :mod military :mod that :mod there )  )  :name ( name :op1 ban :op2 ki-moon )  :wiki ban_ki-moon )  )  )  :arg1 ( and :arg1-of ( conflict :arg0 year )  )
urge :arg0 ( chief :arg2-of ( have-org-role :arg1 ( organization :name ( name :op1 u.n. )  :wiki united_nations )  )  )  :arg1 ( party :arg1-of ( unite :op1-of ( and :op2 ( support :arg1 ( divide :arg1 ( organization :name ( name :op1 u.n. :op2 security :op3 council )  :wiki united_nations_security_council )  )  )  )  :purpose ( find :arg1 ( solution :mod politics )  :arg1-of ( negotiate :mod inclusive )  )  )  :quant all )  :mod again
tell :arg0 ( person :name ( name :op1 ban )  :wiki ban_ki-moon )  :arg1 ( conference :mod news )  :arg2 ( he :arg0-of ( meet :arg1 ( person :arg0-of ( have-org-role :arg2 ( minister :mod foreign )  )  :domain-of permanent :mod-of of )  )  :arg0-of ( plan :arg2 wednesday :mod that :op1-of ( and :op2 ( council :mod-of ( nation :quant 5 )  )  :op3 ( country :name ( name :op1 u.s. )  :wiki united_states )  :op4 ( country :name ( name :op1 russia )  :wiki russia )  :op5 ( country :name ( name :op1 china )  :wiki china )  :op6 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :op7 ( country :name ( name :op1 france )  :wiki france )  :op8 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 general :op2 assembly )  :op1-of sideline :wiki united_nations_general_assembly )  :arg2 minister )  :arg2-of ( discuss :arg0 ( country :name ( name :op1 syria )  :wiki syria )  :arg1 session :duration ( temporal-quantity :mod this :quant late :unit month )  )  )  )  )  )
express :arg0 ( person :op2-of ( and :op1 ( country :name ( name :op1 syria )  :wiki syria )  :op3 region :op4 power )  :op3-of ( and :op1 council :op2 among )  )  :arg1 ( he :arg0-of ( divide :arg1 ( situation :mod this :mod-of unsolvable )  )  :arg0-of regret )
address :arg1 ( crisis :poss ( country :arg1-of ( have-org-role :arg0 ( person :arg1-of ( urge :arg0 ( person :name ( name :op1 ban )  :wiki ban_ki-moon )  :arg2 ( show :arg1 ( solidarity :op1-of and )  )  )  :mod permanent :quant 5 )  :arg2 member )  :name ( name :op1 syria )  :wiki syria )  )  :arg2-of ( achieve :arg0 they :arg1 ( deal :arg1 ( country :name ( name :op1 iran )  :name ( name :op1 unity )  :wiki iran )  :arg2 nucleus )  )
be :arg0 ( person :arg0-of show :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  :arg1 ( real :arg1-of ( poll :arg1-of ( number :quant 8 )  )  )  :mod that
try :arg0 some :arg1 ( label :mod ( flopp :mod flip )  )
dismiss :arg0 other :arg1 joke
hold :arg1 implosion :mod some :op1-of and
contrast :arg1 ( matter :arg1-of ( try :arg0 ( person :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  :mod some )  :time-of ( drag :arg0 down :arg1 ( person :arg0-of ( work :arg1 yet :arg2-of ( poll :arg0 atop :arg1 it )  :polarity - )  :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  )  )  :mod - )  :arg2 amr-unknown
mean :arg1 it :arg2 ( amr-unknown :arg1-of ( start :arg0 ( person :arg0-of ( chance :arg1-of ( nominate :arg0 ( mogul :mod ( real :mod-of estate )  )  )  )  :name ( name :op1 donald :op2 trump )  :op2-of ( and :arg1-of ( show :arg0 ( 11 :mod last )  :arg1-of ( poll :arg0 nation )  )  :op1 ten :op3 ( double :arg1 digit :arg1-of lead )  )  :wiki donald_trump )  :mod some )  :arg1-of ask :mod serious )
elect :arg0 it :arg1 still :arg1-of cycle :time early
win :arg0 ( person :name ( name :op1 trump )  )  :arg1 ( nominate :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  :arg1-of ( likely :arg1-of ( say :arg0 ( person :quant none )  :arg2 this )  )
win :arg0 ( person :arg2-of ( give :arg0 ( person :mod ( time :mod this :mod that :mod at :mod ( pundit :mod-of point :mod-of out )  :mod-of ( date-entity :year 2011 )  )  :name ( name :op1 rick :op2 perry )  :wiki rick_perry )  :arg1 way :arg2-of ( lead :arg1 ' )  )  :arg2-of ( rise :arg1 ( neither :mod-of of )  )  :name ( name :op1 herman :op2 cain )  :wiki herman_cain )  :arg1 whom :arg1-of ( process :arg1-of ( nominate :arg0 ( state :mod even )  )  )  :arg2 1
and :op1 ( reason :arg1-of ( elect :arg1-of general :arg2-of ( struggle :arg0 he )  )  :quant many )
contrast :arg1 outside :arg2 ( and :mod ( super :mod-of economy :mod-of pac :mod-of conservative )  :op1 ( person :arg0-of topple :arg0-of ( trump :arg1 ( stay :arg1 power :arg1-of ( club :arg0 group )  :arg1-of recognize :op1-of ( and :op2 ( begin :arg1 ( unload :arg1 ( monetary-quantity :unit dollar )  )  )  )  )  )  :arg2-of ( resemble :arg1 group )  :name ( name :op1 bush )  :wiki george_w._bush )  )
suggest :arg0 some :arg1 ( number :arg1-of ( poll :arg0 ( recent :arg0-of ( pass :arg1 phase :location just :location mogul :location ( estate :mod real )  :location here :location - )  )  )  )
turn :arg0 ( person :name ( name :op1 trump )  )  :arg1 180 :arg2 degree :mod rating
announce :arg0 ( person :arg2-of ( view :arg0 ( person :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  :quant 2 :quant 10 )  :arg1 ( mogul :mod ( estate :mod real )  )  :arg1-of ( show :arg0 ( poll :arg0 ( thing :name ( name :op1 monmouth :op2 university )  )  )  )  :mod positive :mod only )  :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  :arg1 candidacy :medium mid :op1-of ( before :compared-to-of right )  :time ( date-entity :month 6 )
mid :mod-of 7 :op1 ( 40 :op1-of percentage-entity )
percentage-entity :op1 ( 52 :op1-of ( early :mod-of 8 )  )
view :arg0 ( person :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  :arg1 ( person :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  :quant 10 )  :mod favorable :time now :time 6
say :arg0 10 :arg1 roughly :time ( 3 :arg0-of ( view :arg1 they :mod negative )  )
and :op1 ( hold :arg0 ( number :mod this )  :location state :time early )
find :arg0 ( poll :arg1 ( thing :name ( name :op1 quinnipiac )  )  :location ( state :name ( name :op1 iowa )  :wiki iowa )  )  :arg1 ( view :arg0 ( person :name ( name :op1 trump )  )  :arg1 ( person :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  :quant ( percentage-entity :location there :value 60 )  )  :mod favorable )  :time ( week :mod last )
trump :arg2 ( nominate :arg1 ( 2 :topic ( person :arg0-of ( vote :arg1 ( political-party :name ( name :op1 gop )  :wiki republican_party_[united_states] )  )  :poss-of ( third :mod-of happy )  )  )  )
trump :arg0 either :arg1 ( or :arg1-of ( nominate :arg0 they )  :arg1-of ( say :arg0 ( person :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  :op1-of ( slash :arg0-of ( poll :arg1 67 )  :name ( name :name-of ( publication :wiki cnn )  :op1 cnn )  )  )  :quant percentage-entity :time ( week :mod last )  )  :arg1-of ( satisfy :arg0 enthusiastic )  )
say :arg0 ( he :arg0-of ( nominate :arg1 ( 2 :mod only )  )  :arg0-of ( upset :arg1 they )  )  :arg1 10
say :arg0 ( person :arg0-of ( generate :arg1-of ( same :mod roughly :mod-of ( level :mod-of enthusiasm )  )  )  :arg0-of ( say :arg1 they :degree ( percentage-entity :mod 43 )  )  :mod only :name ( name :op1 only )  )  :arg1 ( same :arg1 ( percentage-entity :value 40 )  :mod enthusiastic )
enthusiasm :part ( close :degree most :mod next :op1 interrogative )
person :mod ( percentage-entity :mod only :value 21 )  :name ( name :op1 marco :op2 rubio )
say :arg0 ( person :arg0-of vote )  :arg1 ( or :arg1-of ( dissatisfy :arg0 they )  :arg1-of establish :arg1-of ( upset :arg0 ( political-party :arg0-of ( nominate :arg1 ( person :arg1-of ( favor :arg0 side )  :arg1-of become :name ( name :op1 bush )  :wiki george_w._bush )  )  :name ( name :op1 republican )  :poss-of percentage-entity :poss-of flip :poss-of 47 :wiki republican_party_[united_states] )  )  )
trump :arg1 ( see :arg0 ( person :arg0-of ( do :arg1 majority :polarity - )  :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  :poss-of of )  :arg1 problem )  :arg2 temperament
say :arg0 ( he :arg0-of ( while :arg1 ( person :arg0-of ( criticize :arg1 wide )  :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  )  :arg0-of ( lean :arg1 percentage-entity )  :arg0-of ( insult :arg1 bombast :op1-of ( and :op2 52 :op3 ( person :arg0-of ( have-org-role :arg1 ( organization :arg0-of ( poll :arg1 monday :op2-of ( slash :op1 ( newspaper :name ( name :op1 washington :op2 post )  :wiki the_washington_post )  )  )  :name ( name :op1 abc :op2 news )  :wiki abc_news )  :arg2 president )  :arg0-of ( vote :arg1 ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  :arg0-of ( think :arg1 nationwide )  )  )  )  )  :arg1 ( right :arg0 mogul :arg1 ( estate :mod real )  :arg2 temperament )
say :arg1 ( have-org-role :arg0 he :arg1 ( personality :arg1-of ( think :arg0 ( person :arg0-of ( have-org-role :arg2 chief )  :arg1-of ( hold :arg0 ( number :arg1-of same )  :location ( state :mod ( state :name ( name :op1 iowa )  :wiki iowa )  :mod nation :mod caucus )  )  :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  :arg2-of ( same :arg1 ( percentage-entity :value 52 )  )  )  )  :arg2 commander :time ( week :mod last )  )
say :arg0 ( he :arg0-of ( belong :arg1 temperament :polarity - :polarity - )  )  :arg1 ( and :arg1-of ( serve :arg0 ( he :arg0-of ( think :arg1 ( percentage-entity :mod ( 44 :mod still )  )  )  )  :mod personality )  :arg1-of ( say :arg0 ( person :mod independent :mod 10 )  )  :op1 effective :op2 ( almost :mod-of 6 )  )  :arg1-of ( post :arg0 ( government-organization :name ( name :op1 white :op2 house )  :wiki white_house )  :op1-of ( slash :name ( name :op1 abc )  )  )
use :arg0 ( person :arg0-of vote :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  :arg1 idea
think :arg0 ( person :arg0-of ( vote :arg1 real )  :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  :arg1 ( they :arg0-of ( put :arg1 ( hat :mod pundit )  )  :domain-of ( person :name ( name :op1 trump )  )  )
say :arg0 4 :arg1 ( bet :arg0 ( person :name ( name :op1 trump )  )  :arg2-of ( say :arg0 ( poll :arg0 ( organization :name ( name :op1 orc )  )  :arg1 10 :arg2 ( thing :name ( name :op1 cnn :op2 / )  )  :time ( week :mod last )  )  )  :mod ( good :degree most )  )  :time ( ask :arg1 ( likely :arg1 ( win :arg1 ( nominate :arg0 ( political-party :name ( name :op1 gop )  :wiki republican_party_[united_states] )  )  )  :degree most )  )
place :arg0 ( person :name ( name :op1 bush )  :wiki george_w._bush )  :arg1 money :manner ( change :arg0 7 :arg1 that )  :manner 4 :manner 10 :time late
mean :arg1 past :arg1-of ( disclose :arg0 ( political-party :arg0-of ( clear :arg1 crystal :polarity - )  :name ( name :op1 gop )  :wiki republican_party_[united_states] )  )  :arg2 ( person :arg0-of ( vote :arg1 ball )  )  :mod full
pick-up :arg0 ( person :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  :quant 10 )  :arg1 ( person :arg0-of ( win :arg1 ( percentage-entity :mod only :value 28 )  :arg2 ( nominate :arg1 ( person :arg1-of ( nominate :arg0 4 )  :mod eventual :name ( name :op1 mitt :op2 romney )  :wiki mitt_romney )  )  )  :name ( name :op1 rick :op2 perry )  :wiki rick_perry )  :arg2 ( cycle :arg1 time :mod this :mod last )
show :arg0 ( political-party :arg0-of ( campaign :arg1 plausible )  :arg1-of ( vote :arg0 ( person :arg0-of ( see :arg1 plurality )  )  )  :name ( name :op1 gop )  :wiki republican_party_[united_states] )  :arg1 it :mod still
beat :arg0 ( person :arg0-of ( rally :arg1 ( person :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  :location ( around :op1 ( candidate :domain another )  )  :op1-of even )  :name ( name :op1 trump )  )  :arg1 ( everyone :mod almost )  :mod still
trump :arg1 ( field :arg1-of ( contribute :arg0 ( pundit :mod-of ( point :mod some )  )  :arg2 ( oppose :arg0 while :arg0-of ( support :arg1 diffusely :arg3 trump )  :arg1 ( candidate :arg1-of ( spread :arg2 among )  :degree ( more :degree-of dozen )  :mod other )  :arg1-of lead )  :arg3 that )  :arg1-of splinter :arg1-of likely )
contrast :arg1-of ( show :arg0 ( poll :arg0 ( organization :name ( name :op1 monmouth :op2 university )  )  :arg0-of ( support :arg1 majority :arg1-of ( garner :arg0 trump :time ( always :mod almost )  )  )  )  :manner ( 9 :mod early )  )  :arg2 ( and :op1 ( candidate :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  :mod ( other :degree most )  )  :time ( hypothetical :arg1 ( matchup :arg1-of ( head :arg1-of head )  )  )  )
lead :arg0 he :arg1 ( person :name ( name :op1 carly :op2 fiorina )  )  :location ( point :quant 19 )  :location ( point :quant 15 )  :location ( point :mod 14 )  :op1-of ( and :op2 ( point :quant 13 )  :op3 ( person :name ( name :op1 marco :op2 rubio )  :op1-of ( and :mod final :op2 ( person :name ( name :op1 john :op2 kasich )  )  )  )  :op4 ( person :mod each :name ( name :op1 walker )  :poss-of point :quant 33 )  :op5 ( person :name ( name :op1 bush )  :wiki george_w._bush )  :op6 ( person :name ( name :op1 rand :op2 paul )  )  :op7 ( person :name ( name :op1 christie )  :wiki chris_christie )  )
heat :mod-of ( person :name ( name :op1 ted )  :wiki - )  :poss he
candidate :arg0-of ( beat :mode interrogative )  :mod only
hypothetical :arg1 ( head :arg1 ( head :arg0 ( person :arg0-of ( lead :arg1 businessman :arg2 ( point :mod wide :quant 19 )  )  :name ( name :op1 ben :op2 carson )  )  )  )
say :arg0 ( person :arg0-of ( support :arg1 ( person :arg2-of ( bare :arg1 majority )  :name ( name :op1 donald :op2 trump )  :poss-of of :wiki donald_trump )  )  :poss-of mind )  :arg1 they
say :arg0 ( person :arg1-of ( support :arg0 ( person :arg0-of ( vote :arg1 ( half :op1-of more )  )  )  )  :name ( name :op1 trump )  )  :arg1 ( lock :arg0 they :arg1 ( poll :arg0 ( newspaper :mod ( slash :op1 ( organization :name ( name :op1 cbs )  )  )  :name ( name :op1 nyt )  :wiki the_new_york_times )  :arg0-of ( show :arg1 tuesday )  )  :purpose ( vote :arg1 just :op1-of new )  )
possible :arg1 ( and :op1 ( obvious :arg0 - )  :op2 ( change :arg0 lot :arg1 that )  :op3 ( possible :arg1 ( say :arg1 ( mind :arg1-of ( change :arg0 they )  )  :mod really )  )  )
say :arg1 ( leave :arg0 they :arg1 ( percentage-entity :value 46 )  :arg2 ( open :arg1 door :arg2 ( switch :arg1 candidate )  )  )
contrast :arg1 carson :arg2 ( say :arg0 ( person :arg0-of vote :mod ( fellow :arg1-of ( likely :arg0 mind :arg1-of trump )  :mod ( moment :arg0-of ( compete :arg1-of ( strong :degree most )  :mod still )  )  :mod-of neurosurgeon :mod-of ben :mod-of outsider )  )  :arg1 they )
say :arg0 ( person :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  :quant 10 )  :arg1 ( agree :arg0 they :arg1 ( person :name ( name :op1 trump )  )  :time ( immigrate :arg1 6 )  )
announce :arg0 ( he :arg0-of ( converse :arg1 ( center :mod front :mod-of ( date-entity :year 2016 )  :op2-of ( and :op1 ( call :arg0 ( person :mod even :mod since :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  :arg1 ( person :arg0-of immigrate )  :arg2 ( country :name ( name :op1 mexico )  :wiki mexico )  )  )  )  )  :arg0-of immigrate :arg0-of ( campaign :arg1 2 )  )  :arg1 ( speech :mod-of ( temporal-quantity :unit month )  )
trump :arg1 ( drive :arg1 crucial )  :arg2 ( worry :arg0 ( person :arg0-of ( vote :arg1 hispanic )  :poss-of ( away :poss ( political-party :name ( name :op1 republican :op2 party )  :op1-of ( and :op2 ( damage :arg1 effort )  )  :poss-of rebrand )  )  )  :arg1 that :arg2 bombast :arg3 some )
contrast :arg2 ( say :arg0 ( person :arg0-of immigrate :arg0-of ( say :arg1 ( agree :arg0 they :arg1 ( issue :arg1-of trump )  :arg1-of ( poll :arg0 6 :arg1-of ( post :arg0 new :op1-of slash :time ( name :op1 abc )  )  )  )  )  :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  :mod 10 )  :arg1 monday )
cause :arg0 too :arg1 ( seem :arg1 ( remain :arg1 ( person :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  )  :time ( remain :arg1 immigrate :arg2 spotlight )  )  :arg1-of long
high :mod new :purpose-of ( climb :arg0 ( government-organization :arg0-of govern )  )
outsider :mod-of ( status :poss ( person :name ( name :op1 donald :op2 trump )  :op1-of ( and :arg0-of ( account :arg1 half :time now )  :op2 ( person :name ( name :op1 ben :op2 carson )  )  :op3 ( person :arg0-of ( support :arg1 large )  :arg0-of ( vote :arg1 roughly )  :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  )  :wiki donald_trump )  )
say :arg0 ( person :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  :quant 10 )  :arg1 ( want :arg0 they :arg1 ( politics :op1-of someone :op1-of ( over :op2 outsider )  )  :arg1-of ( experience :arg1-of ( govern :arg0 government-organization )  )  :arg1-of ( post :op5-of ( slash :op1 6 :op2 monday :op3 new :op4 ( name :op1 abc )  )  )  )  :arg1-of poll
and :op1 ( angry :arg0 they :location ( city :name ( name :op1 washington )  :wiki washington,_d.c. )  :mod too )
show :arg0 ( state :name ( name :op1 iowa )  :wiki iowa )  :arg2 ( person :arg1-of ( frustrate :arg0 ( state :name ( name :op1 iowa )  :wiki iowa )  :arg1-of ( poll :arg0 ( person :arg2-of ( register :arg0 moin )  :name ( name :op1 bloomberg )  :op1-of slash :wiki michael_bloomberg )  :arg2 ( 2 :quant-of ( temporal-quantity :quant 3 :unit week )  )  )  )  :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  :mod 4 :poss-of ( government-organization :arg0-of ( mad :arg1 ( and :op1 21 )  :arg2 percentage-entity :mod-of hell )  :name ( name :op1 congress )  :poss-of percentage-entity :poss-of 54 :poss-of unsatisfi :wiki united_states_congress )  )  :mod that
residence :arg1-of ( exclusive :arg0 ( city :name ( name :op1 munich )  :wiki munich )  :arg2 ( 5 :op1-of ( organization :name ( name :op1 sylt :op2 und :op3 co )  )  )  :degree most :mod-of ( area :mod ( country :name ( name :op1 germany )  :wiki germany )  )  )
mudflat :mod ( sea :arg1-of ( view :arg2 north_korea :mod ( expensive :mod-of ( reside :arg1 ( develop :arg1 locate )  )  )  :mod over :mod most :mod here )  )
cost :arg1 ( house :arg0-of thatch )  :arg2 ( average :arg0 ( metre :mod square )  :arg1 ( road :mod this )  )
say :arg0 on :arg1 ( study :arg0-of ( high :arg1 ( price :arg1 property )  )  :arg1 hence :arg1-of natural :arg1-of ( offer :arg0 of :arg3 number )  :arg1-of limit )
indicate :arg0 ( study :arg0 metre :arg1 square :mod new :mod this )  :arg1 ( location :mod particular )  :arg2 ( accommodation :mod ( expensive :degree most )  )
metre :arg0-of ( low :arg1 ( city :location-of ( dig :arg0 ( person :arg0-of study )  )  :name ( name :op1 munich )  :wiki munich )  :degree really :polarity - )  :mod square
seem :arg1 ( like :arg0 ( country :arg0-of ( compare :arg1 ( area :mod top )  )  :name ( name :op1 germany )  :wiki germany )  :arg1 peanut :arg1-of price )  :mod this
publish :arg0 ( organization :arg0-of ( reside :arg1-of ( exclusive :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :degree ( most :degree-of ( high :arg1 ( price :op1-of ( square :mod-of metre )  )  :degree staggeringly )  )  )  :arg2 area )  :name ( name :op1 property )  :op1-of ( service :mod property )  )  :arg1 ( table :op1-of of :op1-of league )
quare :mod-of ( metre :mod more-than :poss ( you :arg1-of mind )  :prep-in-of ( there :mod-of nothing )  )
cause :arg0 ( you :arg0-of ( okay :arg1 expressive )  :arg0-of ( afford :arg1 it :polarity - )  )  :arg1 ca
once :arg2-of ( lead :arg0 incidental :arg1 ( city :name ( name :op1 munich )  :wiki munich )  :polarity - )
and :arg1-of ( thank :arg1-of ( start :arg0 ( thing :name ( name :op1 champions :op2 league )  )  )  )  :op1 ( person :arg0-of ( dream :arg1 off :topic-of ( organization :name ( name :op1 bayern )  )  )  :name ( name :op1 müller )  )  :op2 ( person :name ( name :op1 götze )  )
score :arg1 ( double :arg0 simple :domain-of roll )  :arg2 goal :location ( country :mod-of ( organization :mod-of ( star :name ( name :name-of person :op1 thomas :op2 müller )  )  :name ( name :op1 bayern )  )  :name ( name :op1 piraeus )  )
victory :arg1-of ( get :arg0 ( person :arg0-of ( pave :arg1 ( way :poss ( goal :mod lucky )  )  )  :name ( name :op1 thomas :op2 müller )  )  :arg2 good :time then )  :beneficiary ( organization :location ( country :mod 3 :name ( name :op1 olypiacos :op2 piraeus )  )  :name ( name :op1 fc :op2 bayern )  )  :quant 0
start :arg1 ( season :mod ( thing :name ( name :op1 champions :op2 league )  )  )  :arg1-of confident
and :op1 ( person :arg1-of ( champion :arg0 ( country :name ( name :op1 world )  )  :mod world )  :name ( name :op1 world )  )  :op2 ( person :arg0-of ( dream :arg1 ( thing :arg1-of seethe :name ( name :op1 world )  )  )  :arg0-of ( bring :arg1 about )  :arg0-of ( start :arg1 cauldron )  :name ( name :op1 world )  )
hold :arg0 ( person :arg1-of ( thank :arg0 ( team :arg0-of ( open :arg1 ( match :arg1 ( 0 :mod-of ( 0 :mod-of 0 )  :quant 3 )  )  :op1-of ( and :op2 ( goal :quant-of ( temporal-quantity :unit minute )  )  :op3 ( end :arg1 ( score :mod-of of )  )  :quant 2 )  :op1-of ( and :op2 ( 90th :quant-of ( temporal-quantity :unit minute )  )  )  )  :arg0-of ( champion :arg1 league :arg2 ( hot :arg1 ( atmosphere :mod-of away )  )  )  :arg0-of ( win :arg1 train )  )  :arg2 müll )  :mod ( country :name ( name :op1 greece )  :wiki greece )  )  :arg1 record
recommend :arg1 ( step :arg0-of ( start :arg1 row :arg1-of ( succeed :arg0 ( person :arg0-of ( want :arg1 ( end :arg1 ( attempt :arg0 person )  :manner ( take :arg0 ( country :location-of final :name ( name :op1 italy )  :wiki italy )  :arg1 trophy :arg3 ( city :name ( name :op1 munich )  :wiki munich )  :mod back )  )  :time ( date-entity :day 28 :month 5 :year 2016 )  )  :name ( name :op1 guardiola )  )  )  :mod twelfth )  )
let :arg1 ( thing :arg2-of ( help :arg0 ( thing :name ( name :op1 champions :op2 league )  )  :arg1 ( goal :mod 28th )  :arg1-of gracious :arg1-of ( lead :arg0 ( person :name ( name :op1 müller )  :poss-of ( organization :name ( name :op1 bayern )  )  )  )  )  :mod ( organization :name ( name :op1 olymiacos )  )  :name ( name :op1 goalie :op2 roberto )  )  :arg2 ( shoot :arg0 ( champion :mod world )  :arg1-of cross )
and :arg2-of ( promise :arg0 ( they :arg1-of ( underestimate :arg0 ( we :arg0-of ( have-org-role :arg1 game :arg2 captain )  )  )  )  :arg1 bayern :polarity - )  :op1 karaiskaki :op2 front :op3 ( fan :arg1-of ( blood :arg0 stadium :arg2 ( city :name ( name :op1 munich )  :wiki munich )  :time ( before :op1 lahm )  )  )  :op4 ( thing :arg0-of ( play :arg1 ( keep :arg1 he :mod-of word )  )  :arg1-of ( hot :arg0 of )  )
commit :arg1 ( perform :arg1-of ( demonstrate :arg0 they :arg2 showy )  )  :op2-of ( and :op1 concentrate )
and :example-of ( club :mod prominent )  :op1 ( win :arg0 ( country :name ( name :op1 piraeus )  )  :arg1 such :arg2 ( premiere :arg0 ( game :mod home :mod class )  :quant 6 :time ( recent :degree most )  )  )  :op2 ( organization :name ( name :op1 manchester :op2 united )  )  :op3 ( city :name ( name :op1 madrid )  :wiki madrid )  :op4 ( organization :name ( name :op1 juventus :op2 turin )  )
stumble :arg0 ( organization :name ( name :op1 borussia :op2 dortmund )  )  :location here :mod too :time ( date-entity :year 2011 )
contrast :arg2 ( want :arg0 ( organization :arg0-of ( duel :arg1 ( thing :name ( name :op1 europa :op2 cup )  )  :arg2 ( team :poss ( country :name ( name :op1 greece )  :wiki greece )  )  :quant 7 )  :name ( name :op1 bayern )  )  :arg1 ( victim :mod next )  :polarity - )
contrast :arg1 ( go :arg0 they :arg1-of bold :arg4 work )  :arg2 ( uninspir :degree too :frequency often :time ( effort :arg0-of offense )  )
brunswick :arg1-of ( play :arg0 ( thing :mod-of ( person :name ( name :op1 omar :op2 elabdellaoui )  :op1-of ( past :arg1-of ( get :arg0 ( person :arg0-of ( wing :mod left )  :arg1-of ( bring :arg2 ( play :arg1 former )  :manner-of ( initiate :arg1 attack :frequency ( often :degree too )  )  )  :name ( name :op1 douglas :op2 costa )  )  :arg1-of rare )  )  )  )  )
goal :part ( corner :arg2-of ( drive :arg0 ( shoot :arg0 ( field :mod right )  :arg1 ( cross :op1-of ( left :mod top )  )  )  :arg1 ( right :arg0 ( luck :quant more )  :arg1 ( person :name ( name :op1 müller )  )  )  )  )
miss :arg0 2 :arg1 ( chance :arg0 ( champion :mod world )  :arg1 ( take :arg1 ( match :arg1 0 )  )  :time ( temporal-quantity :unit minute )  )
half :topic-of ( opportunity :domain ( person :name ( name :op1 robert :op2 lewandowski )  )  :mod ( good :degree most )  )
header :arg1-of ( hit :arg0 ( person :name ( name :op1 brown )  :wiki gordon_brown )  :arg1-of ( strike :arg0 ( line :mod-of ( 26th :mod-of ( temporal-quantity :unit minute )  )  )  )  )
goalie :arg0-of ( parry :arg1 shoot :arg2 ( knee :arg1 then :location ( 35th :mod-of ( minute :unit-of temporal-quantity )  )  )  )
possible :arg1 ( needle :arg0 ( country :name ( name :op1 piraeus )  )  )  :time ( use :arg1 ( organization :name ( name :op1 bayern )  )  :arg2 ( play :arg1 ( game :arg1-of dominate )  :arg0 organization )  )
contrast :arg2 ( possible :arg1 ( count :arg0 they :arg1 ( person :mod goalkeep :name ( name :op1 manuel :op2 neuer )  )  )  )
crossbar :arg2-of ( shoot :arg0 ( person :name ( name :op1 ideye )  )  :arg1 ( temporal-quantity :unit minute )  :arg1-of ( steer :arg0 he :time-of example )  )
jerome :op1-of ( name :name-of ( thing :op1 ( deploy :arg0 ( next :location-of ( centre-left :location-of ( thing :name ( name :op1 david :op2 alba )  )  )  )  :arg1 ( defend :arg0 ( person :name ( name :op1 guardiola )  )  :arg1 backfield :domain-of neu :mod man :quant 4 )  :arg2 front )  )  :op2 boateng )
muscle :topic-of ( problem :arg2-of ( follow :arg0 squad :arg1 back )  :arg4-of ( sit :arg1 ( person :name ( name :op1 mario :op2 götze )  )  :arg2 sideline :time initial )  )
say :arg0 ( person :arg0-of ( have-org-role :arg2 director )  :arg2-of ( give :arg1 ( hero :mod ( cup :mod world )  )  :arg1-of follow :arg1-of ( light :arg0 they :time final )  :arg1-of green :mod only )  :arg2-of ( train :arg1 ( want :arg0 anyone :arg1 malicious :arg1-of ( mean :mod sky )  )  )  :name ( name :op1 the )  )  :arg1 ( something :mod ( else :mod-of ( of :mod that )  )  )  :arg1-of sport
decide :arg0 ( person :name ( name :op1 guardiola )  )  :arg1 ( he :arg0-of ( bring :arg1 ( person :name ( name :op1 kingsley :op2 coman )  )  :arg2 ( person :mod stricken :name ( name :op1 lewandowski )  )  )  :poss-of ( minute :unit-of temporal-quantity )  )  :time change
penalize :arg0 ( temporal-quantity :unit minute )  :arg1 ( person :arg0-of ( put :arg1 one :op2-of ( and :op1 ( and :op1 ( come :arg0 another :arg1 ( person :name ( name :op1 götze )  )  :time late )  :op2 ( prove :arg1 ( person :name ( name :op1 arturo :op2 vidal )  )  :time ( late :op1 ( temporal-quantity :quant 13 :unit minute )  )  )  )  )  )  :name ( name :op1 müller )  )
riot :location ( stadium :arg1-of ( match :op1-of before )  )
and :op1 ( attack :arg0 ( force :arg0-of ( use :arg1 ( baton :poss ( person :arg0-of ( support :arg1 ( city :name ( name :op1 munich )  :wiki munich )  )  )  )  )  :mod security )  :arg1 ( and :op1 ( gesture :arg1 ( wear :arg1 ( thing :arg2-of mask :quant some )  )  )  )  :time ( after :op1 ( provoke :arg0 ( group :mod small :part-of ( fan :poss ( organization :name ( name :op1 bayern )  )  )  )  :arg1 ( person :arg0-of ( support :arg1 ( country :arg1-of ( host :arg2 ( behind :op1 fence )  )  :name ( name :op1 piraeus )  )  )  )  :arg2 word :manner apparent )  )  )
take :arg1 ( fan :mod ( organization :name ( name :op1 bayern )  )  )  :arg1-of ( injure :arg2 stadium )
tooth :arg1-of ( lose :arg2-of ( risk :mod great )  )
contrast :arg1 ( lung :arg1-of ( damage :arg0 smoker )  )  :arg2 ( study :arg0 ( - :polarity-of only )  :arg1 potsdam :arg1-of ( conclude :arg0 ( tooth :mod also )  )  :arg1-of long )
risk :arg1 ( good :mod-of news )  :arg1-of ( give :arg0 you :arg0-of ( decrease :arg1 fast )  )
smoker :arg0-of ( increase :arg1 ( risk :arg1-of significant :arg2 ( lose :arg0 early :arg1 tooth )  )  )
nutritional :arg1-of ( research :arg0 ( team :arg0-of ( emerge :arg1 this :arg2 ( study :arg0 potsdam :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg1-of long )  )  :consist-of ( person :arg0-of research )  :mod international )  :arg0-of ( employ :arg1 ( person :quant number )  )  )
premature :arg2-of ( lose :arg0 ( person :arg0-of smoke :arg2-of ( compare :arg0 3.6 :arg1 2.5 :arg4 - )  :op1-of and )  :arg1 tooth :arg2-of ( risk :arg1-of ( high :arg2 ( person :arg0-of smoke )  )  )  )
monitor :arg0 scientist :arg1 ( person :arg0-of participate :quant more )
and :arg1-of ( gum :arg0 ( state :poss ( organization :name ( name :op1 dife )  )  )  )  :op1 ( tooth :mod-of loss )  :op2 cari :op3 ( inflammation :domain ( reason :mod main )  )
factor :arg1-of ( risk :arg1-of author )  :domain smoke :mod ( periodontiti :mod this )
possible :arg1 ( attribute :arg1 ( connect :arg1 ( smoke :arg1 tooth :op1-of ( and :op2 ( person :arg0-of smoke )  )  )  :arg2 loss )  :arg2 ( inflammation :arg1-of ( frequent :degree more )  :mod gum )  )
cari :arg2-of ( risk :arg0 ( smoke :arg1 amr-unknown )  :arg1-of ( raise :arg0 extent :arg4-of ( clarify :arg1 it :polarity - )  )  )
write :arg0 ( person :arg0-of ( research :arg1 ( smoke :arg1 amr-unknown :arg1-of ( risk :arg2 within :time ( time :mod short )  )  :arg1-of ( stop :arg0 person )  :arg1-of ( reduce :arg0 their )  :arg1-of possible )  )  )  :arg1 ( organization :name ( name :op1 people )  )
drop :arg0 once :arg1 ( take :arg0 ( person :arg0-of ( declare :arg1 ( smoke :arg0 ( country :name ( name :op1 england )  :name ( name :op1 birmingham )  :wiki england )  :arg1 level :polarity - )  :arg1-of lead )  :arg0-of ( author :arg1 dietrich )  :name ( name :op1 thomas )  :wiki - )  :arg1 ( it :arg1-of possible )  :arg3 danger :op1-of ( before :quant ( temporal-quantity :quant 10 :unit year )  )  )  :degree more
mean :arg1 dife :arg2 ( study :arg0-of ( shorten :arg1 lifespan )  :arg1-of persuade :arg1-of ( recommend :arg0 person )  :arg1-of ( declare :arg0 ( company :name ( name :op1 boeing )  :wiki boeing )  )  :arg1-of ( become :arg2 ( person :arg0-of smoke )  )  :arg1-of ( smoke :arg0 of )  :arg2-of ( lead :arg0 person :arg1 hein )  )  :polarity -
and :op1 ( lung :op2-of ( and :arg1-of ( experience :arg3-of ( lead :arg1 we :arg2 ( health :mod good :mod dental )  )  )  :op1 ( good :domain ( smoke :arg1 ( age :arg1 - :arg1-of advanced )  )  )  :op3 vessel )  )
say :arg0 ( organization :name ( name :op1 dife )  )  :arg1 ( affect :arg0 ( toothlessnes :arg1-of ( age :arg0 ( group :mod 74 :mod ( country :name ( name :op1 germany )  :wiki germany )  :quant 65 )  )  )  :arg1 ( population :part ( percentage-entity :value 20 )  )  )
indicate :arg0 ( study :arg1 early )  :arg1 ( increase :arg0 smoke :arg1 ( risk :arg2 ( loss :mod tooth :mod early )  )  )  :time already
substantiate :arg0 ( study :mod ( term :arg1-of long )  :mod new )  :arg1 ( thing :arg1-of find :mod this )
discover :arg0 archaeologist :arg1 ( remain :arg1 ( bank :poss ( country :name ( name :op1 rhine )  )  )  :mod ancient )  :arg2 ( country :name ( name :op1 cologne )  )
find :arg0 ( country :name ( name :op1 rhine )  :poss-of ( bank :mod right )  )  :arg1 archaeological :manner ( country :name ( name :op1 cologne )  :poss-of again )
say :arg0 ( person :arg0-of ( have-org-role :arg1 museum :arg2 director )  :name ( name :op1 marcus :op2 trier )  )  :arg1 ( unearth :arg0 ( archaeologist :source ( thing :name ( name :op1 roman :op2 germanic :op3 museum )  )  )  :arg1 ( and :op1 skeleton :op2 ( remain :arg0 tuesday :arg1 ( building :mod history )  )  )  :arg1-of ( near :arg2 ( site :arg0-of ( construct :arg1 ( organization :mod new :name ( name :op1 rhine :op2 boulevard )  )  )  )  )  )
historian :arg0-of ( start :arg1 ( work :arg1 ( construct :arg0 rhine :arg1 ( search :arg1 ( monument :arg1-of ( call :arg2 architectural )  :arg1-of cause )  )  )  )  :op1-of since )
consult :arg1 museum :time always :time ( carry-out :arg1 ( project :topic ( construct :arg1 ( conserve :arg1 monument :mod archaeological :purpose-of department )  )  )  :location ( city :mod-of ( district :location ( country :name ( name :op1 cologne )  )  )  )  )
find :arg1 archaeologist :location ( phase :mod construct :part-of ( country :name ( name :op1 rhein :op2 boulevard )  )  )
know :arg0 it :arg1 ( and :op1 ( stand :arg1 fortress :arg2 ( spot :mod this )  )  :op2 ( explain :arg1 ( country :name ( name :op1 trier )  )  :manner ( 8th :mod-of ( century :unit-of ( temporal-quantity :mod ( temporal-quantity :unit ( century :mod 4th )  )  )  )  )  )  )  :arg2 ( document :mod ( text :mod-of church )  )  :time already
probable :mod-of ( belong :arg0 ( cemetery :arg1-of ( discover :arg0 ( around :quant-of ( grave :quant 350 )  )  :mod also )  :op3-of ( and :op1 ( remain :arg1 fortress :op1-of besides )  :op2 ( tower :quant church )  )  )  :arg1 church )
woman :arg1-of ( hit :arg0 good :arg2 train )  :mod ( person :name ( name :op1 young )  )
ask :arg0 police :arg1 ( public :mod general )  :arg2 help :time ( after :op1 ( woman :mod young )  :op2 ( meet :arg1 ( accident :location ( station :location ( country :name ( name :op1 geilenkirchen-lindern )  )  )  )  )  )
and :op1 ( cross :arg0 ( woman :arg0-of ( end :arg1 ( platform :arg1-of ( come :arg2 ( morning :time early )  :arg3 ( direction :arg0-of ( build :arg1 station :arg2 a.m. :op1-of about :op1-of 1 )  )  :op1-of wednesday )  )  )  :mod young )  :arg1 track )  :op2 ( hit :arg0 40 :arg1 ( train :arg1-of ( come :arg3 ( direction :poss ( country :name ( name :op1 mönchengladbach )  )  )  )  :mod good )  )
say :arg0 police :arg1 ( suffer :arg0 she :arg1 ( injure :arg1 federal :mod severe )  :arg2 accident )
and :op1 ( take :arg0 ambulance :arg1 ( she :arg1-of ( treat :arg0 ( doctor :mod emergency )  :location site )  )  :arg3 hospital )
investigate :arg0 ( night :time-of ( cross :arg0 ( woman :mod young )  :arg1 track :topic-of ( idea :polarity - )  )  )  :arg1 ( person :arg0-of ( have-org-role :arg2 officer )  )
possible :arg1 ( it :arg0-of ( observe :arg1 event :time ( hear :arg0 ( person :arg0-of witness :op1-of ( or :op2 ( person :arg0-of reside )  )  )  :arg1 something :arg1-of possible )  )  )
and :arg0-of ( pass :arg1 ( or :arg1-of ( apply :arg0 this :arg1-of ( possible :arg0 ( 364 :mod l )  )  )  :op1 ( person :arg0-of reside )  :op2 person )  )  :op1 ( station :mod ( thing :name ( name :op1 lindern )  )  )  :op2 ( country :name ( name :op1 ziegelbäckerweg )  )  :op3 ( country :name ( name :op1 thomashofstrasse )  )  :op4 ( country :name ( name :op1 leiffarther :op2 strasse )  )
cause :arg0-of ( provide :arg1 ( information :arg1-of ( give :arg0 8000 :arg1-of ( possible :arg0 ( station :mod police :mod any )  )  :arg2 ( call :arg1 ( hotline :arg1-of ( free :time-of ( 24 :quant-of ( temporal-quantity :unit hour )  )  )  :mod police )  :arg2 ( slash :op1-of or :time ( date-entity :year 0800 )  )  )  )  :mod any )  :arg1-of possible )  :arg1 accident
propose :arg0 ( organization :name ( name :op1 eu :op2 commission )  :poss-of ( controversy :topic ( organization :name ( name :op1 ttip )  )  )  )  :arg1 ( court :mod new )
propose :arg0 ( organization :arg0-of ( reform :arg1 ( system :mod ( arbitrate :arg1 ( organization :name ( name :op1 ttip )  )  )  :time current )  )  :arg0-of ( defuse :arg1 controversy )  :arg0-of ( plan :arg1 ( organization :name ( name :op1 transatlantic :op2 trade :op3 and :op4 investment :op5 partnership )  )  )  :name ( name :op1 eu :op2 commission )  )  :arg1 substantial
say :arg0 this :arg1 ( replace :arg1 ( board :arg2-of dispute :mod ( arbitrate :arg1-of private )  )  :arg2 ( system :arg0-of ( correspond :arg1 ( more :mod considerable )  :arg3 ( court :arg1-of function :mod tradition )  )  :mod ( country :arg1-of conflict :op2-of ( and :op1 corporation )  )  :mod transparent )  )
state :arg0 ( citizen :arg0-of ( trust :arg1-of ( want :arg0 we )  )  :mod-of system )  :arg1 ( responsible :arg1 ( organization :arg1-of ( have-org-role :arg0 ( person :arg0-of ( introduce :arg1 it )  :name ( name :op1 &quot; )  )  :arg2 commissioner )  :name ( name :op1 eu )  :wiki european_union )  )
plan :arg0 ( thing :name ( name :op1 swede )  )  :arg1 ( introduce :arg1 ( propose :arg0 ( position :mod negotiate :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :time ( talk :arg1 trade :arg1-of free :arg2 ( country :name ( name :op1 usa )  :wiki united_states )  )  )
announce :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 germany )  :wiki germany )  )  )  :arg1 ( support :arg0 government-organization )
result :arg1 ( create :arg0-of ( cover :arg1 person )  :arg1 ( organization :name ( name :op1 ttip )  )  )  :arg2 ( zone :arg1-of ( free :compared-to ( world :compared-to-of ( large :degree most )  )  )  :mod ( trade :arg1 800 )  )
and :op1 ( plan :arg1 ( reform :arg1 ( procedure :instrument-of arbitrate :mod current )  )  )  :op2 ( provide :arg2 ( state :poss ( organization :name ( name :op1 eu )  :wiki european_union )  )  :manner specific )  :op3 ( select :arg0 ( country :name ( name :op1 usa )  :wiki united_states )  :arg1 ( judge :arg0 ( court :mod invest :mod new )  :arg0-of ( depend :polarity - )  )  :manner joint )
recommend :arg1 ( come :arg1 they )  :prep-in ( proportion :arg1-of equal :source ( organization :name ( name :op1 eu )  :op1-of ( and :op2 ( country :name ( name :op1 usa )  :wiki united_states )  :op3 ( country :arg1-of ( have-org-role :arg2 member :polarity - )  )  )  :wiki european_union )  )
provide :arg1 instance :arg2 time :mod also
allow :arg0 this :arg1 ( appeal :purpose-of judgement )
appeal :arg1 judgement :arg1-of ( possible :op2-of ( and :op1 ( agree :arg0 ( party :arg1-of proceeding )  :arg1 arbitrator :time ( up :arg1 now )  )  )  :polarity - )
comment :arg0 ( person :name ( name :op1 malström )  )  :arg1 ( become :arg2 ( clear :arg1 ( trust :arg0 citizen :arg1 ( discuss :arg0 ( month :unit-of ( temporal-quantity :op1-of past )  )  :arg1 - )  :arg2 ( system :domain-of ( fair :op1-of and )  :mod ( organization :name ( name :op1 isds )  )  :mod old )  )  )  )  :manner just
state :arg2-of ( say :arg1 ( want :arg0 ( she :poss-of ( term :arg1-of long )  )  :arg1 ( aim :arg0 ( court :mod invest :mod international )  :arg1 she )  )  )
possible :arg1 ( clear :arg1 ( dispute :arg0 ( company :mod ( country :name ( name :op1 china )  :wiki china )  :op1-of ( and :op2 ( organization :name ( name :op1 eu )  :wiki european_union )  :op3 country )  )  :arg1 this )  :purpose example )
say :arg1 ( oppose :arg0 ( organization :name ( name :op1 isds )  )  :arg1 ( organization :location ( continent :name ( name :op1 europe )  :wiki europe )  :name ( name :op1 ttip )  )  :arg1-of ( stiff :arg0 particular )  :purpose-of ( require :arg0 ( company :mod large )  :arg1 ( thing :mod ( state :mod investor )  :name ( name :op1 dispute :op2 settlement )  )  )  )  :arg2 ( reason :mod main )
and :op1 ( person :arg0-of consume :arg1-of ( protect :arg0 environment )  :op2-of ( or :op1 ( enforce :arg0 ( company :arg0-of ( fight :arg1 ( form :arg2-of ( criticize :arg0 adversari :arg1 ( court :mod ( arbitrate :arg1 ( justice :arg1-of parallel )  )  )  )  )  :arg1-of possible :arg2 ( compensate :arg1 traditional :arg2 ( person :arg0-of expend :arg0-of ( pay :arg3 tax )  )  )  )  )  :arg1 ( lower :arg1 standard )  :op2-of ( and :op1 ( null :arg1 ( law :arg1-of void :mod nation )  )  )  )  )  )
adequate :arg1-of ( propose :arg0 ( organization :arg0-of ( commission :arg1 ( call :arg0 such :arg1 ( oppose :arg0 organization :arg1 ( initial :arg1-of react )  )  )  )  :name ( name :op1 eu )  :wiki european_union )  )  :polarity -
negotiate :arg1 ( agree :arg0 ( they :arg0-of ( apply :arg1 ( particular :location-of criticize )  :polarity - )  )  :arg1 ( trade :arg3-of ( free :arg1 ( country :name ( name :op1 ceta )  )  )  )  :arg2 ( country :name ( name :op1 canada )  :wiki canada )  )  :time already
refer :arg0 ( person :name ( name :op1 matthias :op2 machnig )  )  :arg1 ( plan :arg0 ( organization :name ( name :op1 spd )  )  :arg1 ( hand :mod other )  )  :arg2 ( progress :arg1 ( have-org-role :arg0 economy :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2 ( secretary :poss state )  )  :arg1-of major )
include :arg0 federal :arg1 ( point :arg1-of key :arg1-of ( develop :arg0 ( person :arg0-of ( have-org-role :arg1 economic :arg2 minister )  :name ( name :op1 sigmar :op2 gabriel )  )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( trade :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  )  :arg2 ( minister :mod other )  )  )  )  )  :arg2 ( commission :arg0-of reform )
system :mod ( court :arg1-of private :mod ( arbitrate :arg1 table )  )  :mod old
welcome :arg0 ( government-organization :arg0-of ( plan :arg1 france )  :arg0-of govern )  :arg1 too
warn :arg0 ( organization :arg0-of ( associate :arg1 industry :arg2 business )  :mod ( continent :name ( name :op1 europe )  :wiki europe )  :name ( name :op1 businesseurope )  )  :arg1 ( restrict :arg1 ( option :arg0-of ( take :arg1 ( action :arg1-of legal )  :arg3 ( rule :mod new :quant ( many :degree too )  )  )  )  )
say :arg0 they :arg1 ( possible :arg1 ( disadvantage :arg1 ( enterprise :mod ( medium :arg2-of size )  :op2-of ( and :op1 small )  )  :manner particular )  )
clear :arg1 ( conclude :arg1 ( talk :manner ( agree :arg0 ( organization :name ( name :op1 ttip )  )  :arg1 ( trade :arg3-of ( free :arg1 wednesday )  )  )  )  :arg1-of possible )  :mod still :polarity -
take :arg0 negotiation :arg1 place :time ( since :op1 ( middle :part-of ( date-entity :year 2013 )  )  )
discuss :arg0 date :arg1 ( issue :arg0 ( protect :arg0 - :arg1 ( person :arg0-of invest )  )  )  :arg2 ( country :name ( name :op1 usa )  :wiki united_states )
plan :arg1 it :arg2 ( structure :purpose ( agree :arg1 ( year :arg1-of end :mod this )  :arg1-of complete )  )  :mod original
tenable :arg1-of ( long :polarity - )  :domain ( date :mod this )
folk :location ( country :name ( name :op1 hamburg )  )  :source ( person :name ( name :op1 sufjan :op2 stevens )  )
eleven :quant-of ( temporal-quantity :arg0-of ( club :arg1 ( stage :arg2-of ( sit :arg0 ( now :mod-of ( country :name ( name :op1 luxor )  )  )  :arg1 ( person :name ( name :op1 sufjan :op2 stevens )  )  )  )  :location ( country :name ( name :op1 cologne )  )  :mod prime )  :unit year )
seem :arg1 ( shy :arg1 ( person :arg0-of ( draw :arg1 ( state :mod michigan :mod picturesque :poss ( country :name ( name :op1 us )  :wiki united_states )  )  )  :arg0-of ( pen :arg1 ( chart :arg1-of stand :mod flip )  :mod ( tip :arg1-of feel )  )  :arg0-of ( sing :arg1 folk )  )  )
mesmerise :mod-of ( perform :arg0 ( entire :mod-of audience )  :arg1 ( person :mod some :mod 40 :poss-of virtual )  )
mark :arg0 ( he :arg1-of ( differ :arg2 ( contrive :arg1 ( song :op1-of ( behind :time-of ( talk :arg1 story :purpose ( refer :arg1 place )  )  )  )  :degree subtly :op2-of ( and :op1 meticulous )  )  )  )  :arg1 map :time ( time :mod each )
and :location ( they :arg0-of originate )  :op1 ( look :arg1 resemble :location ( country :mod home )  )
prove :arg0 ( person :name ( name :op1 stevens )  )  :arg1 ( nutcase :mod creative :mod wonderfully )  :time ( since :op1 then )
contrast :arg1 ( possible :arg1 ( drift :arg0 ( folk :op1-of rock )  :arg1 ( amaze :arg0 ( he :arg0-of ( cling :arg1 harmonically )  :arg0-of ( compose :arg1 song :arg2 ( feature :arg1 cleverly :arg2-of ( release :arg0 state :arg1 tradition :time ( date-entity :year 2003 )  )  )  )  :poss-of lake :poss-of greeting :poss-of album )  :arg1 opulence )  :arg2 ( time :mod any )  )  )  :arg2 ( sixti :op1 late )
of :mod first :mod-of ( bold :arg0 ( country :arg0-of ( rumor :arg1 that :arg2 it )  :name ( name :op1 rumour )  )  :arg1 ( each :arg0-of follow :mod-of ( song :mod-of about )  :mod-of ( 50 :mod-of ( country :name ( name :op1 united :op2 states )  :wiki united_states )  )  )  :arg2 series )
contrast :arg1 area :arg2 ( expect :arg0 7 :arg1 positive :time ( burst :arg1-of ( come :time ( date-entity :year 2004 )  )  )  )
seem :arg1 ( downsize :arg1 ( person :name ( name :op1 stevens )  )  :location here )
and :arg1-of ( need :arg0 he :arg1-of ( live :arg0 play )  :manner only )  :op1 guitar :op2 banjo
return :arg0 ( musician :arg1-of ( base :arg2 1 :location ( city :name ( name :op1 new :op2 york )  :wiki new_york_city )  )  )  :arg1 series :duration year :time late
mean :arg1 ( invite :arg0 ( state :name ( name :op1 illinois )  :wiki illinois )  :arg1 ( person :arg1-of ( release :arg0 masterpiece :time ( date-entity :year 2005 )  )  :arg1-of ( come :arg1-of ( feel :arg0 ( you :arg0-of ( acclaim :arg1 wide )  )  )  )  :name ( name :op1 with )  )  )
and :op1 idea :op2 ( sophistication :mod stylistic )
and :op1 ( climb :arg0 album :arg1 ( chart :mod billboard )  )  :op2 ( appear :arg1 ( influence :arg0 ( press :arg1-of ( list :arg2 year )  )  :arg1 music )  :arg2 ( album :mod every :mod ( good :degree most )  )  )
age :arg1 ( productive :arg1 ( piece :arg1-of ( elaborate :time ( date-entity :year 2010 )  )  :arg1-of ( set :arg0 electronic )  )  :arg1-of ( experiment :arg0 extreme :time after )  :arg1-of ( serve :time then )  )
contrast :arg1 ( orchestrate :arg1 ( album :mod proper :mod this :mod studio :mod sixth )  :degree broad )  :arg2 ( and :manner ( variety :domain ( and :op1 effect :op2 echo )  )  :op1 ( support :arg0 ( sequence :arg1-of program :op1-of ( or :op2 beat )  )  )  :op2 play )  :mod still
become :arg1 ( show :arg1 stage :location here )  :arg2 ( spectacl :mod colourful )  :arg3 ( and :op1 ( headband :mod neon )  :op2 ( huge :mod-of decoration )  )  :time ( since :op1 ( move :arg1 stage :arg2-of ( long :arg0 fluorescent :arg1 small )  :source club )  )
tour :arg0 ( person :name ( name :op1 sufjan :op2 stevens )  )  :arg1 ( country :name ( name :op1 germany )  :topic ( band :mod ( man :quant 5 )  :mod current )  :wiki germany )
keep :arg1 ( thing :name ( name :op1 hamburg :op2 mehr )  )  :arg2 dark
and :time ( date-entity :month 3 )  :time since :time ( present :arg0 theatre :arg1 primary )
and :op1 ( return :arg0 ( person :arg1-of ( mature :arg0 almost :arg1-of ( clear :arg0 ( date-entity :year 2000 )  )  :degree more )  :arg1-of ( sit :arg0 audience :arg1-of spellbind :arg2 seat )  :name ( name :op1 stevens )  )  :arg2 intimacy )  :op2 folk
play :arg0 group :arg1 ( musician :arg1-of excellent )  :manner ( direct :arg1 word :arg2 public )  :time ( album :arg1-of ( enrich :manner wide )  )
mean :arg1 ( hear :arg0 audience :arg0-of ( perform :arg1 more )  :arg1 ( and :arg1-of ( want :arg0 you :arg0-of chuck )  :op1 ( make :arg0 it :arg1 opulent )  :op2 ( away :time-of album )  )  :arg1-of possible )
and :op1 ( take :arg0 ( person :arg0-of ( thank :mod modest )  :arg0-of ( play :arg1 ( few :quant-of ( song :mod old )  )  )  :arg0-of ( give :arg1 thank )  :name ( name :op1 stevens )  )  :arg1 ( bow :arg1 ( encore :location only )  :arg1-of ( applaud :arg0 acoustically )  )  :time final )
question :arg1 ( person :arg0-of ( have-org-role :arg2 ( minister :mod prime )  )  :arg1-of debut :name ( name :op1 jeremy )  )
await :arg0 ( he :arg0-of ( debut :arg1 pmq )  :arg1-of ( elect :time since )  )  :arg1 keenly
question :arg1 ( take :arg0 ( person :arg0-of ( have-org-role :arg2 ( minister :mod prime )  )  :arg0-of ( lead :arg1 ( political-party :name ( name :op1 labour )  :wiki labour_party_[uk] )  )  )  :arg1 ( person :name ( name :op1 david :op2 cameron )  :wiki david_cameron )  :arg1-of ( debut :arg0 he )  :arg2 ( time :mod first )  :time late )
and :op1 ( thing :arg1-of ( question :arg1-of ( ask :arg0 ( thing :arg0-of ( perform :arg1 media :arg1-of likely )  :name ( name :op1 mr :op2 corbyn )  )  :arg1-of rise :time ( after :op1 midday :quant short )  )  :mod ( allot :arg1 close )  :quant 6 )  :name ( name :op1 labour :op2 mps )  )
and :op1 ( call :arg0 he :arg1 less :arg2 ( showpiece :mod-of ( week :unit-of temporal-quantity )  )  )  :op2 theatre :op3 more :op4 fact
say :arg0 he :arg1 ( possible :arg1 ( skip :arg0 ( he :arg0-of ( leave :arg2 colleagu )  )  :arg1 ( session :mod some )  )  )  :mod also
shadow :arg0 ( he :arg0-of ( lead :arg1 of )  :arg0-of ( speak :arg1 tuesday )  :arg1-of appointment :arg1-of encounter :arg1-of ( come :time ( after :time-of ( test :arg0 ( government-organization :name ( name :op1 congress )  :wiki united_states_congress )  :arg1 parliament )  )  )  )  :arg1 ( and :op1 cabinet )
mark :arg0 tuesday :arg1 ( sing :arg0 during :arg1 ( anthem :mod nation )  :arg1-of ( decide :arg0 ( political-party :arg0-of ( lead :arg1 meanwhile :arg2 stand )  :name ( name :op1 labour )  :wiki labour_party_[uk] )  )  :arg1-of silence :arg1-of ( battle :arg0 anniversary :arg2 ( country :arg0-of attract :arg0-of ( criticize :arg1 number :arg2 ( and :op1 ( focus :arg0 ( political-party :name ( name :op1 tory )  :wiki conservative_party_[uk] )  :arg1 ( story :mod ( front :mod-of page )  )  :arg2 several )  :op2 newspaper )  )  :name ( name :op1 britain )  :wiki united_kingdom )  :wiki teutoburg_forest )  :time-of service )  :arg2 75th
anthem :arg1-of ( attend :arg0 nation :arg1-of ( sing :arg1-of ( decide :arg0 mr )  )  :arg1-of attract :polarity - )
say :arg0 ( he :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :arg2 spokesman )  :arg0-of ( do :arg0-of ( recognize :arg1 of )  :arg1 ( respect :arg1 heroism :arg1-of stand :arg1-of ( battle :arg0 ( military :name ( name :op1 royal :op2 air :op3 force )  :wiki royal_air_force )  :wiki teutoburg_forest )  :arg1-of silence )  )  )  :arg1 and
shadow :arg0 ( he :arg0-of ( have-org-role :arg2 member :arg2-of contrast )  :arg2-of ( tell :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg1 program :time ( sing :arg1-of advise :time-of ( lead :arg0 ( political-party :name ( name :op1 labour )  :wiki labour_party_[uk] )  )  :time-of anthem :time-of ( recommend :arg0 ( he :arg0-of believe :arg0-of abolish )  :time monarchy )  :time-of nation :time-of irrespective )  :time smith :time 2 :time owen )  )  :arg1 cabinet
shadow :arg0 dozen :arg1 ( person :arg0-of ( refuse :arg1 nearly )  :arg0-of ( lead :arg1 sixth :arg1-of ( back :arg0 original )  )  :arg0-of ( serve :arg1 ( and :op1 ( defend :arg1 ( economy :arg1-of ( differ :arg0 ( team :arg0-of ( cite :arg1 less )  :mod top )  )  :mod over )  )  :op2 ( affair :mod foreign :mod-of while )  :op3 ( party :mod parliament )  )  )  :arg0-of ( have-org-role :arg2 minister )  )
say :arg0 brant :arg1 ( policy :arg1-of ( differ :arg0 robin_cook :arg2 ( politics :arg0-of ( have-org-role :arg1 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg2 correspondent )  )  )  :arg1-of ( stack :arg0 ( political-party :arg0-of ( appointment :arg1 position :op1-of ( over :op2 it )  )  :arg0-of ( follow :arg1 mr )  :name ( name :op1 labour )  :op1-of ( and :op2 ( organization :name ( name :op1 european :op2 union )  :wiki european_union )  :op3 ( government-organization :arg0-of govern :arg0-of ( benefit :arg1 cap )  )  )  :wiki labour_party_[uk] )  :arg2 within :mod also )  )
tell :arg0 ( thing :name ( name :op1 mr :op2 corbyn )  )  :arg1 ( put :arg0 ( political-party :name ( name :op1 labour )  :wiki labour_party_[uk] )  :arg1 ( amend :arg0 altogether :arg1 ( remove :arg1 ( idea :mod whole :topic cap )  )  )  :direction forward )  :arg2 ( conference :mod ( organization :name ( name :op1 tuc )  )  )
say :arg0 late :arg1 ( and :arg1-of ( plan :arg0 ( government-organization :arg0-of ( clear :arg1 that :degree very )  :arg0-of govern :arg0-of ( reduce :arg1 level )  :arg1-of ( oppose :arg0 it :mod only )  )  :time ( from :mod cap :mod of :op1 gbp )  )  :op1 ( work :arg0 mr :arg1 smith :duration ( temporal-quantity :unit hour )  :mod shadow )  :op2 pension :op3 secretary :op4 party )
despatch :mod-of ( box :op1-of ( across :arg1-of ( face :arg0 ( person :name ( name :op1 david :op2 cameron )  :wiki david_cameron )  :time ( since :op1 ( become :arg1 ( he :domain-of ( person :arg0-of ( lead :arg1 ( political-party :name ( name :op1 tory )  :wiki conservative_party_[uk] )  )  )  )  )  )  :time ( past :op1 ( temporal-quantity :unit decade )  )  )  :domain ( person :arg0-of ( lead :arg1 ( political-party :name ( name :op1 labour )  :wiki labour_party_[uk] )  )  :domain ( thing :name ( name :op1 mr :op2 corbyn )  )  :mod fifth )  )  )
say :arg0 ( he :arg0-of ( approach :arg1 crowd :arg1-of ( differ :arg0 ( political-party :arg0-of lead :name ( name :op1 labour )  :wiki labour_party_[uk] )  :arg2 politics )  :arg1-of promise )  :arg0-of ( suggest :arg1 ( give :arg1 more )  )  :arg0-of source :arg0-of ( ask :arg1 idea )  )  :arg1 ( and :op1 ( person :arg1-of question :name ( name :op1 cameron )  :wiki david_cameron )  )
say :arg0 ( person :arg0-of ( have-org-role :arg2 mp )  :mod north_korea )  :arg1 ( and :op1 ( confront :arg0 too :arg1 ( he :arg0-of ( refrain :arg1 both )  )  )  :op2 that :op3 ( focus :arg1 issue :arg1-of ( instead-of :arg2 such )  :arg1-of vow :arg2 serious :op1-of ( and :op2 poverty :op3 inequality :op4 ( thing :arg1-of ( face :arg0 ( person :mod young )  )  :arg2-of challenge )  )  :op3-of ( and :op1 repartee :op2 ( trade :arg1-of barb )  )  )  )
shadow :arg0 - :arg1 ( travel :arg0 ( person :name ( name :op1 cameron )  :wiki david_cameron )  :arg1 instance :arg2 ( person :arg1-of ( attend :arg0 he )  :name ( name :op1 angela :op2 eagle )  )  :location ( abroad :arg1-of ( say :arg0 ( thing :name ( name :op1 mr :op2 corbyn )  )  )  )  )  :arg2 ( business :mod-of secretary )
discuss :arg0 ( government-organization :arg1-of speak :name ( name :op1 common )  )  :arg1 issue :purpose-of ( approach :arg0 he :arg1 ( person :name ( name :op1 john :op2 bercow )  )  :arg1-of ( say :arg0 ( he :arg0-of ( float :arg1 ( idea :topic ( allow :arg1 ( take :arg0 ( colleagu :mod other )  :arg1 floor :arg1-of occasion )  )  )  :mod also )  )  )  )
contrast :arg1 style :arg2 ( and :arg1-of ( say :arg0 ( person :name ( name :op1 cameron )  :wiki david_cameron )  :arg1-of ( want :arg0 ( he :arg0-of ( move :arg1 away )  :arg0-of lead :arg0-of ( fail :arg1 late :arg2 ( temporal-quantity :unit year )  )  :arg0-of ( admit :arg1 some :arg2 ( politics :arg2-of ( associate :arg1 often )  )  )  :arg1-of become )  )  :time ( date-entity :year 2005 )  )  )
and :arg2-of ( become :arg1 ( argue :arg0 critic :arg1 fellow :arg1-of ( need :arg0 ( government-organization :arg0-of ( stand :arg1 and )  :name ( name :op1 common )  )  )  :arg1-of ( reform :arg0 ( far :arg1-of reach )  )  :arg1-of ( see :arg1-of ( key :time ( date-entity :year 1990 )  )  )  :arg1-of ( televise :arg0 it )  :arg1-of ( lead :arg0 baromet :arg1-of judge )  :arg1-of ( command :arg0 since )  :arg1-of caricature )  )
shoot :arg0 homeles :arg1 ( train :arg1 youth :arg2 photographer )
place :arg1-of tough :condition home :domain ( country :mod downtown :name ( name :op1 johannesburg )  )
contrast :arg1 ( find :arg0 ( group :mod-of ( child :op1 ( street :mod former )  )  )  :arg1 ( way :manner-of ( learn :arg1 skill :op1-of ( and :op2 live )  )  )  )
photograph :arg0 amr-unknown :arg1 of :arg1-of ( take :arg0 ( i :arg0-of ( profit :arg1 studio )  :arg0-of ( teach :arg1 home )  :arg0-of ( shoot :arg1 that :arg2 ( country :name ( name :op1 &quot; )  )  )  )  :arg3 youngster :op1-of ( and :arg0-of ( profit :arg1 it )  :op2 neighbourhood )  :polarity - )
meet :arg1 ( go :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg1 ( of :mod-of project )  :arg1-of ( graduate :arg0 first )  :arg4 1 )
and :arg2-of ( share :arg0 ( organization :name ( name :op1 bbc :op2 news )  )  :arg1 story :manner amr-unknown )  :op1 picture :op2 video
contrast :arg1 ( bring :arg0 ( organization :name ( name :op1 bbc :op2 news )  )  :arg1 ( story :mod ( late :degree most )  )  :arg2 you :mod online :op1-of and )  :arg2 ( want :arg0 we :arg1 ( hear :arg1 ( issue :arg0 tv :arg0-of ( matter :arg1 ( globe :op1-of across )  :arg2 you )  :arg1 radio )  :op1-of ( every :mod-of day )  :arg0 we )  )
news :arg2-of ( play :arg0 you :arg1 ( important :degree very )  )
feature :arg1 ( item :op2-of ( or :arg1-of ( break :arg0 ( contribute :arg1-of differ )  :arg1-of possible :op1-of wheth )  :op1 news )  )
obligate :arg1 ( see :arg0 ( you :arg0-of ( involve :op1-of ( or :mode interrogative )  )  )  :arg1 ( event :mod news )  )
be :arg1 ( something :arg1-of ( happen :arg1-of significant :mode interrogative :op3-of ( or :op1 bizarre :op2 ( usual :polarity - )  )  )  :accompanier-of ( live :arg0 you )  )
obligate :arg1 ( get :arg0 ( you :arg2-of ( recommend :arg1-of ( think :arg0 ( you :arg1-of ( follow :arg0 we )  )  )  )  )  :arg1 story :arg2 tell :op1-of ( or :op2 ( something :mod there :mode interrogative )  )  )
want :arg0 you :arg1 ( talk :arg0 world :arg1 ( be :arg1 topic )  )  :mode interrogative
want :arg0 you :arg1 ( comment :arg2 amr-unknown :arg0 you )  :mode interrogative
or :op1 ( want :arg0 you :arg1 ( find :arg0 you )  :mode interrogative )  :op2 ( talk :arg0 other )
and :arg1-of ( send :arg2 ( company :arg2-of contribute :name ( name :op1 bbc )  :wiki bbc )  )  :condition condition :op1 term
send :arg1 contribute :instrument ( way :arg1-of differ )  :location here
contact :arg2 ( product :name ( name :op1 twitter )  :wiki twitter )
possible :arg1 ( use :arg0 we :arg1 ( tweet :arg0 we )  :arg2 ( display :arg1 ( username :mod ( product :name ( name :op1 twitter )  :wiki twitter )  )  :arg2 ( output :mod ( company :name ( name :op1 bbc )  :wiki bbc )  )  )  )
amr-empty
send :arg0 ( we :poss-of number )  :arg1 ( picture :op1-of ( or :op2 video :op3 message )  )  :time ( date-entity :day 71 :month 9 :year 1990 )  :time ( date-entity :day 25 :month 75 :year 44 )
possible :arg1 ( use :arg1 text :arg2 ( output :mod ( company :name ( name :op1 bbc )  :wiki bbc )  )  :time ( case :arg0 image :mod some )  )
contrast :arg1 ( publish :arg0 ( we :poss-of name )  :arg1 ( you :arg0-of provide )  )  :arg2 ( publish :arg0 we :arg1 ( number :mod ( phone :arg1-of mobile )  )  )  :condition ( ask :arg0 you :polarity - )
possible :arg1 ( send :arg0 you :arg1 ( or :op1 picture :op2 video :op3 ( organization :name ( name :op1 sms )  )  )  :arg2 and )
send :arg0 ( 100 :mod 800 )  :arg1 you :arg2 ( number :mod international )  :op2-of ( or :op1 ( outside :op1 ( country :name ( name :op1 uk )  :wiki united_kingdom )  )  :op3 ( date-entity :day 24 :month 76 :year 44 )  )
possible :arg1 ( download :arg0 ( you :arg0-of ( send :arg1 ( or :arg2-of contribute :op1 image )  :arg2 ( use :arg1 button )  :op2-of ( and :op1 device )  :op3-of ( or :op1 io :op2 android )  )  )  :arg1 ( app :poss ( organization :name ( name :op1 bbc :op2 news )  )  )  )
email :arg1 ( and :op1 ( comment :arg1 haveyoursay )  )  :arg2 story
contrast :arg0 ( number :arg1-of ( receive :arg0 we :time ( day :mod each )  )  )  :arg1 ( aim :arg0 we :arg1 ( read :arg1 ( email :arg1 - :quant all )  :arg0 we )  )  :arg2 ( possible :arg1 ( reply :arg2 everyone :time individual )  :time always )
email :arg0 yourpic :arg1 ( or :op1 video :op2 audio )  :arg2 picture
contrast :arg1 ( ask :arg0 you :polarity - )  :arg2 ( publish :arg0 ( we :arg0-of ( publish :arg1 ( you :arg0-of provide )  )  :poss-of name )  :arg1 ( address :mod email :poss we )  )  :time ( use :arg0 ( we :poss-of material )  :arg1 ( or :op1 online )  :arg2 ( program :mod ( company :name ( name :op1 bbc )  :wiki bbc )  )  )
possible :arg1 ( upload :arg0 you :arg1 ( or :op1 picture )  :arg2 video :mod also )
publish :arg0 ( we :poss-of name )  :arg1 ( you :arg0-of provide )  :purpose ( ask :arg0 you :polarity - )
accelerate :arg0 ( rise :arg1 ( grow :arg1-of ( wage :mod ( country :name ( name :op1 uk )  :wiki united_kingdom )  )  )  :arg1-of pound )
wage :arg1 ( grow :arg1 100 :arg1-of ( pick :arg2-of ( show :arg1 ( data :arg2-of ( follow :arg1 ( jump :arg0 ( pound :arg1-of ( lead :arg0 ( sabmill :arg1-of target :arg1-of bid )  :arg2 high )  )  )  )  )  )  )  )  :arg2 ( country :name ( name :op1 uk )  :wiki united_kingdom )
grow :arg0 ( between :op1 ( date-entity :month 5 )  :op2 7 )  :arg1 ( bonus :arg1-of ( exclude :arg0 ( year :mod last )  )  )  :op1-of and :time ( compare :arg1 percentage-entity :arg1-of ( earn :arg0 ( country :name ( name :op1 uk )  :wiki united_kingdom )  )  :arg2 ( period :arg1-of same )  )
rate :domain-of ( fast :degree most )  :op1-of ( and :op2 ( possible :arg1 ( rise :arg0 ( since :op1 ( date-entity :year 2009 )  )  :arg1 rate :arg2-of ( estimate :arg1 ( thing :arg1-of ( bring :arg1-of see :direction forward )  )  )  )  )  )
and :op1 ( rise :arg0 ( monetary-quantity :unit euro )  :arg1 sterl :arg2 ( percentage-entity :value 1 )  :prep-against ( monetary-quantity :unit dollar )  )  :op2 percentage-entity :quant more
close :arg1 ( index :mod ftse :quant 100 )  :arg2 percentage-entity
ab :op1-of ( name :name-of ( thing :arg0-of rival :arg2-of ( receive :arg1 ( approach :arg1 bid )  :op1-of ( after :time-of ( percentage-entity :value 20 )  :time-of ( jump :arg0 market :arg1 ( organization :domain-of ( stock :arg1-of stand )  :name ( name :op1 sabmiller )  )  )  )  )  )  :op2 inbev )
and :arg2-of ( bring :arg0 ( brewer :mod ( large :arg1-of ( deal :arg2 ( combine :arg1 world :arg2 2 )  )  :degree most )  )  :arg1 ( together :mod-of ( brand :poss-of ( budweis :mod such :poss-of ( artoi :mod stella )  )  )  )  )
rival :arg0 ( group :mod ( good :mod luxury )  :source-of ( news :arg1-of ( encourage :arg1-of ( follow :arg1-of high :arg2 ( share :mod ( organization :name ( name :op1 burberry )  )  )  )  :arg2 ( organization :name ( name :op1 richemont )  )  )  )  )  :arg1 percentage-entity
show :arg0 ( country :arg0-of ( key :arg1 market )  :name ( name :op1 china )  :wiki china )  :arg1 that :arg1-of ( beat :arg0 ( organization :name ( name :op1 richemont )  )  )  :mod also :op2-of ( and :arg1-of ( expect :arg0 ( late :degree most )  )  :op1 figure :op3 ( grow :arg1 ( begin :arg1 burberry )  :op1-of again )  )
debt :arg1-of ( cut :arg1-of ( place :arg1-of share :manner-of ( raise :arg0 ( giant :arg1-of mine )  :arg1 5bn :arg1-of ( say :op1-of ( after :time-of ( rise :arg1 ( share :location ( organization :name ( name :op1 glencore )  )  )  )  :time-of ( percentage-entity :value 5 )  )  )  )  )  :mod-of strategy )
and :op1 share :op2 ( package :arg1 ( faller :mod ( big :degree most )  )  )  :op3 ( paper :arg0-of ( sell :arg1 firm :arg2-of ( rate :arg0 index :arg1 ( it :arg1-of ( cut :arg0 ( company :mod after :name ( name :op1 goldman :op2 sachs )  :wiki goldman_sachs )  :arg2 ( percentage-entity :mod ( 4.3 :mod down )  )  )  )  )  )  )  :op4 group :op5 ( organization :name ( name :op1 shares )  )
report :arg0 ( firm :mod sportswear )  :arg1-of ( jump :arg0 half )  :arg2 percentage-entity :arg2-of ( profit :arg0 year :arg1 tax )  :mod-of 83 :time ( after :time-of ( rise :arg2 percentage-entity :manner ( sport :arg1 ( product :name ( name :op1 jd )  :wiki jack_daniel's )  )  )  )
say :arg0 ( boss :arg2-of ( have-org-role :arg1 ( organization :name ( name :op1 jd :op2 sports )  )  )  )  :arg1 ( possible :arg1 ( hurt :arg0 ( wage :arg1-of high )  :arg1 expand )  )
say :arg0 ( person :arg0-of ( sport :arg1 ( product :mod-of executive :name ( name :op1 jd )  :wiki jack_daniel's )  )  :arg0-of ( have-org-role :arg2 chairman )  :name ( name :op1 jd )  )  :arg1 ( possible :arg1 ( potential :arg1-of ( consume :arg0 person )  :mod of :mod pocket )  :arg1-of ( work :arg0 ( person :mod ( country :arg0-of ( wage :arg1 minimum )  :name ( name :op1 uk )  :wiki united_kingdom )  )  )  :arg2-of ( mean :arg1 ( power :arg1-of spend :mod more )  )  )  :arg1-of high
say :arg0 he :arg1 ( likely :arg1 ( outweigh :arg0 ( power :mod spend )  :arg1 ( cost :arg0 labour :arg1 firm :arg1-of ( high :arg2 that )  )  )  :arg2-of contrast :polarity - )
add :arg0 he :arg1 ( expand :arg1 ( hit :arg1 ( product :name ( name :op1 jd )  :wiki jack_daniel's )  :arg1-of cost :arg1-of possible )  :arg1-of sport :arg1-of possible :arg1-of plan )  :arg1-of ( mean :arg2 ( extra :mod-of job )  :op1-of few )
expedition :location ( city :mod-of ( capital :mod-of ( city :location-of ( person :name ( name :op1 justin :op2 bieber )  )  )  )  :name ( name :op1 berlin )  :wiki berlin )
person :name ( name :op1 justin :op2 bieber )
trendy :degree ( too :arg2-of ( ridiculous :arg0 young :arg1 ( 21 :quant-of ( temporal-quantity :unit year )  )  )  )  :mod-of ( haircut :prep-with-of ( kid :mod wimpy )  )
worth :domain guy :domain ( monetary-quantity :mod-of ( platinum :mod hair )  :unit euro )
probable :mod-of ( even :mod-of more )
moment :location ( city :name ( name :op1 berlin )  :wiki berlin )  :poss ( person :name ( name :op1 monsieur :op2 bieber )  )
and :op1 ( generation :mod ( 17 :op1-of under )  )
resemble :arg2 ( person :name ( name :op1 wiktoria :op2 rudzinska )  )
hear :arg1 15 :arg2 ( thing :name ( name :op1 ( ritz :name name )  :op2 carlton )  )  :mod old :time year
bad :arg1 -
accompany :arg0 ( hundred :consist-of fan )  :arg1 ( person :name ( name :op1 justin )  )  :time yesterday
include :arg1 ( and :op1 ( country :name ( name :op1 viktoria )  )  :source ( country :name ( name :op1 poland )  :wiki poland )  )  :arg2 ( person :name ( name :op1 eva )  )
contrast :arg1 ( sit :arg1 ( stone :location front :location ( city :location-of ( luxury :mod-of hotel )  :name ( name :op1 berlin )  :wiki berlin )  :mod-of slab )  :arg2 cold )  :arg2 ( clock :time ( since :mod-of 7 :time-of morning )  )
appear :arg0 ( idol :arg1-of ( stay :arg3 evening :location here :time ( since :op1 ( build :arg0 ( person :name ( name :op1 bieber )  )  :arg1 monday )  )  )  )  :arg1 face :arg2 ( number :mod huge :quant-of ( poster :location ( country :name ( name :op1 szczecin )  )  )  )
suite :arg0-of ( stay :arg1 ( person :arg0-of ( sing :arg1 much )  :arg0-of ( cost :arg1 ( temporal-quantity :quant 6 :unit month )  )  :arg1-of ( earn :arg0 night :manner ( person :arg1-of ( have-rel-role :arg0 person :arg2 mother )  :name ( name :op1 ewa )  )  )  :mod ( country :name ( name :op1 canada )  :wiki canada )  )  )
amr-empty
say :arg0 ( she :arg0-of ( mean :arg1 ( school :mod grammar )  )  )  :arg1 ( recommend :arg0 moment :arg1 ( sit :arg0 class :arg1 i :arg2 10th :op1-of really )  )
fulfill :arg0 i :arg1 ( she :arg0-of ( dream :arg1 she )  )
educate :mode interrogative
want :arg0 amr-unknown :arg1 that :mode interrogative
fan :polarity -
person :name ( name :op1 bieber )
secure :arg1 he :duration anyway :manner finance
advertise :arg0 ( he :arg0-of ( earn :arg1 3 )  :arg0-of ( oppose :arg1 spot :arg1-of ( pour :arg0 company :arg2 ( account :mod bieb )  :mod-of ( many :mod-of ( many :quant-of ( monetary-quantity :unit dollar )  )  )  )  :arg2-of ( deal :arg0 year :arg1 2 )  )  :arg0-of ( break-up :arg1 commerce )  )  :arg1 ( game :name ( name :op1 super :op2 bowl )  :wiki super_bowl )
and :op1 ( doll :arg0-of ( look :arg1 ( resemble :arg1 ( and :op1 ( pass-out :arg1 counter )  )  )  )  :arg1 ( person :arg0-of cash-in :name ( name :op1 bieber )  )  :mod every )
drink :arg0 ( person :name ( name :op1 justin :op2 bieber )  )  :op1 ( person :arg1-of ( goggle :arg2 window )  :mod coffee )
resemble :arg1 ( loot :arg0 he :arg1 more )  :arg2 that
say :arg0 some :arg1 ( go :arg1 hype :arg2 ( far :degree too )  )
mean :arg0 you :arg1 ( number :quant-of 1 )  :arg2 at :op6-of ( and :op1 ( person :arg1-of ( chart :arg0 ( he :arg0-of ( single :arg1 amr-unknown :mod new )  )  )  :mod ( other :mod-of out :mod-of point )  :name ( name :op1 others )  :quant ( all :op2-of ( after :op1 that )  )  )  :op2 both :op3 ( country :name ( name :op1 usa )  :wiki united_states )  :op4 ( country :name ( name :op1 great :op2 britain )  :wiki united_kingdom )  :op5 with )  :purpose interrogative
interest :arg0 ( date-entity :month 11 )  :arg1 ( person :name ( name :op1 bieber )  )  :arg2 ( zero :arg1 ( album :mod new )  :mod all )  :polarity -
say :arg0 he :arg1 amr-unknown
suggest :arg0 ( person :arg0-of post :mod ( country :mod-of man :name ( name :op1 lebanon )  :wiki lebanon )  )  :arg1 ( idea :mod kebab :mod done :mod potato )
or :mode interrogative :op1 kebab
bar :arg0 ( create :arg1 both )  :arg1 ( snack :arg0 kebab :arg1 potato )  :arg1-of ( own :arg0 ( you :arg1-of possible )  )
and :arg1-of ( put :arg1-of ( of :arg1-of ( instead-of :arg2 potatoe )  )  :arg1-of skewer :arg1-of ( post :arg0 ( person :arg0-of ( inspire :arg1 slogan )  )  )  :arg1-of movement :arg2 together )  :op1 potatoe :op2 meat
demonstrate :arg1 slogan :arg1-of ( post :arg0 ( person :arg2-of ( give :arg0 television :arg1 idea :arg1-of ( see :arg0 ( he :arg2-of ( instead-of :arg0 potato :arg1 of )  :poss-of kebab )  )  )  )  )
rotate :arg1 ( spit :arg1-of ( lade :arg2 ( and :op1 meat :op2 potatoe )  )  )  :location shop :time ( since :op1 then )
say :arg0 ( culture :mod ( multiple :mod that )  :mod-of food )  :arg1 alhay :time expressive
register :arg0 he :arg1 ( idea :location ( office :location ( city :name ( name :op1 munich )  :wiki munich )  :mod patent )  )  :time now
say :arg0 ( person :arg0-of ( have-org-role :arg2 official )  )  :arg1 ( protect :arg2 ( design :arg1-of register )  :time now )
hold :arg0 spit :arg1 ( potatoe :quant many )  :op3-of ( and :arg1-of ( reveal :arg0 ( person :name ( name :op1 alhay )  )  :arg1-of ( want :arg1-of ( cause :arg0 this )  :polarity - :arg0 person )  )  :op1 much :op2 meat )
taste :arg0 they :arg1 ( much :degree-of ( good :mod-of together )  )  :arg2 ( he :arg0-of ( reckon :arg1 ( enough :mod just )  )  )
appreciate :arg0 customer :arg1 ( understand :mod international :mod culinary :mod this )  :mod also
launch :arg1 ( campaign :arg1 grass-roots :purpose ( fight :arg1 ( incursion :mod ( organization :name ( name :op1 aldi )  )  )  )  )
try :arg0 ( country :name ( name :op1 western :op2 australia )  )  :arg1 ( protect :arg1 ( store :poss ( organization :name ( name :op1 iga )  )  )  :arg2 ( onslaught :location ( country :name ( name :op1 south :op2 australia )  )  :location and :mod ( organization :name ( name :op1 aldi )  )  )  )
kick :arg0 ( grocery :mod-of wholesaler )  :arg1 700 :op1-of ( and :op2 ( country :location ( world-region :name ( name :op1 west )  :wiki western_world )  :name ( name :op1 australia )  :wiki australia )  )  :purpose ( defend :arg1 ( share :arg0 ahead :arg1 ( retailer :mod ( organization :name ( name :op1 iga )  )  )  :arg1-of ( invade :arg0 ( organization :name ( name :op1 aldi )  )  )  :arg2 market )  :arg1-of ( campaign :mod grass-roots )  :location ( country :name ( name :op1 south :op2 australia )  )  )
show :arg0 ( country :name ( name :op1 adelaide )  )  :arg1 ( and :location-of ( store :location ( country :mod-of ( early :op1 ( year :mod next )  )  :name ( name :op1 south :op2 australia )  )  :quant 120 )  :op1 ( country :location ( world-region :name ( name :op1 west )  :wiki western_world )  :name ( name :op1 australia )  :wiki australia )  )  :example-of event :op1-of ( and :arg0-of ( strengthen :arg1 relation :op1-of ( and :op2 ( build :arg0 ( organization :arg0-of ( prepare :arg1 ( organization :arg0-of ( open :arg1 ( centre :mod ( distribute :arg1 many )  :quant 2 )  )  :name ( name :op1 aldi )  )  :arg2 and )  :arg0-of ( supply :arg1 ( food :arg1-of local )  )  :name ( name :op1 iga :op2 supermarkets )  )  :arg1 brand :manner ( market :arg1 ( media :mod society )  :op1-of ( and :mod such )  :op2-of ( and :op1 mainstream )  )  )  )  )  )
and :op1 ( organization :arg0-of ( jump :arg1 board )  :name ( name :op1 iga )  )  :op2 retailer :op3 ( supply :arg0 brand :op1-of ( and :op2 store :op3 store :op4 ( person :arg0-of ( own :arg1 ( customer :mod loyal )  )  :arg0-of ( discount :arg1 south )  :arg0-of ( sell :arg1 ticket :arg2 ( country :mod-of ( football :mod-of league )  :name ( name :op1 australia )  :wiki australia )  :arg2-of ( test :arg1 at :arg1-of ( taste :arg0 simmo :arg1-of ( offer :arg0 ' )  )  )  )  :arg0-of ( make :arg1 ( cream :arg0 ice )  )  :arg1-of ( base :arg0 ( dunsborough :mod such )  )  )  )  )
and :arg0-of ( host :arg1 wholesaler )  :location-of ( invest :arg0 ( person :arg1-of ( defend :arg0 ( strategy :arg1-of ( detail :arg0 9 :arg1-of ( reveal :arg1-of expect )  :degree more )  )  )  :mod-of ( strategy :time day )  )  :arg1 29 )  :op1 food :op2 liquor :op3 hardware
and :op1 ( and :arg2-of ( stake :arg1 much )  :location ( country :location-of ( world-region :name ( name :op1 west )  :wiki western_world )  :name ( name :op1 australia )  :wiki australia )  :op1 ( country :name ( name :op1 australia )  :wiki australia )  )  :op2 store :op3 ( generate :arg1 ( monetary-quantity :unit cent )  :arg1-of ( almost :mod 30 :mod-of account )  :arg1-of iga :arg1-of ( profit :arg2 network :location ( state :location-of east )  )  :arg1-of high :arg2 margin )
and :arg1-of ( compare :arg0 ( country :location-of ( cent :unit-of monetary-quantity )  :name ( name :op1 wa )  )  :time 14 :time around )  :op1 ( parochial :mod notorious )  :op2 ( share :arg0 they :arg1 ( monetary-quantity :quant 24 :unit cent )  :arg1-of ( enjoy :arg0 ( retailer :mod ( organization :name ( name :op1 iga )  )  )  :op2-of ( and :op1 ( thing :name ( name :op1 south :op2 australian )  )  :op1-of ( and :op2 ( country :name ( name :op1 nsw )  )  :op3 ( state :name ( name :op1 victoria )  :wiki victoria_[australia] )  :op4 ( country :name ( name :op1 queensland )  )  :op5 ( state :location ( world-region :name ( name :op1 east )  :wiki eastern_world )  )  )  )  :op2-of ( and :op1 ( shopper :mod ( country :name ( name :op1 australia )  :wiki australia )  :mod ( world-region :name ( name :op1 west )  :wiki western_world )  )  )  )  :arg1-of ( strong :mod much )  :arg2 market )  :op3 ( country :location-of ( cent :unit-of ( monetary-quantity :quant 30 )  )  :name ( name :op1 sa )  :quant more :wiki south_africa )
contrast :arg0 ( monetary-quantity :quant 5 :unit cent )  :arg1 ( take :arg0 ( person :arg0-of ( believe :arg1 ( snare :arg0 ( organization :name ( name :op1 aldi )  )  :arg1 such :location ( state :quant 2 )  )  )  :arg0-of ( analyze :arg1 ( organization :name ( name :op1 morgan :op2 stanley )  )  )  )  :arg1 around :arg2 ( person :arg0-of play :arg0-of ( open :arg1 store :mod-of ( month :unit-of ( temporal-quantity :quant 12 )  )  )  :arg1-of ( exist :arg2 main )  :location-of ( retailer :arg0-of ( depend :arg1 ( market :mod grocery )  :arg2 this :polarity - )  )  :quant all )  )
estimate :arg0 ( person :arg0-of ( analyze :arg1 ( organization :name ( name :op1 morgan :op2 stanley )  )  )  :name ( name :op1 tom :op2 kierath )  :poss-of report )  :arg1 ( possible :arg0 250 :arg1 ( lose :arg0 ( retailer :mod ( organization :name ( name :op1 iga )  )  )  :op1-of ( and :op2 ( end :arg0 ( thing :name ( name :op1 360 )  :wiki qihoo )  :arg1 ( date-entity :year 2016 )  )  )  )  )  :time ( week :mod ( this :mod-of year )  )
and :arg1-of ( open :arg0 ( organization :name ( name :op1 aldi )  )  :arg2 ( store :quant 25 )  :location ( country :name ( name :op1 sa )  :wiki south_africa )  :manner-of ( base :arg1 ( forecast :arg0 30 :arg1 500 :location ( country :name ( name :op1 wa )  )  :mod this )  :arg2 assumption )  :purpose ( generate :arg0 600 :arg1 ( market :mod each )  )  :time ( year :mod next )  )  :op1 and
say :arg0 ( and :op1 ( and :op1 of :op2 food :op3 grocery )  :op2 volume )  :arg1 ( and :arg1-of ( interest :arg0 13 :arg2 around )  :arg1-of tax :op1 earn :op2 ( before :time-of ( possible :arg1 ( base :arg1-of ( cost :arg1-of ( fix :arg1-of high )  )  )  :arg1-of cost )  )  )
shopper :arg1-of ( find :arg0 ( survey :arg0 ( organization :name ( name :op1 roy :op2 morgan )  )  :arg1 ( organization :name ( name :op1 coles )  :op2-of ( and :op1 ( organization :arg1-of ( share :arg1-of ( lose :location ( state :part east )  :time ( time :arg1-of ( same :arg2 even )  )  )  :arg2 market )  :name ( name :op1 aldi )  :op1-of main )  )  )  :time recent )  )  :domain-of ( loyal :degree most )  :mod ( organization :name ( name :op1 iga )  )
and :op1 ( organization :arg0-of ( believe :arg1 stanley )  :name ( name :op1 morgan )  )  :op2 food :op3 grocery :op4 ( fall :arg1 3.8 :op1-of ( and :op2 4.1 :op3 ( monetary-quantity :unit cent )  :op4 ( date-entity :year 2017 )  :op5 ( monetary-quantity :unit cent )  :op6 ( reduce :arg0 it :arg1 ( market :arg0-of ( share :arg1 ( 14 :quant-of ( monetary-quantity :unit cent )  )  )  :mod-of ( date-entity :year 2015 )  )  :time ( date-entity :year 2018 )  )  :op7 ( monetary-quantity :mod-of ( date-entity :year 2020 )  :unit cent )  )  )  :op5 ( monetary-quantity :mod-of ( date-entity :year 2016 )  :unit cent )
probable :arg1-of disappear :arg1-of possible :arg1-of ( tell :arg0 ( person :arg1-of ( manage :arg2 ( fund :arg2-of ( found :arg1 of )  )  )  :name ( name :op1 last )  )  :arg2 ( organization :name ( name :op1 last )  )  :arg3 lead :condition high :time ( week :mod last )  )  :arg1-of ( lunch :location ( city :name ( name :op1 melbourne )  :wiki melbourne )  :mod business :mod that )  :mod-of ( within :quant-of ( temporal-quantity :unit decade )  )
decline :arg1 ( respond :arg1 mr :arg1-of public :arg2 comment )
contrast :arg2 ( understand :arg1 ( contact :arg0 ( thing :name ( name :op1 mr :op2 douglass )  )  :arg1 ( have-org-role :arg0 board :arg2 member )  :time ( week :mod last )  )  )
and :op1 ( fall :arg1 ( market :arg1-of ( share :arg0 ( organization :name ( name :op1 iga )  )  )  )  )  :op2 ( monetary-quantity :quant 18 :unit cent )  :op3 ( monetary-quantity :quant 14 :unit cent )  :op4 since :op5 ( date-entity :year 2010 )  :op6 earn :op7 ( supply :arg1 1200 :op1-of about :op1-of ( and :arg1-of reflect :op2 ( fall :arg0 retailer :arg1 43 )  :op3 ( come :arg1 margin )  :op4 ( pressure :arg2-of ( operate :arg0 ( since :mod-of ( date-entity :year 2012 )  )  :arg1 ( monetary-quantity :unit cent )  )  :op1-of under )  )  :op4-of ( and :op1 food :op2 grocery :op3 business )  )
and :arg1-of ( match :arg0 year :arg2 ( price :arg0 ( product :poss-of hundred )  :arg1 shelf )  :purpose-of ( invest :arg1 ( fight :arg1 wholesaler :direction back )  :op1-of ( and :op2 ( help :arg1 ( refurbish :arg0 ( retailer :mod ( organization :name ( name :op1 iga )  )  )  :arg1 store )  :manner ( add :arg0 150 :arg1 ( food :arg1-of ( grow :arg0 more :manner fast )  :arg1-of fresh )  )  )  :op3 ( roll :arg1 ( range :arg1 ( grocery :arg1-of private :mod label )  :mod good )  )  )  )  :time ( week :mod each )  )  :op1 ( organization :name ( name :op1 coles )  )  :op2 ( organization :name ( name :op1 woolworths )  )
say :arg0 ( person :arg0-of ( have-org-role :arg2 ( chief :mod-of executive )  )  :name ( name :op1 ian :op2 morrice )  )  :arg1 ( return :arg1 ( price :arg0-of ( hope :arg1 wholesaler :op2-of ( and :op1 ( gain :arg0 ( program :mod refurbishment )  :arg1 traction )  )  )  :arg1 ( temporal-quantity :unit year )  :arg1-of ( match :op1-of ( and :op2 store )  )  )  :arg4 ( grow :arg1 ( profit :arg1 4 )  :arg1-of underlie :time ( date-entity :year 2017 )  )  :duration time )
back :arg0 ( person :name ( name :op1 thanasi :op2 kokkinakis )  )  :arg1 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 tennis :op2 australia )  )  :arg2 president )  :name ( name :op1 steve :op2 healy )  )
deserve :arg0 ( person :arg0-of ( criticize :arg2 behave )  :name ( name :op1 thanasi :op2 kokkinakis )  )  :arg1 kudo
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 tennis :op2 australia )  )  :arg2 president )  :arg1-of ( have-rel-role :arg0 ( person :name ( name :op1 nick :op2 kyrgios )  :op1-of ( around :location-of ( storm :arg2-of ( damage :arg0 ( person :name ( name :op1 thanasi :op2 kokkinakis )  )  :mod collateral :op1-of ( and :op2 ( deserve :arg1 kudo :arg2 ( behave :arg1-of criticize )  )  )  )  :time recent )  )  )  :arg2 friend )  :name ( name :op1 steve :op2 healy )  )
refer :arg0 ( person :arg0-of ( special :arg1 ( country :arg0-of ( drag :arg1 ( into :mod-of ( an :mod-of ( unwelcome :mod-of ( by :arg1-of ( sledge :arg0 ( person :mod infamous :name ( name :op1 kokkinakis )  )  :arg2 ( person :mod-of at :name ( name :op1 kokkinakis )  )  :location ( city :name ( name :op1 montreal )  :part-of ( game :name ( name :op1 masters )  :wiki masters_tournament )  :wiki montreal )  )  :mod spotlight )  )  )  )  )  :name ( name :op1 kokkinakis )  )  )  :name ( name :op1 kokkinakis )  )  :arg1 ( regular :arg1 ( duo :mod ( talent :mod ( of :mod young )  )  )  )
mean :arg1 ( declare :arg1 ( umpire :arg1 ( chair :arg0 ( he :arg0-of ( deck :arg1 kyrgio )  :arg0-of ( recommend :arg1 ( and :arg1-of ( recommend :arg0 ( i :arg0-of ( deck :arg1 kid )  )  )  )  )  :arg0-of ( separate :arg1 ( thing :arg1-of match :arg1-of fiery :arg1-of qualify )  )  :arg1-of ( oppose :arg0 ( person :op1-of ( and :time ( after :time soon )  )  )  )  )  :arg1 harrison )  )  )
upset :arg0 ( game :arg1-of foil :name ( name :op1 us :op2 open )  :wiki us_open_[tennis] )  :arg1 ( person :name ( name :op1 richard :op2 gasquet )  )  :arg1-of ( cramp :op1-of ( after :time-of ( smash-up :arg0 ( he :arg0-of ( see :arg0-of while :arg1 ( person :arg1-of ( defend :arg0 ( person :name ( name :op1 healy )  )  :mod staunchly )  :name ( name :op1 kokkinakis )  )  :time last )  )  :arg1 racquet )  )  )  :mod potential
compete :arg1 teenager :arg2 ( person :name ( name :op1 sam :op2 groth )  )  :purpose ( berth :arg1-of ( single :mod ( city :mod-of ( person :name ( name :op1 bernard :op2 tomic )  :op1-of behind )  :mod-of ( country :name ( name :op1 britain )  :wiki united_kingdom )  :mod-of ( thing :mod-of semi :name ( name :op1 davis :op2 cup )  )  :mod-of ( final :mod-of current )  :name ( name :op1 glasgow )  :wiki glasgow )  )  )
say :arg0 ( i :arg0-of ( drag :arg1 into :arg2 ( bit :mod little )  )  :arg0-of ( think :arg1 ' :arg2 fray :arg2-of ( feel :arg0 ( i :arg0-of ( do :arg1 ( thing :quant 1 )  :arg2 about )  )  :arg1 ( keenly :mod quite )  )  )  )  :arg1 healy
contrast :arg1 ( frustrate :arg0 ( he :arg0-of ( lose :arg1 racquet )  :arg0-of play :arg0-of ( cramp :arg1 ( country :name ( name :op1 us )  :wiki united_states )  )  :arg1-of ( break-up :arg0 he )  )  :arg1 ( know :arg0 ( i :arg0-of ( know :arg1 ( enough :polarity - )  )  )  :arg1 ( proud :polarity - )  :op1-of and )  )
contrast :arg1 really :arg2 ( and :arg0-of ( cause :arg1 ( think :arg0 i :arg1 ( he :arg0-of credit :arg0-of ( deserve :arg1 lot )  )  )  )  :arg1-of ( provoke :arg2 ( country :name ( name :op1 us )  :wiki united_states )  :mod pretty :time ( circumstance :mod extreme )  :time ( he :arg0-of handle )  )  :example and )
think :arg0 ( i :op3-of ( and :op1 ( get :arg0 he :arg1 ( he :arg0-of ( do :arg1 ( hard :arg0 ( team :mod great :op1-of around )  :arg1 little )  )  )  )  :op2 around )  )  :arg1 ( family :mod great )  :mod just
cause :arg0 ( and :op1 team :op2 ( respect :arg0 ( person :arg0-of ( play :arg1 ( issue :arg0 ( ever :polarity - )  )  )  :mod other )  :arg1 room :arg1-of ( shape :arg0 year :mod-of great )  :arg1-of merit :arg1-of ( stable :arg0 very :op1-of ( and :op2 ( mature :arg0 guy :arg1 young )  )  )  :arg1-of ( judge :arg0 ( i :arg0-of ( think :arg1 and :mod just )  )  )  :arg1-of ( lock :arg0 ( he :arg0-of ( mature :arg1 19 :degree very )  )  )  :arg1-of ( hard :arg0 train )  :arg1-of deserve )  )  :arg1 ( and :arg1-of fit :op1 ( hard :arg1 ( he :arg0-of ( work :arg1 old )  )  :degree very )  )
contrast :arg2 ( back :arg0 team :arg1 ( thing :arg1-of ( return :arg1-of ( long :arg2 ( term :mod-of fixture )  )  :purpose-of ( decide :arg0 ( person :arg0-of ( start :arg1 friday )  :arg1-of ( back :arg0 ( person :arg0-of ( decide :arg1 ( tie :mod important )  )  :name ( name :op1 healy )  )  :mod also )  :arg1-of overlook :name ( name :op1 healy )  )  :arg1 ( thing :arg1-of describe :mod right :quant all )  :op1-of mutual )  )  :name ( name :op1 healy )  )  )
say :arg0 healy :arg1 ( and :arg1-of ( want :arg0 we :mod all :polarity - )  :op1 of :op2 ( focus :arg0 team :arg1 controversy :arg1-of complete :arg2 kyrgio :op1-of around )  :op3 tie :quant all )
contrast :arg1 ( we :arg0-of ( try :arg1 ( we :arg0-of ( support :arg1 ( he :arg0-of ( understand :arg1 consequence )  )  )  :arg0-of ( try :arg1 help :op1-of ( and :example ( and :arg1-of possible :arg1-of ( think :arg0 i )  :arg1-of ( reflect :mod just )  :example ( and :op1 team :op2 ( good :degree most )  )  :op1 ( appropriate :arg0 he :arg1 it )  :op2 ( good :degree most )  )  :example limelight :op2 action :time ( time :mod some )  )  )  )  )  :arg1-of ( get :arg0 ( he :arg1-of ( criticize :arg0 ( he :op4-of ( and :example ( and :example-of terrible :op1 error :op2 ( deserve :arg1 all )  )  :op1 ( grow :arg1 some :op4-of ( and :arg1-of resemble :arg1-of ( think :arg0 ( i :op1-of ( and :op2 ( person :name ( name :op1 nick )  :wiki nick_clegg )  )  )  )  :example-of ( rise :arg1 he )  :op1 ( person :arg1-of ( quick :degree very )  )  :op2 feder :op3 ( person :arg0-of ( point-out :arg1 he )  :name ( name :op1 murray )  :wiki - )  )  )  :op2 public :op3 eye )  )  )  )  )  )
declare :arg0 ( person :arg0-of migrate :arg1-of detain )  :arg1 emergency :arg2 ( crisis :poss ( person :arg0-of migrate :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :purpose ( border :arg1 ( country :name ( name :op1 hungary )  :wiki hungary )  :arg2 seal )
shut-down :arg1 ( flow :arg1 ( person :arg0-of ( pour :arg1 tuesday )  :arg0-of migrate )  )  :arg1-of ( aim :arg1-of ( detain :arg2 ( try :arg1 enter )  :op2-of ( and :op1 ( seal :arg0 ( country :arg1-of ( border :arg2 ( country :name ( name :op1 serbia )  )  :part south )  :name ( name :op1 hungary )  :wiki hungary )  :arg1 ( declare :arg2 ( state :mod emergency )  )  )  )  )  )
and :op1 ( person :arg0-of ( migrate :arg1 of )  :arg1-of pile :arg1-of ( ensue :arg0 chao :arg1-of border )  )  :op2 man :op3 ( country :name ( name :op1 serbia )  :wiki serbia )  :op4 ( person :arg0-of ( have-org-role :arg2 official )  :arg0-of ( outrage :arg1 land :polarity - )  :arg1-of react )
and :arg1-of pitch-in :op1 ( flee :arg1 violence :arg1-of ( check :arg0 country :manner 2 )  )  :op2 homeland :op3 tent :op4 ( settle :arg1 ( know :arg0 ( time :arg0-of ( of :arg1 ( on :arg1 ( strip :arg1 road )  )  )  )  :arg1 amount :arg1-of stick :polarity - )  )
contrast :arg1-of rise :arg2 frustration
chant :arg1 ( person :arg0-of ( migrate :arg1 above )  :arg0-of ( border :arg1 ( hover :arg0 police :arg1 helicopter )  :mode expressive )  :arg0-of ( riot :arg1 ( and :arg1-of shout :arg1-of insult :op1 police )  )  :arg0-of open )
refuse :arg0 some :arg0-of protest :arg1 ( and :op1 food :op2 water )
and :op1 ( send :arg0 ( country :name ( name :op1 hungary )  :wiki hungary )  :arg1 while :arg1-of declare :arg1-of ( accept :arg0 it )  :arg1-of ( migrate :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 serbia )  )  :arg2 ( minister :mod foreign )  )  :mod that )  )  :arg2 ( and :op1 more :quant more )  :direction back )  :op2 arrive :op3 ( country :name ( name :op1 macedonia )  :wiki republic_of_macedonia )  :op4 ( country :name ( name :op1 greece )  :wiki greece )
want :arg0 ( country :arg0-of ( damage :arg1 collateral :polarity - )  :name ( name :op1 serbia )  )  :arg1 solution
say :arg1 ( and :arg1-of talk :location ( city :location-of ( temporal-quantity :unit day )  :name ( name :op1 brussels )  :wiki brussels )  :location country :mod other :op1 ( come :arg1 ( person :name ( name :op1 there )  )  )  )
unite :arg1 ( policy :arg1-of ( come :arg2-of ( fail :arg1 ( bloc :mod nation :mod 28 :mod ( country :arg2-of border :name ( name :op1 serbia )  :wiki serbia )  )  :op2-of ( after :op1 day :time-of ( come :arg1 turmoil )  )  )  :time ( meet :location ( city :name ( name :op1 brussels )  :wiki brussels )  :mod contentious )  )  :mod immigrate )
and :op1 ( seek :arg0 person :arg1 refuge )  :op2 ( country :name ( name :op1 italy )  :op1-of ( and :arg1-of overwhelm :op2 ( country :name ( name :op1 greece )  :wiki greece )  :op3 ( speak :arg0 ( person :arg0-of ( agree :arg1 ( share :arg1 ( responsible :arg1 ( temporal-quantity :unit ( month :mod next )  )  )  )  )  :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 eu )  :poss-of ( nation :arg0-of ( take :arg1 ( refugee :quant more )  )  )  :wiki european_union )  :arg2 minister )  )  :arg2 ( reach :arg1 ( deal :arg0 ( country :name ( name :op1 hungary )  :wiki hungary )  :arg1 some :mod eventual )  :arg2-of hope :manner ( or :op1 ( end :arg1 year )  )  )  )  )  :wiki italy )
and :op1 ( person :arg0-of ( have-org-role :arg2 chancellor )  :name ( name :op1 angela :op2 merkel )  :wiki angela_merkel )  :op2 ( country :name ( name :op1 austria )  :wiki austria )  :op3 ( call :arg1 tuesday :arg2 ( country :name ( name :op1 germany )  :wiki germany )  )  :op4 ( organization :arg0-of ( discuss :arg1 crisis :arg1-of immigrate :arg1-of special :location continent :time ( week :mod next )  )  :mod-of summit :name ( name :op1 european :op2 union )  :wiki european_union )
pin :arg0 ( neighbor :op1-of or :poss ( city :name ( name :op1 brussels )  :wiki brussels )  )  :arg1 ( hope :arg0 ( country :name ( name :op1 hungary )  :wiki hungary )  :arg1 ( action :mod any )  )  :arg2 soon :polarity -
shut-down :arg0 ( authority :arg0-of ( deal :arg1 tuesday :arg2 they )  :arg1-of ( give :part ( south :mod-of region )  )  :mod ( emergency :mod-of ( of :mod state )  :mod-of 2 )  :mod-of ( power :mod great )  )  :arg1 ( and :arg1-of allow :op1 crisis :op2 down :op3 road :op4 ( speed :arg1-of ( case :arg0 court )  )  :op5 asylum )
say :arg0 ( person :name ( name :op1 peter :op2 szijjarto )  )  :arg1 ( plan :arg0 ( country :arg0-of ( stop :arg1 ( flow :arg1 ( person :arg0-of migrate )  )  )  :arg1-of ( have-org-role :arg2 ( minister :mod foreign )  )  )  :arg1 ( build :arg0 ( country :arg1-of ( border :arg2 ( country :name ( name :op1 serbia )  :wiki serbia )  :location-of ( finish :arg1 fence :time now )  )  :arg2-of ( border :arg1 country )  :name ( name :op1 romania )  :wiki romania )  :arg1 ( fence :location along :mod ( wire :arg1 ( thing :name ( name :op1 hungarian )  )  )  :mod razor )  )  :mod also )  :time meanwhile
and :op1 ( organization :arg0-of ( report :arg1 that :arg2 d :arg2-of ( enlist :arg0 ( inmate :mod ( even :mod-of prison )  )  :arg1 race )  )  :arg1-of ( have-org-role :arg2 correspondent )  :name ( name :op1 cbs :op2 news )  :wiki cbs_news )  :op2 fence :op3 ( between :arg1-of finish :arg1-of ( wire :arg0 razor )  )  :op4 ( country :name ( name :op1 hungary )  :wiki hungary )  :op5 serbia
become :arg0 elsewhere :arg1 ( country :arg0-of ( bottleneck :arg1 ( world-region :name ( name :op1 middle :op2 east )  :wiki middle_east )  :arg1-of ( major :topic-of ( few :op1 ( temporal-quantity :unit ( month :mod last )  )  )  )  )  :name ( name :op1 hungary )  :wiki hungary )  :arg2 ( and :op1 ( point :mod entry )  :op2 ( organization :name ( name :op1 european :op2 union )  :wiki european_union )  )  :purpose ( and :op1 ( person :arg0-of migrate )  :op2 ( refugee :mod war :quant many :source ( country :name ( name :op1 syria )  :wiki syria )  )  )
insist :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :arg0-of view :name ( name :op1 eu )  :poss-of ( nation :mod other :prep-with-of odds )  :wiki european_union )  :arg2 ( minister :mod prime )  )  :arg1-of ( protect :arg2-of ( entitle :arg1 ( refugee :mod war )  :polarity - )  )  :name ( name :op1 viktor :op2 orban )  )  :arg1 ( person :arg0-of migrate :arg0-of ( seek :arg1 ( life :mod good )  :arg1-of ( arrive :arg0 sharp :arg4 ( country :name ( name :op1 germany )  :wiki germany )  :quant most )  )  :mod economy )
and :arg3-of ( cross :arg1 ( fence :arg1-of ( build :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :location-of midnight :name ( name :op1 hungary )  :wiki hungary )  )  )  :location ( along :op1 ( border :arg2 serbia :part south )  )  )  :mod ( wire :arg1 now )  :mod ( razor :mod-of foot :mod-of 13 )  :mod ( distance-quantity :quant 4 :unit meter )  )  :op1-of ( or :arg1-of crime :op2 damage )  )  :op1 ( include :arg1 ( term :arg0-of ( convict :arg1 ( person :arg0-of ( traffic :arg1 human )  )  )  :arg1-of long :mod prison )  :arg2 ( law :arg0-of effect :mod new )  :mod also )
cause :arg1 ( by :op1 ( situation :mod due )  :op1-of mass :time-of ( tell :arg0 ( person :arg0-of ( have-org-role :arg1 ( government-organization :arg0-of ( govern :arg1 ( country :arg1-of ( govern :arg0 ( government-organization :arg0-of ( declare :arg1 crisis )  )  )  :name ( name :op1 &quot; )  )  )  )  :arg2 spokesman )  :name ( name :op1 &quot; )  )  :arg1 south :arg2 ( person :arg0-of ( report :arg2 city )  )  :arg3 ( thing :name ( name :op1 &quot; )  )  :time of :time state )  :time-of migration )
clear :arg1 we :arg1-of ( border :arg1-of ( cross :arg0 law :arg1-of crime )  )  :arg2 this :mod very
contrast :arg1 ( approve :arg0 parliament :arg1 ( deploy :arg0 ( temporal-quantity :unit day )  :arg1 military :arg1-of ( expect :arg0 technically :time ( week :mod next )  )  )  )  :arg2 ( see :arg0 ( person :arg0-of ( report :arg2 ( publication :name ( name :op1 associated :op2 press )  :wiki associated_press )  )  )  :arg1 ( and :op1 ( person :arg0-of ( have-org-role :arg1 vehicle :arg2 personnel )  :arg1-of ( arm :manner heavy )  :mod military )  :op2 dog )  )  :arg2-of ( border :arg1 still )
say :arg0 ( person :name ( name :op1 gyorgy :op2 bakondi )  )  :arg1 ( catch :arg0 authority :arg1 ( person :arg0-of ( try :arg1 ( cross :arg0 and :arg1 ( border :arg0 15 :arg1 country :arg1-of deep )  )  )  :quant 45 )  )  :arg2 ( person :arg0-of ( advise :arg1 ( person :name ( name :op1 orban )  )  :arg2 ( government-organization :name ( name :op1 homeland :op2 security )  :wiki united_states_department_of_homeland_security )  )  )
and :op1 ( police :mod-of custody )  :op2 ( charge :arg0 ( they :arg0-of ( damage :arg1 fence )  :arg0-of ( get :arg1 across )  )  :arg2 ( commit :arg1 ( offend :arg0 ( law :mod new )  )  )  )  :time now
repair :arg0 authority :arg1 fence :arg1-of quick
razor :arg1-of ( wire :arg2-of ( cover :arg0 tuesday :arg1 ( car :arg1-of ( deploy :op1-of ( after :time-of ( close :arg1 ( person :arg0-of ( have-org-role :arg1 ( thing :name ( name :op1 hungarian )  )  :arg2 official )  )  :arg2 ( border :arg1 ( crossing :quant 2 )  :arg2 ( country :name ( name :op1 serbia )  )  )  :mod also )  )  :purpose ( close :arg0 morning :arg1 7 )  )  :mod train )  )  )
crowd :arg0-of ( squeeze :arg1-of ( press :arg0 ( and :arg1-of ( process :arg2 person :purpose-of ( open :arg0 ( chao :arg1-of ( envelop :arg0 metal )  :arg2-of ( near :arg1 ( cross :arg1 ( border :arg1 ( country :name ( name :op1 roszke )  )  :arg2 ( country :name ( name :op1 hungary )  :wiki hungary )  :mod main )  )  )  )  :arg1 ( office :mod tiny )  :location container )  )  )  )  :arg4 inside )
contrast :arg1 ( remain :arg1 thousand :concession ( manage :arg0 20 :arg1 about )  :manner outside )
and :op1 ( refuse :arg0 they :arg1 food :arg1-of ( say :arg0 ( highway :arg0-of ( connect :arg1 ( and :op1 ( country :name ( name :op1 serbia )  )  :op2 ( country :name ( name :op1 hungary )  :wiki hungary )  )  )  :arg1-of ( block :arg0 ( group :consist-of ( person :arg0-of migrate )  :mod another )  )  :mod main )  )  :time ( until :op1 ( allow :arg1 ( cross :arg1 water :arg4 ( country :name ( name :op1 hungary )  :wiki hungary )  )  )  )  )
mean :arg1 half :arg2 ( person :arg0-of ( lead :arg1 ' :op1-of over )  :arg2-of ( elect :arg1 ( person :arg0-of ( cut :arg1 ( by :arg1-of ( poll :mod nation )  )  )  :name ( name :op1 bernie :op2 sanders )  :wiki bernie_sanders )  :time ( date-entity :year 2016 )  )  :name ( name :op1 hillary :op2 clinton )  :wiki hillary_rodham_clinton )
contrast :arg0 democratic :arg1 ( continue :arg1 ( hold :arg0 ( person :arg0-of ( have-org-role :arg1 race :arg2 ( secretary :poss state )  )  :arg1-of ( nominate :arg0 former )  :name ( name :op1 hillary :op2 clinton )  :wiki hillary_rodham_clinton )  :arg1 ( lead :mod ( digit :mod double )  )  )  )  :arg2 ( gain :arg0 ( person :name ( name :op1 bernie :op2 sanders )  :wiki bernie_sanders )  :arg1 she :arg2 nationally )
back :arg0 ( person :arg0-of ( come :arg1 ( person :name ( name :op1 sanders )  )  :arg2 democratic )  :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :arg1 ( percentage-entity :value 47 )  :arg1-of ( vote :arg0 ( person :mod primary :mod percentage-entity :mod ( percentage-entity :value 27 )  )  :arg2 ( percentage-entity :value 58 )  )  :op1-of 17 :time now :time down
receive :arg0 ( person :arg0-of ( have-org-role :arg1 democratic :arg2 ( president :mod vice )  )  :arg0-of ( announce :arg1 ( run :arg0 he :arg1 ( have-org-role :arg0 ( person :name ( name :op1 joe )  :wiki joe_paterno )  :arg1 yet :arg2 president )  )  )  :name ( name :op1 biden )  :wiki joe_biden )  :arg1 ( support :arg0 ( percentage-entity :value 15 )  :arg1 primary )  :arg2 ( person :arg0-of vote )
say :arg0 ( person :arg0-of vote :arg0-of ( say :arg1 ( more-than :op1 ( temporal-quantity :quant 5 :unit month )  )  )  :poss-of mind :quant most )  :arg1 ( early :degree too )  :time ( before :op1 ( start :arg0 ( they :arg0-of ( support :arg1 candidate )  )  :arg1 ( contest :arg1 democratic :mod primary )  )  )
contrast :arg1 ( choose :arg0 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :arg1 ( candidate :arg0-of ( back :mod that )  :mod other )  :time-of ( firm :degree more )  )  :arg2 backer
sander :arg0-of ( gain :arg1 some :time ( make :arg0 ( person :arg0-of ( lose :arg1 ground :arg1-of ( poll :arg0 ( organization :name ( name :op1 cbs :op2 news )  :wiki cbs_news )  :time ( since :quant-of ( temporal-quantity :quant last :unit month )  )  )  )  :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :arg1 ( number :quant-of group :quant-of demography )  )  )
contrast :arg1 ( maintain :arg1 ( lead :arg0 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :mod large )  )  :arg2 ( narrow :arg1 lead :op3-of ( and :op1 woman :op2 moderate )  )
drop :arg1 ( she :arg0-of ( support :arg1 man )  )  :arg2 considerable :op1-of ( and :op2 ( trail :arg0 ( person :name ( name :op1 sanders )  )  :arg1 she :arg2 ( point :mod 5 )  :mod only )  )
and :op1 ( person :name ( name :op1 clinton )  :poss-of advantage :wiki hillary_rodham_clinton )  :op2 ( person :arg0-of ( vote :arg1 age )  :mod democratic :op1-of under )  :op3 ( she :arg0-of ( evaporate :arg1 50 )  :op1-of ( and :op2 sander :op3 now :op4 even )  )
vote :arg0 ( person :arg1-of ( lead :arg0 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :mod large :mod still )  :mod old )
contrast :arg1 sander :arg2 ( edge :arg0 ( temporal-quantity :unit ( month :mod last )  )  :arg1 ( person :arg0-of ( liberal :arg1 ( person :prep-among-of ( digit :mod ( double :location-of ( person :name ( name :op1 sanders )  :op1-of ahead )  )  )  )  :arg2 now )  :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :arg2 ( group :mod this )  :mod ( point :quant 5 )  )
say :arg0 ( person :arg0-of ( enthusiastic :arg1 democratic :arg2 ( person :arg1-of ( support :arg0 they )  :arg1-of ( become :arg0 ( she :arg0-of ( nominate :arg1 ( half :mod about )  )  )  :arg2 party )  :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  )  :arg0-of vote :mod primary )  :arg1 nationwide
cause :arg0 ( she :arg1-of nominate )  :arg1 ( back :op3-of ( and :op1 ( support :arg0 quarter :arg1 she :arg2 ( percentage-entity :value 15 )  )  :op2 ( reserve :mod some :polarity another )  )  )  :mod only
support :arg1 ( she :poss-of ( percentage-entity :mod 6 )  )  :polarity -
surprise :arg0 perhaps :arg1 she :arg2 ( person :arg1-of ( support :arg0 ( person :arg0-of ( likely :arg1 enthusiastic :arg2 about :mod especially )  :mod current )  )  :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :polarity -
mix :arg1 ( view :arg1 ( support :arg0 ( quarter :arg1 ( only :mod-of about )  )  :arg1 she :arg1-of ( enthusiastic :purpose ( back :arg1 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :polarity - :time current )  )  )  )  :degree more
say :arg0 ( person :arg0-of vote :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  :poss-of frontrunn :quant few )  :arg1 ( percentage-entity :value 48 )  :concession ( say :arg0 ( person :arg0-of ( vote :arg1 ( person :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  )  :mod primary )  :arg0-of ( while :arg1 democratic )  :arg1 ( back :arg0 they :manner ( enthusiastic :arg0 ( percentage-entity :value 35 )  :arg1 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  )  )  )
answer :arg0 ( she :arg0-of ( right :arg1 percentage-entity :arg2 ( she :arg0-of ( experience :arg1 16 )  :arg0-of ( follow :arg2 percentage-entity :purpose it )  )  )  :arg0-of ( nominate :arg1 ( candidate :mod ( good :degree most :domain she )  :mod-of job )  :arg2 ( want :arg0 they :arg1 ( and :time ( time :time-of 13 )  )  :arg2 ( person :arg0-of ( have-org-role :arg1 woman :arg2 president )  :arg0-of open :arg0-of ( support :arg1 ( percentage-entity :value 10 )  )  :arg2-of ( ask :arg0 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :arg1-of ( end :arg0-of question )  )  )  )  )  )  :arg2 top
mention :arg0 ( person :arg0-of ( support :arg1 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  )  )  :arg1 ( associate :arg1 ( person :name ( name :op1 bill :op2 clinton )  :wiki bill_clinton )  )  :arg2 ( 9 :value-of percentage-entity )  :mod also
and :op1 agreement :op2 issue :op3 ( cite :arg1 electability :mod also )
race :arg1 ( see :arg0 ( person :arg0-of ( have-org-role :arg1 vice :arg2 ( president :arg1-of weigh )  )  :arg0-of ( vote :arg1 primary )  :arg0-of ( have-org-role :arg1 ( potential :arg1-of run )  :arg2 president )  :arg0-of ( do :arg1 57 :arg1-of ( recommend :arg0 he :arg1-of ( think :polarity - )  )  )  :arg1-of resemble )  :arg1 percentage-entity :arg1-of jump )
ask :arg1 primary :arg2 ( person :arg0-of vote :arg0-of ( choose :arg1-of ( pick :arg0 ( person :name ( name :op1 biden )  :wiki joe_biden )  :arg2 top )  :arg1-of ( nominate :arg0 party )  )  )
say :arg0 ( person :arg0-of ( support :arg1 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  )  )  :arg1 ( half :degree-of more )  :arg2 ( person :arg1-of ( choose :arg0 ( person :name ( name :op1 sanders )  :op1-of ( ahead :mod far )  )  )  :name ( name :op1 biden )  :wiki joe_biden )
race :arg0 ( person :arg0-of run :name ( name :op1 biden )  :poss-of ( point :mod 30 )  :poss-of ( point :mod 20 )  :wiki joe_biden )  :arg1 ( choose :arg0 ( person :arg0-of run :name ( name :op1 biden )  :wiki joe_biden )  :arg1-of ( widen :arg0 sander :polarity - )  :arg1-of nominate :arg1-of ( lead :arg0 ( person :name ( name :op1 hillary :op2 clinton )  :wiki hillary_rodham_clinton )  )  )
see :arg0 ( person :arg0-of vote :quant ( percentage-entity :mod fifty :mod 5 )  )  :arg1 ( person :arg0-of ( chance :arg1 ( win :arg0 ( percentage-entity :compared-to-of down :value 78 )  :arg2 ( elect :arg0 democratic :arg1 ( and :op1 ( figure :mod that )  )  :arg1-of general )  )  :arg2 ( good :degree most )  :mod ( last :mod-of ( month :unit-of temporal-quantity )  )  )  :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :arg2 candidate
contrast :arg1 ( rise :arg0 ( person :arg1-of ( distant :arg0 most )  :arg1-of ( measure :mod this )  :name ( name :op1 biden )  :wiki joe_biden )  :arg1 ( percentage :arg1-of see )  )
important :arg1-of ( ask :arg0 ( person :arg0-of vote :arg0-of ( pick :arg1 ( issue :arg0 electability :arg1 ( nominate :arg1 still :mod democratic )  )  )  )  )  :degree more
stand :arg0 ( or :op1 ( candidate :arg1-of single )  :op2 ( candidate :mod ( potential :polarity - )  )  )  :arg1 ( accept :arg1 ( last :mod-of ( month :unit-of temporal-quantity )  )  :arg2 ( nominate :arg0 democratic :arg1 ( person :arg0-of vote :mod this )  )  )  :arg1-of ( resemble :arg0 primary )
or :arg1-of ( vote :arg0 ( person :mod primary :poss-of party )  )  :op1 democratic :op2 potential :op3 ( perform :arg0 ( candidate :arg0-of ( characterize :arg1 among :arg1-of ( key :mod some )  )  )  :arg1 candidate :mod well )
and :op1 ( person :name ( name :op1 sanders )  :op1-of and :op2-of ( and :arg1-of ( see :arg0 ( majoriti :poss ( leadership :mod-of ( quality :arg1-of strong )  )  )  )  :op1 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :op3 ( person :name ( name :op1 biden )  :wiki joe_biden )  )  )  :op2 honest :op3 trustworthy
' :mod-of ( strength :mod ( person :mod while :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :mod leadership :mod ( honesty :quant 3 )  :mod ( good :degree most :domain ( person :name ( name :op1 biden )  :wiki joe_biden )  :mod-of of )  )
contrast :arg1 27 :arg2 ( say :arg0 ( person :arg0-of ( vote :arg1 ( percentage-entity :quant thirty :quant-of of )  )  :arg0-of ( do :arg1 democratic )  :arg0-of ( think :arg1 ( and :op1 ( person :arg0-of ( opine :arg1 this :polarity - )  :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :op2 honest :op3 trustworthy :op4 twice :op5 ( 15 :quant-of percentage-entity )  )  :polarity - )  :mod primary )  :arg1 ( that :mod-of ( sander :mod about )  )  :quant ( many :quant-of percentage-entity )  )
see :arg0 ( person :arg0-of vote :mod primary )  :arg1 ( and :op1 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :op2 ( person :name ( name :op1 sanders )  )  :op3 ( person :name ( name :op1 biden )  :wiki joe_biden )  :op4 ( view :arg0 line :arg2 democratic :mod-of ideology )  )  :arg1-of general :mod also
opine :arg0 ( person :name ( name :op1 sanders )  )  :arg1 ( quarter :arg0 ( person :arg0-of vote )  :arg1 about )  :topic ( all :quant-of ( measure :arg0 - :arg1 democratic :mod this )  )
say :arg0 ( she :arg1-of ( explain :arg0 ( person :arg0-of ( vote :arg1 primary )  :arg1-of ( satisfy :medium ( email :arg1 ( use :arg1 ( continue :arg1 ( person :arg0-of ( have-org-role :arg1 state :arg2 secretary )  :name ( name :op1 hillary :op2 clinton )  :wiki hillary_rodham_clinton )  :arg1-of question )  )  :arg1-of personal :arg1-of address :arg2 ( and :op1 server )  )  )  )  :arg1-of matter )  )  :arg1 ( and :arg1-of ( view :arg0 most :mod overall )  :arg1-of ( impact :arg0 it :polarity - )  )
contrast :arg1 it :arg2 ( story :arg1-of ( differ :arg0 public :arg2 among )  :topic overall )
dissatisfy :arg1 half :arg2 ( explain :arg0 ( person :mod ( country :name ( name :op1 america )  :wiki united_states )  )  )  :time now :time ( satisfy :arg1 ( about :mod just )  )
view :arg0 public :arg1 ( split :arg0 back )  :arg2 short :mod this :time ( after :time-of ( come :arg1 ( issue :arg1-of light )  )  )  :time ( date-entity :month 3 )
opine :arg0 ( percentage-entity :value 36 )  :arg1 she :arg2-of ( grow :arg1 bad :arg1-of ( say :arg0 ( person :arg0-of ( say :arg1 ( effect :arg0 ( controversy :mod email )  :arg1 ( opine :arg0 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :arg1 most :mod overall )  :polarity - )  )  :mod ( country :name ( name :op1 america )  :wiki united_states )  )  )  )
say :arg0 ( person :domain it :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  :arg1 ( become :arg1 ( view :arg0 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  )  :arg2 ( bad :arg0 main :arg1 6 :arg2 10 :op1-of more )  )
and :op1 ( person :arg0-of ( vote :arg1 overall )  :arg2-of ( register :arg0 ( she :arg0-of ( see :arg1 ( and :op1 honest )  :arg2 she )  )  :arg1 ( continue :arg0 ( she :mod-of party )  :arg1 problem :arg1-of ( vote :arg0 ( person :arg2-of ( view :arg0 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :arg1 ( and :op1 honest :op2 trustworthy )  :mod even )  )  )  :mod this )  :mod among )  )  :op2 ( 15 :mod-of ( point :mod ( last :mod-of ( temporal-quantity :unit month )  )  :mod ( only :mod-of percentage-entity :mod-of ( point :mod 8 :mod down )  :mod-of 32 )  :mod since )  )
think :arg0 ( person :arg0-of ( do :arg1 sixty )  :arg0-of ( vote :arg1 ( percentage-entity :quant 2 )  )  :arg1-of ( register :arg0 of )  )  :arg1 ( and :op1 she :op2 honest :op3 trustworthy )  :polarity -
trump :arg0 ( time :mod-of same )  :arg1 ( see :arg0 ( person :arg0-of ( vote :arg1 ( register :arg0 55 :arg1 percentage-entity )  )  :arg0-of ( do :arg1 nationwide )  )  :arg1 ( and :mod honest :op1 ( trustworthy :mod-of either )  )  :polarity - )
mark :arg0 ( thing :mod good )  :arg1 ( and :op1 ( person :name ( name :op1 clinton )  :wiki hillary_rodham_clinton )  :op2 ( person :name ( name :op1 trump )  :op1-of both )  :op3 leadership )
and :op1 ( candidate :arg1-of ( test :arg0 ( good :degree most )  )  :quant 6 )  :op2 ( person :name ( name :op1 biden )  :poss-of honesty :wiki joe_biden )  :op3 ( person :name ( name :op1 carson )  )  :op4 ( person :name ( name :op1 bush )  :wiki george_w._bush )
contrast :arg1 ( resemble :arg1 ( carson :quant ( many :arg2-of ( opine :arg0 an :arg1 him :manner of )  :polarity - )  )  :arg2 ( than :polarity - )  )  :arg2 ( see :arg0 more-than :arg1 honest :mode sander )
vote :arg0 ( person :arg0-of ( sample :arg1 6 :arg2 ( error :mod-of margin :op1-of democratic )  )  :mod primary )  :arg1 ( point :location percentage )
draw :arg0 ( person :arg0-of ( poll :mod nation )  :location ( behind :op1 ( person :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  )  :name ( name :op1 ben :op2 carson )  )
run :arg1 ( person :arg1-of ( poll :arg0 ( newspaper :mod ( slash :op1 ( organization :name ( name :op1 cbs :op2 news )  :wiki cbs_news )  )  :name ( name :op1 new :op2 york :op3 times )  :wiki the_new_york_times )  )  :location ( behind :op1 ( person :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  )  :name ( name :op1 ben :op2 carson )  )  :manner ( new :degree most )
account :arg0 ( candidate :arg0-of ( leave :arg1 ( scrounge :arg0 other :arg1 foothold )  )  :quant 2 )  :arg1 ( support :arg0 ( person :arg0-of vote )  :location ( poll :mod new )  :mod half )
poll :arg0 ( organization :name ( name :op1 cbs )  )  :arg1-of ( support :arg1-of ( poll :location tuesday )  :arg2 ( percentage-entity :value 23 )  :arg2-of ( climb :arg0 ( person :name ( name :op1 trump )  )  :arg1 ( person :arg0-of vote :arg0-of ( continue :arg1 back :time nationwide )  :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  :arg3 ( percentage-entity :value 27 )  )  )  :arg1-of ( conduct :time ( before :op1 ( debate :arg1 ( number :mod large )  :mod ( broadcast-program :name ( name :op1 fox :op2 news )  :wiki fox_news_channel )  )  :op2 ( temporal-quantity :unit ( month :mod last )  )  )  )  :mod last
contrast :arg2 ( rocket :arg0 ( person :name ( name :op1 carson )  )  :arg1 ( percentage-entity :value 23 )  :arg4 ( percentage-entity :value 6 )  :time ( period :arg1-of same :mod that )  )
vote :arg0 ( person :arg1-of ( survey :arg0-of ( find :arg1 ( do :arg0 ( person :arg0-of ( edge :arg1 ( person :name ( name :op1 trump )  )  )  :name ( name :op1 carson )  )  :arg1 ( educate :arg2 college )  :path ( across :op1 ( group :mod demography )  )  )  :mod also )  )  :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )
ohio :op1-of ( name :name-of ( thing :op2-of ( and :op1 ( person :arg0-of ( support :arg1 ( last :mod-of ( month :unit-of temporal-quantity )  )  :arg2 ( percentage-entity :value 10 )  )  :arg1-of ( except :arg0 now :arg2 ( rest :arg1-of ( slip :arg2 ( person :arg1-of ( fall :arg0 ( percentage-entity :value 2 )  :manner farthest )  :name ( name :op1 scott :op2 walker )  :source ( thing :name ( name :op1 wisconsin :op2 gov. )  )  )  :arg3 behind )  :part-of field )  )  :name ( name :op1 carly :op2 fiorina )  )  :op3 ( person :name ( name :op1 john :op2 kasich )  )  )  )  :op2 gov. )
tie :arg0 ( person :mod ( thing :name ( name :op1 gov. :op2 jeb )  )  :name ( name :op1 bush )  :op1-of ( and :op2 ( person :mod ( thing :name ( name :op1 arkansas :op2 gov. )  )  :name ( name :op1 mike :op2 huckabee )  :time former :wiki mike_huckabee )  :op3 ( thing :mod ( state :mod former :name ( name :op1 florida )  :wiki florida )  :name ( name :op1 florida :op2 sen. )  :quant all )  :op4 ( person :name ( name :op1 marco :op2 rubio )  )  )  :wiki george_w._bush )  :arg1 ( percentage-entity :value 6 )  :arg3 place
and :op1 plus :op2 ( or :op1 minus )  :op3 percentage-entity :op4 ( conduct :arg1 ( date-entity :month 9 )  )  :poss ( error :arg1-of ( sample :arg0 ( person :mod 376 )  :arg2 ( person :arg0-of ( poll :arg1 6 :mod ( new :degree most )  :mod this )  :arg0-of vote :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  )  :mod-of margin )
trump :arg0 ( person :arg0-of ( support :arg1 percentage-entity )  :arg0-of ( support :mod 19 :mod-of among )  :arg0-of ( show :arg1 percentage-entity :arg1-of ( rise :arg2 ( poll :arg1 land )  )  :arg1-of ( release :time ( week :mod last )  )  :arg1-of ( survey :op3-of ( slash :op1 ( late :degree most )  :op2 ( publication :name ( name :op1 cnn )  :wiki cnn )  )  )  )  :mod ( political-party :name ( name :op1 republican )  :wiki republican_party_[united_states] )  )  :arg1 32 :mod behind
show :arg0 ( poll :arg0 ( newspaper :name ( name :op1 washington :op2 post )  :op2-of ( slash :op1 ( organization :name ( name :op1 abc :op2 news )  :wiki abc_news )  )  :wiki the_washington_post )  :time ( late :degree most )  )  :arg1 ( person :name ( name :op1 trump )  )  :arg1-of significant :mod also :time ( ahead :op1 ( person :name ( name :op1 carson )  )  )
trump :arg1 ( take :arg0 even :arg1 some :arg1-of rise :arg1-of ( face :time ( week :mod last )  )  :arg3 ( question :arg1 faith :arg1-of retire :arg1-of apologize )  )
trump :arg0 ( we :arg0-of ( say :arg1 last )  :arg0-of ( stop :arg1 ( state :name ( name :op1 iowa )  :wiki iowa )  :arg1-of ( campaign :arg0 during )  )  :arg0-of ( need :arg1 energy )  )  :arg1 saturday
sea :mod ( east :arg0-of ( warm :arg1 ( temperature :mod pleasant :purpose ( bathe :arg1 29 )  )  :arg3 degree :time current )  )  :name ( name :op1 mediterranean )  :wiki mediterranean_sea
enough :domain ( trip :arg0-of ( measure :arg1 ( level :arg1-of peak )  :mod only :time distance )  :arg1 ( sea :name ( name :op1 mediterranean )  :wiki mediterranean_sea )  )  :topic ( lover :arg0-of ( find :arg1 ( water :arg1-of ( warm :arg0 even )  )  )  :location beach )
possible :arg0 ( 17 :mod-of ( degree :mod only )  )  :arg1 ( treat :arg0 maximum :arg1 temperature :manner brief )  :op3-of ( or :op1 ( country :location-of dip :name ( name :op1 north :op2 sea )  )  :op2 ( name :op1 baltic :op2 sea )  )
say :arg0 ( office :mod ( country :name ( name :op1 germany )  :wiki germany )  :mod meteorological )  :arg1 ( and :op1 ( person :arg0-of ( go :arg1 18 :arg4 sea :polarity - )  :quant many )  :op2 ( country :location-of ( water :domain-of ( maximum :consist-of degree :time ( week :mod this )  )  )  :name ( name :op1 north :op2 sea )  )  :op3 ( world-region :name ( name :op1 baltic )  :wiki baltic_states )  )
contrast :arg0 29 :arg1 ( sea :arg0-of ( offer :arg1 ( temperature :arg1-of ( suitable :arg0 ( degree :arg2-of ( high :arg1 they :time east )  )  )  :purpose bathe )  )  :name ( name :op1 mediterranean )  :wiki mediterranean_sea )
and :op1 ( temperature :purpose ( peak :arg0 23 :arg1 ( thing :domain ( country :name ( name :op1 france )  :wiki france )  :name ( name :op1 adriatic )  )  )  )  :op2 ( degree :quant 25 )  :op3 degree
degree :domain ( country :location ( country :name ( name :op1 egypt )  :wiki egypt )  :name ( name :op1 red :op2 sea )  )  :mod 28
charge :arg0 ( person :arg0-of ( have-org-role :arg1 fraternity :arg2 member )  )  :arg1 ( die :arg1 ( freshman :mod ( college :domain 5 )  )  )
charge :arg0 ( nearly :mod-of 2 )  :arg1 ( person :arg0-of ( study :arg1 during )  :arg1-of die :mod ( college :mod ( after :duration ( temporal-quantity :unit year )  )  )  )  :arg2 ( person :arg2-of ( file :arg0 ( ritual :mod ( haze :mod fraternity )  )  :arg1 ( against :op1 5 )  )  )  :mod murder :mod mountain
rite :arg2-of ( take :arg0 ( person :arg2-of ( assault :arg0 ( city :location-of ( of :mod member )  :name ( name :op1 new :op2 york )  :wiki new_york_city )  :arg1 chun :arg1-of ( brutal :arg0 fraternity :arg2 ( psi :mod ( delta :mod ( college :mod ( baruch :mod ( ' :mod city )  )  )  )  )  )  )  :name ( name :op1 michael )  :wiki michael_jackson )  :arg1 him :arg3 hospital :op2-of ( and :op1 ( delay :arg1-of ( contribute :arg0 ( he :arg0-of ( say :arg1 police )  :arg1-of die )  )  )  )  :purpose initiation :purpose ( deng :mod-of during )  :time ( date-entity :year 2013 )  :time ( date-entity :month 9 )  )
say :arg0 ( person :arg0-of ( have-org-role :arg2 official )  )  :arg1 ( and :op1 ( tackle :arg1 ( he :arg1-of ( saddle :arg2 ( backpack :arg0 full :arg1 sand :mod pound :mod 30 )  )  :arg1-of blindfold )  :arg1-of repeat :time ( try :arg1 ( walk :arg1 ( target :arg1 ( field :arg1-of freeze :op1-of across )  )  )  )  )  )
complain :arg0 ( thing :name ( name :op1 mr. :op2 deng )  )  :arg1 ( hurt :arg0 head :arg1 ( fall :arg1 ( conscious :polarity - )  :mod then )  )  :time eventual
say :arg0 police :arg1 ( call :arg0 ( person :arg0-of ( have-org-role :arg1 fraternity :arg2 member )  )  :arg1 911 :op1-of ( and :op2 ( wait :arg1 ( temporal-quantity :unit hour )  :arg1-of allege :time ( before :op1 ( bring :arg2 hospital )  )  )  )  :polarity - :time ( after :op1 ( pass :arg0 ( person :name ( name :op1 deng )  )  :arg1 ( thing :name ( name :op1 delta :op2 psi )  )  )  )  )
say :arg0 wagn :arg1 ( and :op1 ( contact :arg0 ( company :name ( name :op1 google )  :wiki google )  :arg1 symptom :arg1-of ( have-org-role :arg0 nation :arg2 president )  :arg1-of ( find :arg0 they :manner time :manner ( change :arg1 clothes )  )  )  :op2 ( seek :arg0 fraternity :arg1 ( conference :mod news )  :arg1-of ( advise :arg0 police )  :arg2 ( chief :mod chri )  )  )
say :arg0 ( person :mod ( that :mod-of of )  :name ( name :op1 michael )  :op1-of deng :op5-of ( and :op1 ( person :arg0-of ( have-org-role :arg2 member )  )  :op2 ( begin :arg0 ( point :mod this :mod at )  :arg1 fraternity :op1-of ( over :mod well )  )  :op3 paraphernalia :op4 ( put :arg0 basic :arg1 ' :arg1-of hide :arg2 chief )  )  :wiki michael_jackson )  :arg1 wagn
possible :arg1 ( and :op1 ( revive :arg0 ( he :arg0-of ( die :arg1 he :time ( morning :mod next )  )  )  )  )  :polarity -
say :arg0 ( report :mod autopsy )  :arg1 ( subject :arg1 ( person :arg0-of ( head :op1-of ( and :op2 torso :op3 thigh )  )  :name ( name :op1 deng )  )  :arg2 ( trauma :arg1-of repeat :mod ( force :arg1-of blunt )  )  )
state :arg0 year :arg1 haze :arg1-of ( say :arg0 ( person :arg0-of ( study :arg1 ( die :arg1 every )  )  :arg0-of ( represent :arg2 family :op1-of ' :op1-of fierberg :op1-of ( attorney :wiki - )  :time ( date-entity :mod since :year 1970 )  )  :arg2-of ( devastate :arg0 ( family :mod ( many :mod too )  )  :arg1 ( result :arg1 of :arg2 ( fraternity :mod-of haze )  )  )  :mod least :quant 1 )  )
and :op1 ( hold :arg0 ( step :domain-of important :mod this )  :arg1 ( and :op1 ( person :arg0-of ( have-org-role :arg2 member )  )  )  :mod ( accountable :arg0 ( organization :name ( name :op1 fraternities )  )  :arg1 authority )  )
recommend :arg0 ( jury :mod ( organization :arg1-of ( have-org-role :arg0 ( person :quant 5 )  :arg2 member )  :name ( name :op1 monroe :op2 county )  )  :mod grand )  :arg1 ( charge :mod murder :mod degree )
charge :arg1 ( person :arg0-of ( have-org-role :arg1 fraternity :arg2 member )  :mod other :quant 2 :quant thirty )  :arg2 ( assault :arg1 ( thing :name ( name :op1 mr. :op2 meng )  )  )  :mod also :op1-of ( and :op2 haze :op3 ( conspiracy :arg2-of criminal )  )
contrast :arg1 ' :arg2 ( say :arg0 wagn :arg1 tuesday :arg2-of ( accountable :arg0 they :arg1 well :arg2-of ( hold :arg0 we :arg1 conference :op1-of news )  )  )  :arg2-of ( involve :arg0 ( individual :arg2-of ( hold :arg0 ( want :arg0 we :arg0-of ( cause :arg1 there )  :arg1 ( or :op1 wheth :op2 official :op3 unofficially )  )  :arg1 that :polarity - )  )  :arg1 ( organization :arg0-of ( sanction :arg1 it )  )  :mod only )
chapter :arg1-of local :arg2-of ( affiliate :arg0 ( fraternity :mod nation :op2-of ( and :arg1-of ( ban :arg0 college )  :op1 fraternity )  )  :arg1-of revoke )
interest :arg0 ( amr-unknown :location here )  :arg1 rate :arg1-of ( raise :arg0 ( government-organization :arg1-of have-org-role :name ( name :op1 fed )  :wiki federal_reserve_system )  )
and :op1 ( come :arg1 ( hike :mod rate )  )  :op2 ( and :arg0-of ( slip :arg1 economy :arg4 recession )  :op1 ( stumble :arg0 ( market :mod bull )  )  :op2 ( climb :arg0 ( thing :arg1-of ( yield :arg2 bond )  )  )  )
know :arg0 we :mod this
and :op1 ( take :arg0 ( we :arg0-of ( know :polarity - )  )  :arg1 it :arg1-of long :arg3 last :time ( long :arg1 all :degree amr-unknown :degree amr-unknown )  )
offer :arg0 history :arg1 ( guide :arg0 time :arg1 economy :mod little )  :time specific
and :op1 ( come :arg1 ( recession :poss-of ( temporal-quantity :arg1-of long :quant 86 :unit month )  )  :arg1-of ( quick :arg3 ( temporal-quantity :duration-of ( after :op1 ( hike :mod rate )  )  :quant 11 :unit month )  )  )
respond :arg1 asset :op5-of ( and :op1 ( raise :arg0 ( government-organization :name ( name :op1 federal :op2 reserve )  :wiki federal_reserve_system )  :arg1 rate :arg2 often :mod aggressivenes :time always )  :op2 amr-unknown :op3 ( economy :mod determinant )  :op4 finance )  :polarity -
contrast :arg1 ( rather :arg1-of ( take :arg0 ( person :arg0-of ( start :arg1 ( raise :arg0 it :arg1 rate )  )  :arg0-of ( invest :arg1 that )  :arg0-of ( recommend :arg1 ( focus :arg0 central :arg1 vigorous :arg1-of ( cause :arg0 bank )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 u.s. )  :wiki united_states )  :arg2 official )  :arg0-of stress :arg1-of why :domain that )  :polarity - )  )  )  :arg1-of ( normalize :arg0 of )  :arg1-of ( long :degree amr-unknown )  :arg3 trajectory )  )
variabl :arg3-of ( play :arg0 indeed )  :quant multiple
possible :arg1 ( find :arg0 ( person :arg0-of ( participate :arg2 market )  :arg0-of end )  :arg1 ( possible :arg1 ( overdo :arg1 ( fuss :arg1-of ( hike :arg2 rate )  :mod all )  )  )  )
say :arg0 ( economic :mod capital )  :arg1 ( note :arg0-of ( have-rel-role :arg1 ( money :arg1-of ( cheap :arg0 since :time era )  :arg1-of ( signal :arg0 ( by :op1 ( interpret :arg0 ( inevitable :op1 crisis )  :arg1-of ( hike :arg0 first :arg0-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg2 globe )  :arg2 finance )  )  )  :arg2 ( end :arg1 ( globe :arg1-of ( have-org-role :arg0 ( jessop :mod julian )  :arg2 chief )  :op1-of economist )  :op1-of of )  :mod some )  )  :arg2 client )  )
contrast :arg1 ( normal :arg1 ( level :arg0-of ( shock :arg1 many :arg1-of ( fear :arg1-of seem )  :arg1-of ( return :arg0 ( we :arg0-of ( expect :polarity - )  :arg0-of contrast )  :arg3 ( rate :mod ( interest :arg1 ( country :name ( name :op1 u.s. )  :wiki united_states )  )  )  :manner gradual )  :mod seismic )  :arg1-of ( low :mod still )  )  :degree more )
say :arg0 there :arg1 ( effect :arg0 - :arg1 that )  :arg3 -
possible :arg1 ( look :arg1 amr-unknown :location ( here :location-of ( base :arg0 history :arg1 trend :location area :location economy :location react :location some )  )  )
possible :arg1 ( see :arg0 market :arg1 ( anticipate :arg1 ( hike :arg1 rate )  :domain-of ( volatile :domain thing :location while )  )  :op1-of ( or :op2 ( temporal-quantity :op1-of past :unit month )  )  )
dramatic :domain ( impact :arg1-of ( hit :arg0 hike :time once )  )  :polarity -
say :arg0 ( organization :name ( name :op1 &quot; )  )  :arg1 ( study :arg0 recent :arg0-of ( happen :arg1 amr-unknown :op1-of after )  :arg1 of :arg1-of hike :arg1-of ( analyze :arg0 ( person :arg0-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  )  )  :arg1-of ( trend :arg0 ( there :arg1-of seem )  )  :arg1-of ( return :arg0 equity :arg2 ( temporal-quantity :unit month )  )  :arg2-of ( lag :arg0 ( perhaps :mod again )  :arg1 ( money :arg1-of ( stall :arg0 it )  :arg1-of reflect )  :time after )  :arg2-of ( hike :arg0 first :arg1 policy )  )
say :arg0 ( recent :arg1-of ( analyze :arg2-of ( doll :arg0 bob :arg1 ( post :arg0 ' :op1-of management :op1-of barron )  )  :arg2-of ( strategize :arg0 asset :arg1 at )  )  )  :arg1 ( or :arg0-of ( cause :arg1 ( up :arg3-of ( head :arg0 into :arg1 ( percentage-entity :value 14 )  :arg2 ( rate :mod-of hike )  )  :direction-of sharp )  )  :op1 ( past :mod-of ( over :degree more :degree ( most :degree-of often )  :op1 ( market :arg1-of specific )  )  )  :op2 ( temporal-quantity :quant 35 :unit year )  :op3 about )  :condition ( return :arg1 ( 6 :quant-of ( temporal-quantity :unit day )  )  :arg1-of cycle :arg1-of average :arg1-of ( normal :arg0 back :arg2 then :mod once )  :arg1-of ( pass :arg0 500 )  :arg1-of ( have-org-role :arg0 equity :arg2 chief )  :arg4 past :purpose-of ( gain :arg0 of :arg1 ( average :arg0 ( flat :degree-of fair )  :arg2 percentage-entity :time ( after :duration ( temporal-quantity :quant 250 :unit day )  )  )  :arg2 2.6 )  )  :quant percentage-entity
say :arg0 ( organization :name ( name :op1 deutsche )  )  :arg1 ( and :op1 ( tend :arg1 ( impact :arg1 stock :arg1-of ( pronounce :degree more )  )  :time late )  :op2 ( cycle :arg1-of ( hike :arg2 rate )  )  :op3 ( return :arg1 ( begin :arg1 diminish )  )  )
contrast :arg2 ( help :arg0 ( hike :arg1 rate )  :arg1 ( recession :domain-of ( fact :part-of ( life :mod economy )  )  )  :arg2 along :frequency often )
possible :arg1 ( hasten :arg1 recession )  :op2-of ( and :op1 ( exist :arg1 ( condition :arg1-of ( face :arg0 ( government-organization :arg1-of have-org-role :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg1-of ( case :time current )  )  :mod some )  :arg2 before :polarity - )  )
product :arg1-of ( gross :arg2 ( have-org-role :arg0 ( hike :mod rate )  :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg1-of ( notable :degree most )  )  :arg2-of ( low :arg1 ( point :arg2-of near :time ever )  :degree most )  )  :mod domestic
say :arg0 ( organization :name ( name :op1 deutsche :op2 bank )  )  :arg1 twice :time ( date-entity :op1-of ( since :time-of ( hike :arg0 ( gdp :mod year )  :arg1 only :mod rate :op1-of ( 4.5 :value-of percentage-entity )  :op1-of below )  )  :op1-of ( year :mod nominal )  :year 1950 )
say :arg0 ( government-organization :arg1-of ( have-org-role :arg0 ( city :name ( name :op1 atlanta )  :wiki atlanta )  )  :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg1 ( last :arg1 ( track :arg0 ( quarter :arg0 3.6 :arg1 percentage-entity )  )  :arg1-of ( expect :arg0 few :condition ( quarter :arg0 ( 1.5 :value-of ( percentage-entity :mod just )  )  :arg1 ( date-entity :year 2015 )  )  )  :concession even )
say :arg0 backdrop :arg1 ( and :arg1-of risky :arg1-of possible :op1 ( hike :arg0 such :arg1 rate )  :op2 ( question :arg1 ( of :arg1 ( economy :mod fragile )  )  )  )  :arg1-of ( differ :arg2 ( time :mod this )  )
meet :arg0 ( person :arg0-of ( participate :arg1 market )  :arg0-of ( brace :arg1 hike )  :arg0-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  )  :arg1 ( market :arg1-of ( open :arg0 ( week :mod this :mod toward )  :arg2 ( end :arg1 thursday :mod which )  :mod federal :mod ' )  :arg1-of ( turn :arg0 ( year :mod all )  :mod ( eye :mod all )  )  :mod-of committee )
probability :arg1-of ( indicate :arg0 ( trade :arg1 future )  :arg1-of while :condition ( approve :arg0 ( organization :arg0-of ( meet :mod this )  :name ( name :op1 fomc )  )  :arg1 hike :arg1-of possible :arg1-of ( believe :arg0 economy :op2-of ( and :op1 ( strategize :quant many )  )  )  )  )  :mod ( just :mod-of ( percentage-entity :value 25 )  )
say :arg0 in :arg1 ( report :arg0 ( we :arg0-of ( study :arg0-of ( hike :arg1 ( date :arg1-of cycle )  :mod all :time ( date-entity :year 1950 )  )  :arg1 since )  )  :arg1-of ( commence :arg1-of ( recover :arg1-of ( eclipse :arg0 gdp )  :arg1-of ( leverage :arg0 ( cycle :arg0 super-power :arg1 of )  :arg1-of increase )  :arg1-of ( peak :arg0 prerecession )  :arg1-of ( quick :degree very :op1-of post )  )  )  )
sample :arg1 ( period :arg1-of ( recession :arg1-of bad :arg1-of ( recover :arg0 contrast :domain this :manner slow :mod uniquely )  )  )
and :op1 ( temporal-quantity :quant 35 :unit month )  :op2 ( count :arg1 ( have-org-role :arg1 ( government-organization :arg0-of ( wait :arg1 ( cycle :time current )  :arg1-of long :time ( since :op1 ( end :arg1 ( recession :arg1 far :mod last :op1-of and )  )  )  )  :name ( name :op1 fed )  :wiki federal_reserve_system )  )  )  :op2-of ( and :op1 ( record :domain-of ( temporal-quantity :domain this :quant 74 :unit month )  )  )
and :op1 ( volatile :domain ( income :arg0-of ( resemble :arg1 pattern :arg2 ( experience :arg0 equiti )  :degree somewhat )  :arg1-of fix )  :mod also )  :op2 ( anticipate :arg0 market :arg1 ( hike :mod rate )  )
bond :arg0-of ( differ :arg1 ( happen :arg0 impact :arg1 fast :condition ( change :arg1 ( government-organization :arg1-of ( have-org-role :time stock )  :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg2 policy )  )  :mod principal )
seem :arg1 ( thing :arg0-of ( arrive :arg1 ( cut :arg1 cycle :op2-of ( slash :op1 hike )  )  )  :arg0-of ( change :arg1 direction :time immediate )  :arg1-of yield )  :arg2 bond
say :arg1 immediate :arg1-of ( end :arg1-of ( hike :arg1-of ( bond :arg1-of ( yield :arg1-of fall )  )  :arg1-of cycle )  )
cause :arg0 hike :arg1 ( move :arg0 bond :arg1 ( thing :arg1-of yield )  :extent close :manner together :purpose ( flatten :arg1 curve )  :purpose-of ( and :op1 ( long :arg1 rate )  :op2 ( date :arg1 short )  )  )  :arg1-of ( believe :arg0 ( strategize :arg1 ( person :name ( name :op1 charles :op2 schwab )  )  )  )
say :arg0 ( we :arg0-of ( cautious :arg1 about :arg2 ( perform :arg1 though :mod bond :op1-of such :op1-of often :op1-of good :time ( yield :arg1 climate :arg1-of high )  )  :mod still )  :arg0-of ( fix :arg1 income )  )  :arg1 ( analyze :arg1 ( yield :arg1 jon :arg1-of stretch )  )  :arg1-of analyze
think :arg0 ( person :name ( name :op1 jones )  )  :arg1 ( adapt :arg0 market :arg2 ( expect :arg3-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  :mod policy )  :time already )  :mod interesting
drop :arg0 ( and :op1 in :op2 addition :op3 strength :op4 ( monetary-quantity :unit dollar )  :op5 ( adjust :arg0 ( market :mod that )  :arg1 ( policy :arg1-of ( write :arg0 ( she :arg2-of ( tight :arg0 of :arg1 money )  )  )  :arg1-of prospect )  )  )  :arg1 sign :arg2 ( expect :arg0 inflation :arg1 several :arg2 there )
and :op1 ( widen :arg1 ( spread :arg1 credit )  )  :op2 ( increase :arg0 ( volatility :arg0-of ( have-org-role :arg1 ( government-organization :arg0-of ( tighten :arg1 policy )  :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg1-of ( yield :arg1-of ( curve :arg1-of flatter )  )  )  )  :arg1 ( thing :arg2-of ( characteristic :arg0 ( rate :arg1-of short :mod interest )  :arg1 market )  :quant all )  )
win :arg0 company :condition ( rise :arg1 ( rate :mod ( interest :arg0 ( business :op1-of majority )  :arg1 ( country :name ( name :op1 u.s. )  :wiki united_states )  )  )  :op1-of ( and :op2 ( become :arg1 ( product :arg1-of local )  :arg2 ( attract :degree more )  )  )  )  :condition ( speak :manner broadly )
and :op1 ( expensive :arg1-of ( make :arg0 multinational :arg2 ( monetary-quantity :arg1-of rise :unit dollar )  :purpose-of ( fare :op1 ( bad :arg0 ( finance :mod ( expensive :degree more )  )  :arg1 ( lot :quant-of debt )  )  )  )  :degree ( more :compared-to market )  :domain product )  :op2 ( debt :poss ( space :mod globe )  )
say :arg0 ( person :arg0-of ( have-rel-role :arg2 client )  :arg0-of ( analyze :arg1 ( report :arg0 ( company :name ( name :op1 goldman :op2 sachs )  :wiki goldman_sachs )  )  )  :arg1-of ( hike :arg0 initial )  )  :arg1 ( quality :arg0-of ( outperform :arg1 during )  :arg0-of ( follow :arg1 rate :duration ( temporal-quantity :quant 3 :unit month )  )  :arg1-of ( tend :arg0 stock )  :arg1-of ( show :arg0 history )  :mod that )
and :op1 ( strong :arg1 ( sheet :arg1-of ( firm :arg0-of ( outpace :arg1 ( company :arg1-of follow :arg1-of ( weak :arg0 5 )  :mod sheet :mod ( balance :arg1 ( date-entity :year 1994 )  )  )  )  :arg1-of ( hike :mod rate :time ( date-entity :year 2004 )  )  )  :arg1-of ( balance :arg0 each :arg1-of ( average :arg2 ( point :location percentage )  )  )  )  )  :op2 ( date-entity :year 1999 )
and :op1 ( return :arg0 ( company :arg0-of ( outperform :arg1 ( counterpart :arg1-of ( low :arg0 3 )  )  :manner ( average :arg0 quality :arg1 ( point :location percentage )  )  :mod also )  )  :arg1 capital :arg1-of high :mod-of ( stock :arg1-of ( low :arg0 respective :arg2 ( point :location percentage )  )  :mod volatility )  )  :op2 4
become :arg1 debt :arg2 ( issue :mod big )
say :arg0 ( organization :name ( name :op1 goldman )  )  :arg1 ( stand :arg1 ( lose :arg0 company :arg1 ( debt :arg1-of float :mod rate :part ( percentage :arg1-of ( high :arg0 most )  )  )  )  )
stand :arg1 ( person :arg0-of consume :arg1-of benefit )  :location ( outside :op1 ( play :arg1 ( stock :arg1-of ( pure :arg2 ( rise :arg1 ( monetary-quantity :unit dollar )  )  )  )  )  )
possible :arg1 ( see :arg0 saver :arg1 ( thing :arg1-of gain )  )  :condition ( differ :arg1 ( person :arg1-of expert )  :arg2 ( take :arg0 that :arg1 ( hold :arg1 ( high :arg1 ( thing :arg1-of yield )  )  )  :arg1-of quick )  )
say :arg0 ( person :name ( name :op1 andrew :op2 bingham )  )  :arg1 ( thing :arg2-of ( copy :arg1 ( country :arg1-of ( have-org-role :arg0 person :arg2 mp )  :name ( name :op1 classic :op2 fm )  )  )  :domain ( radio :name ( name :op1 bbc :op2 radio )  )  )  :arg2 3
criticize :arg0 ( person :arg0-of ( have-org-role :arg1 ( political-party :name ( name :op1 conservative )  :wiki conservative_party_[uk] )  :arg2 mp )  :domain-of ( dumb :mod-of down )  )  :arg1 station
become :arg1 ( argue :arg1-of rival :arg1-of ( increase :arg0 commerce )  )
say :arg0 ( organization :arg0-of aim :name ( name :op1 bbc :op2 music :op3 awards )  )  :arg1 ( rip :arg0 they :arg1 ( person :mod ( country :name ( name :op1 great :op2 britain )  )  )  :mod just )  :mod also
voice :arg0 ( person :arg0-of attack :arg0-of ( have-org-role :arg2 mp )  :mod collin )  :arg1 ( say :arg0 ( person :name ( name :op1 colleague )  )  :arg1 ( that :mod-of ( original :polarity - )  :mod-of too )  )
prove :arg1 ( something :arg1-of ( do :arg0 ( person :arg0-of ( broadcast :arg1 commerce )  :arg1-of ( pressure :arg1-of pile-up :arg1-of fresh :arg1-of ( claim :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 bbc )  )  :arg2 mp )  :arg0-of ( lead :arg1 ( radio :name ( name :op1 bbc :op2 radio )  )  )  :arg1-of ( turn :arg0 3 )  )  )  )  )  :polarity - )  )  :arg1-of broadcast
tell :arg0 ( person :arg2-of ( become :arg1 it :op4-of ( and :op1 ( person :arg0-of ( have-org-role :arg1 ( political-party :arg0-of ( rival :arg1 commerce )  :name ( name :op1 conservative )  :wiki conservative_party_[uk] )  :arg2 mp )  )  :op2 ( appear :arg1 radio :op1-of station :op1-of service )  :op3 ( dumb :mod-of down )  :op5 ( increase :arg0 public :arg1 indistinguishable )  )  )  :name ( name :op1 conservative )  )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg2 boss )  :mod that )  :mod also
contrast :arg1 ( seem :arg1 classic )  :arg2 ( say :arg0 ( he :arg2-of ( resemble :arg1 ( use :arg0 ( i :arg0-of ( do :arg1 it :arg2-of ( radio :arg1 3 )  :polarity - )  )  :arg1 word :arg1-of seem :arg2 dumb )  )  :arg2-of ( turn :arg0 down :arg1 into )  )  :arg1 fm )
aim :arg0 ( he :arg0-of ( launch :time ( 12 :mod last )  )  :arg1-of ( award :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg2 music )  )  :arg1 also
seem :arg0 ( start :arg1 ( organization :name ( name :op1 the :op2 bbc :op3 music :op4 awards )  )  :time ( year :mod last :mod ( another :mod-of name )  )  )  :arg1 ( person :mod ( country :name ( name :op1 great :op2 britain )  )  )
say :arg0 ( you :arg0-of ( mimic :arg1 actual :arg2 ( amr-unknown :arg2-of ( head :arg0 ( i :arg2-of ( do :arg0 ( you :arg0-of ( try :arg1 example )  )  :arg0-of cause :arg0-of ( differ :arg1 that :arg2 2 )  :arg1 something )  )  :arg1 top )  )  :mod just )  )  :arg1 market :time already
deny :arg0 ( general :arg0-of ( argue :arg1 ( and :op1 ( live :arg1 music :arg2-of come )  :op2 ( educate :arg0 ( radio :name ( name :op1 bbc :op2 radio )  )  :arg1 public )  )  )  :arg1 ( company :arg1-of ( have-org-role :arg2 director )  :name ( name :op1 bbc )  :wiki bbc )  )  :arg1 ( charge :arg1 ( rival :arg1 3 :compared-to-of ( ahead :mod far )  :mod commerce )  )
learn :arg0 i :arg1 ( music :mod ( classics :degree ( else :mod-of ( anywhere :mod - )  )  )  :mod about )  :arg2 3 :time ( i :arg0-of ( learn :arg1 amr-unknown :arg2 ( organization :name ( name :op1 radio )  )  )  )
commit :arg1 actual :op1-of ( and :op2 ( live :arg1 none )  :op3 music :op4 music )  :op2-of ( and :op1 it )
say :arg0 he :arg1 ( and :arg0-of ( commission :arg1 ( work :arg0 new :arg1 ( think :arg0 i :arg1 important :arg2 ( also :mod-of really )  )  )  )  :op1 ( commit :arg0 ' :arg1 ( find :arg0 3 :arg1 new )  :arg1-of ( radio :arg0 also )  :op1-of and )  :op2 music )
argue :arg0 ( person :arg0-of ( control :arg1 ( 3 :mod ( radio :name ( name :op1 bbc :op2 radio )  )  )  )  :name ( name :op1 alan :op2 davey )  )  :arg1 ( cause :arg0 ( educate :arg1 ( music :mod classics )  :degree less )  :arg1 ( engage :arg0 ( ethnic-group :name ( name :op1 briton )  :wiki britons_[celtic_people] )  :arg1 audience :arg1-of ( work :arg1-of hard )  )  )  :time ( early :op1 ( year :mod this :mod past )  )
and :arg1-of ( hear :arg0 ( fire :arg0 3 :arg0-of ( toe :arg1 ( rival :arg1 commerce )  )  :arg0-of ( tread :arg1 ( element :mod only )  )  :op1-of under )  :arg1-of ( select :arg0 media :arg2 committee :mod sport )  :polarity - )  :arg1-of ( culture :arg0 during )  :op1 ( come :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg1 output )
voice :arg0 collin :arg1 ( buy :arg0 ( person :arg0-of attack :arg0-of ( have-org-role :arg2 mp )  )  :arg1 ( show :arg0 ( political-party :name ( name :op1 tory )  :wiki conservative_party_[uk] )  :arg1 talent )  :arg1-of ( produce :arg0 ( media :arg0-of ( estimate :arg1 ( cost :arg1 of )  )  )  )  :op1-of ( company :name ( name :op1 bbc )  :wiki bbc )  :op1-of music )
cause :arg0 ( and :frequency often :op1 ( original :polarity - )  :op2 ( distinctive :mod particular :polarity - )  )  :arg1 ( discuss :arg1 ( program :mod that )  :arg1-of ( see :arg0 you :arg1-of ( possible :mode interrogative )  )  )
show :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg1 ( star :mod-of faith )  :mod 1 :op2-of ( and :op1 ( insist :arg0 ( country :name ( name :op1 lord )  )  :arg1 that )  :op3 boy :op4 ( person :arg1-of judge :name ( name :op1 george )  :wiki george_lucas )  :op5 ( produce :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg1 particular )  :op6 way )
add :arg0 he :arg1 next :arg1-of ( want :arg0 ( he :arg0-of ( entertain :arg1 series )  :arg0-of ( hit :arg1 ( stable :arg1 house )  :arg1-of ( find :arg0 we )  )  :arg0-of ( launch :arg1 time )  )  )
voice :arg0 ( he :arg0-of ( refuse :arg1 ( or :arg1-of spend :op1 ( fee :arg1-of ( pay :arg0 ( person :arg0-of ( entertain :arg1 money :arg2 format :mod other )  )  )  :mod licence )  )  )  :arg0-of ( order :arg1 more )  :arg0-of ( rule :arg1 series )  )  :arg1 future
and :arg0-of ( blame :arg1 ( possible :arg1 ( ever :time-of ( slow :degree most )  )  )  )  :location-of ( rate :arg2-of increase )  :op1 8 :op2 ( black :arg0 friday :arg1 internet )
see :arg0 ( month :unit-of ( temporal-quantity :part-of ( date-entity :year 2015 )  :quant 3 )  )  :arg1 7 :arg2 ( increase :arg1 ( monetary-quantity :unit cent )  )  :location online
see :arg1 ( month :mod last :unit-of ( temporal-quantity :arg0-of ( rise :arg1 ( grow :arg1-of ( low :degree most )  )  )  )  )  :time ( since :op1 ( begin :arg1 record :time ( date-entity :year 2000 )  )  )
bolster :arg0 ( use :arg1 ( shop :arg2 online :arg2-of ( mobile :arg1 ( temporal-quantity :quant 3 :unit year )  )  )  )
hold :arg0 back :arg1 ( person :arg0-of ( believe :arg1 friday :arg1-of possible :mod-of ( date-entity :month 11 )  )  :arg0-of spend :arg1-of expert :arg1-of ( black :arg0 ' )  )
and :op1 ( turn :arg0 many :arg1 ( boom :arg0 ( shop :arg0 ( temporal-quantity :unit decade )  :arg1 virtual )  :arg1 ( ghost :mod-of town )  )  )  :op2 ( country :arg0-of ( high :arg1 street )  :name ( name :op1 britain )  :wiki united_kingdom )
contrast :arg0 just :arg1 online :arg2 ( say :arg0 ( person :arg1-of expert )  :arg1 7 :arg2-of ( increase :arg0 ( figure :arg0-of ( show :arg1 sign :op1-of after :time ( date-entity :part ( temporal-quantity :quant 3 :unit month )  :year 2015 )  )  :mod new )  :arg1 ( monetary-quantity :unit cent )  :arg1-of ( level :arg0 now )  )  )
present :arg1 ( spend :arg1 8 :arg2-of total )  :time ( since :op1 ( begin :arg1 record :arg2 ( rise :arg0 5 :arg1 ( year :mod last )  :arg3 ( monetary-quantity :unit cent )  :mod just )  :time ( date-entity :year 2000 )  )  :time-of ( increase :arg1 grow :arg1-of ( low :degree most )  )  )
say :arg0 ( person :arg1-of expert :arg2-of ( show :arg0 ( figure :mod ( new :arg1-of level )  )  :arg1 ( increase :arg1 ( monetary-quantity :unit cent )  :arg2 online )  :arg3 just :op1-of after :time ( date-entity :part ( temporal-quantity :quant 3 :unit month )  :year 2015 )  )  )  :arg1 sign :arg2 7
tell :arg0 ( you :arg0-of ( go :arg1 andy :arg4 previous :direction back :op2-of ( and :age ( temporal-quantity :unit year )  :op1 ( grow :arg1 level )  )  :time ( date-entity :year 2000 )  )  :arg0-of ( look :arg1 it )  )  :arg1 of :arg2 ( name :op1 guardian )  :time ( time :mod ( over :op1 rationalise :time always )  )  :time index :time imrg :time mulcahy :time editor
explain :arg0 ( he :arg1-of ( bolster :arg0 ( start :arg0 ( shopper :arg0-of ( purchase :arg1 ( temporal-quantity :quant 3 :unit year )  )  )  :arg1 ( use :arg1 ( phone :arg1-of ( mobile :arg0 online )  )  )  )  )  )
mean :arg0 it :arg1 ( possible :arg0 such :arg1 ( shop :arg0 ( person :quant more )  )  :arg2 online :op1-of ( and :op2 ( do :arg0 person :arg1 sofa :arg1-of possible :arg2 ( context :arg1-of differ )  )  )  )
contrast :arg1 ( bit :degree-of now )  :arg2 ( possible :arg1 ( see :arg0 you :arg1 ( fall :arg0 that :arg1 ( grow :arg1 away )  )  )  )
cite :arg1 ( phenomenon :mod ( friday :arg1-of ( black :arg1-of ( slow :arg1-of ( import :arg0 ( behind :location-of reason )  :arg2 ( country :name ( name :op1 america )  :wiki united_states )  )  )  )  )  )
event :op1-of ( ahead :direction-of ( purchase :arg1 ( last :mod-of ( friday :arg2-of ( take :arg1 place )  :time ( date-entity :month 11 )  )  )  :arg1-of ( hold :arg0 shopper :arg1-of ( possible :arg1-of ( believe :arg0 ( person :arg1-of expert )  )  )  )  )  )
retailer :mod-of ( website :quant ( number :arg1-of ( crash :arg0 ( deal :arg1 5 :arg1-of ( snap :arg0 ( last :mod-of year )  :arg1-of ( flock :arg2 ( computer :poss ( shopper :quant ( number :arg1-of average )  )  )  )  )  )  )  )  )
bargain :arg1-of ( fight :arg0 ( shopper :arg1-of ( see :arg0 ( friday :arg0-of ( hold :arg1 ( shopper :arg1-of purchase )  :arg1-of ( possible :arg1-of ( believe :arg0 ( person :arg1-of expert )  )  )  )  :arg1-of black )  )  )  )
publish :arg1 ( retail :arg0 ( country :arg0-of ( spend :mod-of online )  :arg0-of ( find :arg1 1 :manner consortium :manner ( just :mod-of over )  :manner 5 )  :name ( name :op1 britain )  :wiki united_kingdom )  :arg1 every )  :arg1-of research
do :arg0 ( store :mod web )  :arg1 ( purchase :arg1 more )  :arg2 ( product :example ( and :op1 such :op2 tv :op3 ( machine :arg0-of wash )  )  :quant some )  :time now
quarter :arg0 online :arg1 ( person :arg0-of ( buy :arg1 ( clothes :op1-of ( and :op2 shoe )  )  :time ( time :arg1-of same )  )  :arg0-of ( use :arg1 ( chain :arg1 fashion :arg1-of high :mod street )  )  :quant more )
crash :arg0 ( family :arg1-of ( sanction :arg0 ( person :arg0-of bury :mod ( religious-group :name ( name :op1 muslim )  :wiki muslim )  )  )  :arg2-of ( kill :location ( city :name ( name :op1 mecca )  :wiki mecca )  )  )  :arg1 crane :location ( person :name ( name :op1 bin :op2 laden )  :wiki osama_bin_laden )
funeral :arg0-of ( take :arg1 ( place :mod-of ( person :arg0-of ( carry-out :arg1 dead :arg2 29 :instrument body :path street )  :mod ( religious-group :name ( name :op1 muslim )  :wiki muslim )  )  )  :location ( city :name ( name :op1 mecca )  :wiki mecca )  )
come :arg1 ( blame :arg0 ( country :name ( name :op1 saudi :op2 arabia )  :wiki saudi_arabia )  :arg1 ( organization :arg0-of ( construct :arg1 part :mod-of giant )  :name ( name :op1 saudi :op2 binladin :op3 group )  )  :arg2 collapse )
say :arg0 ( organization :name ( name :op1 health :op2 ministry )  )  :arg1 ( injure :arg1 ( total :arg2 person )  :mod also :time ( after :op1 ( crash :arg1 crane )  )  )
carry :arg0 street :arg1 ( of :arg1 ( gather :arg1 ( kill :arg0 crane :arg1 ( collapse :arg0 mosque :arg1 ( city :name ( name :op1 mecca )  :wiki mecca )  )  :arg1-of ( bury :arg0 29 )  :mod victim )  )  )
dead :arg0-of ( journey :arg1 ( cemetery :mod ( country :name ( name :op1 al-moaissem )  )  )  :mod final )  :topic-of ( respect :arg1-of ( pay :arg0 ( mourner :arg0-of ( dress :arg2 large )  )  :purpose-of ( pack :arg1 route :arg2 white )  )  )
worshiper :arg1-of ( topple :arg0 ( site :arg0-of ( pass :arg1 ( possess :arg0-of sad )  )  :mod holy )  :op2-of ( and :op1 ( crash :arg0 ( crane :instrument-of construct )  :arg1 ( temporal-quantity :unit ( day :mod just )  )  :path ( ceiling :poss mosque )  :time early )  )  )  :op1-of onto
funeral :purpose-of ( release :arg1 body :condition ( sanction :arg0 ( king :arg2-of ( have-org-role :arg1 ( country :name ( name :op1 saudi :op2 arabia )  :wiki saudi_arabia )  )  )  :arg1 ( group :arg0-of ( construct :arg1 family )  :consist-of ( person :arg0-of ( leave :arg1 disaster :mod also )  :arg1-of injure :name ( name :op1 bin :op2 laden )  :wiki osama_bin_laden )  )  )  )
crash :arg0 crane :arg1 ( collapse :arg1 ( city :name ( name :op1 mecca )  :wiki mecca )  :purpose ( carry-out :arg0 grand :arg1 street :arg1-of ( kill :arg0 worshiper :mod ( body :mod-of 29 :mod-of of )  )  :mod mosque )  )
manchest :mod ( great :arg2-of ( crash :arg0 ( person :arg0-of ( have-rel-role :arg1 ( person :name ( name :op1 bolton )  :wiki john_r._bolton )  :arg2 father )  :domain-of ( thing :name ( name :op1 - :op2 of :op3 - :op4 four :op5 qasim :op6 akram )  )  )  :arg1 crane :op1-of dead :time-of pilgrimage )  )
hajj :mod-of ( pilgrimage :arg1-of ( start :arg2 ( thing :name ( name :op1 ( grand :accompanier ( person :arg0-of ( have-rel-role :arg2 parent )  :op1-of ( thing :name ( name :op1 mr :op2 akram )  )  )  )  :op2 mosque )  )  :compared-to-of ahead )  )
vow :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 saudi :op2 arabia )  :wiki saudi_arabia )  :arg2 official )  :accompanier-of ( go :arg0 hajj :arg4 ( continue :arg0 ( city :name ( name :op1 mecca )  :wiki mecca )  :arg1 ( descend :arg0 thousand :arg1 city )  )  :direction ahead )  )  :time already
say :arg0 salman :arg1 ( recommend :arg0 binladin :arg1 ( group :arg0-of ( use :arg1 it :arg2 ( arm :part-of when :part-of crane :part-of ' )  :polarity - )  )  :arg2 left :arg3 - :time ( today :arg0-of ( have-org-role :arg2 king )  )  )
say :arg0 ( version :arg1-of ( carry-out :arg0 ( thing :name ( name :op1 press :op2 ( agency :mod ( country :arg1-of ( run :arg0 state )  :name ( name :op1 saudi :op2 arabia )  :wiki saudi_arabia )  )  )  )  :arg2 part )  :mod ( language :name ( name :op1 arabic )  :wiki arabic_language )  :mod decree )  :arg1 ( group :arg0-of ( blame :arg2 collapse )  )
contrast :arg1 ( report :arg1 ( detail :arg1 that )  :arg1-of ( do :arg0 ( language :mod ( agency :mod news )  :mod-of service :name ( name :op1 english )  :wiki english_language )  :polarity - )  )  :arg2 ( say :arg0 ( person :arg0-of lead :arg0-of ( travel :arg1 abroad :arg1-of ( ban :arg0 company )  )  )  :arg1 of )
vow :arg0 ( person :name ( name :op1 salman )  )  :arg1 ( reveal :arg1 ( cause :arg1 ( topple :arg0 crane :arg2 ( courtyard :poss ( thing :arg1-of ( converge :arg0 ( hundred :mod ( thousand :consist-of ( person :mod ( religious-group :name ( name :op1 muslim )  :wiki muslim )  )  )  )  :direction ( ahead :op1 ( pilgrimage :mod hajj )  )  )  :name ( name :op1 grand :op2 mosque )  )  )  )  )  :arg0 person )  :time ( early :op1 ( week :mod this )  )  :time ( late :time-of ( month :mod this :unit-of temporal-quantity )  )
state :arg1 ( thing :arg1-of ( release :arg0 ( organization :name ( name :op1 binladin :op2 group )  )  :op1-of ( and :op2 ( person :arg0-of ( represent :arg1 ( crane :arg1-of ( collapse :arg0 - )  )  )  :arg1-of ( available :purpose comment )  )  )  :polarity - )  :mod any )
blame :arg0 ( decree :mod royal )  :arg1 ( group :mod also )  :manner ( use :arg1 ( measure :arg1 ( safe :arg1 date )  )  :op1-of ( and :op2 ( fail :arg2 ( coordinate :arg0 - :arg1 ( person :arg0-of ( have-org-role :arg1 meteorological :arg2 official )  )  )  )  )  )
mosque :mod ( grand :arg0-of ( construct :arg1 ( group :mod binladin )  :arg1-of ( head :arg0 ( city :name ( name :op1 mecca )  :wiki mecca )  )  :arg1-of ( surround :arg0 ( crane :mod ( of :mod dozen )  )  )  :mod-of ( effort :mod massive :mod part )  :op1-of by )  :mod ' )
and :arg1-of ( build :arg0 ( country :arg0-of ( rule :arg1 family :arg2 ( close :poss family )  )  :name ( name :op1 saudi :op2 arabia )  :wiki saudi_arabia )  )  :op1 ( run :arg1 ( temporal-quantity :unit decade )  :arg1-of major )  :op2 project
disown :arg0 ( person :arg0-of ( have-rel-role :arg1 ( person :arg2-of ( lead :arg0 ( person :mod late )  :arg1 ( criminal-organization :name ( name :op1 al :op2 qaeda )  :wiki al-qaeda )  )  :name ( name :op1 osama :op2 bin :op3 laden )  :wiki osama_bin_laden )  :arg2 son )  :mod renegade )  :arg1 1990 :arg2 family
possible :arg1 ( body :mod-of ( religious-group :name ( name :op1 muslim )  :poss-of life :wiki muslim )  )  :op2-of ( before :op1 ( arrive :arg0 ( crash :arg1-of ( come :op1-of ( and :op2 ( wind :arg1-of high )  :op3 ( rain :arg1 every )  )  )  )  :arg1 million :arg2 ( pilgrimage :arg0-of ( require :arg1 once )  )  :location kingdom )  :quant ( temporal-quantity :unit ( day :mod just )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg2 official )  )  :arg1 ( remain :arg1 person :arg3 hospital )
order :arg0 ( person :arg0-of ( have-org-role :arg2 official )  :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( pay :arg1 gbp )  :arg1-of ( kill :arg0 of :mod that :op1-of ( and :op2 ( same :arg2 ( amount :arg2-of ( injure :arg0 riyal :arg1 permanent :mod that )  )  )  )  )  )  :arg2 relative )  )  :arg1 million :arg2 1
receive :arg0 other :arg1 ( amount :mod that )  :time ( injure :arg1 half )
say :arg0 ( location :name ( name :op1 b )  :wiki - )  :arg1 ( work :arg0 ( world-region :name ( name :op1 eastern :op2 europe )  :wiki eastern_europe )  :arg1 tradesman :arg1-of trend :arg1-of cheap :location behind )  :arg1-of ( have-org-role :arg0 q :arg2 boss )
say :arg0 ( person :name ( name :op1 veronique :op2 laury )  )  :arg1 ( handyman :arg1-of ( employ :arg0 ( ethnic-group :name ( name :op1 briton )  :wiki britons_[celtic_people] )  :arg1-of increase )  )
number :arg0 ( world-region :name ( name :op1 eastern :op2 europe )  :wiki eastern_europe )  :arg0-of ( rise :op1-of behind )  :arg1 ( tradesman :mod skill )
result :arg1 ( aim :arg1 ( store :mod more :poss ( organization :name ( name :op1 screwfix )  )  )  :arg1-of ( open :arg0 200 )  :arg2 tradesman )
outlet :mod-of across :poss ( country :arg0-of ( close :arg1 ( same :arg1 time )  :location ( 60 :mod-of ( location :name ( name :op1 b )  :wiki - )  )  )  )
have-org-role :arg0 ( person :name ( name :op1 rupert :op2 steiner )  )  :arg1 ( country :name ( name :op1 chief :op2 city )  )  :arg2 correspondent :purpose ( newspaper :name ( name :op1 daily :op2 mail )  :wiki daily_mail )
say :arg1 ( put :arg0 ( ethnic-group :name ( name :op1 briton )  :wiki britons_[celtic_people] )  :arg1 ( hammer :arg1 skill :op1-of ( and :op2 paintbrush )  )  :arg2 ( favor :arg1 ( employ :arg0 ( world-region :name ( name :op1 eastern :op2 europe )  :wiki eastern_europe )  :arg1 tradesman :arg2 ( carry-out :arg1 ( work :location home )  )  )  )  )
seem :arg1 ( temporal-quantity :unit ( day :mod ( this :quant-of you )  )  )  :arg1-of ( paint :arg0 minority :mod-of wall )  :arg2 ( you :domain-of handy :poss-of ( whizz :op2-of ( or :op1 hammer )  )  )
say :arg0 home :arg1 ( carry :arg0 handyman :arg0-of ( have-org-role :arg1 company :arg2 boss )  :arg1 job :arg1-of employ :arg1-of ( cause :arg0 ( behind :op1 ( location :name ( name :op1 b )  :wiki - )  )  )  :arg1-of ( increase :arg0 ( ethnic-group :name ( name :op1 briton )  :wiki britons_[celtic_people] )  )  )
say :arg0 ( person :arg0-of ( offer :arg1 ( world-region :location-of service :name ( name :op1 eastern :op2 europe )  :wiki eastern_europe )  :arg1-of ( have-org-role :arg2 chief :arg3 ( executive :mod new :poss ( organization :arg0-of ( own :arg1 ( chain :arg0-of ( improve :arg1 home )  )  )  :name ( name :op1 kingfisher )  )  )  )  :arg2 ( trend :op1-of behind )  :arg3 ( price :arg1 ( bottom :op1-of rock )  :purpose-of ( rise :arg1 ( number :quant-of ( tradesman :mod skill )  )  :mod big )  )  )  :name ( name :op1 veronique :op2 laury )  )
result :arg1 more :arg1-of ( plan :arg0-of ( close :arg1 tradesman :arg2 ( location :name ( name :op1 b )  :wiki - )  :manner 60 :medium outlet )  :arg0-of ( aim :arg1 store )  :arg0-of ( open :arg1 200 )  )
say :arg0 ( she :arg0-of ( decide :op1-of store :time ( purchase :arg0 ( of :quant ( 8 :mod-of out )  )  :arg1 ( fair :mod-of sex )  :mod ten )  )  :arg0-of ( want :arg0-of ( employ :arg1 ( location :name ( name :op1 b )  :wiki - )  )  :arg0-of ( cause :arg1 ( shop :mod q )  )  :arg1 woman :arg2 ( person :mod mr :name ( name :op1 mrs )  )  :degree more )  )
person :arg2-of staff :quant ( majority :quant-of ( current :domain-of man )  )
say :arg0 she :arg1 ( need :arg0 past :arg1 ( address :arg1 ( trend :arg1-of ( see :arg0 ( household :arg0-of ( do :arg1 ( improve :arg1 home :mod more )  )  :arg1-of single :mod female :mod more )  )  :arg1-of grow :mod demography )  )  )
say :arg0 we :arg1 ( work :arg0 we :arg2 store :location majority :mod man :mod still )
need :arg0 we :arg1 ( move :arg2 balance :arg1 we )  :arg2 more
take :arg0 woman :arg1 ( purchase :arg0 ( we :poss-of ( customer :poss-of ( half :domain-of female :mod fundamentally )  )  )  :arg1 item )  :arg1-of ( decide :arg0 ( monetary-quantity :unit cent )  )  :arg2 80
play :arg0 ( woman :arg0-of ( process :arg1 ( make :arg1 decide )  )  )  :arg1 big
equal :arg0 ( team :mod top )  :arg1 ( number :arg1-of ( reflect :arg0 ( she :arg0-of ( restructure :arg1 ( lead :arg0 ( country :mod-of 100 :name ( name :op1 britain )  :wiki united_kingdom )  :arg1 firm :arg2 index )  :mod also )  )  )  :quant-of ( and :op1 ( woman :mod ( only :mod-of ( of :quant 1 )  :mod-of 5 :mod-of helm )  )  :op2 man :op3 woman :op4 ( person :arg0-of ( direct :arg1 mr )  )  )  )
and :op1 ( woman :arg0-of ( staff :arg1 team :arg2 ( monetary-quantity :unit cent )  )  )  :op2 ( executive :arg3-of ( have-org-role :arg0 ( 50 :op1-of exact )  :arg1 ( organization :name ( name :op1 kingfisher )  )  :arg2 chief )  )  :op3 ( director :arg2-of ( have-org-role :arg1 finance :op1-of alone :op1-of almost )  )
say :arg0 ( person :arg0-of ( decide :arg1 diversity :domain-of ( topic :location here :mod important :mod an )  :op1-of conscious )  :name ( name :op1 mrs )  )  :arg1 mr :arg2-of ( mean :arg1 this )
difficult :domain ( find :arg1 ( woman :arg1-of ( put :arg0 - :arg2 ( board :poss we )  )  :mod good )  )  :domain it
post :arg0 ( organization :name ( name :op1 kingfisher )  )  :arg1 ( fall :arg1 both :location ( and :op1 ( profit :duration ( temporal-quantity :quant half :unit year )  )  )  )  :time ( after :op1 ( shoulder :arg0 group :arg1 ( cost :arg2 ( shut-down :arg1 store )  )  )  )
result :arg1 ( and :op1 ( location :name ( name :op1 b )  :wiki - )  :op2 ( open :arg0 ( store :mod new )  :arg1 200 )  )  :arg1-of ( trend :arg1-of own )
person :arg0-of ( have-org-role :arg1 ( breach :arg0 ( person :name ( name :op1 aich-dob )  )  :arg1 trust )  :arg2 official )  :location court
and :op1 ( person :arg0-of ( attend :arg1 ( court :mod region )  )  :arg0-of ( answer :arg1 ( charge :arg1 ( team :mod champion )  :arg2 ( breach :arg1 evasion )  )  :purpose-of wednesday )  :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 austria )  :wiki austria )  :arg2 official )  :quant 2 )  :op2 ( trust :arg1 volleyball :mod runn )  :op3 tax
plead :arg0 defendant :arg1 ( guilty :polarity - )
charge :arg2 ( abuse :arg0 1 :arg1 position )  :mod also :mod also
acquit :arg0 he :arg1 ( charge :mod this )  :time ( date-entity :month 5 )
adjourn :arg1 ( case :time current )
say :arg0 ( person :arg0-of ( emerge :arg1 ( investigate :arg0 ( date-entity :year 2006 )  :arg1 ( use :arg0 ( they :arg0-of ( account :arg1 ( access :arg1 role )  )  )  :arg1 club :arg1-of ( 2011 :year-of date-entity )  :arg2 ( purpose :arg1-of private )  :mod defendant )  :arg2 ( temporal-quantity :unit year )  :mod preliminary )  )  :arg1-of ( prosecute :arg1-of public )  :name ( name :op1 robert )  :wiki - )  :arg1 senior
estimate :arg1 loss :time around
accuse :arg1 ( person :arg0-of ( have-org-role :arg1 sport :arg2 official )  )  :arg2 ( offence :mod finance )  :mod also
order :arg0 ( person :name ( name :op1 michaela :op2 sanin )  )  :arg1 ( proceeding :arg1 judge :purpose ( lay :arg1 ( government-organization :name ( name :op1 senate )  :poss-of chairwoman :wiki united_states_senate )  :arg1-of judge )  )  :arg2 ( fact :arg1-of postpone :mod this )
try :arg1 it :time ( date :mod late )
argue :arg0 ( defend :arg2 ( breach :arg1 trust :arg1-of charge )  )  :arg1 ( suffer :arg0 club :arg1 ( disadvantage :arg1 pecuniary :mod any )  :time ( time :mod any )  )
and :arg1-of ( invest :arg0 around :time ( time :quant much )  )  :op1 ( and :op1 ( offset :arg0 ( person :arg0-of ( bring :arg1 ( club :arg1-of ( work :arg0 they )  :mod sport )  :op1-of ( date-entity :year 2001 )  )  :arg0-of ( have-org-role :arg1 sport :arg2 official )  :arg1-of ( expend :arg0 ( date-entity :year 2011 )  )  :op1-of and )  :arg1 ( allowance :mod only )  )  :op2 ( liabiliti :arg0-of ( amount :arg1 around :arg2 schilling :op1-of ( date-entity :year 1982 )  )  :mod debt )  )  :op2 money
say :arg0 ( we :arg0-of ( face :arg1 situation :arg2 of :op1-of ( or :arg1-of ( continue :arg0 ( we :arg0-of ( make :arg1 ( large :mod-of company )  :arg2 ( he :arg0-of ( tax :arg1 authority )  :arg0-of ( live :arg2 auditor )  )  :manner amr-unknown )  )  :arg1-of ( recommend :arg0 wheth )  )  :op2 club :op3 close :op4 it )  :time ( time :mod that :mod at )  )  )  :arg1 defendent :arg2 1 :time down
and :op1 colleague :op2 ( defendant :time-of ( undertake :arg0 he :arg1 ( task :mod this )  :arg1-of ( resolve :time then :arg0 he )  )  )
all :arg1-of risk
say :arg0 ( he :arg0-of ( examine :arg1 ( policy :arg1-of ( insure :op1-of life :op3-of ( and :op1 ( money :arg1-of ( advanced :arg0 we )  )  :op2 ( deposit :arg1 we :arg2 bank )  :op4 security )  )  )  )  )  :arg1 during
contrast :arg1 ( permit :arg1 ( run :arg0 ( money :arg1-of ( manage :arg0 they :arg2 - :purpose-of ( hand :arg1-of free )  )  )  :arg1 ( debt :mod any )  )  )  :arg2 ( agree :arg0 club :arg1 it )
agree :arg1 ( payment :arg2-of ( succeed :arg1 ( date-entity :year 1991 )  :arg1-of ( appropriate :arg0 back )  :mod finance )  :mod retrospective :poss ( allowance :arg0-of ( expend :arg1 furthermore )  )  )
pay :arg1 ( temporal-quantity :arg0-of ( say :arg1 year :time ( go :arg0 account :arg4 ( credit :arg1 late )  )  )  :unit year )  :arg2-of ( result :arg1 ( date-entity :year 2003 )  :arg2-of expend :op1-of allowance )
and :arg1-of ( general :arg0 why )  :poss-of ( debit :poss ( detail :arg1 ( appear :arg1 entry :arg1-of ( process :arg1-of ( explain :arg0 former :arg1-of ( have-org-role :arg2 chairman )  )  )  )  :polarity - )  :poss this )
say :arg0 defendant :arg1 ( manage :arg0 ( defendant :quant 2 )  :arg1 account :manner together :op1-of ( and :op2 passbook )  )
ask :arg0 judge :arg1 ( disclose :arg1 ( payment :arg1-of detail )  :arg2 club :polarity - )
recommend :arg1 ( free :arg1 ( arrange :arg1-of ( detail :arg2 answer :arg2-of ( interest :arg1 club :polarity - )  )  :domain-of ( important :mod only )  :mod finance )  :arg2 debt )
investigate :arg0 account :arg0-of position :arg0-of abuse :arg1-of ( begin :arg0 ( person :arg0-of ( have-org-role :arg2 officer )  :arg0-of ( transfer :arg1 club :arg2 sum :time ( date-entity :year 2011 )  )  )  )
explain :arg0 defendant :arg1 ( reserve :domain that )
state :arg0 ( club :location-of ( know :arg0 club :arg1 ( exist :arg1 ( 2 :quant-of defendant )  )  :arg2 name :polarity - )  )  :arg1-of ( say :op2-of ( and :op1 ( run :arg1 ( account :mod securiti :mod this )  )  )  )
know :arg0 ( want :arg1 judge :mode interrogative )
answer :arg1 this :polarity ( - :arg0-of ( long :arg1 time )  )
say :arg0 he :arg1 ( think :arg1 ( good :beneficiary club :degree most )  )  :time final :time then
something :arg1-of ( have :arg0 ( nobody :arg0-of ( know :arg1 anything :arg1-of ( put :arg0 ( organization :name ( name :op1 state :op2 prosecutor )  )  :arg2 room :location ( money :mod this )  )  )  )  :time then )
know :arg0 ( defendant :arg1-of ( justify :arg0 ( person :arg0-of ( have-org-role :arg2 official )  )  )  )
give :arg1 ( compensate :arg1 damage )  :arg2 ( purpose :mod transfer )
and :arg0-of ( want :arg1 ( know :arg0 state )  :arg1-of prosecute )  :op1 ( damage :arg1 interrogative :arg1-of ( compensate :arg0 why )  )  :op2 judge
say :arg0 defendant :arg1 ( disagree :arg0 he :arg1 ( word :mod this )  :arg1-of ( cause :arg0 ( occur :arg1 ( damage :polarity - )  :arg2 club :time ever )  )  )  :arg2-of respond
contrast :arg1 ( possible :arg1 ( i :arg0-of ( say :arg1 lawyer )  :arg0-of ( let :arg1 all :arg2 off :condition interrogative :mod this )  :arg0-of hook-up )  )  :arg2 amr-unknown
ask :arg0 he :arg1 ( represent :arg0 ( i :arg1-of be )  :arg1 interrogative :arg1-of legal )
charge :arg1 ( carry :arg0 ( person :arg0-of ( have-org-role :arg2 official )  :accompanier-of ( receive :arg0 he :arg1 ( monetary-quantity :unit cent )  :location salary )  )  :arg1 ( diem :mod-of allowance )  )  :arg2 mileage :mod only :op1-of and
add :arg0 ( he :poss-of club )  :arg1 much :arg2 ( high :arg1 ( temporal-quantity :unit month )  )  :purpose ( expend :arg0 aside :arg1 ( allowance :mod diem )  :arg2 fact )
possible :arg1 ( provide :arg0 defendant :arg1 ( documentation :mod accurate )  :arg2 ( temporal-quantity :unit ( year :mod early )  )  )  :polarity -
explain :arg0 they :arg1 ( keep :arg1 this :time ( since :op1 ( audit :arg1 ( assess :arg0 - :arg1 everything :manner proper )  )  )  )
defendant :arg0-of ( obtain :arg1 ( allowance :mod mileage )  :mod also )
explain :arg1 ( bank :destination-of ( drive :arg0 he :arg1 cash :arg2 ( home :location ( country :name ( name :op1 völkermarkt )  )  )  )  :location ( country :name ( name :op1 bleiburg )  )  )  :medium ( state :time-of ( adjust :mod all )  )
continue :arg0 trial :arg1 ( question :arg1 ( person :arg0-of witness )  )  :arg2 9 :time 23
cut :arg0 ( organization :name ( name :op1 hewlett :op2 packard )  )  :arg1 ( job :mod further )
take :arg0 ( person :arg1-of ( lay :arg0 ( giant :mod computer )  )  :arg2-of ( staff :arg1 ( split :arg0 company :arg1 ( 3 :quant-of ( temporal-quantity :op1-of past :unit year )  )  )  )  :quant ( more :mod even )  )  :arg1 ( cut :arg1 job :beneficiary-of addition )  :manner place
seem :arg0 - :arg1 ( end :arg0 ( book :name ( name :op1 hp )  :wiki harry_potter )  :arg1 ( cut :arg1 job :location ( organization :mod giant :mod ( country :mod-of computer :name ( name :op1 us )  :wiki united_states )  :name ( name :op1 hewlett-packard )  )  )  )
plan :arg0 ( group :mod technology :mod ( country :name ( name :op1 us )  :wiki united_states )  )  :arg1 ( lay :arg1 ( customer :poss-of ( section :arg1-of ( staff :arg2 person )  :location corporation )  )  :arg0 group )  :arg1-of restructure :op1-of and
recommend :arg0 2.4 :arg1 ( lead :arg0 this :arg1 around :arg2 ( cost :arg1 savings :arg2 tuesday )  )  :purpose ( disclose :arg1 company )
lead :arg0 step :arg1 around :arg2 ( charge :arg1-of ( quarter :arg1-of incur :mod fourth )  :mod ( off :quant 1 )  )
complete :arg1 ( reduce :arg0 ( 3 :quant-of ( temporal-quantity :unit year )  )  :arg1 ( job :arg1-of ( take :arg0 place )  )  )  :polarity - :time yet
slash :op1 ( date-entity :arg1-of ( end :arg2 ( business :arg1-of ( employ :arg0 ( book :mod year :name ( name :op1 hp )  :wiki harry_potter )  :location ( around :op1 ( person :arg2-of staff )  )  :mod still )  )  )  :year 2013 )  :op2 14
fall :arg1 ( share :mod ( organization :name ( name :op1 hewlett-packard )  )  )  :arg2 percentage-entity :time ( end :arg1 trade )
and :op1 ( and :arg2-of ( combine :arg0 ( other :mod-of service )  :arg1 ( side :mod ( country :name ( name :op1 palo :op2 alto )  )  )  :location ( company :mod new )  )  :op1 ( grow :arg0 ( group :arg0-of ( split :arg1 business :time current )  :arg2-of base )  :arg1 ( state :name ( name :op1 california )  :wiki california )  :time initial )  :op2 computer :op3 printer )  :op2 ( area :arg2-of ( separate :arg0 business :arg1 printer )  :arg2-of ( promise :arg1 ( year :mod this )  )  )  :op3 ( server :mod computer )  :op4 ( storage :mod data )
list :arg1 ( operation :mod both )  :arg1-of ( exchange :mod stock )
demand :arg0 slow :arg1 ( customer :mod business )  :arg2-of ( disappoint :arg0 ( political-party :arg0-of ( manufacture :arg1 ( large :degree most )  :arg2 after )  :arg2-of ( afflict :arg0 ( recent :mod service )  :arg1 world )  :name ( name :op1 pc )  :wiki political_correctness )  :arg1 repeatedly )
and :arg0-of ( fall :arg1 ( end :arg1 7 )  :arg2 ( percentage-entity :value 11.5 )  :time ( quarter :mod fiscal )  )  :op1 pc :op2 printer
drop :arg0 revenue :arg1 ( just :mod-of under )  :arg2 ( percentage-entity :value 8 )
mean :arg0 ( 16 :quant-of quarter )  :arg1 this :arg2 ( drop :arg0 profit :time 15 )
respond :arg0 ( book :name ( name :op1 hp )  :wiki harry_potter )  :arg1 ( change :arg1 industry :arg2 ( and :op1 split :op2 ( layoff :mod massive )  )  )
and :op1 ( person :op1-of ( and :op2 tablet :op3 ( carry :arg1 business :manner equal :op2-of ( and :arg2-of ( react :arg0 ( business :arg1-of ( head :arg0 ( thing :name ( name :op1 meg :op2 whitman )  )  )  :mod old )  :arg1 rise :manner slow )  :op1 ( buy :arg0 customer :arg1 smartphon :arg1-of ( instead-of :arg2 ( computer :mod conventional )  )  )  )  )  )  :quant 76 :quant-of ( temporal-quantity :unit year )  )  :op2 ( more :degree-of online )  :op3 more
include :arg1 loss :arg2 ( person :arg1-of ( plan :arg0-of ( restructure :arg1 job )  )  :name ( name :op1 whitman )  )  :op1-of around
conflict :arg1 ( oppose :arg0 ( mission :mod ( organization :name ( name :op1 isis )  )  :mod ( support :arg1 majority :arg3 train )  )  )
express :arg0 ( person :quant ( majority :arg0-of ( oppose :arg1 ( involve :arg1 ( soldier :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg1-of direct )  :manner ( operation :location ( country :name ( name :op1 iraq )  :wiki iraq )  :mod combat )  )  )  )  :arg1 ( percentage-entity :value 54 )  :manner ( favor :arg0 ( percentage-entity :value 35 )  )
and :arg0-of ( attack :arg1 isi :arg1-of ( carry :arg0 ( country :arg1-of ( react :arg0 ( percentage-entity :mod 1 :mod sixty )  :degree positive )  :mod other )  )  :medium air )  :op1 ( country :name ( name :op1 iraq )  :wiki iraq )  :op2 ( country :name ( name :op1 syria )  :wiki syria )
intervene :arg0 ( percentage-entity :value 4 :value twenty )  :arg1 conflict
contrast :arg1 ( cooperate :arg1 ( percentage-entity :mod 1 :mod fifty )  :arg2 ( thing :arg1-of ( rule :arg0 ( person :arg1-of ( favor :arg0 ( percentage-entity :value 20 )  )  )  )  :mod ( country :arg0-of survey :name ( name :op1 syria )  :wiki syria )  :name ( name :op1 bashar :op2 al-assad )  )  )
twenty :arg0-of ( decide :arg1 9 :op1-of percentage-entity :polarity - )
day :arg1-of ( second :mod car )  :location ( organization :name ( name :op1 iaa )  )  :time-of press
mobility :mod ( electronics :domain ( 9 :arg1-of interlink :domain-of ( car :arg1-of ( drive :arg0 self )  )  :quant ( 27 :op1-of ( until :time-of ( centre-left :arg1-of exhibit )  )  )  )  )
connect :arg1 ( person :arg0-of ( will :time ( after :op1 ( 2 :quant-of ( temporal-quantity :unit day )  )  )  )  :arg0-of ( open :arg1 press :op1-of official )  :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 after )  )  :arg2 chancellor )  :name ( name :op1 angela :op2 merkel )  :wiki angela_merkel )  :arg2 thursday :time mobility :time motto
possible :arg1 ( visit :arg0 ( public :mod general )  :arg1 saturday )
estimate :arg0 ( organiser :source ( organization :name ( name :op1 association :op2 vda )  )  )  :arg1 ( attend :arg0 ( person :arg0-of visit :arg1-of ( resemble :arg2 ( 2 :quant-of ( temporal-quantity :unit year )  )  )  :quant approximately )  :arg1 automobile )
outbreak :purpose ( border :arg1 violence :arg2 ( thing :name ( name :op1 serbian-hungarian )  )  )
and :op1 ( tear :arg0 ( police :arg0-of use :quant ( thing :name ( name :op1 hungarian )  )  )  :arg1 ( cannon :mod water )  :location ( border :arg1 ( refugee :mod angry :quant several )  :arg1-of ( near :arg0 gas :arg2 ( country :name ( name :op1 röszke )  )  )  :arg2 ( country :name ( name :op1 serbia )  :wiki serbia )  )  )
witness :arg0 ( person :arg0-of ( have-org-role :arg1 ( euronew :mod violence )  :arg2 correspondent :arg3 ( control :arg1 border :mod-of point )  )  :name ( name :op1 dániel :op2 bozsik )  )  :arg1 outbreak
report :arg0 he :arg1 telephone
break-up :arg0 ( group :location refugee )  :arg1 border
stand :arg0 ( cannon :mod water )  :arg1 ( police :op1-of ( behind :op3-of ( and :arg0-of ( form :arg1 line )  :op1 police :op2 behind :op4 ready )  )  )
and :op1 ( person :arg0-of ( have-org-role :arg2 officer )  :arg1-of ( stick :arg0 40 :op1-of ( and :arg2-of ( throw :arg1 stone :arg1-of ( start :arg0 ( refugee :op2-of ( between :op1 50 )  )  )  )  :op2 ( volume-quantity :mod plastic :unit bottle )  )  )  )
use :arg0 ( person :arg0-of ( have-org-role :arg2 officer )  )  :arg1 ( spray :arg1 ( spray :arg1 pepper )  :arg1-of continue )
use :arg0 police :arg1 ( gas :arg1-of tear )  :time then
spray :arg1 ( gas :arg1-of tear :quant lot )  :arg2 ( direction :poss refugee )
cause :arg0 this :arg1 ( break-up :arg0 group )
withdraw :arg1 group :manner reluctant :time now
obvious :arg1 ( injure :op2-of ( and :op1 pregnant :op3 ( woman :arg1-of ( carry-out :direction away )  )  :op4 area )  )
scream :arg1 ( child :arg0-of ( inhale :arg1 ( gas :arg1-of tear )  )  )
and :op1 ( suffer :arg0 ( refugee :arg0-of ( slump :direction down :mod together )  :mod other )  :arg1 ( distress :mod respiratory )  )
and :op1 ( spray :arg1 pepper )  :topic-of ( use :arg0 ( person :arg0-of ( sustain :arg1 injure :mod also )  :arg0-of ( have-org-role :arg1 ( police :mod ( country :name ( name :op1 serbia )  :wiki serbia )  )  :arg2 ( spokesman :mod press )  )  )  :arg1 ( gas :arg1-of tear )  )
interest :arg1 ( government-organization :location-of time :mod ( country :name ( name :op1 us )  :wiki united_states )  :name ( name :op1 federal :op2 reserve )  :wiki federal_reserve_system )  :mod-of rate
interest :mod-of ( rate :arg1-of ( raise :arg0 ( temporal-quantity :op1-of nearly :quant 2 :unit day )  :manner time :op2-of ( or :arg2-of ( meet :arg0 ( government-organization :mod ( country :name ( name :op1 us )  :wiki united_states )  :name ( name :op1 federal :op2 reserve )  :poss-of wednesday :wiki federal_reserve_system )  :arg1 ( and :op1 thursday )  :arg1-of ( watch :arg0 world )  )  :op1 ( take :arg1 ( decide :arg1 ( temporal-quantity :unit decade )  :mod crucial )  :polarity - )  )  )  )
think :arg1 ( fire :arg1-of ( hold :arg1-of ( long :arg0 little :degree bit )  :op1-of ( and :op2 ( keep :arg0 only :arg1 rate :arg2 ( range :arg1 percentage-entity :arg2 current )  :manner-of ( find :arg0 ( survey :arg1 ( economy :arg1-of ( poll :arg0 ( organization :name ( name :op1 reuters )  )  )  )  )  :arg1 half )  )  )  )  )  :condition-of ( go :arg0 ( government-organization :arg1-of have-org-role :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg1 80 :arg1-of ( think :arg0 ( week :mod last )  )  )  :time now
cause :arg0 ( history :arg4-of ( cut :arg0 ( government-organization :arg1-of ( have-org-role :arg0 ( since :quant-of ( temporal-quantity :quant 7 :unit year )  )  )  :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg1 rate :arg2 zero )  :poss it )  :arg1 event
say :arg0 ( person :name ( name :op1 for )  )  :arg1 ( and :arg1-of ( start :arg0 ( we :arg0-of ( major :arg1 situation )  :arg0-of ( get :arg1 bank :arg1-of possible :arg1-of possible )  :arg0-of ( approach :time time )  )  )  :op1 ( process :arg1 ( fellow :mod senior )  :arg1-of ( interest :arg0 central :arg2 rate )  :arg1-of normalize :arg1-of ( bar :arg0 zero )  )  :op2 ( organization :name ( name :op1 for )  )  )
balance :arg0 ( trillion :arg1-of ( add :arg2 sheet :op1-of ( and :arg1-of ( perform :arg0 ( economy :mod ( country :name ( name :op1 us )  :wiki united_states )  )  )  :op2 ( generate :arg0 ( recover :arg1 relative )  :arg1 ( inflation :mod little )  )  :prep-to-of ( monetary-quantity :unit dollar )  )  )  )
possible :arg1 ( ignore :arg0 ( government-organization :arg1-of have-org-role :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg1 ( outlook :mod globe :mod ( rosy :degree less )  )  )  :polarity -
contrast :arg1 ( warn :arg0 it :arg1 ( market :arg0-of ( ready :arg2 hike )  )  )  :arg2 ( believe :arg0 they :arg1 odds :mod also :topic ( indicate :arg1 ( move :mod such )  )  )
announce :arg1 ( decide :arg1 thursday )  :arg4 cet
person :arg0-of ( shoot :arg1 ( organization :arg0-of ( apologize :mod-of ( note :mod left )  )  :name ( name :op1 delta :op2 state :op3 university )  )  )
say :arg0 ( he :arg0-of ( wish :arg1 murder :op1-of ( and :arg1-of possible :op2 he :op3 ( take :arg0 ( authority :arg0-of ( reveal :arg1 tuesday )  )  :arg1 it :arg3 back )  )  )  :arg1-of sorry )  :arg1 ( and :op1 ( kill :arg0 ( he :arg0-of ( lamb :arg1 day :arg1-of ( write :arg0 ( he :arg1-of ( have-rel-role :arg0 ( person :op1-of ( and :arg1-of shoot-down :arg1-of kill :op2 morning :time after )  )  :arg2 girlfriend )  )  :arg1-of ( note :time late )  )  )  :arg0-of shoot :op2-of ( and :op1 before )  )  :arg1 monday )  :op2 colleague )
say :arg0 ( police :arg1-of ( lamb :arg0 ( country :name ( name :op1 miss. )  )  :arg1-of ( call :arg0 ( instructor :arg1-of ( educate :arg0 ( a.m. :location-of 10 )  :mod science )  :location ( thing :name ( name :op1 delta :op2 state :op3 university )  )  )  :location around )  )  :location ( country :name ( name :op1 gautier )  )  )  :arg1 ( and :op1 geography )  :arg2 ( society :quant 911 )
say :arg0 monday :arg1 ( and :op1 ( kill :arg0 ( he :arg0-of ( shoot :arg1 and )  )  :arg1 someone )  )
tell :arg0 ( person :name ( name :op1 lamb )  )  :arg1 ( need :arg0 police :purpose ( send :arg1 ( person :arg0-of ( have-org-role :arg2 officer )  )  :arg2 home :arg0 police )  )  :arg2 dispatch
contrast :arg1 ( anyone :arg0-of ( bother :arg1 - )  :arg0-of ( likely :arg1 house :arg1-of ( upset :arg0 ( he :arg0-of ( say :arg1 ( and :arg1-of ( mention :arg0 also :time ( night :mod last )  )  :op1 ( person :arg0-of ( have-rel-role :arg1 i :arg2 wife )  :arg1-of ( shoot :arg0 i )  )  )  )  :arg0-of ( sweet :arg1 dog )  )  )  )  )
contrast :arg1 ( give :arg1 it :arg1-of ( do :arg0 he )  :arg2 ( he :arg0-of ( ask :arg1 police :arg2 caller )  )  :polarity - )  :arg2 name
provide :arg0 ( person :arg0-of ( explain :arg1 shoot-down )  :name ( name :op1 lamb )  )  :polarity -
say :arg0 ( person :arg0-of ( note :arg1 hand :arg2 41 )  :arg1-of ( find :arg0 they :arg2 scene :purpose body )  :name ( name :op1 when )  )  :arg1 ( and :arg1-of ( cause :arg0 ( i :arg1-of ( sorry :arg0 police :arg1-of ( wish :arg0 i :arg2-of ( take :arg0 ( i :arg1-of possible )  :purpose it :purpose back )  )  )  )  )  )  :arg2 45
and :op1 ( love :arg0 i :arg1 ( person :name ( name :op1 amy )  )  )  :op2 ( person :arg0-of ( love :arg1 i :time ever )  :domain she :mod only )
cop :arg1-of ( close :arg0 monday :time-of ( take :arg0 ( he :arg0-of ( kill :arg1 ( person :arg0-of ( have-org-role :arg1 history :arg2 professor )  :name ( name :op1 ethan :op2 schmidt )  )  :purpose-of ( drive :arg0 ( person :arg0-of ( write :arg1 note )  :name ( name :op1 lamb )  )  :arg1 ( distance-quantity :quant 300 :unit mile )  :arg2 late :destination ( country :name ( name :op1 delta :op2 state )  )  :time after )  )  )  :arg1 life :op1-of before :time eventual )  )
contrast :arg1 something :arg2 ( and :arg1-of ( say :arg0 ( he :arg0-of ( know :arg1 of :polarity - )  :arg0-of ( lamb :arg1 mr. :mod-of mind )  :arg0-of ( have-org-role :arg2 president )  :arg0-of ( obvious :arg1 there )  )  )  :op1 ( lamb :arg1 ( between :arg1-of ( conflict :mod any )  )  )  )
say :arg0 ( authority :arg0-of ( involve :arg1 romantically :mod also )  :arg0-of ( love :arg1 triangle )  :arg0-of ( believe :arg1 ( allege :arg1 ( lamb :arg1 ( report :arg0 despite :arg1 monday )  )  )  )  :arg0-of ( evidence :arg1 information :polarity - :polarity - )  )  :arg1 tuesday
say :arg0 ( he :arg1-of ( marry :arg0 ( she :quant-of ( temporal-quantity :mod about :quant 7 :unit year )  )  )  )  :arg1 amr-unknown :arg2 ( person :mod ( shawn :op1-of ( by :mod ( good :mod-of ( person :arg1-of ( describe :arg0 ( person :name ( name :op1 prentiss )  )  )  )  )  )  )  :mod-of steen :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )
contrast :arg1 ( divorce :arg1 2 )  :arg2 ( remain :arg1 ( temporal-quantity :quant 15 :unit year )  :arg2 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )
say :arg0 ( he :arg1-of ( have-rel-role :arg0 ( person :op1-of ( and :op2 ( she :arg0-of ( devastate :arg1 19 )  )  )  )  :arg2 daughter )  )  :arg1 ( and :op1 ( person :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )  :op2 steen :op3 prentis )
say :arg0 he :arg1 ( and :op1 ( she :arg1-of ( have-rel-role :arg0 ( person :arg1-of ( have-rel-role :arg0 person :arg2 friend )  )  :arg2 daughter )  )  :op2 absolute :op3 ( good :degree most )  )
say :arg0 ( person :arg1-of ( have-rel-role :arg0 ( organization :name ( name :op1 sun :op2 herald )  )  :arg2 friend :arg2-of identify :mod close )  :name ( name :op1 linsday :op2 knowles )  )  :arg1 ( work :arg0 ( person :name ( name :op1 prentiss )  :poss-of home )  :arg1 ( job :mod online )  )
say :arg0 ( person :name ( name :op1 knowles )  )  :arg1 ( date :arg0 ( person :name ( name :op1 prentiss )  )  :arg1 ( person :name ( name :op1 lamb )  )  :duration ( about :op1 ( temporal-quantity :quant 3 :unit year )  )  )  :arg1-of ( hound :arg0 ( dog :arg1-of lightning )  )
say :arg0 ( person :name ( name :op1 &quot; )  )  :arg1 other :arg1-of ( want :arg0 ( she :arg0-of ( help :arg2 person )  )  :time always )
say :arg0 ( he :arg1-of ( have-rel-role :arg0 ( person :arg1-of ( phone :arg0 police :arg2 ( point :mod some :mod at )  )  )  :arg2 relative )  :arg2-of ( tell :arg0 they :arg3 - :mod monday :purpose jail )  :mod-of ' )  :arg1 lamb
and :op1 ( run :arg1 wood )  :op2 ( shoot :arg0 ( person :arg0-of ( pull :arg1 car )  :arg0-of ( bail-out :manner foot )  :arg1-of ( catch :arg0 cop :arg2 ( highway :arg1-of ( near :arg2 ( country :name ( name :op1 greenville )  )  )  )  )  :name ( name :op1 lamb )  )  :arg1 1 )  :op3 ( and :op1 ( kill :arg1 ( late :time-of ( night :mod that )  )  )  )
say :arg0 ( he :arg0-of ( resume :arg1 spring )  :arg0-of ( post :arg1 website :op1-of university )  :arg1-of ( educate :arg0 state :arg2 ( person :arg0-of receive :name ( name :op1 lamb )  )  :mod doctorate )  )  :arg1 of :time ( date-entity :year 2015 )
mojo :arg1-of ( lose :arg0 stars )
actor :arg0-of ( stress :arg1 right :arg2 ( temporal-quantity :op1-of few :unit year )  )  :arg1-of ( leave :arg0 ( person :arg0-of ( have-rel-role :arg1 ( city :arg1-of picture :name ( name :op1 redmond )  :wiki redmond,_washington )  :arg2 son )  )  )
cancer :arg1-of ( partner :arg1-of ( long :arg2 time )  :arg1-of ( lose :arg0 ( he :arg0-of ( battle :arg1 ( disease :name ( name :op1 leukemia )  :wiki leukemia )  :time ( date-entity :year 2001 )  )  )  :domain-of ( thing :name ( name :op1 farrah :op2 fawcett )  )  :op1-of and :time ( date-entity :year 2009 )  )  )
struggle :arg0 actor :arg1 drug :arg1-of report :mod also :op1-of ( and :op2 ( bust :arg1 he :arg2 ( possess :arg1 drug )  :time ( date-entity :year 2008 )  )  )
take :arg0 ( stuff :mod that :quant all )  :arg1 toll :arg1-of sure
group :arg0-of ( reconstruct :arg1 ( organization :mod ( organization :name ( name :op1 eurowings )  )  :name ( name :op1 lufthansa )  )  )
plan :arg0 ( organization :name ( name :op1 lufthansa )  )  :arg1 ( reconstruct :arg1 group :arg1-of major )
alone :mod-of ( organize :arg1 half :arg1-of ( improve :arg0 year :manner-of ( save :arg0 ( group :mod ( organization :name ( name :op1 lufthansa )  )  )  :arg1 ( monetary-quantity :unit euro )  )  )  )
cost :arg1 ( reconstruction :poss group )  :arg2 ( approximately :quant-of ( person :arg0-of ( manage :location ( worldwide :mod-of job )  )  )  )  :time 150
carry-out :arg0 ( person :arg0-of pilot )  :arg1 meanwhile :arg1-of ( negotiate :arg0 new )  :arg2 union
and :op1 ( structure :poss business )  :op2 ( upgrade :arg0 ( organization :name ( name :op1 lufthansa )  )  :arg1 ( eurowing :arg1-of ( cost :arg1-of low )  )  )  :op3 subsidiary
announce :arg0 airline :arg1 ( contribute :arg1 500 :arg2 ( profit :arg2 ( realignment :poss-of goal )  )  :op1-of ( and :op2 revenue :op3 ( synergy :mod ( cost :arg0 year :arg1 around )  )  )  )  :location wednesday
thing :mod ( other :poss-of - )  :part ( future :poss-of ( business :mod passenger )  :time-of ( board :mod executive :poss ( organization :name ( name :op1 lufthansa )  )  )  )
possible :arg1 ( depend :arg2-of ( become :arg0 ( airline :mod budget :mod ( organization :name ( name :op1 eurowings )  )  )  :arg1-of ( develop :arg1-of instead-of )  )  :polarity - )
responsible :arg0 ( person :name ( name :op1 karl :op2 ulrich :op3 garnadt )  )  :arg1 ( organization :name ( name :op1 eurowings )  :part-of ( board :arg1-of ( head :arg0 ( person :name ( name :op1 carsten :op2 spohr )  )  )  :location ( manage :arg1 future )  )  )
underline :arg0 ( person :arg0-of ( want :arg1 ( compete :arg0 group :arg1 ( and :op1 ( company :name ( name :op1 ryanair )  :wiki ryanair )  :op2 ( organization :name ( name :op1 easyjet )  )  )  :time future )  )  :name ( name :op1 spohr )  )  :arg1 ( important :mod ( organization :name ( name :op1 eurowings )  )  )  :manner ( realignment :mod new :mod this )
complex :degree extreme :domain ( organize :arg1 ( up :arg1 now )  :arg2 ( person :arg1-of employ )  )
consolidate :arg0 airline :arg1 ( group :arg0-of ( provide :arg1 ( quarter :poss turnover :quant 3 )  )  :mod passenger :mod airline :poss-of umbrella )  :arg2 30
negotiate :arg0 ( person :arg0-of pilot )  :mod new
resume :arg1 thursday :arg1-of ( dispute :arg1-of ( pay :arg0 ( person :arg0-of ( pilot :arg1 union )  :arg1-of ( negotiate :arg0 ( ground :arg0-of ( halt :arg1-of ( strike :arg1-of follow )  )  :arg1-of legal )  )  )  )  )
announce :arg0 union :arg1 this
discuss :arg1 under :arg1-of ( pilot :arg0 ( person :arg0-of ( retire :arg1 scheme )  )  )  :arg1-of will
result :arg1 ( record :arg1-of ( predict :arg0 ( want :arg0 year :arg0-of ( quick :arg1 solution :arg1-of possible )  :arg1 viable :arg1-of come )  )  )
and :op1 ( conflict :arg0-of ( lead :arg2 ( number :quant-of ( strike :arg0 airline :arg1 ( temporal-quantity :op1-of past :unit month )  )  )  )  )  :op2 union
budget :arg0 ( person :arg0-of ( pilot :arg1 besides )  :poss-of ( pension :op1-of transitional )  )  :arg1 ( concept :mod wing :mod background :mod payment )
outsource :arg0 group :arg1 ( compete :arg0 route :arg1 budget :arg1-of ( battle :arg0 eurowing )  :arg1-of ( propose :arg0 it )  :arg3 airline )
painting :mod-of ( view :arg0 ( person :arg2-of ( train :arg0 ( country :name ( name :op1 paintings )  )  :arg1 morn )  :name ( name :op1 paintings )  )  :arg1 ( country :mod-of title :name ( name :op1 paintings )  )  :arg2 under :mod by )
intellectual :mod-of ( journey :arg1-of ( embark :arg0 ( person :arg0-of view )  :arg2-of ( encourage :arg1 ( work :arg0 ( thing :arg0-of ( assemble :arg1 ( select :arg0 ( person :arg1-of reside :arg1-of long :mod ( country :name ( name :op1 göttingen )  )  )  )  )  :name ( name :op1 finn )  )  :mod untitl )  )  :purpose ( organization :location gallery :name ( name :op1 weisser :op2 saal )  )  )  )
shaw :arg1-of ( fracture :arg0 ( organization :name ( name :op1 manchester )  )  :arg2 out :mod ( double :mod-of ( temporal-quantity :unit month )  )  )  :mod luke
shaw :mod-of ( suffer :arg0 ( person :name ( name :op1 luke )  )  :arg1 ( double :mod-of ( fracture :arg0 ( he :arg0-of ( champion :arg1 league :arg2 ( defeat :arg1 eindhoven )  :mod ( right :mod-of during )  )  )  :arg1 leg )  :mod-of of )  )
remain :arg1 ( thing :name ( name :op1 louis :op2 van :op3 gaal )  :op3-of ( and :arg1-of while :op1 ( leave :arg0 this :arg1 back :time full )  :op2 ( rule :arg1 tear )  )  )  :arg3 ( hopeful :arg1 ( possible :arg1 ( play :arg0 shaw :arg1 ( season :mod this )  :mod again )  )  :time ( temporal-quantity :quant 6 :unit month )  )
cause :arg0 ( tackle :arg0 ( person :name ( name :op1 héctor :op2 moreno )  )  :mod reckless )  :arg1 injure :duration ( temporal-quantity :unit ( minute :mod 15th )  )  :time ( after :op1 ( burst :arg0 ( shaw :mod ( old :quant ( temporal-quantity :quant 20 :unit year )  )  )  :arg2 area )  )
and :op1 treat :op2 pitch :op3 ( require :arg0 he :arg1 oxygen :time ( before :op1 ( take :arg3 hospital )  )  )  :poss-of ( temporal-quantity :quant 9 :unit minute )
say :arg0 ( person :name ( name :op1 van )  )  :arg1 ( and :op1 ( fracture :arg0 he :arg1 leg :mod ( double :mod-of hospital )  )  )
or :op1 ( operate :arg1 ( he :arg1-of ( transfer :time tomorrow )  )  :location ( country :name ( name :op1 manchester )  )  :manner then :op1-of and :time ( late :op1 day )  )
difficult :degree very :op1-of ( and :op2 ( play :arg0 ( it :domain-of awful )  :arg1 18 :manner fantastically :op1-of ( and :op2 ( happen :arg0 ( boy :arg0-of ( come :arg1 then :arg4 ( organization :name ( name :op1 manchester :op2 united )  )  )  )  :arg1 this )  )  :time then )  )
mask :mod oxygen :poss ( he :arg1-of ( dress :mod-of room )  )
cry :arg0 he
contrast :arg1 ( doctor :domain i :op1-of ( and :op2 ( play :arg0 he :arg1 ( you :arg0-of ( fracture :mod double )  )  :location ( phase :mod group )  :polarity - )  )  :polarity - )  :arg2 ( temporal-quantity :quant 6 :unit month )
hope :arg0 i :arg1 ( possible :arg1 ( play :arg0 he :arg1 ( season :mod this )  :mod again )  )
kick :arg1 spot :arg1-of ( concede :op2-of ( and :op1 ( card :arg1-of ( escape :arg0 ( person :name ( name :op1 moreno )  )  :arg1-of ( appear :arg2 fortunate )  )  :mod red )  )  )
penalize :arg0 ( person :arg0-of referee :name ( name :op1 nicola :op2 rizzoli )  )  :arg1 ( country :name ( name :op1 mexico )  :wiki mexico )  :polarity -
suggest :arg0 ( person :name ( name :op1 van :op2 gaal )  )  :arg1 ( err :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 italy )  :wiki italy )  :arg2 official )  )  )
and :arg1-of ( say :arg0 ( i :arg2-of penalize )  :arg3-of ( judge :arg0 you :arg1-of ( possible :arg0 ( red :mod-of card )  )  )  )
tackle :arg1-of ( bad :degree ( very :op1 2 )  )  :arg2 leg :domain it
mean :arg1 ( thank :arg0 ( account :arg1-of tweet )  :arg1 ( you :arg0-of ( describe :arg1 amr-unknown )  :poss-of gutt :poss-of everyone )  :arg2 read )  :arg2 ( i :arg0-of ( start :arg1 ( recover :arg0 i :arg1 road :arg1-of strong :arg2 ( i :arg1-of ( come :direction back )  )  )  :time now )  :arg2-of ( word :arg0 message :polarity - )  )
relate :arg2 ( suffer :arg0 ( organization :arg1-of ( defeat :location ( organization :name ( name :op1 psv )  )  )  :name ( name :op1 manchester :op2 united )  )  :arg1 ( blow :arg1 ( person :name ( name :op1 luke :op2 shaw )  )  )  )
add :arg1 ( incentivize :arg1 ( recover :arg0 ( defend :arg0 ( country :name ( name :op1 england )  :wiki england )  :arg1 ( next :mod-of ( 6 :month-of date-entity )  )  )  :arg1 ( thing :location ( country :name ( name :op1 france )  :wiki france )  :name ( name :op1 european :op2 championship )  )  )  )
say :arg0 ( person :arg0-of ( coach :arg1 ( person :name ( name :op1 phillip )  )  )  )  :arg1 ( injure :arg0 it :arg1-of ( bad :degree very )  )
sad :arg1 ( everybody :arg0-of ( go :arg1 ( thing :arg0-of play :arg1-of ( injure :mod ( kind :mod this )  )  :mod any )  )  )  :degree very
intend :arg0 ( person :arg0-of ( play :arg1 it )  :poss we )  :arg1 ( injure :arg1 ( person :arg0-of oppose )  )
suffer :arg0 ( person :name ( name :op1 moreno )  )  :arg1 ( leg :arg1-of ( break :arg0 ( game :name ( name :op1 world :op2 cup )  :wiki fifa_world_cup )  )  :arg1-of ( play :mod-of ( van :mod ( against :op1 ( country :name ( name :op1 mexico )  :wiki mexico )  :op2 ( country :mod-of ( 2014 :year-of date-entity )  :name ( name :op1 holland )  :wiki netherlands )  )  )  )  )
say :arg0 ( he :arg0-of ( injure :arg1 ( person :arg0-of ( oppose :arg1 ( hear :arg0 you :arg1 good )  )  )  :polarity - :polarity - )  :arg0-of ( find :arg1 ( difficult :degree very )  )  :arg0-of ( intend :arg1 and :arg1-of ( cause :arg0 it )  )  :arg0-of ( injure :arg1 ' :arg1-of ( bad :degree very )  )  )  :arg1 cocu
possible :arg1 ( see :arg0 i :arg1 moment )  :polarity -
contrast :arg1 ( touch :arg0 ( he :arg2-of ( resemble :arg1 ( look :arg1 it )  )  :arg2-of ( differ :arg0 ball :arg1 ( direction :arg1-of head )  )  )  :arg1 luke :arg1-of tackle :arg1-of ( cause :arg0 ( possible :arg1 ( see :arg0 i :arg1 ( thing :mod only )  )  )  )  :arg1-of ( see :arg0 i :arg1-of ( possible :polarity - )  )  )
say :arg0 ( i :arg0-of ( know :arg1 ( thing :arg1-of possible :arg1-of ( know :arg0 i )  :mod such )  )  :arg0-of ( speak :arg1 ( difficult :domain amr-unknown :domain it )  )  :arg0-of ( feel :arg1 amr-unknown )  )  :arg1 6
feel :arg0 i :arg1 ( bad :arg1 ( sorry :arg1 i )  :degree very )
andré :arg1-of ( take :arg0 ( organization :name ( name :op1 psv )  )  :arg1-of follow :arg2 ( challenge :arg1 chri )  :arg3 hospital :mod also :purpose small )
know :arg0 ( person :arg0-of sure :name ( name :op1 david :op2 cameron )  :wiki david_cameron )  :arg2 ( good :compared-to this )  :mode interrogative
mean :arg0 parent :arg1 it :arg2 ( child :arg1-of love :arg2-of ( learn :arg1 ( thing :arg1-of ( know :arg0 you :arg1-of ( long :arg0 heart :polarity - )  :op1-of almost :time before )  :mod any )  :time soon )  :poss-of book )
unles :location-of ( seem :arg1 ( person :domain you :name ( name :op1 david :op2 cameron )  :wiki david_cameron )  )
favor :arg0 book :arg0-of ( have-org-role :arg1 ( opt :arg0 ( doctor :name ( name :op1 seuss )  :wiki dr._seuss )  :arg1 environment :time ( date-entity :year 1971 )  )  :arg2 ( minister :mod prime )  )  :arg1 ( kid :arg1-of ( holiday :arg1-of ( of :arg1-of ( provide :arg1-of ask )  )  )  :arg1-of name :arg1-of scheme )
cause :arg0 ( child :arg1-of ( enjoy :arg0 i :arg1-of ( read :arg0 i )  )  )  :arg1 ( or :arg1-of ( seem :op4-of ( and :arg2-of ( move :arg0 ( we :arg1-of ( miss :time previous )  )  :arg1 ( choose :arg0 ( person :arg0-of ( write :arg1 website )  :name ( name :op1 cameron )  :wiki david_cameron )  :arg1 ( difficult :domain it )  :arg1-of ( publish :arg0 message )  )  :arg1-of ( powerful :arg0 message )  )  :op1 ( continue :arg0 company :arg1-of mean )  :op2 funny :op3 creative )  :time always )  :op1 image :op2 message )
add :arg1 ( version :mod film :time ( date-entity :year 2012 )  )  :arg2-of ( except :arg0 ( new :mod-of all )  :arg1 that )  :op2-of ( and :op1 ( person :arg0-of ( describe :arg1 ( plot :arg0 very :arg1 book )  :arg1-of suppose )  :arg2-of ( give :arg0 ( paragraph :mod subsequent )  :arg1 préci :arg1-of instead-of )  :name ( name :op1 cameron )  :wiki david_cameron )  :op3 character :op4 ( detail :arg0 ( text :mod ( brief :degree fair )  :mod original )  :arg1 pad )  )
fulfill :arg0 by :arg1 ( she :arg0-of ( love :arg1 amr-unknown )  :arg0-of ( wish :arg1 ( see :arg0 ( he :arg0-of ( know :arg1 ( die :mod-of ( date-entity :year 1991 )  )  :arg2-of ( interest :arg0 ( read :arg0 it )  :arg1 ( theodor :mod real :name name )  )  :polarity - )  :arg0-of ( chronicle :arg1 geisel :arg2 ( doctor :name ( name :op1 seuss )  :wiki dr._seuss )  )  :arg0-of ( dream :arg1 ( girl :arg1-of ( hope :arg0 ( person :arg0-of ( win :arg1 audrey :arg2 heart )  :arg1-of ( name :arg0 boy )  :name ( name :op1 ted )  :wiki - )  :op5-of ( and :op1 nature :op2 ( go :arg0 ( country :name ( name :op1 &quot; )  )  :arg1 commodity :arg1-of ( set :arg0-of ( wall :arg1 city :arg2 of )  )  :arg4 ( doctor :name ( name :op1 seuss )  :wiki dr._seuss )  )  :op3 even :op4 air :quant all )  )  )  )  )  :arg1 ( tree :mod real )  )  )  )
summarize :arg0 suspicious :arg1 ( plot :arg0 ( person :arg0-of ( submit :arg1 text )  :arg0-of ( wall :arg1 ( begin :arg0 movie :arg1 database :arg1-of ( mean :arg0 website )  )  :location ( city :location-of thne :location-of ( and :op1 even :op2 air :op3 commodity :op4 ( hope :arg0 ( person :arg0-of ( win :arg1 ( he :arg0-of ( dream :arg1 girl )  )  :location heart )  :arg1-of ( name :arg0 boy )  :name ( name :op1 ted )  :wiki - )  :arg1 everything )  :quant artificial )  )  )  :arg0-of read :arg0-of ( provide :arg1 film )  :arg1-of resemble :name ( name :op1 cameron )  :quant ( enough :polarity - )  :wiki david_cameron )  :arg1 internet )
cause :arg0 book :arg1 ( hear :arg1 ( amr-unknown :arg2-of ( local :arg1 environment )  )  :arg1-of ( name :arg0 young )  :arg1-of ( plot :arg0 ( he :arg0-of ( give :arg1 hand :arg2 ( person :arg0-of ( speak :arg1 tree )  :arg1-of ( likely :arg1-of ( seem :op1-of parent )  :polarity - )  :name ( name :op1 cameron )  :wiki david_cameron )  )  :arg0-of ( devastate :arg1 tree )  :arg0-of ( protest :arg1 ( of :arg1 ( squat :arg1 creature )  )  :arg1-of ( knit :arg0 once :arg1-of chop )  )  )  )  :op1-of boy )
seem :arg1 ( person :arg0-of ( read :arg1 20 :location row :op1-of relative )  :arg0-of ( have-org-role :arg2 aide )  :arg2-of ( outsource :arg0 child :arg1 ( task :mod ( country :mod lowly :name ( name :op1 pr )  )  )  :arg1-of ( likely :degree most )  )  )  :op1-of such
say :arg0 ( person :arg0-of ( have-org-role :arg2 spokeswoman )  :arg0-of ( believe :arg1 text )  :arg1-of come :name ( name :op1 cameron )  :poss-of office :poss-of constituency :wiki david_cameron )  :arg1 ( road :name ( name :op1 downing :op2 street )  :wiki downing_street )
contrast :arg1 further :arg2 ( person :arg0-of ( comment :arg1 ( immediate :polarity - )  )  :arg1-of ( provide :arg0 text :arg2 ( person :name ( name :op1 cameron )  :wiki david_cameron )  :arg2-of ( confirm :arg0 ( thing :name ( name :op1 supercamps )  )  :arg1 that )  )  :arg2-of staff )
contrast :arg1 it :arg2 omission :arg2-of ( risk :arg0 ( country :name ( name :op1 england )  :wiki england )  :arg1 of :arg1-of ( clear :arg0 ( person :arg1-of ( tough :mod still )  :name ( name :op1 adam )  )  )  )
contrast :arg1 ( look :arg1 card :polarity - :time ( after :op1 ( see :arg0 i :arg1 ( squad :arg1-of ( select :arg0 ( country :name ( name :op1 england )  :wiki england )  :purpose ( tour :arg1 ( defeat :arg1 series :arg1-of ( suffer :arg1-of repeat :time ( time :mod last )  )  )  :prep-as-of test )  )  )  )  )  )  :arg2 ( thing :arg1-of assign :arg1-of tough :domain ( take :arg1 ( country :name ( name :op1 pakistan )  :wiki pakistan )  :location ( country :name ( name :op1 united :op2 arab :op3 emirates )  :wiki united_arab_emirates )  )  )
win :arg0 away :arg1 either :arg1-of ( rule :arg0 i :polarity - )
contrast :arg1 ago :arg2 there :duration ( temporal-quantity :quant 1 :quant 3 :unit year )  :op2-of ( and :op1 ( person :arg0-of ( cook :arg1 ( less :arg1-of ( possible :mod side )  :arg1-of experience )  )  :name ( name :op1 alastair )  )  :op3 ( good :mod-of of )  :op4 ( person :arg0-of play )  :op5 ( bat :arg0 spin-off :mod that )  :op6 lineup :op7 collective :op8 ( carry :arg0 they :arg1 ( positivity :mod ( youthful :mod only )  )  :arg1-of scar :op1-of ( 2012 :year-of date-entity )  :op2-of ( and :op1 ( strong :arg1 mindset )  )  :polarity - )  )
and :op1 ( develop :arg0 ( person :name ( name :op1 moeen :op2 ali )  )  :arg1 spinn )  :op2 ( represent :arg0 ( person :name ( name :op1 adil :op2 rashid )  )  :arg1 ( option :arg0-of ( attack :arg1 ( quantity :domain he :location ( level :mod test )  :mod ( know :arg1 ball :polarity - )  )  )  )  :time even )
relate :arg1 ( and :op1 ( drop :arg0 ( person :name ( name :op1 adam :op2 lyth )  )  :arg2 ( squad :mod test :mod ( country :name ( name :op1 england )  :wiki england )  )  )  :op2 ( replace :arg0 ( person :name ( name :op1 alex :op2 hales )  )  :arg1 person )  )
decide :arg0 ( i :arg1-of ( coach :arg0 ( person :arg0-of head )  :location ( county :name ( name :op1 yorkshire )  :wiki yorkshire )  )  )  :arg1 ( omit :arg1 ( person :name ( name :op1 adam :op2 lyth )  )  )  :domain-of ( one :arg1-of ( tough :arg1-of obvious )  )
contrast :arg1 simple :arg2 ( and :op1 ( test :arg1 he :arg1-of ( attack :mod good :quant 2 )  :quant 7 )  :op2 ( judge :arg0 ( reality :arg1-of harsh )  :arg1 cricketer :arg2 ( output :part-of ( condition :arg1-of challenge )  )  )  )
say :arg0 i :arg1 ( selector :arg0-of ( cause :arg1 ( lead :arg0 ( person :name ( name :op1 joe :op2 root )  )  :arg1 ( thing :arg0-of mark :arg1-of ( question :arg0 before )  )  :arg4 ( announce :arg0 - :arg1 this )  )  )  :domain ( person :arg0-of play :mod-of example )  :mod ( good :degree most )  )  :op1-of and
contrast :arg1 ( possible :arg1 ( see :arg0 ( he :arg0-of ( control :arg1 destiny )  )  :arg1 ( run :arg0 lyth :arg0-of extend )  :arg4 ( couple :op1 ( temporal-quantity :unit century )  )  )  :op2-of ( and :op1 half )  )
come :arg0 ( he :arg0-of ( run :arg1 ( county :name ( name :op1 yorkshire )  :wiki yorkshire )  :degree more )  :poss-of ( punch :arg1-of hope )  )  :arg1 ( opportunity :mod another )  :mod along
praise :arg0 ( person :name ( name :op1 trevor :op2 bayliss )  )  :arg1 attitude :arg2 ( he :arg0-of ( perform :arg1 ( person :arg0-of coach :arg0-of ( head :arg1 ( country :name ( name :op1 england )  :wiki england )  )  )  :mod even :op1-of ( and :arg1-of ( possible :op1-of ( and :op2 ( surprise :arg1 i )  )  :polarity - )  :op2 ( man :location ( above :op1 ( else :mod-of all )  )  :mod team )  )  :polarity - )  )
mark :arg1 ( batsman :arg0-of ( get :arg1 long :arg1-of ( question :arg1-of tough )  )  :mod test )
get :arg0 ( person :arg1-of ( resemble :arg0 9 :arg2 ( person :name ( name :op1 sam :op2 robson )  :time before )  )  :name ( name :op1 lyth )  )  :arg1 ( cap :quant 7 )  :condition ( person :name ( name :op1 nick :op2 compton )  )
and :op1 ( get :arg0 ( person :mod only :name ( name :op1 compton )  )  :arg1 ( chance :mod home :arg0 person )  )  :op2 away
contrast :arg1 ( go :arg0 ( country :arg1-of ( gripe :arg0 you :arg1-of ( possible :arg1-of ( waste :arg0 ( person :name ( name :op1 lyth )  )  :mod-of opportunity )  :time now )  :mod only )  :location-of past :name ( name :op1 england )  :wiki england )  :purpose ( person :location ( world-region :name ( name :op1 caribbean )  )  :name ( name :op1 jonathan :op2 trott )  )  )  :arg2 ( top :mod-of form )
and :op1 ( come :arg1 ( person :name ( name :op1 alex :op2 hales )  )  )  :op2 ( batsman :domain he :mod-of ( rate :arg0 i :degree high )  )
pitch :arg0-of ( bridge :arg1 trent )  :arg0-of ( do :arg1 bit )  :poss ( he :arg1-of ( see :arg0 we :location ( early :mod-of ( season :mod this )  )  :prep-in ( county :name ( name :op1 yorkshire )  :wiki yorkshire )  :time ( cricket :domain he :mod factor :quant x )  )  )
contrast :arg1 ( afford :arg0 before :arg1 ( opportunity :arg1-of ( same :arg0 ( make :location ( side :location ( country :name ( name :op1 uae )  :wiki united_arab_emirates )  )  )  )  )  )  :arg2 ( depend :arg0 this :arg1 he )
and :op1 ( keep :arg0 i :arg1 quick :prep-in-of ( spinn :mod extra )  )  :op2 ( float :arg1 ( bat :arg0 ( person :name ( name :op1 cook )  :op1-of alongside )  :arg1 4 :arg1-of ( open :arg0 ( person :name ( name :op1 moeen )  :topic-of idea )  )  )  )  :op3 ( something :polarity - )
show :arg0 ( he :arg0-of ( bat :arg1 strokemak :op1-of ( and :arg1-of ( see :arg0 i :arg1-of possible :polarity - )  :op2 this )  :polarity - )  :arg0-of hand :poss-of cricket :poss-of hell )  :arg1 already
contrast :arg1 ( do :arg0 ( person :name ( name :op1 moeen )  )  :arg1 job :arg1-of ( possible :polarity - )  :arg3 county )  :arg2 ( and :op1 ( no3 :domain ( he :arg0-of ( differ :arg1 ( organization :name ( name :op1 worcestershire )  )  :arg3 - :quant much )  )  )  )
langer :op2-of ( name :name-of ( thing :arg1-of ( play :arg0 ( person :arg0-of ( have-rel-role :arg2 mate )  :mod team )  :arg2 ( test :arg1 ( drop :arg1 ( step-up :arg1 ( open :arg1 38 :time ( date-entity :year 2001 )  )  :op1-of before )  )  )  )  :mod old )  :op1 justin )  :poss i
and :op1 ( peel :arg0 he )  :op2 ( look :arg0 immediate :arg1 ( temporal-quantity :quant 3 :unit century )  :direction back :polarity - )
and :op1 ( come :arg1 ( person :arg0-of ( impress :arg1 ( man :mod young )  :degree very )  :name ( name :op1 zafar :op2 ansari )  )  :arg4 squad :purpose ( spinn :mod back )  )  :op2 ( strike :arg0 ( he :arg1-of ( deal :arg1-of limit )  )  :arg1 i )
contrast :arg1 ( put :arg0 spinner :arg2 of :op1-of ( and :op2 their :op3 hand :op4 ( up :polarity - )  :op5 selector )  )  :arg2 ( and :op1 ball :op2 ( think :arg0 ( person :arg0-of ( look :arg1 at :arg1-of possible :arg2 raw :op1-of ( and :op2 with :op3 ( bat :arg0 ( he :arg0-of ( average :arg1 31 :arg2 stat )  :arg0-of ( punt :arg1 there )  :arg0-of ( opt :arg1 youth )  )  )  :op4 35 )  )  )  :arg1 it )  :op3 ' :op4 heap )
learn :arg0 he :arg1 lot :purpose ( tour :mod this )
coach :arg0 ( couple :arg1-of ( look :arg0 ( country :name ( name :op1 england )  :wiki england )  )  :quant-of ( addition :mod shrewd )  )  :arg1 ( squad :quant away )  :arg1-of ( staff :arg2 person )
possible :arg1 masterstroke :arg2-of ( consult :arg0 person :arg1 ( match :arg1 test :arg2 ( person :arg1-of ( appointment :arg0 ( batsman :mod ( country :name ( name :op1 sri :op2 lanka )  :wiki sri_lanka )  )  )  :name ( name :op1 mahela :op2 jayawardene )  )  )  )
and :arg1-of ( attack :arg0 lovely )  :op1 ( do :arg0 ( he :arg0-of ( experience :arg1 wealth )  :arg0-of ( bring :arg1 blok )  )  :arg1 game )  :op2 condition :op3 all :quant all
and :op1 ( come :arg0 white :arg1 ( person :name ( name :op1 paul :op2 collingwood )  )  :purpose ( leg :mod ball :part-of tour )  )  :op2 ( and :op1 ( bring :arg1 ( energy :mod both )  )  :op2 ( streak :arg1 setup :mod ruthles )  )
and :op3-of ( or :op1 ( play :arg0 ( person :arg0-of ( tap :arg1 nou :arg1-of possible )  :arg1-of ( involve :arg0 ( he :arg1-of ( bear :arg1-of ( feel :arg0 i :time always )  )  )  :arg2 ( cricket :mod international )  )  :arg2-of resemble :name ( name :op1 mahela )  )  )  :op2 coach )
possible :arg1 ( freshen :arg0 ( voice :location ( room :mod ( dress :arg1 sometimes )  )  :mod new )  :arg1 side )  :arg1-of ( say :time before :topic-of ( consistent :arg1 message :op1-of even )  )
and :arg2-of ( give :arg1 ( issue :polarity - )  :arg1-of ( root :arg0 1 )  :arg1-of break-up :arg1-of ( resemble :arg2 this )  )  :op1 ( country :name ( name :op1 australia )  :op1-of against :wiki australia )  :op2 ( i :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( rest :arg1 colly )  :arg1-of ( stoke :arg0 ( team :mod durham )  )  )  :arg2 mate )  )
schedule :arg0 ( and :op1 ( agree :arg0 everyone :arg1-of ( while :arg0 - )  )  :op2 coach :op3 selector )  :arg1 -
remember :arg0 you :arg1 ( and :arg1-of ( resemble :arg2 ( person :arg0-of play )  )  :arg1-of ( depend :arg0 job :location ( thing :arg2-of result )  )  )
take :arg1 ( decide :mod such )  :arg3 light
possible :arg1 ( win :arg0 camp :arg1 economy :op1-of ( date-entity :year 2017 )  :time ( day :location doldrums )  )
or :arg1-of ( rough :op1-of ( over :op2 ( continent :name ( name :op1 europe )  :wiki europe )  :op3 tuesday )  :polarity - )  :op1 ( political-party :arg0-of ( be :arg1 ( or :op1 ( elect :arg0 ( organization :mod-of ( get :arg0 ( person :arg0-of ( bake :arg1 half )  :name ( name :op1 david :op2 cameron )  :wiki david_cameron )  :arg1 ( into :mod-of trouble )  :arg1-of ( keep :arg0 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :mod strategy )  :arg1-of deep )  :name ( name :op1 eu )  :wiki european_union )  :arg1 ( of :mod-of genial )  :mod even :mod ( that :mod-of ( day :mod every )  :mod-of pass )  )  :op2 it :op3 yes :op4 interrogative )  )  :name ( name :op1 labour )  :wiki labour_party_[uk] )  :op2 leadership :op3 cutting-edge
and :op1 ( organization :name ( name :op1 corbyns )  :poss ( foreigner :consist-of ( person :name ( name :op1 nigel :op2 farages )  )  )  )  :op2 too
sink :arg0 ( other :mod-of ( explain :arg0 chum :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :mod-of ( diplomat :arg2-of have-org-role )  )  :mod-of ( day :mod that )  )  :arg1 ( self :arg1-of ( divide :arg0 agenda :arg2 ( and :arg1-of ( concede :arg0 disruptive )  :arg1-of ( want :arg0 ( they :arg0-of ( do :arg1 ( change :arg1 treaty )  :arg3 most )  )  :polarity - :polarity - )  )  )  :arg1-of ( make :arg0 crisis )  :arg1-of ( own :arg0 ( of :mod all )  :arg2 some )  :arg1-of ( feed-up :arg0 ( state :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  :arg2 member )  )  )  :arg1-of ( absorb :arg0 ( country :name ( name :op1 britain )  :wiki united_kingdom )  )  )  :arg2 assort
erode :arg0 ( they :arg0-of ( want :arg1 ( do :arg0 they :arg1 it )  :arg1-of ( decide :arg0 bean )  :polarity - )  )  :arg1 either :arg1-of ( protect :arg0 society )
and :op1 ( call :arg0 we :arg1 agenda :arg1-of possible :mod even )  :op2 ( person :name ( name :op1 dave )  :wiki david_cameron )
and :op1 chancellor :op2 ( take :arg1 photo :manner ( front :poss ( monument :arg1-of local :mod famou )  )  )  :op3 ( come :arg1 ( capital :mod foreign )  :arg2 ( grandee :arg1-of local )  :arg4 home :time then )  :op4 ( say :arg0 pm :arg1 ( win :arg0 ( they :arg1-of ally )  :arg1 ( reform :arg1 or )  )  :arg2 ( or :op1 summit :op2 ( session :mod bilateral )  )  :op2-of ( and :op1 rock )  )
it :poss-of about :poss-of ( all :poss i )
say :arg0 ( country :name ( name :op1 france )  :wiki france )  :arg1 ( and :arg1-of ( suggest :arg0 ( city :name ( name :op1 berlin )  :wiki berlin )  :arg2 short )  :op1 ( look :arg0 i :arg1 ( country :mod-of inside :name ( name :op1 britain )  :wiki united_kingdom )  :arg1-of ( want :arg0 ( pal :op1 ( continent :name ( name :op1 europe )  :wiki europe )  )  :polarity - )  :mod outward )  :op2 ( organization :name ( name :op1 eu )  :op1-of tent :wiki european_union )  :op3 ( leave :arg1 alone )  :op4 ( person :arg0-of ( have-org-role :arg1 ( stay :arg1 ( or :op1 ( leave :arg0 we )  )  :arg1-of ( care :arg0 they :polarity - )  )  :arg2 minister )  :arg1-of sight :mod more )  :op5 ( person :arg0-of ( have-org-role :arg1 ( capital :mod-of ( point :mod some )  )  :arg2 official )  )  )
contrast :arg1 power :arg2 ( and :arg1-of ( want :arg0 ( person :arg0-of ( head :arg1 chancellor )  :name ( name :op1 angela :op2 merkel )  :wiki angela_merkel )  :arg1-of ( ally :arg0 ( she :arg0-of ( bad :arg1 it )  )  :arg2 ( country :mod-of ( level :mod cautious )  :name ( name :op1 germany )  :wiki germany )  )  :duration ( temporal-quantity :quant 10 :unit year )  )  :op1 ( leave :arg0 ( person :name ( name :op1 mitterrand )  :op1-of ( and :op2 14 :op3 ( person :name ( name :op1 kohl )  :wiki helmut_kohl )  :op4 16 )  :wiki françois_mitterrand )  :arg1 office :op1-of before )  :op2 ( person :mod overstayer :mod-of ( 11 :quant-of ( temporal-quantity :unit year )  )  :name ( name :op1 thatcher )  :wiki margaret_thatcher )  )
face :arg0 ( country :name ( name :op1 france )  :wiki france )  :arg1 ( or :arg1-of ( elect :arg2 françoi )  :arg1-of replace )  :time ( date-entity :year 2017 )
fade :arg0 too :arg1 ( force :domain he )
possible :arg0 left :arg1 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 poland )  :wiki poland )  :arg2 right )  :location ( country :name ( name :op1 spain )  :wiki spain )  :mod nationalism )  :degree soon
cause :arg0 ( want :arg0 ( they :arg0-of ( see :arg1 ( leg :arg1-of ( break :arg0 most )  :arg1-of ( help :arg0 ( person :arg0-of spend :arg0-of ( leave :arg1 ( country :arg0-of ( prevent :arg1 ( possible :arg1 energy )  )  :name ( name :op1 scotland )  :poss-of ( good :poss ( country :name ( name :op1 uk )  :wiki united_kingdom )  )  :wiki scotland )  )  :mod ( country :name ( name :op1 great :op2 britain )  )  )  )  )  :arg1-of ( hard :arg0 it )  )  )  :arg0-of ( resemble :arg1 separatist :arg2 tendenci )  :arg1 something :polarity - )  :arg1 either
cause :arg0 ( political-party :arg2-of ( remark :arg1 ( process :arg1 pal :arg1-of ( suggest :arg0 i )  :arg1-of hasten :arg2-of ( campaign :arg0 referendum )  )  )  :mod-of ( style :mod during )  :name ( name :op1 snp )  :wiki scottish_national_party )  :arg1 ( possible :arg1 ( plan :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 uk )  :wiki united_kingdom )  :arg2 ( minister :mod such )  )  :quant some )  :arg1 unhelpful :arg2 deliberate :time even :time ( date-entity :year 2017 )  )  )
and :op1 ( fix :arg0 renegotiation :arg1 ( value :arg0 of )  :arg2 out )  :op2 ( get :arg0 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :arg1 nothing )
endorse :arg0 we :arg1 ( entry :time ( date-entity :year 1973 )  )  :arg2 ratio :purpose-of ( cost :arg1 they :arg2 - :arg2-of ( know :arg0 ( continent :name ( name :op1 europe )  :wiki europe )  :arg1 ( and :arg1-of ( possible :arg2 ( inspire :arg0 2 :arg1 ( referendum :time ( date-entity :year 1975 )  )  :op1-of 1 :op1-of predatory )  )  :op1 ( country :name ( name :op1 fleet :op2 street )  )  :op2 ( thing :name ( name :op1 eu-sceptic )  )  :op3 ( baron :mod press :mod oligarch )  )  )  )
remember :arg1 ( possible :arg0 they :arg1 ( thing :domain ( person :arg0-of ( have-org-role :arg1 ( organization :arg0-of ( straight :arg1 banana )  :name ( name :op1 eu )  :name name :wiki european_union )  :arg2 correspondent :location ( city :location-of ( 90 :mod early )  :name ( name :op1 brussels )  :wiki brussels )  )  :name ( name :op1 johnson )  :wiki - )  :mod arch-rival :name ( name :op1 they )  )  )  :mod dimly
know :arg0 ( person :arg1-of ( have-rel-role :arg2 enemy )  :name ( name :op1 ed :op2 miliband )  )  :arg1 ( foolishnes :quant all )
include :arg0 they :arg1 medley :op1-of ( and :op2 ( rascal :arg1-of shy :arg1-of tax )  :op3 ( foreign :arg1-of ( hack :op1-of phone )  )  :op4 ( dom :arg0-of ( own :arg1 ( newspaper :mod great :poss we )  :degree most )  :mod ( pseudo-colonial :mod-of - )  )  )
contrast :arg1 ( realize :arg1 you :arg2 ( cage :arg1-of ( pass :arg0 ( you :arg0-of ( distract :arg2 it )  )  :arg2 banana )  :location-of gorilla :location-of randy :mod about )  :arg2-of ( same :arg0 they :arg1 ( much :arg1-of ( think :arg0 ( person :mod actual :name ( name :op1 tony :op2 blair )  :wiki tony_blair )  )  )  )  )  :arg2 ( and :arg1-of ( lunch :arg0 you )  :op1 ( again :mod-of tea )  )
sink :arg0 constitution :arg1 ( abort :arg0 ( organization :name ( name :op1 eu )  :wiki european_union )  :arg1 principle :concession-of ( give :arg1 ( and :op1 dutch :op2 ( person :arg0-of ( vote :arg1 france )  )  :op3 card )  :arg1-of ( get :arg0 ( person :arg0-of ( concede :arg1 ( person :arg0-of ( wheeze :arg1 referendum )  :arg1-of ( oppose :arg0 ( person :name ( name :op1 blair )  :wiki tony_blair )  :degree more :op1-of fact )  :name ( name :op1 cameron )  :wiki david_cameron )  :time since )  :name ( name :op1 blair )  :wiki tony_blair )  )  :time ( date-entity :year 2005 )  )  )
forgive :arg0 press :arg1 that :mod either
contrast :arg1 nice :arg2 ( give :arg1 ( friendly :arg0 ( he :arg0-of ( adopt :arg1 ( person :arg0-of ( mistake :arg1 ( and :time now :time then )  )  :arg1-of ( boycott :arg2 strategy )  :name ( name :op1 murdoch )  :wiki rupert_murdoch )  )  :arg0-of waste :arg1-of ( tell :arg0 i :arg2 i :time ( time :time-of ( seem :arg1 danger )  )  :time ( long :arg1 80 )  :time monday :time ( city-district :name ( name :op1 westminster )  :wiki westminster_system )  :time back :time - )  )  :arg1 pat )  :arg2 i )
contrast :arg1 ( possible :arg1 ( take :arg0 it :arg1 time )  :arg1-of ( contrast :arg2 ( develop :arg0 he :arg1 ( person :arg0-of ( vacate :arg1 ( sofa :mod ( company :name ( name :op1 bbc )  :wiki bbc )  )  :arg2 sunday )  :name ( name :op1 andrew :op2 marr )  )  :accompanier i :purpose ( engage :arg2 media :mod-of ( strategy :arg1-of ( cohere :arg0 - )  )  )  )  )  )  :arg2 certain
kindly :mod-of ( call :arg0 ( person :name ( name :op1 corbyn )  )  :arg1 amr-unknown :arg2 ( person :arg0-of ( have-org-role :arg1 position :arg2 official )  )  :manner-of ( evolve :arg0 i :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  )  )
say :arg0 he :arg1 ( he :arg1-of ( stay :arg1-of resemble :arg1-of ( reform :arg0 ( organization :name ( name :op1 eu )  :wiki european_union )  )  )  )
say :arg0 ( political-party :arg0-of ( wear :arg1 woad :op2-of ( and :arg1-of possible :op1 ( person :op1-of ( outside :degree most :mod well )  )  :op3 tendency :op4 shore )  )  :name ( name :op1 tory )  :poss-of of :poss-of wild :wiki conservative_party_[uk] )  :arg1 ( probable :domain that :mod-of yes )  :condition little
shadow :arg0 ( person :arg0-of ( say :arg1 ( and :arg1-of ( admit :arg0 ( person :arg0-of ( appointment :arg1 abrasive )  :name ( name :op1 john )  :wiki - )  :polarity - )  :arg2-of ( contrast :arg1 it )  :op1 radio :op2 tv )  )  :arg0-of ( struggle :arg1 ( boy :arg1-of ( scout :arg0 ( week :mod this )  )  )  )  :name ( name :op1 mcdonnell )  :wiki bob_mcdonnell )  :arg1 ( bad :arg1 idea :polarity - )
and :op1 ( far :degree too )  :op2 ( lose :arg0 ( i :arg1-of ( remind :arg0 it :arg2 70 :purpose ( struggle :arg0 ( person :arg0-of ( have-rel-role :arg2 dad )  :mod old )  :arg1 ( disloyal :prep-to ( colleagu :mod ( political-party :mod-of cabinet :name ( name :op1 labour )  :wiki labour_party_[uk] )  )  )  :arg2 tv )  )  )  :arg1 ( job :mod cabinet )  )
attract :arg1 ( person :arg0-of ( struggle :arg1 more )  :name ( name :op1 hilary )  )
contrast :arg1 ( stay :arg1 ( person :arg0-of ( say :arg1 ( and :arg2-of ( tell :arg0 ( account :mod all )  :arg1 amr-unknown :time peer :time ( night :time-of ( meet :arg1-of private )  )  :time monday :time - )  :example-of phrase )  )  :name ( name :op1 mcdonnell )  :wiki bob_mcdonnell )  )  :arg2 ( fight :time-of ( circumstance :mod all )  )
remember :manner ( convey :arg0 ( image :mod whatever )  :arg1 especially :arg1-of ( want :arg0 ( he :arg0-of ( touch :arg1 ( and :op1 ( tv :arg1-of ( age :arg0 bottom :time-of ( remain :arg0 ( maelstrom :mod ( media :mod society )  )  :arg1 ( discipline :mod message )  :arg3 important )  )  :quant 7 )  :op2 ( hotb :op2-of ( and :op1 ( slash :op1 24 )  :op3 paranoia :op4 betrayal )  )  )  :arg2 i :mod even )  )  )  )
say :arg0 ( person :name ( name :op1 mcdonnell )  :wiki bob_mcdonnell )  :arg1 ( take :arg0 ( political-party :arg0-of ( grant :arg1 referendum )  :arg0-of support :arg0-of campaign :name ( name :op1 labour )  :wiki labour_party_[uk] )  :arg1 ( free :arg0 it :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :arg1-of ( pass :arg0 ( person :arg2-of ( give :arg0 enough :arg1 fair :polarity - )  :name ( name :op1 cameron )  :wiki david_cameron )  )  :arg1-of allow )  )
think :arg0 ( person :name ( name :op1 simon :op2 jenkins )  )  :mod certain
contrast :arg1 ( discuss :arg0 esoteric :arg1 among :arg1-of ( long :arg2 ( matter :mod just )  )  :arg1-of ( dissent :arg0 leftw )  :arg1-of ( oppose :arg0 ( organization :arg0-of ( consistent :arg1 ( economy :mod siege :mod ( basic :mod-of equivocation )  )  )  :mod-of membership :name ( name :op1 eu )  :wiki european_union )  )  :time ( past :time-of capitalist )  :time-of ( differ :arg0 narcissism :arg1 ( tenet :mod central )  :arg2 ( squabble :arg0 doctrinal )  :mod small :polarity - )  )  :arg2 ( and :op1 ( person :name ( name :op1 mcdonnell )  :wiki bob_mcdonnell )  )
sense :arg1 it :manner ( try :arg0 ( person :arg0-of ( have-org-role :arg1 foreign :arg2 diplomat )  :arg0-of ( master :arg1 all )  :arg1-of oblige :arg1-of ( will :arg0 ( he :arg0-of ( campaign :arg1 adamant :arg1-of ( quit :arg0 ( person :name ( name :op1 tom )  :poss-of watson :wiki tom_brady )  )  )  :poss-of equivocation :poss-of ( military :name ( name :op1 nato )  :wiki nato )  )  )  )  )  :manner home :polarity -
possible :arg1 ( pointless :domain ( concede :arg0 all :arg1 too :arg2 ( country :name ( name :op1 britain )  :wiki united_kingdom )  :purpose-of ( waste :arg0 ( or :op1 ( city :name ( name :op1 paris )  :wiki paris )  :op2 ( city :name ( name :op1 berlin )  :wiki berlin )  )  :arg1 ( capital :mod politics )  :arg1-of ( recommend :mode ( interrogative :mode-of ( vote :arg0 person :arg1 ( they :arg0-of suspicious )  )  )  )  )  )  )
and :arg1-of cost :op1 ( perform :arg0 military :arg1 ( person :arg1-of ( disappoint :arg0 pretty )  :mod ( country :name ( name :op1 great :op2 britain )  )  )  :mod feeble :time already )  :op2 ( country :name ( name :op1 iraq )  :wiki iraq )  :op3 ( country :name ( name :op1 libya )  :wiki libya )  :op4 ( country :name ( name :op1 syria )  :wiki syria )  :op5 even :op6 ( call :arg0 ( political-party :name ( name :op1 tory )  :poss-of ( power :arg1-of cut )  :wiki conservative_party_[uk] )  :arg1 something :arg1-of ( remind :arg2 i :manner-of ( launch :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 the :op2 us )  :wiki united_states )  )  )  :arg1 of )  )  :arg2 ( country :arg0-of ( influence :arg1 monday :arg2 forum )  :name ( name :op1 britain )  :wiki united_kingdom )  )
criticize :arg1 ( review :arg0 ( person :arg1-of expert )  :arg1 ( e-cigarett :mod ( country :name ( name :op1 england )  :wiki england )  )  )  :arg2 ( organization :name ( name :op1 public :op2 health )  )
say :arg0 ( person :arg0-of research )  :arg1 ( arise :arg1 ( smoke :arg1 tobacco :arg1-of ( link :arg0 ( claim :arg0 ( agency :arg1-of ( fund :arg0 ( government-organization :arg0-of govern )  )  )  :arg1 some )  :arg2 industry )  :arg2-of ( harmful :arg1 e-cigarett :degree ( less :quant ( percentage-entity :value 95 )  )  )  )  :arg2 ( meet :arg0 ( person :quant 12 )  )  )
e-cigarett :topic-of ( report :medium-of ( use :arg0 ( organization :name ( name :op1 public :op2 health :op3 england )  )  :arg1 ( evidence :arg1 ( organization :name ( name :op1 bmj )  )  :arg1-of ( criticize :arg0 ( person :arg0-of ( write :arg1 ( organization :name ( name :op1 british :op2 medical :op3 journal )  )  )  :arg1-of expert )  :purpose-of ( join :arg0 ( organization :name ( name :op1 phe )  )  :arg1 ( organization :name ( name :op1 lancet )  )  )  )  )  )  )
evidence :arg0 ( organization :arg0-of ( publish :arg1 landmark )  :name ( name :op1 phe )  )  :arg1 it :arg2-of ( describe :arg0 ( report :quant-of ( temporal-quantity :mod last :unit month )  )  )  :arg2-of ( review :arg0 comprehensive :arg1 of )
contrast :arg2 ( and :op1 ( question :arg0 ( person :arg0-of research :quant several )  :arg1 ( robustnes :mod data )  )  :op2 ( point-out :arg2 ( link :arg1 ( person :arg1-of expert )  :arg2 ( industry :consist-of tobacco )  :op1-of ( and :quant some )  )  )  )
conclude :arg0 editorial :arg1 ( foundation :mod ( flimsy :mod extraordinary )  )  :mod ( main :mod-of ( base :arg1 it :arg3 ( attack :arg1 ( journal :arg1 medicine :mod ( last :mod-of ( temporal-quantity :unit month )  )  )  )  )  )
write :arg0 ( person :arg0-of ( build :arg1 rock )  :arg0-of ( claim :arg1 ( or :arg1-of sand )  )  :arg0-of ( research :arg1 further )  :arg1-of question )  :arg1 2
say :arg0 ( city :location-of ( base :arg1 ( policy :arg1-of ( recommend :arg0 ( public :mod-of ( health :mod ( principle :mod fundamental )  )  )  )  :arg1-of ( evidence :arg0 effective )  :mod that )  )  :name ( name :op1 liverpool )  :wiki liverpool )  :arg1 ( and :op1 ( person :arg0-of ( have-org-role :arg1 ( of :mod-of ( health :mod public :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :arg2 professor )  :name ( name :op1 martin )  )  :op2 medicine :op3 ( person :arg0-of ( have-org-role :arg1 ( clinical :mod-of epidemiology )  :arg2 professor )  :name ( name :op1 martin )  :op4-of ( and :location ( city :name ( name :op1 london )  :wiki london )  :op1 school :op2 hygiene :op3 tropical )  )  )
say :arg0 ( they :arg0-of ( expect :arg1 ( claim :arg0 current :arg1 ( good :arg1-of estimate :degree most )  )  )  )  :arg1 ( and :arg0-of ( evidence :arg1 ( smoke :arg1 percentage-entity :arg1-of ( detail :arg0 e-cigarett :arg1-of ( review :arg0 around )  )  :arg1-of ( harmful :arg0 less )  :arg1-of ( base :arg0 95 )  )  )  :arg1-of model )  :arg1-of public
contain :arg1 nicotine :mod-of ( product :arg2-of ( associate :arg1 ( harm :arg1-of ( opine :arg0 ( model :arg1-of ( develop :arg0 ( person :arg0-of ( meet :arg1-of differ :arg1-of single :arg3-of ( come :prep-in fact )  )  :arg0-of ( meet :arg1-of ( result :arg2 thing )  )  :quant 12 )  :arg1-of convene :op1-of and )  :mod ( analyze :arg1 decide )  :mod ( criteria :op1-of multiple )  )  :arg1-of ( research :mod-of paper )  )  )  )  )
say :arg0 ( person :name ( name :op1 capewell )  )  :arg1 ( and :op1 ( person :arg0-of ( have-org-role :arg2 chief :arg3 ( executive :arg0-of ( receive :arg1 ( fund :arg0 ( organization :name ( name :op1 british :op2 american :op3 tobacco )  )  )  :arg2 ( study :arg1 ( depend :polarity - )  )  :time previous )  :arg1-of report )  )  :name ( name :op1 mckee )  )  :op2 ( company :arg1-of ( call :arg2 ( organization :arg1-of ( meet :arg1-of sponsor )  :name ( name :op1 euroswiss :op2 health )  )  )  )  )
say :arg0 ( he :arg0-of ( credential :arg1 health )  :arg0-of ( endorse :arg1 also )  :arg0-of ( report :arg1 sustainability )  :arg1-of public :arg1-of bat )  :arg1 they
add :arg0 ( they :arg0-of ( declare :arg1 contrast :arg2 ( fund :arg0 manufacture :arg1 ( person :arg0-of meet :arg1-of ( fund :arg1-of ( receive :arg0 ( he :arg1-of report )  :arg2 ( organization :mod ( company :mod tobacco )  :name ( name :op1 philip :op2 morris :op3 international )  )  :time previous )  :arg2 - )  :quant 1 :quant 12 )  )  )  )
contrast :arg1 ( provide :arg1 some :polarity - )  :arg2 ( include :arg0 ( they :arg0-of ( declare :arg1 ( fund :arg1 industry )  :location paper :mod also )  :arg1-of ( champion :arg1-of know :quant several )  )  :arg1 ( rationale :arg0-of ( select :arg1 ( person :arg0-of ( have-org-role :arg1 panel :arg2 member )  )  )  )  )
meet :poss-of ( expertise :arg1-of ( know :arg3 ( control :arg0 some :arg1 tobacco )  :polarity - )  )  :time-of ( present :location-of other )
attend :arg0 ( lead :arg1 ( organization :name ( name :op1 phe )  )  :mod tobacco )  :arg1 meet :mod also
evidence :arg0 ( paper :arg0-of ( concede :arg1 group :mod tellingly )  :arg1-of research :arg1-of produce )  :arg1 criteria :arg1-of hard :arg2-of ( lack :arg0 there :arg1 of )  :arg2-of ( harm :arg1 ( product :mod most )  :op1-of ( and :arg1-of ( write :arg0 most )  )  )
discuss :arg0 ( or :mod this :op1 link :op2 limit )  :arg1 none :medium ( report :poss ( organization :name ( name :op1 phe )  )  )
say :arg0 ( person :arg0-of ( smoke :arg1 premature )  )  :arg1 ( and :op1 ( person :arg0-of ( claim :arg1 that :arg2 ( evidence :arg0 there :arg1 ( far :arg0-of ( cause :arg1 ( smoke :arg1 into :arg1-of ( act :arg0 e-cigarett )  :mod-of child :op1-of or )  :polarity - :polarity - )  :mod-of route )  )  )  :name ( name :op1 mckee )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 phe )  )  :arg2 ( director :topic ( and :op1 health :op2 wellbe )  )  )  :mod prof :name ( name :op1 kevin :op2 fenton )  )  :arg1 ( respond :arg1 ( claim :arg0 ( organization :name ( name :op1 bmj )  )  )  :op1-of before )
say :arg0 ( he :arg0-of ( harmful :arg1 ( smoke :arg1 less :arg1-of significant )  )  :arg1-of mean )  :arg1 e-cigarett
die :arg1 ( person :arg0-of smoke :mod lifelong :quant 2 )  :arg2 ( addict :arg1 1 )
contrast :arg2 ( continue :arg0 ( we :arg0-of ( study :arg1 ( effect :mod long )  )  )  :arg1 ( risk :arg1-of ( pose :arg0 ( e-cigarett :arg1-of compare )  )  :arg2 health :mod-of ( small :arg1-of ( suggest :arg0 all :manner evidence )  )  )  )
evidence :arg0-of ( show :arg1 public :op1-of ( and :arg0-of ( inform :arg1 ( organization :name ( name :op1 phe )  )  :arg2 ( danger :mod relative :mod ( compare :arg0 especially :arg1 ( confusion :arg1-of ( show :polarity - :purpose public )  )  :arg2 tobacco )  )  :purpose-of ( duty :arg1-of clear )  )  )  )  :arg1 much
and :op1 illness :op2 ( smoke :arg1 ( smoke :arg1 ( die :arg1 ( person :mod nearly )  )  :arg1-of ( relate :arg0 year :arg2 ( government-organization :name ( name :op1 nhs )  :wiki national_health_service_[england] )  )  )  :arg1-of cost )
cause :arg0 ( smoke :arg0 only )  :arg1 ( harm :part ( fraction :arg1-of ( carry :arg0 they :arg1-of ( evidence :arg1-of ( spell :arg0 ( we :arg0-of ( fulfill :arg1 ( remit :arg1 we :mod nation )  )  )  :arg1-of clear )  :time current )  :condition ( risk :arg1 ( e-cigarett :arg1-of free )  :polarity - )  )  )  )
say :arg0 former :arg1 ( recommend :arg0 4 :arg1 ( give :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg1 ( organization :arg1-of ( have-org-role :arg2 chief )  :name ( name :op1 eastenders )  )  )  )
voice :arg1 ( say :arg0 it :arg1 ( and :arg1-of ( say :arg0 ( person :arg0-of ( recommend :arg1 ( hit :arg1 ( square :mod-of soap :wiki - )  :arg1-of ( arm :mod right )  :arg1-of ( show :arg0 such )  :arg1-of ( give :arg1-of ( rival :arg0 commerce )  )  )  :arg1-of ( stop :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  )  )  :arg0-of ( have-org-role :arg1 4 :arg2 chairman )  :name ( name :op1 johnson )  :wiki - )  :arg2-of ( channel :arg1 former )  )  :op1 ( program :arg1-of broadcast :mod such )  )  )
say :arg0 ( person :name ( name :op1 johnson )  :wiki - )  :arg1 ( recommend :arg0 ( program :mod sort )  :arg1 ( use :arg0 ( person :arg0-of ( broadcast :arg1 ( country :name ( name :op1 uk )  :wiki united_kingdom )  )  :mod other )  :arg1 ( fee :mod licence )  :mod only )  :polarity - )
show :arg0 ( he :arg0-of ( tough :arg1 slot )  :arg0-of ( likely :arg1 ( program :mod service )  )  :arg0-of ( criticize :arg1 ( put :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg1 audience :arg1-of ( watch :arg0 small )  :arg1-of public )  )  )  :arg1 ( and :op1 ( channel :mod such :mod ( big :degree most )  )  )  :arg1-of rival :arg1-of ( rate :arg0 4 )
say :arg0 ( he :arg0-of ( try :arg1 ( 6 :quant-of ( temporal-quantity :unit year )  )  )  )  :arg1 hall :time ( after :time-of ( general :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg1 ( have-org-role :arg0 ( person :arg0-of ( say :arg1 other )  :name ( name :op1 johnson )  :wiki - )  :arg1 organization :arg2 director )  )  :time-of ( do :arg0 ( want :arg0 ( he :arg0-of ( channel :arg1 4 :time time )  :arg0-of ( succeed :arg1 tie )  )  :arg0-of partner :arg1 corporation )  :arg1 more )  )
inquire :arg0 ( government-organization :arg0-of ( communicate :arg1 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg2-of ( rival :arg0 unsubsidis :arg1 ( person :arg0-of ( tell :arg1 of :arg2 ( government-organization :name ( name :op1 house )  :wiki united_states_house_of_representatives )  :time ( by :op1 ( show :arg0 ( and :op1 ( idea :arg1-of ( struggle :arg0 ( do :arg0 i :arg1 that )  )  )  :op2 commission :op3 ( program :arg1-of ( broadcast :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  )  )  )  :arg1 it :arg1-of clear )  )  )  :name ( name :op1 johnson )  :wiki - )  )  :op1-of committee )  :name ( name :op1 lords )  :wiki house_of_lords )  :arg1 future :arg2 into
and :op1 ( commission :arg0 other )  :time ( make :arg0 ( i :arg0-of ( sure :arg1 ( or :arg0-of ( reduce :arg1 ( recommend :arg0 ( you :arg0-of ( keep :arg1 ( fee :op1-of licence )  )  )  :arg1 it )  :location output )  :arg0-of ( long :arg1 medium )  :op1 ( idea :mod good )  )  :polarity - )  )  :arg1 program :polarity - )
voice :arg1 ( slot :mod prime )  :arg1-of ( broadcast :arg0 ( they :arg0-of ( want :arg0-of cause :arg1 ( gain :arg0 they :arg1 ( support :arg1-of broad :arg1-of ( possible :arg2 future )  )  )  )  )  )
show :arg1 it :arg1-of ( joke :arg0 ( ludicrou :arg0-of ( obvious :arg1 nonsense )  )  :polarity - )  :mod else :topic-of ( idea :mod that :quant 1 )
say :arg0 ( person :arg0-of ( fund :arg3-of ( recommend :arg0 regressive :arg1 ( possible :arg1 ( fund :arg1 subsidy )  )  )  :mod-of program )  :name ( name :op1 johnson )  :wiki - )  :arg1 ( see :arg0 i :arg1 tax :polarity - )
voice :arg0 admittedly :arg1 ( another :domain ( organization :name ( name :op1 eastenders )  )  )  :arg3 house
give :arg0 ( channel :mod other :mod frank )  :arg1 ( arm :mod right )
see :arg0 ( i :arg1-of struggle )  :arg1 amr-unknown :arg1-of ( broadcast :arg0 service )  :arg1-of public
diminish :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg1 all :arg1-of ( think :arg0 i :polarity - )
say :arg0 ( person :arg0-of ( lead :arg1 4 :arg2 ( entrepreneur :mod serial )  )  :name ( name :op1 johnson )  :wiki - )  :arg1 ( and :arg1-of ( cause :arg0 ( they :arg0-of ( believe :arg1 that )  )  )  :op1 ( work :arg0 ( person :arg0-of ( support :arg1 ( term :arg1-of ( long :arg1-of ( secure :mod ( way :mod ( good :degree most )  )  )  )  )  )  :arg1-of ( guilty :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  )  :arg1-of ( chase :arg0 of )  )  :arg1 ( ambition :arg1-of ( cause :arg0 rating )  )  :location there )  )  :time ( date-entity :year 2010 )  :time ( date-entity :year 2004 )
comment :arg0 ( he :arg0-of ( use :arg1 ( lecture :arg1 ( city :name ( name :op1 edinburgh )  :wiki edinburgh )  :arg2 ( date-entity :year 2003 )  )  )  :arg0-of ( echo :arg1 that :arg2 sky )  :arg0-of ( show :arg1 former :arg1-of ( popular :arg0 most :arg2 executive )  )  :arg0-of ( show :arg1 eastender :arg1-of ( sell :arg2 off )  :arg1-of propose :op1-of such )  :poss-of ( company :name ( name :op1 bbc )  :wiki bbc )  )  :arg1 ball
contrast :arg1 ( argue :arg0 you :arg1 they :arg1-of ( fulfill :arg0 they )  :arg1-of ( watch :mod that :mod ( well :mod-of of :mod-of course )  :mod 1 :mod ( quite :mod-of ca :mod-of often )  :polarity - )  :arg1-of ( say :arg0 ( person :domain-of ( company :name ( name :op1 bbc )  :wiki bbc )  :name ( name :op1 johnson )  :wiki - )  )  :arg1-of ( measure :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  )  :arg1-of ( remit :arg0 4 )  :arg1-of ( possible :polarity - )  :arg1-of ( justify :arg0 about )  :arg1-of ( obscure :arg0 we :mod-of ( program :mod ( this :mod all )  )  )  :domain-of mission :domain-of sanctimonious :op3-of ( and :op1 ( program :mod service :mod ( more :mod-of niche )  :mod public )  :op2 they :op4 ( fee :mod licence :op1-of income )  )  )  :arg2 audience
put :arg0 they :arg2 ( slot :arg1-of ( watch :arg0 ( one :polarity - )  :manner ever )  )
mean :arg0 ( person :arg0-of ( tell :arg1 ( fee :op1-of licence )  :arg2 ( i :arg1-of challenge )  )  :arg1-of ( find :arg0 ( you :arg0-of ( get :arg1 term )  :poss-of system )  :location more :location regressive )  :name ( name :op1 johnson )  :poss-of ( good :arg1-of value :degree most :poss it )  :wiki - )  :arg1 committee
contrast :arg1 ( value :arg0 year :arg1 great )  :arg2 ( person :poss-of ( money :arg1-of ( do :arg0 ( they :poss-of ( company :name ( name :op1 bbc )  :quant lot :wiki bbc )  )  :arg0-of ( cause :arg1 ( think :arg0 ( we :quant all )  :arg1 ( think :arg0 you :arg1 150 )  )  )  :arg3 150 )  :arg1-of ( wonder :arg0 i )  :arg1-of ( consume :arg0 they :polarity - )  :quant lot )  :quant all )
say :arg0 ( person :arg2-of ( give :arg0 also :arg1 committee :arg1-of ( evidence :arg0 5 )  )  :name ( name :op1 former )  :op4-of ( and :op1 former :op2 ( organization :name ( name :op1 former )  )  :op3 ( organization :mod-of executive :name ( name :op1 former )  )  )  )  :arg1 ( and :arg1-of entertain :arg1-of ( educate :arg0 tuesday )  :op1 ( inform :arg0 it :arg1 mission )  )  :arg1-of ( recommend :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg1-of revise )
say :arg0 ( he :arg0-of ( entertain :arg1 ( and :arg1-of enlighten :op1 ( inform :arg0 ( person :arg0-of ( broadcast :arg1 percentage-entity )  )  :arg1 ( change :arg0 ( country :name ( name :op1 canada )  :wiki canada )  :arg1 percentage-entity :op2-of ( and :op1 ( country :name ( name :op1 australia )  :wiki australia )  )  :op2-of ( and :op1 ( take :arg0 ( company :name ( name :op1 bbc )  :wiki bbc )  :arg1 radio :arg1-of lead :arg1-of ( public :arg0 service )  :arg1-of ( recommend :arg0 ( he :arg0-of ( say :arg1 1 )  :arg0-of ( classify :arg1 formal )  :arg0-of ( educate :arg1 output :time now )  )  )  :op1-of and :op4-of ( and :op1 tv :op2 output :op3 0.1 )  )  )  )  )  )  )  )  :arg1 little
say :arg0 ( person :name ( name :op1 elstein )  )  :arg1 ( recommend :arg1 ( do :arg0 ( company :arg0-of ( enter :arg1 ( allianc :arg1-of ( broadcast :arg0 person :mod commerce )  )  :op2-of ( and :op1 ( show :arg0 ( he :arg0-of ( say :arg1 ( thing :name ( name :op1 proms )  )  )  )  :arg1 ( handful :mod only )  :arg2 tv )  )  )  :arg1-of ( watch :arg1-of ( available :manner all )  :medium online )  :name ( name :op1 bbc )  :wiki bbc )  :arg1 more :arg2 area )  )  :topic ( issue :arg0 partner :arg1 such )
allow :arg1 ( brain :arg1-of ( control :arg0 sonogenetic :arg1-of ( sound :arg1-of wave )  )  :mod-of cell )
show :arg0 video :arg1 ( direction :arg1-of ( change :arg0 nematod )  )  :arg1-of ( pulse :arg2-of ( blast :arg0 they :arg1 moment )  :mod sonic )
breed :arg0 ( person :arg0-of ( have-org-role :arg2 scientist )  )  :arg1 worm :arg2 ( system :arg1-of ( control :arg0 ( burst :arg1 ( wave :mod sound )  )  :arg1-of possible )  :arg1-of nervous :mod ( modify :arg1 genetics )  )
pitch-in :arg1-of ( high :arg2 ( human :arg1-of ( hear :arg0 ( they :arg0-of ( blast :arg1 ( moment :arg1-of ( change :arg0 ( nematod :mod tiny )  :arg2 direction )  )  :arg2 ( pulse :mod sonic )  )  )  )  )  :degree too )
respond :arg0 ( channel :arg1-of ( carry-out :arg2-of ( modify :arg0 ( cell :arg2-of ( switch :arg0 pulse :arg1 membrane :arg1-of work )  :mod motorcycle :mod neuron )  :manner genetics )  )  )  :arg1 ( wave :mod ultrasonic )
relate :arg1 ( and :op1 ( read :arg1 ( activity :arg0 light :arg1 brain )  )  :op2 ( write :arg0 researcher :arg1 activity )  )
say :arg0 researcher :arg1 ( demonstrate :arg0 worm :arg1 ( power :poss ( procedure :arg0-of ( dub :arg1 sonogenetic )  :arg1-of ( use :arg1-of possible :arg2 ( activate :arg0 ( and :op1 brain :op2 heart :op3 muscle )  :arg1 ( range :arg1 cell )  :arg2 ( outside :op1 body )  :instrument ultrasound )  )  :mod new )  )  )
tell :arg0 ( state :name ( name :op1 california )  :name ( name :op1 guardian )  :wiki california )  :arg1 ( possible :arg1 ( procedure :mod that )  )  :arg2 ( person :arg0-of ( institute :arg1 ( brain :arg1-of deep :arg1-of ( replace :arg0 day )  :mod-of stimulation )  )  :arg0-of ( research :arg1 ( electricity :arg1-of deliver :arg1-of ( pulse :arg0 ( procedure :mod invasive )  :arg2 ( person :arg1-of ( treat :arg0 brain :arg2 disease :mod-of ( symptom :mod-of of )  )  :mod into )  )  )  )  :name ( name :op1 sreekanth )  )  :purpose 1
contrast :arg1 ( react :arg0 ( worm :mod nematode )  :arg1 ultrasound :mod usual :polarity - )  :arg2 ( find :arg0 ( person :name ( name :op1 chalasani )  )  :arg1 ( they :arg0-of ( surround :arg1 ( fluid :arg0-of ( bubble :arg1-of contain :mod microscopic )  )  )  )  )
amplify :arg0 ( bubble :arg1-of ( find :arg0 he )  )  :arg1 ( wave :arg0-of ( pass :arg1 worm :arg4 inside :time then )  :mod ultrasonic )
ion :mod-of ( channel :arg0-of ( find :arg1 of :time membran :time ( worm :mod-of ( cell :mod some )  )  )  :arg2-of ( call :arg1 ( structure :arg1-of amplify :arg1-of act :arg1-of ( wave :arg0 ultrasound )  )  )  :mod 4 )
say :arg0 ( report :location ( country :name ( name :op1 nature :op2 communications )  )  )  :arg1 ( and :op1 ( open :arg0 ion :arg1 ( channel :mod this )  )  :op2 ( activate :arg0 ( wave :mod sound )  :arg1 ( cell :arg0-of ( attach :arg1 they )  )  )  )
neuron :arg0-of ( carry :arg1 channel :arg1-of ( cause :arg0 ( modify :arg0 genetics :arg1 worm :time ( nematod :arg1-of ( control :arg0 ultrasound )  )  )  )  )  :mod ( motorcycle :poss-of trp :poss-of ( 4 :mod-of ion )  )  :quant some
and :op1 ( amplify :arg0 ( he :arg0-of ( apply :arg1 ultrasound :arg2 ( creatur :arg1-of modify )  )  )  :arg1 ( wave :mod sound )  :arg2 microbubbl )  :op2 ( transmit :arg1 ( worm :arg1-of ( switch :arg0 they :arg2 ( neuron :arg1-of modify :mod motorcycle )  )  )  )
and :op1 ( similar :arg0 procedure :arg1 ( tool :arg0-of ( allow :arg1 ( switch :arg0 ( scientist :arg1-of ( pulse :arg2 light )  )  :arg1 neuron )  )  :mod groundbreaking )  :arg2 optogenetic :mod some )
contrast :arg2 ( say :arg0 ( person :name ( name :op1 chalasani )  )  :arg1 ( possible :arg1 ( advantage :mod some :prep-with sonogenetic :topic technique )  )  )
possible :arg1 ( and :op1 ( send :arg0 ( light :op1-of unlike )  :arg1 ( fibre :mod optic )  :arg2 ( location :arg1-of desire :location ( inside :op1 brain )  )  :arg4 down )  :op2 ( pass :arg0 frequency :arg1 ( wave :arg0-of ( send :arg1 brain :arg1-of possible )  :arg1-of ( low :arg0 ( skull :part top )  )  :mod ultrasound )  :path ( unhinder :mod tissue )  )  )
say :arg0 ( we :arg0-of ( believe :arg1 that )  :arg0-of ( use :arg1 it :arg2 virus :op1-of ( and :op2 gene :op3 therapy :op4 therapeutic )  )  :arg0-of ( target :arg1 human :arg2 neuron )  )  :arg1 ( person :arg1-of ( treat :arg0 neurological :arg2-of ( signal :arg0 susceptible :arg1 clinical :arg1-of possible :arg1-of possible :mod ultrasound )  :arg2-of ( set :arg0 temporary :arg1 certain )  )  :name ( name :op1 &quot; )  )
add :arg0 he :arg1 ( possible :arg1 ( focus :arg0 ( application :mod other )  :arg1 ( and :op1 ( produce :arg1 insulin )  :op2 cell )  :arg2 ( cell :arg1-of muscle )  )  )
doorstep :arg0-of ( torture :arg1 right :arg2 ( equipment :mod law )  )
advert :arg1 ( arm :arg1-of trade :arg1-of ( shame :arg0 ( country :name ( name :op1 britain )  :wiki united_kingdom )  )  )
watch-out :arg1 ( organization :arg0-of ( oppose :arg1 ( arm :mod-of ( video :mod fair )  )  )  :name ( name :op1 amnesty :op2 international )  :wiki amnesty_international )
drone :arg0-of kill
shatter :arg1 ( iron :arg1 leg )
bomb :quant cluster
contrast :arg1 ( cause :arg0 ( baton :arg1-of stun :mod electric )  :arg1 pain :op1-of and )  :arg2 ( leave :arg1 trace :polarity - )
highlight :arg0 ( government-organization :arg0-of ( flog :arg1 weapon )  :arg0-of ( govern :arg1 ( country :name ( name :op1 britain )  :wiki united_kingdom )  )  :arg0-of ( excel :arg1 centre :arg2 ( city :name ( name :op1 london )  :wiki london )  )  :arg0-of ( will :arg1 ( and :op1 ( arm :arg0-of ( sharp :arg1 spoof )  :arg1-of ( advert :mod that :mod this )  :mod-of fair :op6-of ( and :arg1-of ( doubt :polarity - )  :op1 cheery :op2 voice :op3 cartoon :op4 imagery :op5 leave )  :part-of ( big :degree most :mod-of world )  )  :op2 ( organization :name ( name :op1 amnesty :op2 international )  :wiki amnesty_international )  :op3 via :op4 defence :op5 ( equipment :mod ( international :mod-of jamboree )  )  :op6 ( location :name ( name :op1 docklands )  :wiki london_docklands )  )  )  :arg0-of ( repress :arg1 regime )  :arg0-of produce )
descend :arg0 ( weapon :mod-of fair )  :arg1 ( regime :mod authoritarian )  :location ( city :arg1-of relate :name ( name :op1 london )  :wiki london )
contrast :arg1 ( require :arg0 train :arg1 glance )  :arg2 ( lead :arg1 ( campaign :arg1 tube :arg1-of separate )  :arg4 ( poster :arg1-of ( crop-up :arg1-of ( stop :mod bus :op1-of and )  )  :quant many )  :mod also )
announce :arg0 important :arg0-of ( travel :arg1 dlr :arg2 18th )  :arg1 15th :op1-of ( and :arg1-of ( use :arg0 interrogative :arg1-of read :time ( date-entity :month 9 )  )  :op2 ( organization :name ( name :op1 &quot; )  )  :op3 font :op4 ( brand :arg0 1 :arg1 tank :arg2 ( line :arg0-of ( turn :arg1 into )  )  )  :op5 ( image :op1-of of )  )
descend :arg0 ( person :arg0-of ( swarm :arg1 arm )  :arg0-of ( request :arg1 ( help :arg0 customer :arg1 ( stop :arg1 fair )  )  )  :arg0-of ( deal :arg2 arm )  )  :arg1 ( 9 :mod this )
exhibit :arg0 ( poster :mod 300 )  :arg1 ( work :arg0 artist :arg1 of )  :arg2 ( design :arg1 cruel )
advertise :arg0 bus :arg1 ( planet :arg1-of ( claim :arg0 ( person :arg0-of stop :arg0-of ( gain :arg1 access )  :arg2-of ( pack :arg0 6 :arg1 of :arg2-of ( pack :arg0 ( city :name ( name :op1 london )  :wiki london )  :arg1 ( space :arg1-of ( use :arg1-of distribute :arg2 around :arg2-of ( help :arg0 it :arg2-of ( call :arg0 collective :arg1 ( group :arg1-of patrol )  :arg1-of special )  )  )  :arg1-of hack )  )  )  :name ( name :op1 allen )  :poss-of key :wiki - )  :arg2 around )  )  :arg2 space
flypost :arg2-of ( amuse :arg0 ( city :location-of transport :name ( name :op1 london )  :wiki london )  :arg1 by :polarity - )  :mod this :mod-of vandalism
spoof :mod-of ( ad :arg1-of ( produce :arg0 ( organization :mod-of 1 :name ( name :op1 special :op2 patrol :op3 group )  )  :manner collective )  )
say :arg0 ( and :op1 ( person :name ( name :op1 gavin :op2 grindon )  )  :op2 curator :op3 design :op4 ( lecture :location ( organization :name ( name :op1 university )  :part-of ( province :name ( name :op1 essex )  :wiki essex )  )  )  )  :arg1 ( become :arg1 ( artist :arg0-of ( seek :arg1 ( take :arg1 ( work :mod politics )  :arg3 ( audience :location ( outside :op1 galleri )  )  )  :op1-of and )  )  :arg2 ( question :degree more )  )
move :arg1 ( work :arg0 ( lot :quant-of ( artist :arg1-of ( protest :arg1-of ( move :arg2 ( they :poss-of ( world :mod real )  :poss-of art )  )  )  )  )  :arg1 ( impact :arg1 society )  :arg3 activist )  :purpose realize
poster :arg0-of ( greet :arg1 ( person :arg0-of ( commute :arg1 tube )  )  )  :arg1-of ( trade :arg0 ( oppose :arg1 arm :mod another )  )
and :arg0-of ( work :arg1 ( artist :mod voiceov )  :arg1-of free :duration ( temporal-quantity :quant 24 :unit hour )  :mod also )  :op1 ( design :arg3-of ( work :arg0 pro :arg1 ( organization :arg0-of ( create :arg1 ( and :op1 ( watch :arg1 ( video :mod ( organization :name ( name :op1 amnesty )  )  )  )  :op2 ( company :name ( name :op1 facebook )  :quant more :wiki facebook )  )  )  :mod ( agency :mod ad )  :name ( name :op1 vccp )  )  )  :mod graphic )
advertise :arg1 ( arm :op1-of ( and :op2 calendar :op3 ( think :arg1 fair )  :op4 ( let :arg0 ( organization :arg0-of ( silence :arg1-of surround :arg2 ( strike :arg0 lev )  )  :arg1-of ( have-org-role :arg0 creative :arg2 director )  :name ( name :op1 vccp )  )  :arg1 ( give :arg1 ( space :arg1-of ( excel :arg0 blank )  )  :arg1-of ( campaign :arg0 they )  :arg1-of ( try :arg1-of avoid )  :arg2 they )  )  )  :part-of of )
contrast :arg1 ( create :arg0-of ( realistic :arg1 more )  :arg0-of ( advert :arg1 corporation )  :arg0-of ( ram :arg1 ( person :arg0-of ( bright :arg1 home )  :arg1-of ( arrest :arg0 more )  :mod colour :op1-of ( and :op2 animation )  )  )  :arg1 dodgy :arg1-of ( toy :arg0 they )  )
say :arg0 fair :arg1 davi :arg2 ( person :arg1-of ( concern :arg0 ( help :arg0 ( they :arg0-of ( do :arg0-of ( fantastic :arg1 amnesty_international )  :arg1 job )  )  )  :arg1-of ( raise :arg2 ( sell :arg0 about :arg1 of :arg2 ( torture :arg0 ( law :polarity - )  :arg1 equipment )  )  )  )  :name ( name :op1 tom )  :wiki tom_brady )
doorstep :arg3-of ( trade :arg1 ( equipment :arg2-of torture )  :arg1-of ( ensure :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 uk )  :wiki united_kingdom )  )  )  :op2-of ( and :op1 ( take :arg0 ( we :arg0-of ( need :arg1 amr-unknown :time now )  )  :arg1 action )  )  )  :polarity - )  :poss we
come :arg1 ( art :arg0-of ( surround :arg1 arm :arg2 fair )  :mod ( creative :degree most )  )  :arg3 ( organization :arg3-of ( flog :arg0 exhibitor :arg1 ( product :mod euphemistic :mod ( fantastically :poss-of perhaps )  )  )  :name ( name :op1 excel )  :op1-of inside )
reveal :arg1 ( press :arg1-of ( release :arg0 ( country :arg0-of ( launch :location shoulder :manner ( product :name ( name :op1 rs-24 )  :wiki rs-24_yars )  :manner 4c )  :name ( name :op1 us )  :poss-of army :wiki united_states )  )  )
charge :arg0 unique :arg1 warhead :arg2 that :arg3 ( shape :arg1 ( effect :arg0 armour :arg1 inside :arg1-of target :arg1-of deliver :prep-on-of outstanding )  :arg2-of ( include :arg1 this )  )  :prep-on behind
pleasant :arg0 it :arg1 whatever :polarity -
rule :mod ( live :arg0 ( person :arg0-of study :consist hall )  )  :mod gold
contrast :arg1 ( and :arg1-of moral :op1 ( person :arg0-of ( study :arg1 oblivious )  :arg2-of ( move :arg0 i :arg1 ( 11 :poss it :quant-of ( temporal-quantity :unit year )  )  :time since )  :poss-of hall :poss-of 19 )  :op2 ( believe :arg0 old :arg1 still )  :op3 beret :op4 relativism :op5 ( annoy :arg1 ( i :arg2-of ( recall :arg0 only :arg1 ( i :arg1-of ( strain :arg0 year :arg1-of smile )  )  :time now )  )  :op1-of ( and :op2 numerous :op3 ( complain :arg0 other :arg1 lengthy )  :op4 about )  )  )
possible :arg1 ( distil :arg0 most :arg1 ( rule :arg1-of simple )  :arg2 ( i :arg0-of ( learn :arg1 8 )  )  )
possible :arg1 ( range :arg0 ( move :arg2 hall )  :arg1 ( terrify :degree total )  :arg2 nerve :arg3 ( rack :manner mildly )  )
cause :arg0 ( guy :poss-of marmite :poss-of ( yeast :mod just )  )  :arg1 ( hate :arg0 ( i :arg2-of ( extract :arg1 hahaha )  )  :arg1 honest :op3-of ( and :op1 ( person :arg0-of ( mean :arg1 ( babble :arg0 ( you :arg1-of ( stand :time year )  )  )  )  :arg1-of ( tell :arg0 you :arg2 i :arg3 you :op1-of ( and :op2 gap )  )  :arg1-of ( tempt :arg0 it )  )  :op2 ( love :arg0 you )  :op4 room )  )  :manner serious
take :arg1 breathe
and :op1 ( take :arg1-of ( help :arg2 other :purpose ( and :op1 ( ask :arg2 question )  :op2 ( show :arg1 interest )  )  )  :mod too )
and :arg1-of ( steer :arg0 it )  :arg1-of ( converse :arg0 you )  :op1 ( help :arg0 ( you :arg0-of ( scout :arg1 ( person :arg2-of ( resemble :arg1 versu )  )  )  )  )  :op2 ( talk :arg0 ( you :arg0-of ( fire :arg0-of ( dispense :arg1 extinguisher )  :arg1 eyelash :op1-of ( and :op2 they )  )  )  :arg1 even :polarity - )
give :arg1 space :arg2 person
contrast :arg1 they :arg2 ( and :op1 ( person :arg0-of ( morph :arg1 into :arg2 reception )  :part ( room :part-of ' :part-of often )  )  :op2 drink :op3 movie :op4 night :op5 venu :op6 commune :op7 hangout :op8 spot :op9 ( adjust :op1-of their :op3-of ( and :op1 ( person :mod also )  :op2 ( dress :arg0 where :arg1 underwear )  )  )  )
mean :arg1 relation :arg2 ( do :arg0 even :arg1 ( think :arg1 ( start :arg0 about :arg1 university )  :polarity - )  :arg2-of relate )
introvert :arg0-of ( deal :arg1 university :mod raw )
and :op1 ( recommend :arg0 room :arg1 ( retreat :arg1 yet )  )  :op2 ( form :mod hall :mod many :op1-of inter-agency )  :op3 ( friendly :arg0 ( culture :arg1-of ( stroll :arg0 room )  )  :arg1 friendship :arg2 lifelong )  :op4 society :op5 conducive
possible :arg1 hell :arg1-of ( try :arg0 ( someone :domain that )  :arg1-of recharge )
contrast :arg1 ( need :arg0 ( we :arg0-of ( expend :arg2 ( i :arg0-of ( interact :arg1 you )  )  )  )  :arg1 i )  :arg2 ( and :arg1-of resemble :arg1-of ( say :arg0 ( you :arg0-of ( allow :arg1 ( culture :mod nothing )  )  )  )  :arg1-of ( want :arg0 you :arg0-of ( cause :arg1 ( go :arg0 you :arg1 i :arg1-of possible :arg4 back :direction away :purpose-of energy )  )  )  :op1 i :op2 ( continue :arg0 i :arg1 friendship )  )
and :arg1-of ( knock-down :arg0 ( person :arg0-of study :arg1-of ( exhaust :concession-of ( try :arg2 sense )  )  :mod fellow )  :arg2-of ( instead-of :arg1 ( text :mod maybe )  )  )  :op1 socialise
speak :arg1 knock-down
cause :arg0 ( policy :arg1-of ( study :arg0 ( person :arg1-of ( invite :arg0 ( he :arg1-of ( lock :arg0 i :polarity - )  )  )  :mod-of hall :poss ( guy :quant 1 )  )  )  )  :arg1 door :mod that
see :arg0 he :arg1 ( thing :quant some )
make :arg1 ( person :arg0-of ( have-rel-role :arg2 friend )  )  :arg2 bake
welcome :arg0 ( person :arg0-of ( introduce :arg1 door :time-of ( seem :arg1 ( less :degree marginally :op1 weird )  :op1-of browni :op1-of plate )  )  :arg1-of ( knock-down :arg0 ( you :arg0-of ( bake :arg1 height :arg2 off )  :arg0-of ( start :arg1 university :time since )  )  :time mania )  )  :arg1 ( less :arg1-of ( question :arg0 ( you :arg0-of ( personal :arg1 ( ask :arg0 i :time ( now :time-of ( smile :arg0 you :arg1 ( something :location-of ( bake :arg0 i :arg1 neighbourhood )  )  )  )  )  )  )  )  )  :time 1950
way :arg1-of ( have-rel-role :arg0 person :arg2 friend )  :domain ( treat :arg1-of offer :mod home )  :mod great
and :op1 ( feel :arg1 ( oblige :arg1 housemat :arg2 chat )  )  :op2 ( end :arg1-of possible :arg2 ( associate :arg1 face :arg2 ( surprise :mod tasty )  )  )
subject :arg0 this :arg1 ( you :arg0-of ( bake :mod decent )  )  :arg1-of obvious
asleep :arg1-of ( pretend :arg0 person :arg1-of ( likely :degree more :op4-of ( and :arg1-of ( lump :arg1-of ( fuse :arg2 poorly )  )  :op1 flour :op2 sugar-cane :op3 fat )  )  )  :time ( knock :arg0 you )
crime :arg0 ( food :arg1-of ( steal :arg1-of ( study :arg0 ( person :consist hall )  )  )  )  :mod common
contrast :arg1 ( take :arg0 ( chicken :arg1-of nick :arg1-of ( obvious :arg0 interrogative )  :mod someone )  :arg1 ( drop :arg1 milk )  :purpose ( steal :arg1 tea )  )  :arg2 theft
check :arg1 ( person :arg0-of ( own :arg1 milk )  )  :arg1-of double
tell :arg0 you :arg1 yourself :arg2 ( they :arg1-of chance )  :purpose ( help :arg0 ( they :arg0-of ( seethe :arg1 inside )  )  :arg2 even )
contrast :arg1 ( try :arg0 i :arg1 sympathi :op3-of ( and :op1 ( annoy :arg0 it :arg1 ( stuff :arg1-of ( steal :arg0 someone )  )  )  :op2 ( you :arg0-of deal :arg0-of ( taint :arg1 ( she :arg0-of ( steal :arg1 that )  :arg0-of ( wash :arg1 milk )  :arg0-of ( punish :arg1 liquid :degree ( more :degree-of maturely )  )  )  )  )  )  )
jail :mod-of now :poss she
recommend :arg0 you :arg1 ( study :arg0 ( person :arg0-of ( keep :arg1 noise )  :arg0-of ( sleep :polarity - )  )  :op1-of or )
contrast :arg1 decent :arg1-of ( cause :arg0 human :polarity - )  :arg2 ( you :poss-of ( proverbial :mod-of ( person :mod ( just :mod-of this )  :poss-of house :poss-of glass )  )  )
cause :arg0 ( and :arg1-of ( cause :arg0 ( she :arg0-of ( turn :arg1 down )  :arg0-of ( neighbor :arg1 they )  :arg2-of ( ask :arg0 i :arg1 ( girl :poss-of corridor )  )  :poss-of mind )  )  :op1 drum :op2 bas )  :arg1 ( and :op1 ( she :poss-of morning :poss-of exam )  :poss it )  :polarity -
respond :arg0 ( they :arg0-of turn )
let :arg0 ( she :arg0-of ( shut-down :arg1 they :arg4 ( country :name ( name :op1 5am )  )  :time final )  )  :arg1 ( sleep :arg1 ( lock-up :arg1 ( door :arg1-of ( leave :arg2 ( exam :mod ( hour :unit-of ( temporal-quantity :quant 3 )  )  )  )  )  )  :duration ( temporal-quantity :quant 2 :unit hour )  :time ( before :op1 ( blast :arg1 music )  )  )  :manner kindly
move :arg0 you :arg1 interrogative :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( romantic :arg1 future )  )  :arg2 spouse )  :arg2 it :manner ( same :arg1 hall )  :polarity -
and :arg1-of possible :op1 ( see :arg0 they :arg1 ( and :op1 ( person :arg0-of ( have-rel-role :arg1 ( you :arg0-of ( mistake :arg1 ( awkward :mod bitingly )  :arg2 knuckle )  )  :arg2 spouse )  :arg1-of ( hook-up :arg0 conversely :polarity - )  :arg1-of ( have-rel-role :arg0 ( person :mod mutual :quant all )  :arg2 friend )  :mod future )  :op2 ( break-up :arg0 it )  )  :condition-of of :mode interrogative )  :op2 day :op3 ( watch :arg0 they :op1-of custody )  :quant every
contrast :arg1 ( want :arg0 ( heart :arg0-of want )  )  :arg2 ( try :arg1 ( talk :arg1 ( sense :arg1 definite :degree some )  :arg2 groin )  :condition ( person :arg0-of ( have-rel-role :arg2 spouse :polarity - :time future )  :domain ( hallmate :arg1-of hot )  )  )
realize :arg0 ( you :arg0-of ( leave :arg1 key )  )  :arg1 someone :arg1-of ( exhilarate :arg0 ( moment :arg0-of ( fine :arg1 ( and :op1 ( bully :arg0 ( line :location ( room :location-of ( unlock :arg1 inside )  )  )  :arg1 prank )  :op2 ( seem :arg1 it )  )  )  )  )
contrast :arg1 ( funny :domain ( prank :mod good )  )  :arg2 ( take :arg0 reverse :arg1 moment )
contrast :arg1 ( and :op1 ( room :part-of someone )  :op2 ( shampoo :arg1 trash )  )  :arg2 ( and :arg1-of teach :arg1-of value :op1 ( amuse :arg1 ( something :arg1-of hide )  )  :op2 lesson :op3 security )
contrast :arg1 ( do :arg0 ( you :arg0-of ( put :arg1 ( water :arg1-of ( of :arg0 glass )  )  :arg1-of freeze :arg1-of ( put :arg1-of lock-up :op2-of ( and :op1 door :op3 key )  )  :arg2 then )  )  :arg1 ( tack :arg1 possession :degree ( more :degree-of ceiling )  )  :polarity - )
earner :arg0-of ( single :arg1 ( person :arg0-of ( have-rel-role :arg2 parent )  )  )  :arg1-of ( low :arg0 ( house :beneficiary refugee )  )
build :arg0 ( person :mod ( entrepreneur :mod property )  :name ( name :op1 markus :op2 gildner )  :poss-of ( money :quant much )  )  :arg1 ( house :mod terrace :poss-of - )  :beneficiary person :location ( town :location ( country :name ( name :op1 middle :op2 franconian )  )  :name ( country :name ( name :op1 eckental )  )  )
contrast :arg1 refugee :arg2 ( and :arg2-of ( contrast :arg1 ( need :arg1 ( refugee :polarity - )  :arg1-of ( accommodate :arg0 only )  :arg1-of ( sign :arg0 also )  :arg1-of ( single :arg0 also )  :arg1-of mean )  )  :op1 ( person :arg0-of ( low :arg1 income )  :arg1-of ( have-rel-role :arg0 person :arg2 mother )  )  )
say :arg0 ( i :arg0-of ( demonstrate :arg1 amr-unknown :arg2 ( build :arg0 it :arg1 ( economy :arg1-of ( interview :arg0 year :mod old )  :mod ( well :mod-of nowadays )  )  :op1-of ( and :arg1-of ( possible :mod still )  )  )  )  )  :arg1 44
push :arg0 ( thousand :mod refugee )  :arg1 way :arg2 ( market :arg0-of house :op1-of onto )
believe :arg0 ( person :name ( name :op1 marcus :op2 gildner )  )  :arg1 ( know :arg0 ( he :poss-of ( project :arg0-of ( build :arg1 ( house :mod terrace )  :arg2 refugee )  :mod this )  )  :arg1 ( possible :arg1 ( develop :arg0 entrepreneur :arg1 ( house :mod economical )  :arg1-of quick )  )  )
come :arg0 ( thousand :mod refugee )  :arg1 ( thing :name ( name :op1 mr :op2 gildner )  )  :time ( onto :op1 ( market :arg0-of house )  )
offer :arg0 ( solution :mod amr-unknown )  :arg1 you :mode interrogative
and :op1 container :op2 ( gym :arg1-of ( mass :mod-of accommodation )  )  :op3 ( sustain :arg1 ( person :name ( name :op1 markus :op2 gildner )  )  :polarity - )
cause :arg0 ( stay :arg1 person :location here )  :arg1 most
need :arg0 we :arg1 ( space :arg0-of house :arg0-of ( suffice :arg1 ( next :mod-of ( temporal-quantity :unit decade )  )  )  )  :mod also :purpose ( accommodate :arg1 ( flux :arg1 refugee )  )
terrace :mod-of ( house :arg1-of ( standard :degree total )  :domain-of solution :mod storey :mod 3 )
need :arg0 ( house :mod terrace )  :arg1 ( space :mod little )  :manner gildn
integrate :arg1-of ( facilitate :arg0 it )
differ :arg0 ( person :arg1-of ( house :arg2 ( block :consist-of flat )  )  )  :arg1 it
consist :arg0 ( project :arg1-of ( pilot :arg0 each )  :arg2-of ( build :arg1 ( house :mod each )  :time current )  )  :arg1 4 :arg2 ( unit :mod ( live :arg0 ( person :arg0-of ( seek :arg1 asylum )  )  :arg1 6 )  :quant 3 )
and :arg0-of ( live :mod-of ( unit :mod each )  )  :op1 ( bedroom :quant 2 )  :op2 bathroom :op3 kitchen :op4 lounge
say :arg0 ( i :arg1-of ( return :arg0 back )  )  :arg1 ( and :op1 ( possible :arg1 it )  :op2 now :op3 peace )  :quant ( many :quant-of refugee )
possible :arg1 ( convert :arg1 house :arg2 ( use :arg1-of differ )  :mod then )
cost :arg1 amr-unknown :mode interrogative
gildn :arg0-of ( live :arg1 ( price :arg0 ( land :poss-of 160 )  :arg1 ( m :mod ( amount :mod house )  )  )  :mod-of space )
manageable :domain that
construct :compared-to-of ( temporal-quantity :quant 6 :unit month )
reasonable :arg1 that
plan :arg1 ( regulate :arg0 build :arg1-of do )  :arg1-of ( complicate :mode interrogative :arg0 regulate )
gildn :arg1-of ( regulate :arg0 build :arg2-of ( accord :arg1 ( carry :arg0 i :arg1 project )  )  )
and :op1 ( threaten :arg0 sword :arg1 ( project :mod ( build :arg1-of special )  )  :time always )  :op2 ( regulate :arg0-of complicate :arg0-of park :mod space )
scary
terrace :mod-of ( house :manner-of ( need :arg0 ( anyone :arg0-of ( create :arg1 flat )  )  :arg1 ( place :mod ( park :arg1 3 )  :quant 3 )  :arg1-of ( assume :arg0 it :time still )  )  )
except :domain-of ( town :location-of ( space :mod ( enough :polarity - )  )  )
and :op1 ( person :arg0-of ( seek :arg1 ( asylum :op1-of - )  )  :op2-of ( and :op1 refugee :poss-of car )  )
react :arg0 ( person :arg0-of reside :poss-of terrace )  :arg1 ( project :mod house )  :arg2 amr-unknown :mode interrogative
accuse :arg0 some :arg1 i :arg2 ( build :arg0 gildn :arg1 ( accommodation :mod luxury )  :beneficiary ( person :arg0-of ( seek :arg1 asylum )  )  )
true :domain that :mod definite :polarity -
contrast :arg1 ( afford :arg0 ( you :arg0-of compete :arg0-of ( house :arg1 ( bad :arg1 interrogative )  )  )  )  :arg2 -
contrast :arg1 truth :arg2 ( accommodation :arg1-of ( build :arg0 ( country :location-of ( boom :arg0 we :arg1 ( temporal-quantity :quant 5 :unit ( year :mod last )  )  :arg1-of ( build :arg0 gildn )  )  :name ( name :op1 germany )  :wiki germany )  )  :arg1-of ( afford :arg0 ( anybody :mod hardly )  :arg1-of possible :arg1-of ( long :mod any )  )  :mod luxury )
give :arg0 ( project :poss i )  :arg1 ( message :topic ( need :arg0 ( person :arg1-of normal )  :arg1 ( space :arg0-of house )  :mod too )  )
contrast :arg1 ( accommodation :arg1-of ( need :arg0 ( refugee :mod ( only :polarity - )  )  :mod also )  )  :arg2 ( and :op1 ( person :arg0-of ( have-rel-role :arg1 ( income :arg1-of low )  :arg2 mother )  :arg1-of single )  :op2 person )
and :op1 ( build :arg1-of ( possible :arg1-of ( demonstrate :arg0 i )  :mod still )  )  :op2 economy :op3 nowadays
this
and :op1 ( study :arg0 44 :arg1 ( technology :mod microsystem )  :location ( country :name ( name :op1 regensburg )  )  )  :op2 ( work :arg0 ( person :name ( name :op1 marcus :op2 gildner )  )  :arg1 ( analyze :arg1 environment )  :time initial )
io :arg0-of ( release :arg1 ( update :arg0 ( organization :name ( name :op1 apple )  )  :arg1 ( system :arg0-of ( operate :arg1 iphone )  :mod new )  :arg2 9 )  )
request :arg1 ( and :arg1-of ( possible :arg1-of ( operate :arg0 system :mod new )  )  )  :arg2 ( head :arg1 ( general :arg0-of ( select :arg1 ( update :arg1 software )  :manner then )  :arg1-of tap )  )
and :arg1-of ( install :arg0 ( you :arg0-of ( download :arg1 option )  :arg0-of ( give :arg1 ( will :arg0 phone )  :arg1-of ( ready :arg0 it )  )  )  )  :op1 then
tell :arg0 they :arg1 ( hit :arg1 that :arg1-of install :arg3 some )  :arg2 ( fail :arg1 software :arg1-of update )  :arg3 error :degree message :time ( after :time-of ( run :arg1 into )  :time-of problem )
and :op1 ( upgrade :arg1-of ( try :arg0 itun :op3-of ( or :op1 ( rush :arg1 around :arg2-of ( wait :arg2-of ( recommend :arg1 user :mod either )  )  )  :op2 ( die :arg1 that :direction down )  )  )  )
guide :arg0 phone :arg1 you :path ( rest :part-of process )
contrast :arg1 ( include :arg1 ( delete :arg1 app )  :arg1-of ( possible :op1-of ( and :op2 ( likely :arg1 that :degree less )  :op3 ( do :arg1 ( use :arg0 ( organization :name ( name :op1 apple )  )  :arg1 ( tool :arg0-of ( suggest :arg1 app :purpose ( delete :arg1 also :op1-of ( and :op2 ( install :arg1 ( update :arg1 space )  :arg1-of process :mod then :time once )  )  )  )  :arg1-of special )  )  :arg1-of easy )  )  )  :arg2 that )
cause :arg0 battery :arg1 ( or :arg0-of ( run :arg1 - )  :arg0-of ( charge :arg1 ( worth :arg1-of ( ensure :arg0 it )  )  )  :arg1-of ( near :arg2-of ( charge :arg0 phone )  )  :arg1-of ( update :arg0 while :arg1-of happen )  )
charge :arg0 since :arg1 ( go :arg0 ahead :arg1-of ( low :arg0 too )  :arg1-of ( possible :arg0-of ( lead :arg1 die )  )  :arg1-of update :arg1-of ( let :arg0 phone :polarity - )  :arg1-of ( update :arg1-of ( break :arg0 halfway )  )  )
delay :arg0 ( country :name ( name :op1 watchos )  )  :arg1 ( review :arg0 ( io :time-of ( release :arg0 9 :arg1 track :mod still )  )  :arg1 9 )  :arg2 ( and :arg1-of ( prepare :arg2 ( system :arg0-of ( operate :arg1 ever )  :mod new )  )  :op1 ( excite :arg0 more :arg1 ( good :degree most )  :degree least )  :op2 ( update :arg1 ( read :arg1 9 )  )  )
feature :arg0 new :arg1 much :op4-of ( and :arg1-of ( bring :arg0 they :op1-of 9 )  :op1 ( thing :op5-of ( and :op1 ( thing :arg1-of ( recommend :arg0 ( you :arg0-of ( sure :mod also )  )  )  :quant all )  :op2 before :op3 ( try :arg0 ( you :arg0-of download )  :arg1 checklist )  :op4 ( stop :arg0 ( we :arg0-of ( productive :arg1-of feature :arg1-of tweak :mod new :op1-of ( and :op2 speed :op3 fix :op4 ( operate :arg0 system )  )  :op4-of ( and :op1 clever :op2 ( assist :arg1-of personal )  :op3 huge )  )  )  )  )  )  :op2 wrong :op3 ( protect :arg0 you )  )
motto :mod ( only :mod-of ( person :arg0-of ( attack :mod full )  :name ( name :op1 rosberg )  )  )
know :arg0 ( person :name ( name :op1 nico )  )  :arg1 ( motto :mod only )  :arg1-of ( fight :arg0 ( he :arg0-of ( clear :arg1 ( lead :arg0 ( person :arg0-of ( attack :arg1 full )  :mod teammate :name ( name :op1 nico )  )  :arg1 merced :op1-of ( against :mod ( title :mod ( world :mod 1 )  :mod championship )  )  )  )  )  )  :beneficiary 1
stress :arg1 ( world :mod-of runn :mod-of championship )  :time ( before :time-of ( start :arg0 ( i :arg0-of ( get :arg1 more :mod that )  :arg0-of ( lose :arg1 nothing )  )  :arg1 race :time of :time ( decisive :mod-of 7 )  :time overseas )  )
and :op1 ( divide :arg0 ( point :quant 53 )  :arg1 ( champion :mod ( world :mod vice )  )  :arg2 titlehold :op1-of 2 :time ( before :op1 ( race :location ( country :location-of night :name ( name :op1 singapore )  :wiki singapore )  )  )  :time ( sunday :mod this )  )  :op2 champion :op3 ( person :name ( name :op1 hamilton )  )
and :op1 ( win :arg0 ( person :mod ( country :name ( name :op1 great :op2 britain )  :wiki united_kingdom )  )  :arg1 ( race :poss season :quant 7 )  :time already )  :op2 ( start :arg0 12 :arg1 ( thing :arg1-of ( favor :arg0 date )  :location ( state :location-of city )  :mod floodlit :name ( name :op1 grand :op2 prix )  )  :mod also )
and :op1 ( date-entity :time-of ( possible :arg1 ( win :arg0 ( person :age ( temporal-quantity :quant 30 :quant-of old :unit year )  :mod ( country :name ( name :op1 great :op2 britain )  :wiki united_kingdom )  :op1 ( precede :arg1 year )  )  :arg1 race )  )  :year 2009 )
smog :arg0-of ( influence :arg1 ( thing :location ( country :arg1-of ( clear :polarity - :time yet )  :name ( name :op1 singapore )  :wiki singapore )  :name ( name :op1 grand :op2 prix )  )  :mod any )  :location ( state :location-of city )  :op1-of wheth :time current
cause :arg0 ( fire :location ( island :arg1-of ( neighbor :arg0-of ( hanging :arg1 ( pall :arg1 smog )  :location city )  )  :location ( country :name ( name :op1 sumatra )  )  )  )  :arg1 ( day :unit-of temporal-quantity )
club :arg1-of ( have-org-role :arg0 ( person :name ( name :op1 kissinger )  )  :arg2 ( member :mod prominent )  )  :arg1-of bad :mod chess
of :mod ( person :arg0-of ( have-org-role :arg2 ( member :mod another )  )  :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( have-org-role :arg2 member )  :quant ( number :arg1-of ( take :arg1-of admit :arg2 ( person :arg0-of play :mod 19 )  :mod ( rank :mod it )  )  )  )  :arg2 friend )  :mod ches :mod ( country :arg0-of ( found :arg1 ago :mod ( club :mod chess )  :mod-of ( temporal-quantity :quant 3 :unit month )  )  :name ( name :op1 the )  )  )
tennis :arg1-of ( play :arg0 ( thing :op3-of ( and :op1 ( person :arg0-of ( have-org-role :arg2 member :mod new )  :arg1-of ( stay :location ( country :name ( name :op1 bad :op2 kissingen )  )  :purpose ( treat :arg1 spa :quant ( more :op1 40 )  )  )  :name ( name :name-of businessman :op1 paul :op2 gauselmann )  )  :op2 ( chess :mod passion )  )  )  )
hold :arg0 ( person :name ( name :op1 gauselmann )  :op1-of ( and :op2 ( country :name ( name :op1 espelkamp )  :poss-of town )  :op3 ( country :name ( name :op1 lübbecke )  )  )  :op1-of ( and :op2 class :op3 freeman )  )  :arg1 ( organization :name ( name :op1 federal :op2 cross :op3 of :op4 merit :op5 1st )  )
support :arg0 ( person :arg0-of ( donate :arg1-of ( accept :arg0 ( person :arg0-of ( have-org-role :arg2 chairman )  :name ( name :op1 alfred :op2 klein )  )  )  )  :name ( name :op1 gauselmann )  )  :arg1 ( club :location ( country :name ( name :op1 bad :op2 kissingen )  )  :mod chess )
possible :arg1 ( afford :arg0 ( person :arg0-of ( have-org-role :arg2 member )  :arg1-of ( take :arg1-of ( make :arg0 this )  :arg1-of possible )  )  :arg1 ( fee :mod membership )  )  :polarity -
possible :arg1 ( pursue :arg1 ( and :op1 ( work :arg1 youth )  :op2 ( search :arg1 talent )  )  :mod also )
express :arg0 ( person :arg2-of ( want :arg0 ( he :arg0-of ( see :arg1 club )  :arg0-of ( contact :arg1 tennis :arg1-of ( friendly :arg0 ( club :mod chess )  :arg2 white :manner well )  )  :arg0-of ( tie :arg1 ( town :mod spa )  )  )  :arg1 ( membership :mod-of of )  )  :name ( name :op1 gauselmann )  )
seek :arg0 ( office :mod accommodation )  :arg1 ( contact :arg1 face )  :arg2 face
group :manner together :op1-of ( and :mod society :op2 ( open :arg0 ( person :arg0-of ( mantle :arg1 foundation )  :name ( name :op1 saludis )  )  :arg1 ( point :mod contact :mod new )  :op2-of ( and :op1 ( centre-left :mod retire :mod ( thing :name ( name :op1 antonistift )  )  )  )  :purpose ( thing :name ( name :op1 graf-stauffenberg-platz )  )  )  )
possible :arg1 ( participate :arg1 course :arg2 ( advise :arg1 there :arg1-of ( obtain :arg2 addition )  )  )  :mod also
move :arg1 foundation :arg2 ( centre-left :mod ( town :mod society )  )  :source mountain
thing :name ( name :op1 graf-stauffenberg-platz )  :op1-of ( precise :degree more )
open :arg1 ( office :mod accommodation :mod new )  :arg2 ( there :quant short )
and :op1 ( centre-left :mod shop :op1-of ( next :arg1-of direct )  )  :op2 ( citizen :mod senior )  :op3 ( person :arg1-of ( advise :arg1-of ( seek :arg0-of ( receive :arg1 information :arg1-of ( effect :arg0-of nurse :time immediate )  :arg1-of ( possible :location here )  :arg2 ( issue :arg1 such :example ( or :op1 ( insure :op1-of ( and :op2 nurse :op3 health :op4 ( company :arg0-of insure )  )  )  :op2 service )  )  )  )  )  :mod other )
realize :arg0 we :arg1 ( leave :arg0 ( temporal-quantity :unit year )  :arg1 ( caregiver :mod family )  :frequency often :location alone )  :arg2 ( service :arg1-of care :mod outpatient :poss we )
raise :arg0 this :arg1 ( question :quant numerous )
cause :arg0 infrequently :arg1 ( difficult :arg0-of ( understand :arg1 ( amr-unknown :arg0-of ( head :arg1 division :arg2 service )  :arg1-of ( manage :arg2 weigand :mod new )  )  )  :arg1-of ( cause :arg0 ( use :arg0 insurer :arg1 of :arg2 complexity :arg2-of ( provide :arg0 service :arg1 by :mod ( many :mod too )  :polarity - )  )  :polarity - )  :arg1-of ( insure :op1-of ( and :op2 ' :op3 welfare :op4 ( responsible :arg0 ( person :arg0-of ( explain :purpose-of service )  :mod old )  :arg1 amadeu :manner well :mod also )  :op5 antonistift )  )  )
offer :arg0 ( office :mod accommodation :mod new )  :arg1 ( course :location ( and :op1 health :op2 wellnes )  )  :arg1-of ( prevent :arg0 apart )  :arg3 advise :mod also
take :arg1 ( person :name ( name :op1 saludis )  )  :location board :purpose this
physiotherapy :op4-of ( or :arg1-of prevent :arg1-of treat :op1 ( result :arg1 such )  :op2 fall :op3 ( train :arg1 memory )  :op5 ( available :arg2 ( offering :mod additional )  :mod also )  )
complement :arg0 ( person :name ( name :op1 saludis )  :op1-of ( and :arg1-of ( offer :arg0 ( centre-left :mod citizen :mod senior )  )  )  )  :arg1 ( other :mod each )  :arg1-of perfect
represent :arg0 ( person :arg1-of prevent :name ( name :op1 saludis )  )  :arg1 ( and :op1 precaution :op2 rehabilitate )
and :op1 ( citizen :arg0-of ( have-org-role :arg1 of :arg2 director :arg2-of ( manage :arg1 ( it :arg1-of ( describe :arg0 saludi )  )  )  )  )  :op2 centre-left :op3 ( care :arg1 heike )  :op4 ( nurse :arg0 senior :arg1 amr-unknown )
see :arg0 ( person :arg0-of ( manage :arg1 ( change :mod democracy )  )  :quant both )  :arg1 reason :path ( behind :op1 ( open :arg0 ( town :mod-of centre-left )  :arg1 ( office :mod accommodation :mod new )  )  )
make :arg0 this :arg1 ( essential :domain ( infrastructure :location ( district :location ( country :name ( name :op1 bamberg )  )  :mod individual :wiki pulwama_district )  :mod decentralise :mod good :time future )  )
underline :arg0 ( person :arg0-of ( isolate :arg1 ( person :arg0-of ( gather :mod ( society :arg1-of regular )  )  :arg0-of ( offer :arg1 ( and :op1 ( activity :arg1 numerous )  :op2 ( program :op1-of ( and :arg0-of ( extend :arg1 invitation :mod this )  )  )  )  )  :arg2-of ( deal :arg0 office :arg1 ( dedicate :arg0 also )  )  :mod old )  )  :arg0-of ( have-org-role :arg2 mayor )  :arg0-of ( open :arg1 accommodation :mod-of ceremony )  :name ( name :op1 furthermore )  )  :arg1 furthermore
familiarize :arg1 ( environment :location-of ( live :arg1 thu :arg1-of ( enable :arg0 ( and :arg1-of ( make :arg0 ( foundation :arg1-of ( contribute :mod big )  )  )  :op1 ( possible :arg1 ( depend :arg0 ( citizen :mod senior )  :arg1 society :polarity - )  )  )  )  )  )
and :mod 10 :op1 ( friday :mod-of ( 12 :mod ( 9 :location a.m. )  )  :op2-of ( and :op1 wednesday :op3 ( thursday :op2-of ( and :op1 tuesday )  )  :op4 ( saturday :domain ( office :arg1-of ( open :op1-of 6 :time monday )  :mod ( accommodation :mod-of ( p.m. :quant 4 )  )  )  )  )  :value ( 2 :location p.m. )  )
date-entity :mod ( organization :name ( name :op1 eintracht :op2 bamberg )  :part-of ( organization :name ( name :op1 würzburger :op2 kickers )  :time 6 )  )  :month 10
mean :arg0 ( person :arg0-of ( have-org-role :arg1 now :arg2 official )  :arg0-of ( match :arg1 leaguer )  :poss-of fixture )  :arg1 it :arg2 ( possible :arg1 kicker :arg1-of ( settle :arg0 würzburg :arg1-of ( repair :arg0 ( 6 :mod-of ( date-entity :month 10 )  )  :arg1-of ( work :arg0 ( stadium :poss-of ( date :poss now )  )  )  )  :polarity - )  )  :op1-of after
schedule :arg0 last :arg1 ( meet :arg0 ( organization :mod ( organization :name ( name :op1 fc )  )  :name ( name :op1 eintracht :op2 bamberg )  :op1-of ( and :op2 ( person :mod ( state :name ( name :op1 bavaria )  )  :mod-of ( cup :consist-of ( pool :mod football )  :quant 16 )  )  )  )  :arg1 ( organization :name ( name :op1 fc :op2 würzburger :op3 kickers )  :poss league )  )  :mod final :time now
kick :arg0 7 :arg1 stadium :arg1-of match :arg2 ( off :mod-of ( tuesday :quant ( 6 :mod-of ( date-entity :month 10 )  )  )  )
say :arg0 we :arg1 ( organization :name ( name :op1 &quot; )  )  :arg1-of ( plan :arg0 ( we :arg0-of ( open :arg1 now :arg2-of ( confirm :arg0 ( organization :name ( name :op1 &quot; )  )  :arg1 ticket :arg1-of ( manage :arg0 team )  )  :op2-of ( and :arg1-of ( know :arg0 we :time now )  :arg1-of possible :op1 that )  )  :arg1-of ( match :arg0 happy )  )  :time now )
something :arg1-of ( special :arg0 ( we :arg1-of ( play :arg0 ( team :poss league )  )  :poss-of ( team :poss it )  )  )
hope :arg0 we :arg1 ( number :mod ( large :location-of - )  )  :arg1-of ( cause :arg0 and )  :purpose ( appeal :arg0 ( game :mod floodlit )  :arg1 spectator :arg1-of ( special :arg2 reason )  )
and :arg2-of ( move :arg0 - :arg1 ( organization :mod ( organization :name ( name :op1 fc )  )  :name ( name :op1 eintracht :op2 bamberg )  )  :duration last :prep-with ( victory :prep-against ( league :mod ( district :poss-of 1 )  :op1-of 16 :poss 3 :poss - )  :prep-with-of 3 :prep-with-of 1 :prep-with-of 1 )  )  :op1 ( organization :name ( name :op1 fc :op2 oberhaid )  )  :op2 home :op3 ( region :mod-of league )  :op4 ( organization :name ( name :op1 fc :op2 schweinfurt )  )  :op5 2
and :op1 ( receive :arg0 winn :arg1 ( compete :arg1 ( date-entity :year 2016 )  )  )  :op2 ( qualify :arg1 round :time ( date-entity :mod 5000 :year ( 2017 :mod ( slash :op1 ( thing :mod-of ( club :mod-of cup )  :name ( name :op1 dfb )  )  )  )  )  )
relegate :arg1 ( organization :arg1-of ( champion :arg1-of defend )  :name ( name :op1 spvgg :op2 unterhaching )  )  :arg2 league
die :arg1 ( person :mod ( architect :mod ( thing :name ( name :op1 viennese )  )  )  :name ( name :op1 karl :op2 mang )  )  :time ( age :arg1 92 )
architecture :mod ( thing :name ( name :op1 viennese )  :source-of ( person :name ( name :op1 karl :op2 mang )  )  )  :mod-of doyen
say :arg0 ( thing :location tuesday :name ( name :op1 künstlerhaus )  )  :arg1 ( die :arg1 ( he :arg1-of ( age :arg0 ( 9 :quant 9 )  )  )  :time 5 )
and :arg1-of ( lose :arg0 ( important :degree most )  :arg1-of ( have-org-role :arg0 ( city :location-of ( report :arg0 it :arg1 20th )  :name ( name :op1 vienna )  :wiki vienna )  :arg2 member )  )  :op1 ( same :arg1 time )  :op2 architect :op3 half
and :op1 ( person :arg0-of ( study :arg1 architecture :location ( city :location-of ( organization :name ( name :op1 technical :op2 university )  )  :name ( name :op1 vienna )  :wiki vienna )  :time ( thing :name ( name :op1 world :op2 war )  )  )  :arg0-of ( bear :location ( city :name ( name :op1 vienna )  :wiki vienna )  :time ( date-entity :year 1922 )  )  :name ( name :op1 meng )  )  :op2 ( person :name ( name :op1 friedrich :op2 lehmann )  )  :op3 after
contrast :arg1 ( work :arg0 he :arg1 ( architect :mod freelance )  )  :arg2 ( have-org-role :arg0 ( date-entity :year 1952 )  :arg1 ( institute :op2-of ( and :mod also :op1 ( person :arg0-of write )  )  )  :arg2 ( director :arg0-of teach )  )
date-entity :mod ( organization :arg1-of ( have-org-role :arg0 he :arg2 president )  :mod-of ( date-entity :year 1972 )  :name ( name :op1 austrian :op2 institute :op3 for :op4 design )  )  :year 1983
and :arg0-of ( commission :arg1 he :arg2 ( establish :arg1 ( chamber :mod treasury )  )  :time 1980 )  :op1 ( thing :name ( name :op1 vienna :op2 hofburg )  )  :op2 ( renovate :arg0 ( organization :name ( name :op1 austrian :op2 theatre :op3 museum )  )  :arg1 ( organization :name ( name :op1 palais :op2 lobkowitz )  )  )
penalize :manner ( park :arg0 ( person :arg0-of ( throw :arg1 money :location warden )  :name ( name :op1 tim :op2 wiese )  )  :arg1 traffic )
attract :arg0 ( thing :mod ( football :mod ex )  :name ( name :op1 tim :op2 wiese )  )  :arg1 ( attend :location bremen :mod ( sort :arg1-of wrong )  )
contrast :arg1 ( once :time-of ( football :arg0 he :mod-of ( person :mod now :name ( name :op1 tim :op2 wiese )  :op1-of ( and :arg2-of ( play :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 ( goalie :mod ( nation :quant ex )  )  :mod also )  )  )  )  )  :arg2 wrestle
say :arg1 ( want :arg0 he :arg1 ( put :arg1 ( kg :poss ( mass :arg1-of muscle )  :quant 30 )  :time ( past :op1 ( temporal-quantity :quant 2 :unit year )  )  :arg0 he )  )
put :arg0 ( he :poss-of intellectual )  :arg1 hand :arg1-of weight :arg2 any :medium other :polarity -
penalize :manner ( notice :arg1-of ( put :arg0 ( warden :arg1-of ( see :arg0 he :condition-of ( cut :arg0 traffic :arg1 hair :arg2 ( person :name ( name :op1 wiese )  )  :location ( centre-left :poss ( country :name ( name :op1 bremen )  )  )  :time just )  :location outside )  )  :arg2 ( thing :mod white :name ( name :op1 chevrolet :op2 camaro )  )  )  )
say :arg0 ( she :arg0-of ( fine :arg1 ( money :arg1-of ( throw :arg2 newspaper :op1-of down :op2-of ( and :op1 ( abuse :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 wiese )  )  :arg2 officer )  :arg0-of ( storm :arg1 of :arg2 out )  :name ( name :op1 wiese )  )  :arg1 hairdresser )  :op3 foot )  )  )  )  )  :arg1 report
contrast :arg0 consequence :arg1 ( confirm :arg0 ( town :name ( country :name ( name :op1 bremen )  )  )  :arg1 ( thing :arg2-of accuse )  )  :arg2 ( know :arg1 ( this :mod-of ( incident :mod extraordinary )  )  :polarity - :time yet )
say :arg0 ( investigate :arg0 matter :arg1 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 &quot; )  )  :arg2 spokesperson )  )  :mod still )  :arg1 ( town :op1-of of )
decide :arg0 that :arg2 ( charge :arg1 ( after :mod only )  :arg1-of ( press :arg2 ( person :name ( name :op1 wiese )  )  )  )
destroy :arg0 ( authority :mod ( country :name ( name :op1 panama )  :wiki panama )  )  :arg1 ( plant :mod ( marijuana :quant ( person :quant 4500 )  )  )
ideal :arg0-of ( grow :arg1 ( plant :mod marijuana )  )  :domain ( ground :mod fertile :op1-of ( and :op2 ( climate :mod rainfor :poss ( person :mod ( country :name ( name :op1 isla )  )  :name ( name :op1 del :op2 rey )  )  )  )  )
and :op1 ( burn :arg0 ( authority :arg0-of ( tear :arg2 plant )  :mod ( country :name ( name :op1 panama )  :wiki panama )  )  :arg1 ( 3 :quant-of ( temporal-quantity :unit day )  )  )
man :domain-of ( old :quant ( temporal-quantity :quant 17 :unit year )  )
seek :arg0 police :arg1 ( person :arg0-of ( witness :arg1 ( incident :mod ( salmünst :mod ( thing :name ( name :op1 bad :op2 soden :op3 - )  )  )  )  )  :arg0-of ( walk :arg1 ( bad :arg0 ( friday :mod-of evening )  :arg1 direction )  :arg2 ( man :mod ( young :mod-of about )  )  )  )  :arg2 3
say :arg0 police :arg1 ( and :op1 ( group :mod ( country :name ( name :op1 afghanistan )  :wiki afghanistan )  )  :op2 ( walk :time ( behind :op1 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )  :op3 metr :op4 ( call :arg1 ( 17 :quant-of ( temporal-quantity :quant-of old :unit year )  )  :time ( wait :arg0 about :arg1 5 )  )  )
level :domain group :op1 ( station :mod petrol :mod bft :mod ( this :mod-of point )  )
stand :arg1 ( person :quant 3 )  :arg2 ( premise :mod ( station :mod petrol )  )
and :op1 man :op2 ( shout :arg1 ( youth :mod this )  )  :op3 ( hit :arg0 1 :arg1 ( face :accompanier fist )  )
and :op1 nose :op2 ( he :arg0-of ( bleed :arg1 nose )  :arg0-of ( break-up :arg1 victim :mod this )  :poss-of heavy )
run :op2-of ( and :op1 ( person :arg0-of ( have-rel-role :arg2 friend )  :quant 2 )  :op3 ( beg :arg0 1 :arg1 ( let :arg0 attack :arg1 ( go :arg0 victim )  )  )  )
take :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  )  :arg1 ( man :arg1-of injure :mod young )  :arg4 home
and :op1 ( drive :arg0 ( person :arg0-of perpetrate :arg1-of ( follow :arg0 several :arg2 group :arg4 ( home :location car )  )  )  :arg1 ( manner :mod ostentatiou )  :path past )
possible :arg1 ( see :arg0 they :arg1 car :condition-of ( go :arg0 ( man :arg0-of ( smoke :arg1 cigarette )  :arg1-of injure )  :location ( outside :op1 build )  :time soon )  )  :polarity -
attack :arg0 ( and :op1 ( attack :mod original )  :op2 ( male :mod another )  )  :arg1 he :mod again
and :op1 ( beat :arg0 ( they :arg0-of ( use :arg1 club )  )  :arg1 victim )  :op2 face :op3 upper :op4 leg
injure :arg1 ( man :arg0-of ( take :arg3 hospital )  :arg1-of ( care :mod medicine )  )
describe :arg1 ( person :arg0-of perpetrate :arg0-of ( up :arg1 now )  )  :arg2 ( thing :mod vague :mod only )
man :domain-of 11in :mod tall :mod-of ( 11in :mod about )
and :op1 brown :op1-of ( and :location-of ( dress :arg1 attack :op2-of ( and :op1 tall :op3 jeans )  )  )  :op2 ( shirt :mod white )  :quant ( about :quant-of 5in )
ask :arg0 police :arg1 100 :arg2 ( person :arg0-of ( contact :arg3 telephone :time ( date-entity :day 81 :month 61 :year 0049 )  )  :arg0-of witness :arg1-of possible :mod any )
and :op1 ( invest :arg0 ( person :arg0-of ( take :arg1 practice )  :name ( name :op1 frank :op2 müller )  )  )
take :arg0 ( and :op1 ( person :name ( name :op1 sylvia :op2 müller-gongoll )  )  )  :arg1 ( practice :arg0 frank :arg1 left )  :arg2 ( thing :name ( name :op1 ursel :op2 felstehausen )  :op1-of and )
and :arg1-of ( sponsor :arg0 ( person :arg0-of ( have-org-role :arg1 of :arg2 mayor )  )  :mod business )  :op1 ( community :mod joint )  :op2 ( person :arg0-of ( delight :arg1 ( event :arg1-of ( turn :mod this )  )  )  :arg0-of ( have-org-role :arg2 mayor )  )
contrast :arg1 fortunate :arg2 doctor :arg2-of ( mean :arg1 ( take :arg0 country :arg1 müll :arg1-of practice :arg2 ( area :quant many )  :arg3 1 :op1-of over :polarity - :time ( date-entity :month 10 )  )  )
spend :arg0 ( person :name ( name :op1 karl-heinrich )  )  :arg1 ( work :arg0 ( person :arg0-of ( retire :arg0-of while :arg1 ( person :arg0-of ( have-rel-role :arg2 husband )  )  )  :name ( name :op1 ursel :op2 felstehausen )  )  :arg3 ( succeed :arg1 ( temporal-quantity :op1-of few :unit ( month :mod next )  )  )  )  :mod time
and :arg1-of ( renovate :op2-of ( after :op1 ( period :part ( date-entity :month 10 )  )  :time-of ( reopen :arg0 ( person :name ( name :op1 müller )  )  :arg1 ( practice :arg1 6 )  :time 12 )  )  )  :op1 ( invest :arg0 he :arg1 then :arg2 ( organization :location-of premise :name ( name :op1 st.-marcellusstrasse )  )  )
and :op1 ( finish :arg1 residenci :location hospital :time time )  :op2 ( want :arg0 ( person :name ( name :op1 silvia :op2 müller-gongoll )  :op2-of ( and :arg0-of ( meet :arg1 ( person :name ( name :op1 frank :op2 müller )  )  :duration ( temporal-quantity :op1-of few :unit ( year :mod next )  )  :time-of ( like :arg0 they :arg1 ( other :mod each )  :manner immediate )  )  :op1 ( person :arg0-of ( have-rel-role :arg2 wife )  )  )  )  :arg1 ( take :arg1 practice )  :mod also )
say :arg0 ( we :mod-of ( mind :mod that :mod of )  )  :arg1 ( and :op1 ( person :name ( name :op1 &quot; )  )  :op2 ( laugh :arg0 back :arg1 it :arg1-of ( fit :arg0 müller :arg2 into )  :arg1-of ( practice :manner well :mod this )  :time always )  )
call :arg0 ( i :arg1-of ( ready :arg0 we :arg2 simple )  )  :arg1 they
like :arg0 ( person :name ( name :op1 müller )  )  :arg1 ( idea :topic ( run :arg0 couple :arg1 ( practice :arg1 future :location ( country :name ( name :op1 asendorf )  )  )  )  )
say :arg0 ( person :arg0-of ( have-rel-role :arg1 ( müll :mod old )  :arg2 patient )  :arg0-of attract :arg1-of ( contact :arg1-of ( continue :op2-of ( and :op1 proximity )  )  )  )  :arg1 39 :arg2 year
and :arg1-of ( want :arg0 ( we :arg0-of know :arg0-of ( get :arg1 ( temporal-quantity :unit year )  )  )  )  :op1 ( support :arg0 family :arg1 they :op1-of over )
see :arg0 he :arg1 ( have-org-role :arg1 benefit :arg2 boss )  :mod also
cause :arg1 ( agree :arg1 ( buy :arg0 ( müller :arg0-of practice )  :arg1 house )  )  :op1-of and
live :arg0 they :location ( country :name ( name :op1 bruchhausen-vilsen )  )  :location meantime
and :op1 ( grow :arg1 ( person :arg0-of ( have-rel-role :arg1 ( person :mod ( country :location-of hospital :name ( name :op1 sulingen )  )  :mod ( country :mod-of ( und :op1-of ( name :name-of thing :op2 rotenburg )  )  :name ( name :op1 nienburg )  )  :name ( name :op1 frank :op2 müller )  :quant 2 )  :arg2 father )  )  :arg2 there :mod also )  :op2 ( work :arg0 he :time ( after :op1 ( study :location hanov :mod medicine )  )  :time ( number :mod ( practice :mod medicine )  )  )
donate :arg0 ( he :arg1-of ( appoint :time ( date-entity :year 2009 )  :time ( county :poss ( country :name ( name :op1 diepholz )  )  )  )  :arg1-of ( involve :op2-of ( and :arg1-of voluntary :op1 ( doctor :arg3-of ( have-org-role :arg0 ( person :arg0-of consult :arg2-of ( work :arg0 he :time current )  :location ( country :name ( name :op1 sulingen )  )  )  :arg1 ( country :name ( name :op1 bruchhausen-vilsen )  )  :arg2 chief )  :mod emergency )  )  )  )  :arg1 furthermore :mod-of ( service :mod blood )
prepare :arg0 19 :arg1 ( practice :arg1-of ( have-org-role :arg0 9 :arg2 ( boss :mod new )  )  )
specialize :arg0 person :arg1 ( medicine :arg1-of ( internal :arg1-of ( while :arg0 ( work :arg0 ( person :arg1-of ( have-rel-role :arg0 ( person :part gastroenterology )  :arg2 wife )  :name ( name :op1 karl-heinrich :op2 felstehausen )  )  :arg1 ( dr :op2-of ( name :name-of thing :op1 surgeon )  )  :arg2 ( practition :arg1-of general )  )  )  )  )
want :arg0 ( person :arg0-of specialize :mod both )  :arg1 ( establish :arg0 müller :arg1 ( medicine :arg1-of internal )  :arg2 ( practitioner :arg1-of general )  )
say :arg0 endoscopy :arg1 38 :arg2 ( sylvia :mod ( old :mod-of year :mod-of ( müll :mod-of gongoll )  )  )  :arg2-of ( cause :arg0 it :arg1 ( ' :op1-of out )  )
look :arg1 room :arg2 ( modern :degree more )  :time ( after :op1 convert )
and :arg1-of ( offer :arg0 we )  :op1 ( examine :arg1 ultrasound :mod more )  :op2 ( ekg :op3-of ( and :op1 long :op2 stress )  )  :op3 ( need :arg0 we :arg1 ( room :arg1-of consult :mod more )  )
renew :arg1 ( system :mod it )  :arg1-of complete :mod also
receive :arg0 müller :arg1 ( grant :arg0 ( and :op1 ( authority :arg1-of local )  )  :arg1 ( joint :mod-of community )  :arg1-of total :arg2-of ( fund :arg1 program )  :op1-of county )
show :arg0 this :arg1 amr-unknown :op1-of ( and :op2 proud :op3 happy :op4 ( carry :arg1 ( person :name ( name :op1 &quot; )  )  :arg1-of ( practice :arg0 ( we :arg0-of ( stress :arg2 ( community :mod joint )  )  )  :mod that )  :arg2 ( person :arg0-of ( have-org-role :arg1 of :arg2 mayor )  )  )  )
say :arg0 ( person :name ( name :op1 sylvia :op2 müller-gongoll )  )  :arg1 ( and :op1 ( visit :arg0 ( person :arg0-of ( have-rel-role :arg2 patient )  :arg1-of ( quarter :mod every )  :op1-of some )  :arg1 ( practice :arg1 500 )  :arg2 ( north :part-of ( country :name ( name :op1 germany )  :wiki germany )  )  )  :op2 ( see :arg1 ( practice :arg1-of average )  :arg3 about )  )
practice :arg0 gp :location ( country :name ( name :op1 asendorf )  )  :mod another
say :arg0 ( person :name ( name :op1 ursel :op2 felstehausen )  )  :arg1 ( stay :arg1 chemist :arg2-of ( take :arg0 ( person :arg0-of say :name ( name :op1 frank :op2 müller )  )  :arg0-of ( benefit :location side :mod another )  :arg1 practice )  :location ( country :name ( name :op1 asendorf )  )  )
succeed :arg0 any :arg1 ( find :arg0 they :arg1 ( close :arg0 it :arg1 down )  :polarity - )
mean :arg1 ( familiarize :arg0 of :arg1 ( take :arg0 they :arg1 medicine :arg2 7 :arg3 over :op1-of ( and :op2 assistant :op3 ( clean :arg1 felstehausen :op1-of from )  )  )  :arg1-of see :arg1-of ( face :arg0 ( anyone :arg0-of ( visit :arg1 müller )  )  )  :arg1-of surgery :arg2 first :mod all :mod also )
and :arg1-of ( practice :arg0 doctor :location there :time ( after :op1 all )  )  :op1 ( end :arg1 era :arg1-of ( leave :arg0 ( 30 :quant-of ( temporal-quantity :unit year )  )  )  :location ( country :name ( name :op1 asendorf )  )  )
remember :arg0 ( we :arg0-of ( start :arg1 2 )  )  :arg1 ( person :arg0-of ( grin :arg1 room )  :mod only :name ( name :op1 &quot; )  )
feel :arg0 she :arg1 ( wistful :mod little )  :time ( after :op1 ( time :arg1-of ( long :degree such )  )  )
contrast :arg1 ( we :arg0-of ( live :arg1 often :op1-of ( and :op2 hohenmoor :op3 ( i :arg0-of ( sure :arg1 we )  :arg0-of ( see :arg1 of :arg2 many )  )  :op4 ( person :arg0-of ( say :arg1 ( internal :arg0 we :arg1 medicine )  )  :arg0-of ( have-rel-role :arg1 ( person :arg0-of specialize )  :arg2 patient )  )  )  )  )  :arg2 still
add :arg0 ( she :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( smile :arg1 we :arg2 6000 )  )  :arg2 husband )  )  :arg1 garden
possible :arg1 ( change :arg1 now :arg2-of ( garden :arg0 ( do :arg0 i :arg1 ( much :arg1-of up )  :polarity - :time now )  :arg1 that )  )
travel :arg1-of ( enjoy :arg0 couple :mod also :op1-of ( and :arg1-of ( have-rel-role :arg0 ( person :quant 2 )  :arg2 grandchild )  )  )
mean :arg1 ( we :arg0-of ( let :arg1 refugee )  )  :mod ( country :name ( name :op1 croatia )  :wiki croatia )
say :arg0 ( we :arg0-of ( have-org-role :arg1 ( person :name ( name :op1 &quot; )  )  :arg2 minister )  :arg1-of ( bring :arg0 ( control :arg0 border :arg1 ( south :arg0-of ( border :arg1 too )  )  )  )  )  :arg1 interior :time now
parallel :arg1 ( border :arg1 ( thing :name ( name :op1 hungarian )  )  :arg1-of ( check :arg1-of ( remain :arg3 place )  )  )
cause :arg0 ( want :arg0 anyone :arg0-of prioritize :arg1 still :arg1-of ( claim :arg0 it )  )  :arg1 ( possible :arg1 asylum )
paramount :domain ( care :arg1 ( person :arg1-of safe )  :op1-of and )
equal :arg0 it :arg1 ( need :arg1 signal :arg1-of ( have-org-role :arg2 minister )  :arg1-of clear :arg1-of obvious :arg1-of say )
know :arg0 person :arg1 ( accept :arg0 we :arg1 ( flow :arg1 migration :arg1-of ( limit :polarity - :polarity - )  )  :arg2 ( border :arg1 ( thing :name ( name :op1 austrian-slovenian )  )  )  :op1-of ( and :op2 either )  :polarity - )
require :arg1 ( procedure :arg1-of control )
refuse :arg0 ( country :name ( name :op1 slovenia )  :wiki slovenia )  :arg1 ( consider :arg0 ( country :name ( name :op1 croatia )  :wiki croatia )  :arg1 corridor )
announce :arg0 ( government-organization :arg0-of ( govern :arg1 ( thing :name ( name :op1 croatian )  )  )  )  :arg1 ( want :arg0 ( country :name ( name :op1 slovenia )  :wiki slovenia )  :arg1 ( let :arg1 ( travel :arg0 ( refugee :mod incoming )  :arg2 ( country :name ( name :op1 germany )  :wiki germany )  :arg4 ( country :name ( name :op1 austria )  :wiki austria )  )  :op1-of ( and :arg0-of ( establish :arg1 ( corridor :beneficiary refugee )  :manner potential :mod also :op1-of and )  )  :arg0 country )  :mod also )  :time early
see :arg0 ( person :arg0-of ( have-org-role :arg1 ( light :arg1-of ( same :mod quite )  )  :arg2 ( minister :mod interior )  )  :name ( name :op1 vesna :op2 györkös :op3 znidar )  )  :polarity -
intend :arg1 ( step :arg1 it :mod rather )  :arg1-of ( border :arg2 ( country :arg1-of ( border :mod especially )  :name ( name :op1 hungary )  :wiki hungary )  )  :arg1-of surveil :arg1-of ( accept :arg0 corridor :manner absolute :topic-of ( idea :mod of )  )
thing :arg0-of ( border :arg1 ( country :arg2-of ( border :arg1-of ( control :degree heavy :time already )  )  :name ( name :op1 croatia )  :wiki croatia )  :arg2 external )  :mod-of area :name ( name :op1 schengen )
contrast :arg2 ( suggest :arg0 ( country :name ( name :op1 slovenia )  :wiki slovenia )  :arg1 ( seal :arg1 border :arg2 refugee )  :polarity - :time ( stress :arg0 ( minister :arg2-of have-org-role )  )  )
obligate :arg1 ( otherwise :arg1-of ( work :arg0 of :arg1-of ( possible :polarity - )  :arg2 ( person :arg1-of stress :name ( name :op1 &quot; )  )  )  :mod-of system )  :arg2 ( thing :arg2-of ( fulfill :arg0 ( organization :arg1-of ( have-org-role :arg0 every :arg2 member )  :name ( name :op1 eu )  :wiki european_union )  :arg1 it )  )
say :arg0 ( government-organization :arg0-of ( govern :arg1 ( thing :name ( name :op1 croatian )  )  )  )  :arg1 ( attempt :arg0 ( refugee :arg0-of ( cross :arg1 ( border :arg1 ( country :name ( name :op1 sid )  )  )  :op2-of ( slash :op1 ( country :name ( name :op1 tovarnik )  )  )  )  )  :arg1 ( enter :arg1 ( country :location ( world-region :name ( name :op1 east )  :wiki eastern_world )  :name ( name :op1 croatia )  :wiki croatia )  :arg2 night :purpose ( avoid :arg1 ( register :arg1 monday )  )  :arg0 refugee )  )
possible :arg1 ( pick :arg0 ( police :mod ( thing :name ( name :op1 croatian )  )  )  :arg1 ( field :mod nearby :source-of maize )  )
say :arg0 ( media :arg1-of local )  :arg1 ( come :arg1 ( vehicle :mod police )  :manner constant :path ( across :op1 ( refugee :mod new )  )  :time ( since :op1 then )  :topic ( thing :name ( name :op1 croatian :op2 tavarnik )  )  )
and :op1 ( country :domain they :name ( name :op1 syria )  :quant most :wiki syria )  :op2 ( woman :quant many )  :op2-of ( and :op1 ( person :mod ( country :name ( name :op1 afghanistan )  :wiki afghanistan )  )  )  :op3 child
and :mod-of place :op1 ( sevic :mod emergency :mod ( also :mod-of already )  )  :op2 ( organization :name ( name :op1 red :op2 cross )  :wiki international_red_cross_and_red_crescent_movement )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :arg0-of expect )  :arg2 ( minister :mod interior )  :op1-of ( next :mod-of ( day :unit-of ( temporal-quantity :op1-of few )  )  )  )  :name ( name :op1 ranko :op2 ostojic )  )  :arg1 ( refugee :quant ( around :op1 4000 )  )
and :arg0-of ( report :arg1 ( divert :arg2 ( country :name ( name :op1 croatia )  :wiki croatia )  )  )  :mod both :op1 ( thing :mod-of media :name ( name :op1 croatian )  )  :op2 ( country :name ( name :op1 serbia )  :wiki serbia )  :op3 ( take :arg1 ( person :arg0-of migrate )  :arg3 ( border :arg1 ( country :name ( name :op1 presevo )  :source-of ( bus :purpose ( border :arg0 addition :arg1 ( country :name ( name :op1 serbia )  :wiki serbia )  :arg2 ( country :name ( name :op1 macedonia )  :wiki republic_of_macedonia )  :topic-of wednesday )  )  )  :mod hungarian )  :time now )
state :arg1 ( want :arg0 we :arg1 ( do :arg0 ( person :arg0-of ( take :arg1 route :time certain )  :arg1-of ( instruct :arg0 they )  :arg2-of ( give :arg0 ( government-organization :arg0-of ( deny :arg1 it )  :arg0-of govern )  :arg1 that :arg1-of case )  )  )  :arg1-of possible )  :mod they
say :arg0 ( report :arg0 media )  :arg1 ( and :op1 ( arrive :arg0 ( refugee :quant ( around :op1 50 )  )  :arg1 bus :arg4 ( town :location ( border :arg1 ( country :name ( name :op1 serbia )  :wiki serbia )  :arg2 ( country :name ( name :op1 sid )  )  )  )  :time ( hour :unit-of ( temporal-quantity :op1-of early )  )  )  :op2 day :op3 ( expect :arg1 ( bus :quant more )  )  )
country :name ( name :op1 austria )  :op3-of ( and :op1 ( country :name ( name :op1 croatia )  :op1-of over :wiki croatia )  :op2 ( country :name ( name :op1 slovenia )  :wiki slovenia )  :op4 ( country :name ( name :op1 germany )  :wiki germany )  )  :wiki austria
travel :arg0 detaine :arg1 ( about :op1 ( distance-quantity :direction away :quant 500 :unit kilometer )  )  :arg2 ( border :arg1 ( country :name ( name :op1 serbia )  )  :mod ( country :name ( name :op1 macedonia )  :wiki republic_of_macedonia )  )  :time ( night :mod entire )
say :arg0 police :arg1 ( recommend :arg0 ( we :arg0-of ( say :arg2 ( refugee :quant 1 )  )  :arg1-of come )  :arg1 of :arg1-of ( cause :arg0 ( we :arg0-of ( hear :arg1 that )  )  )  :arg2 here )  :arg2-of ( close :arg0 ( country :name ( name :op1 hungary )  :wiki hungary )  )
want :arg0 they :arg1 ( go :arg4 ( country :name ( name :op1 croatia )  :op1-of ( and :op2 ( country :name ( name :op1 slowenia )  )  :op3 ( country :name ( name :op1 austria )  :wiki austria )  :op4 ( country :name ( name :op1 germany )  :wiki germany )  )  :wiki croatia )  :arg0 they )
imply :arg0 this :arg1 ( possible :arg0 further :arg1 ( happen :arg0 ( person :arg0-of ( predict :arg1 route :time already )  :arg0-of observe :mod ( country :name ( name :op1 greece )  :wiki greece )  )  :mod actual )  :time now )  :arg2 somewhat :op1-of ( and :example-of ( route :arg1-of ( shift :arg0 west )  :location ( world-region :name ( name :op1 balkans )  :wiki balkans )  :time former )  :op2 ( country :name ( name :op1 turkey )  :wiki turkey )  :op3 ( country :name ( name :op1 macedonia )  :wiki republic_of_macedonia )  :op4 ( country :name ( name :op1 serbia )  )  :op5 ( country :name ( name :op1 hungary )  :wiki hungary )  )
mean :arg1 ( control :arg0 ( country :name ( name :op1 croatia )  :wiki croatia )  :arg1 option :arg1-of border )
flux :arg0 ( plan :arg0 ( country :arg0-of ( prepare :arg1 ( thing :name ( name :op1 croatian )  )  :arg1-of ( stress :arg0 ( thing :mod interior :name ( name :op1 minister :op2 ostojic )  )  :time previous )  :time already )  )  :arg1 ( situation :mod exceptional :mod potential )  :arg1-of appropriate )  :arg1 refugee :mod large :mod-of event
contrast :arg1 ( give :arg0 he :arg1 - :arg1-of ( detail :arg0 ( he :arg0-of ( control :arg1 ( border :arg1 option )  :arg1-of wide )  :arg0-of ( indicate :arg1 - )  :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 croatia )  :wiki croatia )  :arg2 member )  )  )  )
carry-out :arg0 ( person :arg1-of ( qualify :arg2 ( membership :location ( area :mod ( country :name ( name :op1 schegen )  )  )  )  )  )  :arg1 ( check :mod rigorou )
concern :arg1 ( control :arg1 ( border :arg2 ( country :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  :arg2 member :time ( since :op1 ( date-entity :year 2007 )  )  :time ( since :op1 ( present :arg0 partner :arg1 ( report :mod ( good :manner consistent )  :topic country )  :degree far )  )  )  :name ( name :op1 slovenia )  :wiki slovenia )  )  )
thing :arg0-of ( border :arg1 fence :arg2 ( country :mod-of ( side :arg2-of ( stick :arg1 ( refugee :mod also :quant ( some :op1 300 )  )  )  :location behind )  :name ( name :op1 serbia )  :wiki serbia )  )  :name ( name :op1 hungarian )
say :arg0 ( report :arg0 media :arg1 past )  :arg1 ( spend :arg0 they :arg0-of ( lead :arg1 ( cross :arg1 ( border :arg1 ( country :name ( name :op1 horgos )  )  :arg2 ( country :name ( name :op1 belgrade )  )  )  )  :arg2 ( country :name ( name :op1 röszke )  )  )  :arg1 night )
claim :arg0 ( authority :mod ( thing :name ( name :op1 hungarian )  )  )  :arg1 ( and :arg0-of ( remain :arg1 ( close :arg0 ( country :arg1-of ( border :arg2 ( country :name ( name :op1 backi :op2 breg )  )  )  :name ( name :op1 horgos )  )  :arg1 both :arg1-of complete )  :mod also )  :op1 crossing )
remain :arg1 ( refugee :arg0-of ( travel :arg4 ( border :arg2 ( thing :name ( name :op1 croatian )  )  )  )  :arg0-of ( want :arg1-of ( clear :mod still :polarity - )  :op1-of wheth :time now :arg1 travel )  )
mean :arg1 ( he :arg0-of ( consider :arg1 ( person :arg0-of ( have-org-role :arg1 ( country :arg0-of ( try :arg1 ( appear :arg1 ( wednesday :mod-of morning )  :arg1-of local )  )  :name ( name :op1 serbia )  :wiki serbia )  :arg2 ( minister :mod interior )  )  :arg1-of reassure )  )  :arg0-of ( border :arg1 hungarian )  :arg0-of ( debate :arg1 closure :mod-of ( route :mod alternative :mod after )  )  :poss-of premature :poss-of refugee )
involve :arg0 moment :arg1 ( refugee :quant ( number :mod ( large :polarity - )  )  )
possible :arg0 it :arg1 ( say :arg1 ( continue :arg0 they :arg1 ( journey :arg1 ( or :op1 ( country :name ( name :op1 hungary )  :wiki hungary )  :op2 ( country :name ( name :op1 croatia )  :wiki croatia )  :op3 ( country :mod another )  )  )  )  )  :polarity - :time yet
advise :arg0 ( person :arg0-of work :mod ( aid :arg1 dangerous )  )  :arg1 ( person :arg0-of migrate )  :arg2 ( take :arg1 ( route :mod alternative )  :arg0 person )
contrast :arg0 ( route :mod alternative )  :arg1 ( start :arg0 ( person :arg0-of ( work :arg1 aid )  :arg1-of private :mod ( thing :name ( name :op1 hungarian )  )  )  :arg1 ( distribute :arg1 ( map :arg1-of mark )  :arg2 refugee :path ( country :name ( name :op1 croatia )  :wiki croatia )  :arg0 person )  :time already )
thing :mod-of ( war :arg1-of ( end :arg0 danger :op1-of after :op2-of ( and :mod still :op1 ( cross :arg0 ( unclear :mod-of minefield )  :arg1 ( border :arg0 even :arg1 ( country :name ( name :op1 croatia )  :wiki croatia )  :arg2 ( country :arg2-of ( border :arg0 - :arg1 ( region :part part )  )  :name ( name :op1 serbia )  )  )  )  )  :poss-of ( temporal-quantity :quant 20 :unit year )  )  )  :name ( name :op1 croatian )
announce :arg0 police :arg1 ( send :arg1 ( team :consist-of minesweeper )  :arg2 ( region :arg1-of ( border :arg0 wednesday :arg2 afternoon )  )  )
hack :arg1 ( stock :arg1 30 :arg1-of ( exchange :arg2 ( thing :arg0-of pay :name ( name :op1 ukrainians )  )  )  )
and :op1 ( report :arg1-of ( view :arg1-of ( provide :arg2-of ( accuse :arg1 ( ring :arg1-of belong :consist-of ( person :arg2-of ( criminal :mod cyber )  )  )  :arg1-of repeat :time ( since :op1 ( date-entity :year 2010 )  )  )  )  :op1-of ( inside :degree yet )  )  :op1-of ( and :op2 ( release :arg0 press :arg1 such :mod unpublish )  :op3 business :poss website )  )  :op2 ( wire :arg1 finance )  :op3 ( thing :name ( name :op1 marketwired )  )  :op4 ( organization :name ( name :op1 pr :op2 newswire )  )
enable :arg0 ( information :arg1-of provide )  :arg1 ( insider :arg1-of ( deal :arg2 ( market :mod finance )  )  )
say :arg0 ( person :arg0-of investigate )  :arg1 ( total :arg1 scamm :arg2 ( mean :arg1 100 :mod this )  )
indicate :arg0 information :arg1 that :arg2 ( outside :mod that :mod even :op1 ( we :arg0-of ( border :arg1 ( report :arg0 ( organization :name ( name :op1 &quot; )  )  :arg1 state :arg1-of catch )  :arg2 final :mod nation )  )  )  :time current
continue :arg0 proceeding :arg2 ( case :arg1-of ( suspect :arg2 ( person :mod other :quant 32 )  )  :mod this )
come :arg0 most :arg3 ( and :arg0-of accuse :op1 ( country :name ( name :op1 ukraine )  :wiki ukraine )  :op2 ( country :name ( name :op1 georgia )  :wiki georgia_[country] )  )
operate :arg0 ( person :arg0-of ( perpetrate :arg1 both )  )  :arg1 ( and :op1 ( country :name ( name :op1 usa )  :wiki united_states )  :op2 ( world-region :name ( name :op1 eastern :op2 europe )  :wiki eastern_europe )  )
celebrate :arg0 ( organization :name ( name :op1 ecumenical :op2 hospice :op3 care )  )  :arg1 ( country :location-of ( temporal-quantity :quant 20 :unit year )  :name ( name :op1 mannheim )  )
rule :location ( around :op1 ( country :location ( country :name ( name :op1 mannheim )  )  :name ( name :op1 paradeplatz )  )  )  :poss business
leisurely :mod-of ( fashion :arg1-of ( stroll :arg0 some :arg2 some :manner along :purpose-of ( carry :arg0 ( person :arg0-of ( walk :arg1 briskly )  )  :arg1 errand )  )  )
head :arg0 they :arg1 ( country :name ( name :op1 mannheim )  )  :arg2 ( branch :consist-of car :part-of showroom :quant 2 )
stop :arg1-of tram
and :op1 autumn :op2 ( sunshine :arg1-of brilliant )  :op3 right :op4 middle :op5 ( word :arg0 ( each :arg1-of ( want :arg0 i :time before )  :mod-of ( bear :arg1 i :arg2 ( life :arg1-of pulse :mod vibrant )  :location blackboard :location big :location 4 :mode expressive )  )  :arg1 die )
and :op1 ( carry :arg0 ( organize :arg0 ( organization :name ( name :op1 ecumenical :op2 hospice :op3 care )  )  )  :arg1 ( campaign :arg1 ( raise :arg1 ( awareness :topic ( anniversary :mod 20th )  )  )  :mod this )  )  :op2 ( encounter :arg1 ( react :arg3-of ( mix :degree extreme )  )  )
say :arg0 ( person :arg1-of ( carry :arg0 ( we :arg0-of ( campaign :arg1 middle :arg2 ( town :mod ( right :mod-of among )  :mod of )  :mod this )  )  :op1-of why :op1-of out )  :poss-of ( life :mod ' :mod about :poss it )  )  :arg1 josefine :arg2 lamm
passer :mod-of ( by :arg0-of ( discuss :op2-of ( and :op1 ( answer :arg1 ( question :arg1 ( voluntary :arg1 ( person :arg0-of work )  )  )  :arg1-of ( available :arg2 ( head :arg1 ( organization :name ( name :op1 ecumenical :op2 hospice :op3 care )  )  )  :mod also )  )  )  )  )
say :arg0 ( person :arg0-of ( read :arg1 briefly )  :arg0-of ( suffer :arg1 ( or :arg1-of ( stop :arg0 other )  :arg1-of ( war :arg0 ( country :name ( name :op1 usa )  :wiki united_states )  :arg1-of ( drive :arg0 ( i :arg0-of ( read :arg1 ( possible :arg1 ( and :arg1-of ( chalk :arg0 ( impulsively :arg0-of grab )  )  :arg1-of complete :op1 ( sentence :arg0 ( many :arg0-of ( while :arg1 passer )  )  )  )  )  )  :poss-of ( life :arg1-of affirm )  )  )  )  )  :arg1-of long :polarity - )  :arg0-of stop :arg0-of ( camp :arg1 van )  )  :arg1 ( thing :arg0-of ( carry :arg1 yet :op1-of and )  :arg1-of ( ready :arg0 i :polarity - )  :arg1-of resemble )
and :mod again :op1 again :op2 ( develop :arg0 ( discuss :arg1-of little )  :arg1 life :arg2 ( deal :arg1 die )  :location corner )  :op3 campaign
person :domain-of ( now :mod ( there :mod also )  )  :name ( name :op1 peter :op2 hübinger )
say :arg0 ( i :arg0-of ( live :arg1 responsibly :arg1-of possible )  :arg0-of ( have-org-role :arg1 ( responsible :arg0 mannheim :arg1 ( body :mod-of ( association :name ( name :op1 caritas )  )  :mod-of along )  :arg2 ( hospice :mod ecumenical :mod-of care )  )  :arg2 director )  )  :arg1 werk :arg2 ( charity :arg2-of ( consider :arg0 i :arg1 ( that :mod-of ( day :mod some )  )  :mod only :mod ( ' :op1 it )  )  :arg2-of ( come :arg0 ( end :arg1 ( world :mod this )  :op1-of of )  :arg1 i )  :mod ( society :mod protestant )  :op1-of diakonischen )
visibility :arg1-of ( campaign :arg1-of high :domain-of ( good :domain ( organize :duration ( temporal-quantity :quant 20 :unit year )  :mod old )  )  :mod this )  :op1 which
understand :arg0 it :arg1 ( want :arg0 everyone :arg1 ( and :op1 ( end :arg1 blackboard )  :op2 ( matter :arg1 very :arg1-of personal )  )  :arg1-of ( message :arg1-of public )  :arg1-of share :polarity - )
say :arg1 ( and :arg1-of experience :op1 ( life :mod ( of :mod-of topic )  :part die :poss ( person :arg0-of ( accept :arg1 it )  :arg0-of ( do :arg1 ( much :arg1-of ( movement :arg0 hospice :op1-of ( over :mod even :mod ( last :mod-of few )  )  )  :quant-of ( temporal-quantity :unit year )  )  )  :arg1-of help )  )  :op2 ( steep :mod still )  )  :arg1-of taboo :time lamm
perceive :arg1-of ( share :arg0 ( person :name ( name :op1 angelika :op2 godefroid )  )  )
and :arg0-of ( help :arg1 ( deal :arg0 ( person :arg1-of die )  :arg2 ( person :arg0-of work :arg0-of start :arg0-of organize :arg1-of volunteer )  )  )  :op1 grief
read :arg0 ( she :arg0-of ( confront :arg1 ( thing :arg1-of experience :arg1-of have :arg1-of personal )  )  )  :arg1 ( issue :mod this )  :op1-of ( and :op2 ( decide :arg1 ( want :arg1 ( involve :arg2 ( help :arg2 ( person :arg1-of die )  )  )  )  )  :quant ( lot :quant-of literature )  )
and :arg1-of ( start :arg0 ( they :arg0-of ( appeal :arg1 ( organize :arg0 ( organization :name ( name :op1 ecumenical :op2 hospice :op3 care )  )  )  :arg2 ( helper :arg1-of volunteer )  )  )  :time ( date-entity :year 1995 )  )  :op1 ( sign :arg0 she :time immediate )
affect :arg0 ( woman :op1-of ( and :arg1-of ( care :arg0 home )  )  :quant 43 )  :arg1 ( 2 :quant-of man )  :arg1-of ( help :arg0 ( and :arg1-of ( volunteer :arg0 ( person :op1-of ( and :op2 ( household :arg1-of private )  :op3 ( organization :name ( name :op1 sankt :op2 vincent :op3 hospice )  )  )  :quant 45 )  )  :op1 ( person :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( belong :arg1 team :arg2 hospital )  :name ( name :op1 godefroid )  )  :arg2 relative )  )  )  :arg2 person )
careful :manner-of ( train :arg1 they )  :mod all
and :arg0-of ( entail :arg1 everything :arg2 particular )  :op1 ( thing :arg1-of experience :op2-of ( and :arg1-of ( handle :arg2-of ( suit :arg1 ( person :name ( name :op1 angelika :op2 godefroid )  )  )  )  :mod this :op1 job )  )
say :arg0 she :arg1 ( and :arg1-of ( believe :arg0 ( i :arg2-of ( view :arg0 ( i :arg0-of ( differ :arg1 of :arg2 point )  :arg0-of ( see :arg1 life )  )  :arg1 it )  )  )  :op1 precious :op2 ( seize :arg0 i :arg1 moment )  )
and :op1 ( free :arg1 ( service :arg1-of ( offer :arg0 ( organize :arg0 ( organization :name ( name :op1 ecumenical :op2 hospice )  )  )  )  :mod outpatient )  :arg2 charge )  :op2 ( depend :degree denominationally :polarity - )
and :op1 ( train :op2-of ( and :op1 session :op3 supervise )  :op2-of ( and :arg1-of ( provide :arg0-of care :mod palliative )  :op1 ( support :arg0 ( company :arg0-of ( insure :mod health )  :op1-of ( and :op2 ( donate :arg0 ( person :arg0-of ( have-org-role :arg2 member )  )  )  )  )  :arg0-of ( enable :arg1 educate )  :arg1-of train :manner financial )  :op3 ( counsellor :mod grief )  )  )
offer :arg1 ( train :arg0 ( every :mod-of ( temporal-quantity :quant 2 :unit year )  )  :arg1 ( person :arg2-of ( staff :mod new )  )  )
write :arg1 ( message :poss ( and :op1 ( church :arg1-of ( display :arg0 blackboard )  :mod ( thing :name ( name :op1 evangelical )  )  )  :op2 ( vehicle :name ( name :op1 m1 )  :wiki m1_abrams )  :op3 ( church :mod ( religious-group :name ( name :op1 catholic )  :wiki catholicism )  )  )  )  :arg2 now :medium saturday :op1-of 6 :op1-of 1 :op1-of ( aircraft-type :mod-of 2 :name ( name :op1 f22 )  :wiki lockheed_martin_f-22_raptor )
possible :arg1 ( write :arg0 ( anyone :arg0-of want )  :arg1 ( wish :arg1 ( postcard :mod there )  :arg1-of personal )  :mod also )
lower :arg0 ( organization :arg0-of ( earn :arg1-of mix )  :name ( name :op1 fedex )  )  :arg1 ( outlook :mod fiscal :mod ( date-entity :year 2016 )  )
report :arg0 ( organization :arg0-of ( forecast :arg1 profit :arg1-of ( cut :arg0 ( giant :mod deliver )  :arg2 and :purpose ( demand :arg1 ( service :mod freight )  :mod weak )  )  :duration ( temporal-quantity :quant full :unit year )  )  :name ( name :op1 fedex )  )  :arg1 ( thing :arg1-of disappoint :arg2-of ( result :arg1 ( quarter :arg1 ( cost :arg1 ( division :location ground )  :arg1-of high )  :time ( late :degree most )  )  )  )  :op1-of and
say :arg0 company :arg1 ( plan :arg1 ( hire :arg1 ( person :arg0-of ( work :arg1 holiday )  :mod seasonal :quant about )  )  )  :mod also
announce :arg1 ( hire :arg1 ( person :arg0-of work :mod seasonal )  :arg2 holiday :time ( last :mod-of year )  )  :time ( time :mod this )
bell :arg1-of ( open :arg0 ahead :arg2 ( trade :arg1 ( 45 :mod-of ( temporal-quantity :unit minute )  )  )  :arg3 ( percentage-entity :arg1-of ( fall :arg1-of ( share :arg0 it )  )  :value 2.5 )  :mod wednesday )
say :arg0 ( organization :name ( name :op1 fedex :op2 corp. )  )  :arg1 ( expect :arg1 ( earn :arg1 ( and :arg1-of ( predict :time early )  )  :arg2 ( year :arg0-of ( end :arg1 ( 20 :op1-of down :quant-of ( monetary-quantity :unit cent )  )  :time ( date-entity :month ( 5 :mod next )  )  )  :mod fiscal )  )  )
say :arg0 ( survey :arg0 ( organization :name ( name :op1 factset )  )  )  :arg1 ( expect :arg0 ( person :arg0-of analyze )  )
or :op1 heavy :op2 large :op3 ( package :arg1-of ( ship :arg0-of ( take :arg1 ( effect :arg0 percentage-entity :op1-of ( and :arg1-of ( average :arg0 ( hike :arg1 rate :arg3-of ( come :arg1 ( outlook :arg1-of ( reduce :arg0 4 )  )  )  )  )  :op2 ( surcharge :arg1-of high )  )  )  :time ( date-entity :month 1 )  )  :arg1-of ( begin :time ( date-entity :month 11 )  )  :arg2 ground )  )
say :arg1 ( expect :arg0 company :arg1 ( grow :arg0 earn :arg1-of ( cause :arg0 ( and :op1 ( revenue :arg1-of high )  :op2 ( grow :arg1 ( commerce :mod online )  )  :time ( year :mod previous )  )  :arg2 ( cost :arg1-of cut )  )  )  :mod still )
say :arg0 ( person :arg0-of ( have-org-role :arg2 chairman )  :arg0-of ( have-org-role :arg2 ceo )  :arg0-of ( expect :arg1 ( economy :mod-of condition )  )  :name ( name :op1 chairman )  )  :arg1 ( and :op1 ( perform :arg0 company :arg1 solidly :arg2-of ( give :arg1 weak )  :op1-of ( and :op2 ( manufacture :arg0 especially :arg1 globe )  :op3 trade )  )  )
announce :arg1 ( plan :arg0 ( hire :arg1 holiday )  )  :time ( after :op1 ( say :arg0 ( up :arg0-of rival :arg1 day )  :arg1 ( plan :arg1 ( hire :arg1 ( person :arg0-of work :mod extra )  :arg1-of ( same :arg1-of ( hire :time ( year :mod last )  )  :mod about )  )  )  )  )
earn :arg0 ( organization :arg0-of ( quarter :arg0-of ( end :arg1 ( date-entity :month 8 :op1-of early :op1-of year )  )  :arg1 31 )  :name ( name :op1 fedex )  )  :extent ( percentage-entity :value 6 )
forecast :arg1-of ( average :arg0 short )  :arg1-of share :medium-of ( survey :arg0 ( organization :name ( name :op1 zacks :op2 investment :op3 research )  )  :arg1 ( person :arg0-of analyze :arg2-of ( share :arg0-of ( amount :arg1 earning )  )  :quant 12 )  )
rise :arg1 revenue :arg2 ( percentage-entity :value 5 )
expect :arg0 ( person :arg0-of analyze :arg1-of ( survey :arg0 ( organization :name ( name :op1 zacks )  )  )  :quant 6 )
express :arg0 ( unit :arg0-of ( stagnate :arg1 revenue :arg1-of ( cause :arg0 ( ship :arg1 priority :arg1-of decline :arg2-of ( hit :arg1 ( organization :name ( name :op1 fedex )  )  )  :mod international )  )  )  )  :arg1 ( recent :time-of ( temporal-quantity :unit year )  )
contrast :arg2 ( boost :arg0 ( boom :arg1 ( shop :arg2 online )  )  :arg1 ( thing :arg2-of result :location ( organization :name ( name :op1 fedex :op2 ground )  )  )  )
contrast :arg1 ( rise :arg1 ( revenue :mod ground )  :arg2 ( percentage-entity :value 29 )  :time ( quarter :time ( late :degree most )  )  )  :arg2 ( flat :domain ( income :arg0-of ( operate :arg1 ( and :arg1-of ( cost :arg1-of high )  :op1 ( package :mod large )  :op2 ( self :arg1-of insure )  )  )  )  :mod basic )
see :arg0 ( unit :arg0-of ( express :arg2-of ( cost :arg1 labor :arg1-of high )  )  )  :arg0-of ( cause :arg1 ( rate :arg1-of high :arg3-of ( fall :arg1 income :arg2 business )  :degree-of base )  )  :arg1 ( income :arg1-of ( high :arg0 freight )  )
or :arg1-of ( trade :arg0 ( share :mod ( organization :name ( name :op1 fedex )  )  )  :arg2 ( 2.5 :value-of percentage-entity )  :time ( before :op1 ( bell :mod ( open :arg0 ( temporal-quantity :op1-of about :unit hour )  :arg1 down )  )  )  )
and :op1 year :op2 ( high :arg0 tuesday :arg1 ( record :location-of ( percentage-entity :value 17 )  :op1-of below )  :arg2 ( date-entity :month 6 )  :purpose-of ( close :arg0 they :arg1 ( percentage-entity :value 11 )  :arg2 down :op1-of 11 )  )
interest :arg0 ( government-organization :arg0-of ( decide :location table :location foot :location mahogany :location honduran :location 27 :time ( week :mod this )  )  :arg0-of ( key :arg1 ( raise :arg0 it :mod time )  )  :arg0-of ( spend :arg1 ( 2 :quant-of ( temporal-quantity :unit day )  )  )  :arg0-of ( will :arg1 ( policy :arg1-of ( anticipate :arg1-of ( meet :location ( temporal-quantity :unit year )  )  :degree most )  :arg1-of ( seat :location around )  )  )  :name ( name :op1 federal :op2 reserve )  :wiki federal_reserve_system )  :arg1 ( rate :mod-of ( time :mod-of ( nearly :location-of ( temporal-quantity :unit decade )  )  )  )
loom :arg0 they :arg1 ( story :arg0-of ( of :arg1 ( bank :mod central )  :arg1-of end )  :mod 2 :topic ( country :name ( name :op1 united :op2 states )  :wiki united_states )  )
suppose :arg1 ( put :arg0 ( she :arg0-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  :op1-of ( and :op2 colleagu :quant all )  )  :arg1 ( economy :mod nation :mod interest :mod above )  :arg1-of ( remind :arg1-of map :mod ( that :mod-of chairwoman )  )  :arg2 other )
stable :arg0 here :arg1 price :arg1-of ( keep :op2-of ( and :arg2-of ( charge :arg1 ( bank :mod central )  :mod dual :source ( government-organization :name ( name :op1 congress )  :wiki united_states_congress )  )  :op1 ( maximize :arg1 ( employment :mod ( country :name ( name :op1 u.s. )  :wiki united_states )  )  )  )  )
contrast :arg1 ( since :time-of ( acknowledge :arg0 ( person :arg0-of ( lead :arg2 ( stability :arg2-of ( mandate :arg0 unwritten )  :mod finance )  )  :arg0-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  )  )  )  :arg2 recession
possible :arg1 ( factor :domain ( mandate :mod that )  :mod x )  :op1-of ( and :op2 ( start :arg1 ( wean :arg2 ( stimulus :arg1-of ( provide :arg0 ( rate :arg1-of ( near :arg2 zero )  :mod ( interest :arg0 short )  )  :arg1-of ( decide :arg0-of ( predict :arg1 ( close :degree too )  )  )  :prep-in place :time ( since :op1 ( date-entity :mod late :year 2008 )  )  )  :mod ( precedent :polarity - )  )  )  :arg2-of ( ready :arg1 ( economy :poss ( country :name ( name :op1 u.s. )  :wiki united_states )  )  :arg2-of ( announce :arg1 thursday )  )  )  )
possible :arg0 even :arg1 ( skittish :domain ( person :arg0-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  :arg0-of ( add :arg1 ( quarter :arg1 ( point :mod percentage )  :manner-of ( more :polarity - )  :mod mere )  :arg2 ( volatility :mod ( raise :arg1 ( rate :mod ( fund :mod federal :mod ( turmoil :location ( market :arg0-of ( cautious :arg1 already )  :mod globe :mod finance )  :time recent )  )  :name-of ( benchmark :wiki bse_sensex )  )  )  )  )  :arg0-of ( have-org-role :arg2 official )  )  )  :condition ( show :arg0 ( data :quant most )  :arg1 ( grow :arg0 even :arg1 economy :arg2 solidly )  )
say :arg0 ( thing :mod important :mod most )  :arg1 ( person :arg0-of ( have-org-role :arg1 ( organization :arg2-of ( broker :arg0 economist :arg1 firm )  :name ( name :op1 &quot; )  )  :arg2 chief )  :arg1-of ( watch :arg0 they :op3-of ( and :op1 first :op2 foremost )  :op4-of ( and :op1 labor :op2 ( market :arg1-of obvious )  :op3 inflation )  )  :name ( name :op1 &quot; )  )
contrast :arg1 ( provide :arg0 marketplace :arg1 ( justify :arg0 they )  :arg2 ( she :arg0-of ( say :arg1 ( enough :polarity - )  )  :arg2-of ( wait :arg1 further )  )  )  :arg2 ( think :arg0 ( i :arg0-of ( increase :arg1 ( certainty :polarity - )  )  :arg0-of ( cause :arg1 ( they :arg0-of ( excuse :arg1 ( raise :arg1 rate )  )  )  )  )  :arg1 ( look :arg1 ( globe :arg1-of surround )  )  )
cause :arg1 ( market :arg1-of finance :location-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg2 ( amr-unknown :arg1-of about :arg1-of consensus )  )  :mod jitter )  :polarity -
predict :arg0 ( half :mod about )  :arg1 ( increase :arg1 rate :prep-against ( person :arg0-of ( survey :arg1 economy :time recent )  :name ( name :op1 bloomberg )  :wiki michael_bloomberg )  )  :time ( week :mod this )
expect :arg0 ( market :mod financial )  :arg1 ( hold :arg0 ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  :arg1 ( indicate :arg0-of ( show :arg1 ( chance :arg2 ( percentage-entity :mod about :mod only :quant 30 )  )  )  :arg1 boost :arg1-of key )  )
point :arg0 that :arg1 stock :arg2 ( drop :arg2 market :arg2-of ( soften :arg0 policy :arg1 blow :manner ( promise :arg1 ( way :domain ( increase :mod another )  )  )  )  )  :condition ( raise :arg0 ( government-organization :arg1-of have-org-role :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg1 rate )
jump :arg0 ( average :arg1 ( company :name ( name :op1 dow :op2 jones )  :wiki dow_jones_&_company )  :arg2 tuesday :arg3 industry )  :arg1 ( or :op1 point :op2 ( percentage-entity :value 1.4 )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  :arg0-of ( have-org-role :arg1 economist :arg2 chief )  :name ( name :op1 john )  :wiki - )  :arg1 ( market :arg1 group :arg1-of research :mod capital )  :time ( week :mod this :time-of ( expect :arg1 ( policy :arg1-of trigger :arg1-of ( hold :arg0 steady :arg2 rate )  :arg1-of rally )  :mod that )  )
say :arg0 ( he :arg1-of ( surprise :arg0 it :arg0-of ( cause :arg1 ( rate :arg1-of hike )  )  :arg2 ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  )  )  :arg1 ( this :mod-of point )  :time time
state :arg0 ( length :mod great )  :arg1 ( policy :arg1-of ( panic :arg0 ( do :arg0 they :arg1 ( market :op1-of finance )  :polarity - )  )  :arg1-of ( hold :arg0 ( they :arg0-of ( go :arg1 ( policy :arg1-of ( do :arg0 ( government-organization :arg1-of have-org-role :name ( name :op1 fed )  :wiki federal_reserve_system )  )  )  :arg1-of ( cause :arg0 hand )  )  )  )  )
argue :arg0 ( person :arg1-of expert )  :arg1 ( calm :arg0 ( increase :arg1 rate )  :arg1 ( market :mod finance )  :arg1-of ( cause :arg0 ( remove :arg1 ( certainty :polarity - )  :condition ( act :arg0 ( government-organization :arg1-of have-org-role :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg1 other )  )  )  )
seem :arg1 ( raise :arg0 ( government-organization :arg1-of ( have-org-role :arg0-of ( tighten :arg1 ( condition :mod money )  :arg2 ( temporal-quantity :unit month )  :manner slow :op1-of just :topic-of ( step :arg0-of ( validate :arg1 ( strength :poss ( recover :arg0 ( country :name ( name :op1 u.s. )  :wiki united_states )  :arg1 ( temporal-quantity :unit ( month :mod this )  )  )  )  )  :mod small )  )  )  :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg1 rate :arg2 ( point :mod percentage )  )  :location track
say :arg0 ( person :name ( name :op1 yellen )  )  :arg1 ( expect :arg0 ( she :arg0-of ( increase :arg1 rate )  :arg0-of complain )  :arg1 more :time ( year :mod this )  )  :manner ( and :op1 early :op2 summer :op3 ( person :arg1-of liberal )  :op4 ( need :arg1 ( progress :mod economy )  )  )  :path spring
solid :arg0 8 :arg1 ( grow :arg1 ( labor :mod-of market )  :arg1-of ( slow :arg0 ( create :arg1 job )  )  )  :time ( year :mod this )
drop :arg0 ( temporal-quantity :quant 7 :unit year )  :arg1 ( rate :mod ( employ :arg1 ( have-org-role :arg1 ( government-organization :arg0-of ( consider :arg0-of ( low :arg1 ( temporal-quantity :unit ( month :mod last )  )  :degree most )  :arg1 ( employment :degree full )  :op2-of ( and :op1 ( near :arg0 percentage-entity :arg2 level )  :quant more )  )  :name ( name :op1 fed )  :wiki federal_reserve_system )  )  :polarity - )  )
show :arg0 ( thing :arg1-of gain :arg1-of wage )  :arg1 sign :arg2 pick
say :arg0 ( policy :arg1-of ( continue :arg1-of ( run :arg0 ( central :mod-of bank )  :op1-of below )  :op2-of ( and :op1 inflation )  )  :arg1-of ( target :arg0 ( government-organization :arg1-of have-org-role :name ( name :op1 fed )  :wiki federal_reserve_system )  :manner percentage-entity :manner 2 )  )  :arg1 ( effect :arg0 temporary :arg1 ( price :arg1 ( oil :arg1-of ( low :manner sharp )  )  )  :example-of ( key :arg1 reason )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 the )  )  :arg2 chief )  :arg2-of ( give :arg1 ( tightnes :mod-of of )  :arg1-of ( need :arg0 they :arg1-of ( cope :arg0 ( possible :arg1 economy )  )  :op2-of ( and :op1 ( rate :arg1-of high )  )  )  )  :name ( name :op1 the )  :poss-of economist )  :arg1 ( market :mod labor )
contrast :arg1 ( start :arg0 ( market :location ( around :op1 world )  :mod finance )  :arg1 ( convulse :arg1 late )  :time ( after :op1 ( devalue :arg0 ( country :name ( name :op1 china )  :poss-of currency :wiki china )  )  )  :time ( month :mod last :unit-of temporal-quantity )  )
drop :arg0 ( average :arg1 ( company :name ( name :op1 dow :op2 jones )  :wiki dow_jones_&_company )  :arg3 industry )  :arg1 ( person :arg0-of ( fear :arg1 ( drag :arg0 ( economy :arg1-of slow :mod ( country :name ( name :op1 china )  :wiki china )  )  :arg1 ( grow :arg1 much :mod globe )  )  )  :arg0-of invest )  :manner ( record :op1-of ( below :arg0-of high :mod-of ( percentage-entity :value 16 )  )  )  :time ( date-entity :month 5 )
rebound :arg0 market :arg1 ( thing :name ( name :op1 dow )  )  :arg2-of ( high :arg0 ( temporal-quantity :op1-of ( nearly :op2 ( percentage-entity :value 10 )  )  :unit ( month :mod this )  )  :arg1 ( date-entity :month 5 )  )  :degree somewhat :location ( down :mod-of now )
interest :mod-of ( rate :arg1-of ( raise :topic-of ( calculu :arg2-of ( add :arg0 ( turmoil :mod market )  :arg1 ( policy :arg0-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  )  )  :mod complex )  )  )
say :arg0 they :arg1 ( fellow :arg1-of ( research :arg0 ( person :arg0-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg2 ( person :arg0-of ( have-org-role :arg2 official )  :op3-of ( and :op1 ( organization :name ( name :op1 &quot; )  )  :op2 ( organization :name ( name :op1 &quot; )  )  )  )  :time former )  :arg1-of ( meet :arg0 ( couple :mod past :mod-of ( week :unit-of temporal-quantity )  )  :mod this )  :name ( name :op1 &quot; )  )  )  :mod senior )  :arg2-of ( tighten :arg0 ( market :arg0-of ( weak :arg1 ( economy :mod ( country :name ( name :op1 china )  :wiki china )  :op1-of over )  )  :op3-of ( and :op1 ( absent :arg1 amr-unknown )  :op2 finance :op4 news :op5 about )  )  )
predict :arg0 ( he :arg0-of ( wait :arg1 they :arg2 ( least :mod-of ( temporal-quantity :unit month )  )  )  :arg0-of ( handle :arg1 good :arg2 effect )  )  :arg1 now
say :arg0 ( country :arg1-of ( develop :arg0 ( there :mod-of ' )  :arg2-of ( rely :arg0 ( data :mod almost )  :arg1 date :op1-of ( post :op2 that )  )  )  :name ( name :op1 china )  :wiki china )  :arg1 ( and :op1 ( country :mod-of ( economy :arg1-of ( impact :arg0 ( certainty :polarity - )  :manner amr-unknown :mod ( lot :mod-of of )  :mod about :polarity - )  )  :name ( name :op1 u.s. )  :wiki united_states )  :op2 they )
cause :arg0 ( of :mod-of health )  :arg1 ( concern :arg0 primary :arg1 ( economy :mod globe :quant 1 )  :arg1-of ( make :arg0 it :time-of ( recommend :arg0 technical :arg1 it )  :time-of ( decide :arg0 ( government-organization :arg1-of have-org-role :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg1 ( factor :arg1 into :polarity - )  )  )  :polarity - )
contrast :arg2 ( become :arg1 ( government-organization :arg1-of have-org-role :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg1-of effect :arg2 ( authority :mod money :poss world )  )
influence :arg0 ( bank :mod central )  :arg1 enormous :time ( recent :mod-of ( temporal-quantity :unit year )  )
possible :arg1 ( expand :arg0-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  :arg0-of ( trigger :arg1 ( market :mod-of convulsion :op1-of ( around :op2 globe )  )  )  :arg1 money :arg1-of ( hint :mod ( mere :mod-of ( chairman :arg2-of ( have-org-role :arg0 ben )  :mod then )  )  )  :arg1-of ( tap :arg0 it :mod ( that :mod-of ( date-entity :year 2013 )  )  )  )
contrast :arg0 world :arg1 ( and :arg1-of ( intertwine :arg1-of increase )  :op1 market :op2 economy )  :arg2 ( expect :arg1 ( monitor :arg1 ( develop :arg0 ( person :arg0-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  :arg0-of ( have-org-role :arg2 official )  )  :arg1 also :topic-of ( read :arg1 ( economy :mod globe )  :mod good )  )  :mod ( only :polarity - )  :mod elsewhere :op1-of ( and :arg0-of ( consult :arg1 ( banker :mod central )  )  :mod other :op2 ( person :arg1-of expert )  )  )  :arg1-of possible )
say :arg0 ( art :arg0-of ( head :arg1 ( globe :mod-of strategy )  )  :arg1-of ( process :arg1-of ( decide :arg0 it )  )  :mod more :mod-of science )  :arg1 ( wealth :mod-of ( manage :arg1 firm :arg2 inc )  )
note :arg0 ( country :arg0-of ( lack :arg1 ( president :arg2-of ( have-org-role :arg0 of :arg1 ( organization :arg0-of ( move :arg1 ( market :mod-of ( economy :mod unconnect :mod fundamental )  )  :arg1-of seem :arg1-of ( overreact :arg0 ( history :arg0-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  )  )  :arg2 finance :mod that )  :name ( name :op1 jeffrey )  )  )  )  )  :name ( name :op1 jeffrey )  )  :arg1 ( this :mod-of ( temporal-quantity :unit month )  )
cite :arg0 example :arg1 ( decide :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :arg1-of ( push :arg2 ( increase :arg1 rate )  )  :mod policymak :name ( name :op1 federal :op2 open :op3 market :op4 committee )  )  :arg2 member :arg3 vote )  :name ( name :op1 lacker )  )  )  :time ( date-entity :day 99 :month 98 :year 19 )
say :arg0 finance :arg1-of ( lack :arg0 ( country :arg0-of ( lead :arg1 ( continent :name ( name :op1 asia )  :wiki asia )  :arg2 ( have-org-role :arg0 crisis :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  :arg2 ( cut :arg0 ( it :poss-of ( point :mod ( percentage :arg1-of ( meet :arg0 3 )  :mod-of over )  )  :poss-of ( benchmark :wiki bse_sensex )  )  :arg2 rate )  )  )  :arg1-of grow :name ( name :op1 u.s. )  :wiki united_states )  )  :arg2-of ( implicate :arg0 identifiable :arg2-of ( limit :arg0 despite )  )
reverse :arg0 ( person :arg0-of ( have-org-role :arg2 official )  :arg0-of ( have-org-role :arg1 ( government-organization :name ( name :op1 fed )  :wiki federal_reserve_system )  )  )  :arg1 ( cut :arg0 year )  :time late
say :arg0 ( market :arg0-of ( bank :arg1 rate :mod of )  :mod-of ( meltdown :mod such )  )  :arg1 ( put :arg1 finance :arg1-of ( recommend :arg0 ( government-organization :arg1-of have-org-role :name ( name :op1 fed )  :wiki federal_reserve_system )  )  :arg2 ( stability :arg0-of ( concern :arg1 ( crisis :arg1-of major )  :time ( during :mod only )  :time ( date-entity :year 2008 )  )  )  )  :time ( former :time-of ( have-org-role :arg1 ( country :arg0-of ( set :arg1 committee )  :name ( name :op1 england )  :wiki england )  :arg2 member )  )
say :arg0 ( he :arg1-of ( come :op1-of close :polarity - :time ( late :degree most :mod-of turmoil )  )  )  :arg1 ( level :mod that )
say :arg0 ( you :arg0-of ( do :arg1 certain )  :arg0-of ( scare :arg1 rate )  :arg0-of ( want :arg0-of ( cause :arg1 ( market :arg0-of ( get :arg1 ( president :arg2-of have-org-role )  )  :arg0-of ( upset :arg1 ( institute :arg0 peterson :arg1 ( international :mod-of economic )  )  )  :arg1-of hike )  )  :arg1 ( put :arg1 situation :arg2 of )  :polarity - )  )  :arg1 posen
think :arg0 ( i :arg0-of ( do :arg1 ( change :arg1 that :op2-of ( and :op1 ( mandate :arg0 dual :arg1 ( mention :arg1 finance )  )  )  :op3-of ( and :op1 stability :op2 until )  )  :polarity - :polarity - )  )  :arg1 ( recommend :arg0 ( government-organization :arg0-of ( act :arg1 still )  :name ( name :op1 federal :op2 reserve )  :wiki federal_reserve_system )  :arg1 ( get :arg0 they :arg1 ahead :arg1-of ( curve :arg0 of )  )  )
need :arg1 ( market :mod ( country :name ( name :op1 thailand )  :wiki thailand )  :mod great )  :mode interrogative
try :arg0 ( organization :name ( name :op1 lax-c )  )  :arg1 chinatown
chinatown :mod-of yes
and :op1 ( open :arg0 ( slash :op1 market )  :arg1 warehouse :time ( date-entity :year 1997 )  )  :op2 ( own :arg0 ( organization :name ( name :op1 lax-c :op2 inc )  )  )
refer :arg1 ( organization :domain-of ( market :arg0-of ( sell :arg2 public :mod also )  :arg1-of wholesale :mod ( country :name ( name :op1 thailand )  :wiki thailand )  )  :name ( name :op1 lax-c )  )  :arg1-of frequent :arg2 ( thing :name ( name :op1 thai :op2 costco )  )
and :op1 yes :op2 ( country :mod-of ( town :domain it :polarity - )  :name ( name :op1 thailand )  :wiki thailand )
and :op1 ( snack :mod ( continent :name ( name :op1 asia )  :wiki asia )  :mod ( country :name ( name :op1 thailand )  :wiki thailand )  :op1-of and )  :op2 ( kitchenware :op4-of ( and :op1 fresh :op2 ( dry :arg1 ( good :arg1-of freeze )  )  :op3 ( and :arg1-of popular )  :op5 furniture :op6 decoration :prep-at-of ( array :arg1-of offer :arg1-of ( dizzy :arg1-of ( stop :arg0 1 :mod-of ( shop :domain ( warehouse :op2-of ( slash :op1 market )  )  )  )  )  )  )  )  :op3 religious :op4 holiday
need :arg0 you :arg1 some :arg1-of ( pick :arg2 ( oil :mod-of motorcycle )  )  :arg1-of section :arg1-of ( automotive :mod even )
and :op1 massive :op2 ( take :arg0 store :arg1 ( temporal-quantity :unit ( hour :purpose ( comb :arg1 ( aisl :mod all )  )  )  )  )
shop :arg0 ( all :arg0-of ( make :arg1 hunger :arg2 you :purpose-of ( grab :arg1 meal :arg2 ( organization :name ( name :op1 lax-c :op2 bbq :op3 express )  )  )  )  )
and :arg1-of register :arg2-of ( near :arg1 option :mod ( good :arg1-of ( stall :arg0 ( food :mod indoor )  )  )  :mod inexpensive :mod store )  :op1 takeout :quant various
need :arg0 anything :arg1 ( something :mode interrogative :topic-of ( country :name ( name :op1 thailand )  :wiki thailand )  )  :arg2 ( stock :mod amr-unknown )
probable :domain ( organization :name ( name :op1 lax-c )  )
and :arg0-of ( bulk :arg1 ( number :quant-of item )  )  :op1 ( sell :arg1 ( item :arg1-of ( price :arg1-of reasonable )  )  )
and :op1 ( continent :name ( name :op1 asia )  :wiki asia )  :op2 ( and :arg1-of ( include :arg0 more :arg1-of ( produce :arg0 fresh )  )  :op1 specialty :op2 ( herb :mod region :poss ( country :name ( name :op1 thailand )  :wiki thailand )  )  :op3 fruit )
cause :arg0 you :arg1 ( and :arg1-of ( resemble :arg2 you )  :op1 ( and :op1 ( person :arg1-of ( extensive :arg1-of ( counter :arg0 meat )  )  :arg1-of counter :arg2-of staff :op1-of behind )  :op2 ( clean :arg1 fish )  :op3 ( fillet :arg1 fish )  )  :op2 even :op3 ( fry :arg1 it )  )
bitter :poss ( you :arg0-of ( give :arg1 store :arg2 ( and :mod ( blood :mod beef :poss fish )  :op1 bile :op2 ( pork :mod-of casing )  )  :arg2-of ( freeze :arg0 massive :arg1 section )  :mod-of over )  :arg0-of find :arg0-of ( prepare :arg1 ( and :quant more )  :arg2 food :arg3 ( sausag :mod-of ( region :mod ball :poss fish )  )  :mod commercial )  :arg0-of ( leave :arg1 ( and :op1 melon :op2 galangal )  :arg2 ( whole :mod-of duck )  )  :arg0-of ( freeze :arg1 curry )  :poss-of ( good :poss portion :poss of )  )
and :op1 chef :op2 ( family :arg1-of ( single :arg0 ( there :location-of ( shop :mod amr-unknown )  )  :degree also )  )  :op2-of ( and :op1 ( person :arg0-of own )  )  :op3 individual
accommodate :arg0 ( aisl :arg1-of wide )  :arg1 ( and :mod both :op1 forklift )  :arg2 ( cart :arg1-of shop )
checkout :arg0-of ( find :arg1 ( durian :mod fresh )  )  :mod-of ( stand :op1-of next )
hug :arg0 store :arg1 outskirt :arg2 ( original :poss industry )  :op1-of ( and :location ( city :name ( name :op1 los :op2 angeles )  :wiki los_angeles )  :op2 ( downtown :mod ( block :direction away :quant few )  )  :op3 ( person :name ( name :op1 philippe )  )  )
and :arg1-of park :arg1-of ( share :arg0 ( organization :name ( name :op1 lax-c )  :poss-of lot )  :arg2 shop )  :mod other :op1 restaurant
possible :arg1 ( busy :arg1-of ( while :arg1-of ( park :arg1-of ( find :arg1-of ( hard :mod usual :polarity - )  )  )  )  :domain store )
help :arg1 refugee :arg2 ( country :name ( name :op1 hoyerswerda )  )  :quant bit
and :degree more :op1 more :quant-of ( refugee :arg0-of ( arrive :arg1 ( temporal-quantity :unit ( day :mod this )  )  :arg4 ( country :name ( name :op1 germany )  :wiki germany )  )  )
welcome :arg1 ( voluntary :arg1 ( helper :arg1-of ( commit :topic-of ( matter :mod ( just :polarity - )  )  )  :quant countless )  )  :arg1-of prepare :arg1-of warm
asylum :topic-of ( seek :arg0 ( person :arg0-of ( support :arg1 ( country :name ( name :op1 hoyerswerda )  )  )  )  :arg1 ( person :arg0-of unselfishly :arg1-of ( range :mod whole :mod also )  )  :location town )
person :name ( name :name-of ( person :domain this :name ( name :op1 petra :op2 und )  )  :op1 klaus :op2 heine )
teach :arg1 ( dedicate :arg0 ( person :name ( name :op1 petra :op2 heine )  )  )
love :arg0 ( she :arg0-of ( teach :arg1 even )  )  :arg1 74 :mod still
go :arg1 she :arg2 ( country :name ( name :op1 dillinger :op2 strasse )  )  :arg4 ( centre-left :mod refugee )  :time ( thursday :mod every )
help :arg0 ( she :arg0-of ( learn :arg1 ( language :mod ( country :name ( name :op1 germany )  :wiki germany )  )  )  )  :arg1 ( and :op1 ( country :name ( name :op1 syria )  :wiki syria )  :op2 ( person :mod ( country :name ( name :op1 kurdistan )  :wiki kurdistan )  )  :op3 ( country :name ( name :op1 kosovo )  :wiki kosovo )  :op4 ( country :name ( name :op1 pakistan )  :wiki pakistan )  )  :arg2 refugee
differ :arg0 ( school :mod proper )  :arg1 ( lesson :mod this )  :degree very
of :mod ( society :mod pediatric :mod ( country :arg0-of ( breastfeed :arg1 diet :mod healthy )  :name ( name :op1 brazil )  :wiki brazil )  :mod-of rio )
depiction :arg2-of ( paint :arg1 ( breast :arg2-of ( suckle :arg1 ( baby :topic-of ( image :arg1-of ( feature :arg0 ( spr :arg1-of ( come :op1-of and :purpose ( try :arg0 ( way :arg2-of shock )  :arg1 ( woman :arg0-of ( understand :arg1 ( important :domain ( nutrition :mod good )  )  :time breastfeed )  )  )  )  :mod pediatrics :mod organization :mod ( country :name ( name :op1 brazil )  :wiki brazil )  )  )  )  )  )  )  )  :poss ( food :mod unhealthy )
compose :arg1 ( milk :mod ( breast :mod human )  )  :arg2 ( variety :domain ( and :arg0-of ( give :arg1 ( nutrient :arg1-of ( need :arg0 ( they :arg0-of ( grow :arg1 ( system :arg1-of immune :arg1-of strong )  )  )  )  :mod all )  :arg2 baby )  :op1 fat :op2 vitamin :op3 carbohydrat )  :mod-of protein )
advise :arg0 day :arg1 ( and :op1 ( thing :arg1-of ( require :arg0 energy :arg1-of ( exceed :arg0 500 )  )  )  :op2 ( mom :mod new )  )  :arg2 ( increase :arg0 ( woman :mod pregnant )  :arg1 ( take :arg0 due :arg1 calorie )  :arg3 calori :duration about )
suggest :arg0 ( research :arg0-of ( increase :arg0-of ( adjust :arg1 recommend :arg1-of ( have-rel-role :arg0 person :arg2 mother )  :mod only :mod dietary :polarity - )  :arg1 ( take :arg1 calorie )  )  :mod new )
reveal :arg0 ( study :arg1-of ( conduct :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 baylor :op2 college :op3 of :op4 medicine )  )  :arg2 professor )  :name ( name :op1 robert :op2 waterland )  )  )  :time recent )  :arg1 ( affect :arg0 woman :arg1 ( express :arg1 baby :mod pregnant :mod ( state :name ( name :op1 texas )  :wiki texas )  :mod gene )  :mod actual :op1-of ( and :op2 ( protect :arg0 ( diet :mod healthy )  :arg2 ( develop :arg1 tumor )  )  )  )
affect :arg0 negatively :arg1 ( child :arg0-of ( immune :arg1 system )  :arg1-of fortunate :arg2-of ( find :arg0 unhealthy :arg1 diet )  )
hall :mod new :mod ( sport :mod ( country :name ( name :op1 bernried )  )  )
approve :arg0 ( council :mod district :mod ( country :name ( name :op1 bernried )  )  )  :arg1 ( apply :arg1 ( hall :mod sport )  :topic plan )
and :op1 except
possible :arg1 ( flatter :arg1 ( accommodate :arg0 roof :arg1 ( system :mod ( energy :mod solar )  )  )  )
plan :arg1 ( build :arg1 ( ground :mod sport )  :arg1-of ( plan :arg0 bernri :arg1-of ( move :arg0 step :direction ahead )  )  :arg1-of await :arg1-of long :mod sport )  :arg1-of ( apply :arg1-of ( approve :manner ( discuss :arg1 step :mod great :mod any )  :mod unanimous :time ( meet :mod council :time ( late :degree most )  )  )  )
plan :arg0-of ( build :arg1 ( apply :arg1 ( thing :arg1-of ( agree :mod ( early :time-of committee )  )  :mod ( other :mod-of among )  )  )  )  :arg1 ( or :arg0-of ( build :arg1 law :manner under )  :arg1-of except :arg1-of exempt :op1 rather )
refer :arg1 ( shape :arg1 ( structure :mod roof )  :arg1-of special :arg1-of except :arg1-of permit )
say :arg0 ( and :arg1-of ( construct :arg1-of ( center :arg0 roof )  :arg1-of overhang )  :op1 roof )  :arg1 this
mean :arg1 ( we :arg0-of ( face :arg1 large :mod ( south :arg1-of ( plan :time ( use :arg1 of :time-of ( plan :arg1 background )  )  :time ( roof :mod-of surface )  :time ( panel :arg0 solar )  )  :part-of wonderfully )  :time roof :time ( explain :arg0 ( person :arg0-of ( have-org-role :arg2 mayor )  :arg1-of meet )  :arg1 steigenberg )  )  )  :mod this
refer :arg0 hand :arg1 ( reason :arg1-of ( pitch-in :arg0 roof )  :arg1-of contrary :arg1-of exempt :arg1-of ( develop :arg1-of ( plan :arg0 stipulation :time less :time ( degree :mod-of 10 )  )  )  :mod energy )  :mod other
reduce :arg0 this :arg1 ( volume :mod-of hall )
request :arg0 ( country :arg0-of ( plan :arg0-of ( regard :arg1 exception :arg2 ( roof :mod-of pitch )  :polarity - )  :arg0-of ( develop :arg1 necessary :mod since )  :arg1 ( exempt :arg0 ( an :mod therefore )  )  :arg1-of allow )  :arg0-of ( rule :arg1 while )  :name ( name :op1 therefore )  )  :arg1 exemption :arg2 ( approach :arg0 council :arg1 restrictive :mod more )
say :arg0 ( we :arg0-of ( set :arg1 precedent :polarity - )  :arg0-of ( recur :arg1 ( sport :mod-of hall )  :mod ( of :mod more )  :mod-of project )  )  :arg1 this
hall :domain-of ( project :mod joint :topic ( district :op1-of ( and :op2 ( country :name ( name :op1 sv :op2 bernried )  )  )  )  )  :location ( centre-left :mod sport )
calculate :arg1 cost :time around
expect :arg0 ( fund :arg0 ( and :op1 school :op2 ( sport :arg1-of popular )  )  )  :arg1 contribution
present :arg1 ( apply :arg1 ( hall :mod ( metre :quant 36 )  :quant ( x :quant 18 )  )  :topic ( plan :arg1 ( project :part ( step :mod next )  )  )  )  :arg2 ( administrate :arg1 district )  :purpose review
move :arg1 ( organization :name ( name :op1 peissenberg :op2 clinic )  )  :arg2 ( country :name ( name :op1 schongau )  )
plan :arg1 ( close :arg1 ( hospital :wiki - )  )  :time early :time ( date-entity :year 2016 )
become :arg1 ( person :arg0-of ( have-org-role :arg1 ( hospital :wiki - )  :arg2 ( director :mod new :mod medicine )  )  :name ( name :op1 wilhelm :op2 fischer )  :poss-of ( time :arg1-of ( same :arg0 66 )  )  )
move :arg0 ( and :op1 ( majority :quant-of ( person :arg1-of employ )  )  )  :arg1 ward :arg2 ( country :name ( name :op1 schongau )  )  :arg3 ( country :name ( name :op1 peissenberg )  )
surprise :arg0 ( plan :arg0 company :arg3 ( allow :arg1 this )  )  :arg1 ( district :arg1-of limit )  :arg2 ( confirm :arg0 ( person :name ( name :op1 andrea )  :poss-of weis :poss-of jochn :wiki - )  :arg1 district :prep-on administrator )  :arg3 hospital
and :arg1-of ( come :arg0 23 :arg4 ( decide :arg0 9 :arg1 this )  )  :op1 ( meet :arg0 ( organization :name ( name :op1 board :op2 of :op3 directors )  )  :arg1 ( wednesday :mod next )  :arg2 they )
remain :arg1 ( person :arg0-of ( implement :arg1 ( plan :arg0 ( country :name ( name :op1 peissenberg )  )  :mod this )  )  :arg1-of ( employ :arg0 hospital :time ( then :mod-of all )  )  :quant ( nearly :op1 50 )  )  :arg3 employment
move :arg0 ( majority :degree vast )  :arg2 ( and :op1 ( person :name ( name :op1 fischer )  )  :op2 ( ward-off :arg0-of ( continue :arg1 ( exist :arg2 ( country :name ( name :op1 schongau )  )  )  :mod still )  :arg1 medicine :arg1-of internal )  )
available :arg2 premise
say :arg0 ( person :name ( name :op1 jochner-weiss )  )  :arg1 ( offer :arg1 ( position :location ( country :name ( name :op1 weilheim )  )  )  :arg2 ( person :arg0-of ( go :arg1-of ( possible :polarity - )  :arg4 ( country :name ( name :op1 schongau )  )  )  :arg1-of employ :mod that )  )
inform :arg1 employe :arg2 plan
and :op1 ( director :arg2-of ( have-org-role :arg0 ( person :arg0-of ( resign :arg0-of ( trigger :arg1 change )  )  :name ( name :op1 andreas :op2 eder )  )  :arg1 ( clinic :mod ( country :name ( name :op1 schongau )  )  )  :time ( since :op1 ( begin :arg1 year )  )  )  :mod clinical )  :op2 ( move :arg2 ( practice :arg1-of private )  :manner ( vicinity :mod immediate :poss hospital )  :time now )
say :arg0 question :arg1 ( recommend :arg0 succeed )  :arg2-of ( take :arg0 ( person :arg0-of lead :name ( name :op1 when )  )  :arg1 ( he :arg0-of ( prepare :arg1 declare :arg2 name )  :arg0-of ( move :arg1-of ( raise :arg0 team )  :arg2 and :time ( date-entity :month 10 )  )  )  :purpose 1 )
say :arg0 ( person :name ( name :op1 for )  :op2-of ( and :op1 ( expand :arg0-of ( internal :arg1 field )  :arg1 ( change :arg0 hospital :arg1 this :arg1-of mean )  :arg1-of upgrade :arg1-of ( offer :arg0 service )  )  )  )  :arg1 medicine
specialize :arg0 ( person :domain ( person :name ( name :op1 fisher )  )  )  :arg1 ( and :op1 ( pacemaker :mod cardiac )  :op2 defibrillator )
bed :arg1 ( internal :arg0 180 :arg1 ( department :mod ( medicine :part-of ( country :name ( name :op1 schongau )  )  :poss-of ( disorder :mod gastroenterological )  )  )  )
and :op1 next :op2 ( mine :arg0 year :arg1 former )  :op3 ( close :arg0 hospital :arg1 ( bed :arg1 35 )  :time final :time ( after :op1 ( almost :op1 140 :quant-of ( temporal-quantity :unit year )  )  )  :time still )  :op4-of ( and :op1 ( he :arg0-of ( run :arg1 both )  )  :op2 team :op3 ( organization :arg0-of ( agree :arg1 management :arg1-of ( will :arg0 period :mod this )  )  :name ( name :op1 board )  :wiki international_narcotics_control_board )  :quant ( temporal-quantity :quant 2 :quant next :unit year )  )  :quant establishment
plan :arg0 district :arg1 this :extent far :time ( date-entity :year 2018 )  :time ( current :time-of ( restore :arg0 thu :arg1 ( hospital :mod ( country :name ( name :op1 weilheim )  )  )  :arg1-of finish :mod ongo )  )
seek :arg0 person :arg1 ( build :arg1 ( own :arg0 ( thing :name ( name :op1 federal :op2 association )  )  :arg1 miner )  :arg1-of ( use :arg0 ( person :arg0-of ( contradict :arg1 rumour )  :arg0-of ( have-org-role :arg1 ( board :consist-of management )  :arg2 ( chairman :mod also )  )  :mod ( administrator :mod district )  :name ( name :op1 jochner-weiss )  )  :arg2 accommodation :time future )  )  :topic asylum
say :arg0 ( person :name ( name :op1 &quot; )  )  :arg1 ( and :arg0-of ( need :arg1 more :arg1-of ( consider :arg0 ( i :arg0-of ( rule :arg1 that :arg1-of possible :arg2 out )  )  )  )  :arg1-of ( build :arg0 amr-unknown )  :arg1-of ( possible :polarity - )  )
psychiatric :mod-of ( facility :mod short :mod daytime :op2-of ( and :arg1-of ( house :arg2 there :time moment )  :op1 ( facility :arg0-of ( care :arg1 ( name :op1 caritas )  )  )  )  )
say :arg0 ( we :arg0-of ( understand :arg1 by :op2-of ( and :arg2-of ( move :arg0 about :arg1 lech )  :op1 ( accept :arg1 positive :arg2 ( person :arg1-of employ )  :polarity - )  )  )  :arg0-of ( get :arg2 ( opportunity :mod of :mod-of again )  :mod-of ( sort :mod this )  :op4-of ( and :arg1-of possible :op1 it :op2 ' :op3 ( thing :mod ( good :degree most )  :mod that )  )  )  )  :arg1 fisch
exist :arg1 ( prospect :arg1 ( build :arg1-of ( work :arg0 ( person :arg0-of ( have-org-role :arg2 chief :arg3 physician )  :name ( name :op1 fischer )  )  :duration ( temporal-quantity :quant 30 :unit year )  )  )  :mod real )  :mod really :polarity -
ask :arg0 he :arg1 ( take :arg1 post )  :arg4 ( country :arg1-of ( have-org-role :arg2 ( director :mod medicine )  )  :name ( name :op1 schongau )  )  :medium colleagu
and :arg1-of ( close :arg0 department :manner constant )  :op1 ( surgery :arg0 example :arg1 100 :prep-under ( threaten :arg0 ( temporal-quantity :mod last :unit decade )  :arg1 closure :arg2 ( hospital :arg1-of ( bed :quant once )  :mod ( thing :name ( name :op1 piessenberg )  )  )  )  )  :op2 obstetric
p.m. :op1-of ( thing :arg2-of ( challenge :arg0 handballer :arg1 ( evening :mod this )  )  :domain ( country :mod-of 8 :name ( name :op1 rhein-neckar )  )  :name ( name :op1 bergischer :op2 hc )  )  :quant 15
arrogance :arg2-of ( clear :arg1 ( favourit :domain ( person :arg0-of ( lead :arg1 ( thing :name ( name :op1 bundesliga )  )  )  )  :location ( country :name ( name :op1 wuppertal )  )  )  )  :purpose-of ( ground :polarity - )
and :op1 ( suffer :arg0 ( team :arg0-of ( defeat :arg0-of ( pain :arg1 there )  :arg1 they :location ( organization :name ( name :op1 bhc )  )  )  :mod ( country :name ( name :op1 baden )  )  )  :arg1 ( season :mod past )  )  :op2 ( ground :quant some )
injure :arg0 ( accident :arg1-of ( near :arg2 ( country :name ( name :op1 pratau )  )  )  :purpose hunt )  :arg1 2
injure :arg1 ( person :arg0-of ( drive :arg1 tractor )  :part tuesday :quant 2 )  :condition ( shoot :arg1 they :arg3 ( harvest :arg1 maize )  )  :degree serious
say :arg0 ( police :mod ( country :arg2-of ( near :arg0 ( district :mod ( country :name ( name :op1 wittenburg )  )  )  :arg1 ( field :source-of corn )  :location-of ( action :location-of ( number :arg0-of harvest :quant-of huntsman )  )  )  :name ( name :op1 pratau )  )  )
and :op1 ( suffer :arg0 one :arg1 ( injure :arg0 63 :arg1 22 :mod severe )  :time ( after :op1 ( fire :arg1 shot )  )  )  :op2 ( take :arg0 ( man :op1-of and :quant 2 )  :arg1 other :arg3 hospital )
clear :arg1 ( cause :arg1 accident :manner precise )  :mod initial :polarity -
try :arg0 ( person :arg0-of investigate :arg2-of criminal )  :arg1 ( determine :arg1 detail :arg0 person )
miss :arg0 16 :arg1 old :arg2 year :arg4 ( victim :arg2-of ( crime :mod violent )  :domain-of ( rhineland :mod-of palatine )  )
miss :arg0 ( rhineland :source-of ( old :consist ( body :arg2-of ( lead :arg0 ( suspect :arg1 saturday )  :arg1 police )  :consist-of year :consist-of 16 )  )  )  :arg1 palatine :time since
and :arg2-of ( admit :arg0 old :arg1 year :time ( question :arg1 20 )  )  :op1 ( kill :arg1 teenager )  :op2 ( throw :arg1 body :arg2 canal )
sixteen :arg2-of ( miss :arg0 old :arg1 year :source rhineland :source palatine :time ( since :op1 ( crime :arg1 saturday :arg2 victim :mod violent )  )  )
and :arg2-of ( near :arg1 ( find :arg0 young :arg1 evening :manner woman :time tuesday )  :mod ( body :mod-of of )  )  :op1 office :op2 police :op3 ( report :arg1 wednesday :arg1-of ( prosecute :arg0 public )  )
investigate :arg0 ( person :arg2-of ( lead :arg1 ( site :arg0-of ( find :arg1 body )  )  :op2-of ( and :op1 ( confess :arg0 ( old :quant ( temporal-quantity :quant 20 :unit year )  )  :arg1 ( suspect :arg1-of ( arrest :mod also )  :time evening )  :arg2 ( crime :arg1 tuesday )  )  )  )  )
report :arg0 year :arg1 old :arg2 ( miss :arg0 16 :arg1 sunday )  :concession ( return :arg0 autumn :arg1 she :arg2 ( agree :time ( after :op1 ( attend :arg1 party )  )  )  :arg4 home :polarity - )  :time morning
find :arg0 ( person :arg0-of ( search :arg2 ( woman :mod young )  )  :arg0-of investigate )  :arg1 ( item :arg0-of ( belong :arg1 victim )  :arg1-of personal )  :time initial
interview :arg1 ( person :arg0-of ( have-rel-role :arg1 ( girl :arg1-of ( miss :arg0 with )  :mod-of ' )  :arg2 friend )  :arg1-of ( become :arg2 ( suspect :arg0 year )  :mod old )  :op3-of ( and :arg2-of ( result :arg1 20 :mod ultimate )  :op1 circle :op2 of :op4 acquaintanc )  )
presume :arg1 ( person :arg0-of perpetrate :arg0-of ( lead :arg1 police :arg2 canal :location ( country :arg0-of ( find :arg1 body )  :name ( name :op1 rockenhausen )  )  :time then )  )
canal :arg2-of ( throw :arg0 ( he :arg0-of ( kill :arg1 old :arg2 ( man :arg0-of ( confess :arg1 police :time ( interrogate :op1-of under )  )  :arg1-of arrest )  :op1-of ( and :op2 16 :poss-of year )  )  )  :arg1 body )
bring :arg0 old :arg2 ( before :op1 magistrate )  :beneficiary year :beneficiary 20 :op1-of ( and :op2 ( person :arg0-of investigate :arg0-of ( reduce :arg1 ( charge :arg0 manslaughter :arg1 person )  )  )  )  :time wednesday
carry-out :arg1 investigate :arg2 ( regard :arg1 ( detail :arg1 ( circumstance :mod ( crime :arg1 further )  :mod exact )  )  )
need :arg0 refuge :arg1 ( accommodation :arg1-of ( study :arg1-of ( house :arg0 gap )  :arg1-of warn )  )
tense :arg1 ( situation :location ( market :arg0-of ( house :arg1 ( country :name ( name :op1 germany )  :wiki germany )  )  )  )
seek :arg0 ( refugee :quant ( more :op1-of and )  )  :arg1 ( place :arg1-of ( afford :arg0 more )  )  :arg2 stay :op1-of and
grow :arg1 ( pressure :arg1 ( market :arg0-of house )  )
face :arg0 ( house :mod social )  :arg1 challenge
begin :arg1 ( struggle :arg1 ( market :arg0-of ( house :arg1 ( country :name ( name :op1 germany )  :wiki germany )  )  )  :arg2 ( thing :arg1-of allocate )  )  :arg1-of long
and :op1 ( more :quant-of ( person :arg0-of ( crowd :arg1 ( market :arg1-of ( overburden :arg0 ( town :mod large :quant many )  :op1-of more :time already )  )  )  :arg0-of ( arrive :arg1 ( and :op1 ( person :arg0-of ( seek :arg1 job )  )  )  :arg3 ( organization :name ( name :op1 eu )  :wiki european_union )  :arg4 refugee )  )  )
compete :arg0 they :arg1 ( person :arg0-of reside :arg0-of ( afford :arg1 ( home :mod last )  )  )  :arg2 ( income :arg1-of low )
build :arg1 ( unit :mod new )  :purpose ( demand :arg1 ( home :arg1-of ( afford :arg0 ( date-entity :year 2020 )  )  )  :arg1-of ( supply :arg0 every )  )  :time year
conclude :arg0 this :arg1 ( study :arg0-of ( commission :arg1 ( of :value-of association )  )  :arg1 federation :arg1-of ( house :arg0 social )  :arg1-of reach )
complete :arg1 unit :arg1-of ( compare :arg2 ( country :name ( name :op1 germany )  :wiki germany )  )  :time ( year :mod this )
amount :arg1 this :arg2 ( shortfall :op1 home )
reception :mod-of ( accommodation :arg1-of ( seek :arg0 ( person :arg0-of ( live :arg2-of ( oblige :arg1 ( refugee :domain-of initial )  :polarity - :time after )  )  :arg1-of ( stay :arg0 ( temporal-quantity :quant 3 :unit month )  )  )  :topic asylum )  )
push :arg0 ( flat :mod rental )  :arg1 ( market :arg0-of house :op1-of onto )  :op1-of ( and :op2 ( stand :arg0 many :arg1 ( queue :arg1-of long )  :arg2 front )  )  :time then
say :arg0 ( organization :mod ( country :name ( name :op1 germany )  :wiki germany )  :name ( name :op1 federal :op2 statistical :op3 office )  )  :arg1 ( live :arg0 ( person :arg0-of ( seek :arg1 asylum )  :poss-of half :quant all )  :arg1 few :location tenant :location ( year :mod last )  )
increase :arg1 ( number :quant-of refugee )  :purpose-of ( house :arg0 ( market :arg1-of ( develop :mod negative )  )  :arg1 ( just :polarity - )  )
point-out :arg1 ( study :arg0-of ( significant :arg1 failing )  :purpose ( house :arg0 policy :arg1 ( year :mod last )  )  )
every :arg1-of ( house :arg0 ( deficit :arg0-of ( increase :arg2 ( country :name ( name :op1 germany )  :wiki germany )  :time year )  )  )
lament :arg0 ( unit :arg0-of ( live :arg1-of ( study :arg1-of ( author :arg0 person )  )  )  :quant around )  :arg1 ( person :name ( name :op1 matthias :op2 günther )  )  :arg2 ( shortfall :location ( area :mod urban )  :time current )
flat :mod-of ( share :arg0-of ( live :arg1 ( town :mod large )  :arg2-of ( force :arg1 ( professional :quant many )  )  )  :mod-of this )
necessity :op1 ( live :arg1 ( thing :name ( name :op1 due )  )  :arg1-of ( long :arg2 adult :degree of )  :condition-of ( slump :arg0 due :arg1 ( market :arg1-of house :mod-of young )  )  )
decrease :arg1 ( time :arg1-of ( head :arg0 ( temporal-quantity :op1-of few :unit ( year :mod last )  )  :arg2 ( metr :quant number :quant square )  :time ( town :mod large )  )  )
suggest :arg0 ( alliance :arg0-of ( start :arg1 fresh )  )  :arg1 ( house :arg0 social :arg1 ( problem :arg1-of solve )  )
recommend :arg1 ( revive :arg0 ( thing :arg0-of incentivize :mod new )  :arg1 ( house :mod society )  )
possible :arg1 ( and :op1 ( waive :arg1 ( tax :arg1 ( transfer :arg1 land )  )  :purpose example )  :op2 ( suspend :arg0 ( tax :arg1 land :arg3 ( house :mod sponsor )  )  :duration temporary )  )
associate :arg0-of ( say :arg1 ( thing :arg1-of ( attract :arg2-of tax )  :arg1-of possible :mod depreciation )  )  :arg1 addition
and :op1 ( program :arg1-of ( fund :arg0 state )  :mod refugee :mod bank )  :op2 ( receive :arg1 already )  :op3 ( town :mod well )  :op4 ( authority :arg1-of local )
request :arg0 ( 300 :op1-of around )  :arg1 ( program :op1-of ( after :time-of ( start :arg0 monday :arg1 ( good :poss evening )  :time week )  )  )  :time already :time ( make :arg1 ( available :arg0 half :arg1 more )  )
possible :arg1 ( step-in :arg1 project :mod even )  :time now
and :arg0-of ( put :arg1 corridor :arg2 place )  :op1 ( country :arg2-of ( safe :arg1 ( conduct :arg1 refuge )  )  :name ( name :op1 croatia )  :wiki croatia )  :op2 ( country :name ( name :op1 slovenia )  :wiki slovenia )
and :op1 more :quant-of ( refugee :arg1-of ( choose :arg0 ( country :name ( name :op1 croatia )  :wiki croatia )  :arg1-of ( let :arg0 more :arg1-of ( stop :arg0 ( country :name ( name :op1 hungary )  :wiki hungary )  :op1-of ( since :time-of route )  :time virtual )  )  )  )
announce :arg0 ( country :arg0-of ( pass :arg2 ( country :name ( name :op1 slovenia )  :wiki slovenia )  )  :name ( name :op1 zagreb )  )  :arg1 ( allow :arg0 they :arg1 north :prep-without obstacle )
dangerous :domain route
corridor :arg1-of ( establish :arg0 ( country :arg1-of ( neighbor :arg0 ( country :arg0-of ( want :arg1 ( come :arg4 agree )  )  :name ( name :op1 croatia )  :wiki croatia )  )  :name ( name :op1 slovenia )  :wiki slovenia )  )  :beneficiary refugee
say :arg0 ( we :arg0-of ( organize :arg1 corridor )  :arg1-of ( cause :arg0 ( and :op1 ( thing :arg0-of ( have-org-role :arg2 minister )  :arg1-of ( speak :arg0 i )  :name ( name :op1 &quot; )  )  :op2 interior )  )  )  :arg1 ( thing :arg0-of ( have-org-role :arg1 interior :arg2 minister )  :name ( name :op1 &quot; )  )  :arg2 ( person :name ( name :op1 &quot; )  )
and :arg2-of ( lie :arg1 ( country :arg0-of ( belong :arg1 ( zone :mod ( thing :name ( name :op1 schengen )  )  )  :time already )  :name ( name :op1 slovenia )  :wiki slovenia )  :op1-of ( and :op2 ( country :name ( name :op1 croatia )  :wiki croatia )  :op3 ( country :name ( name :op1 austria )  :wiki austria )  )  )
thing :domain ( have-org-role :arg0 ( country :domain-of ( country :manner yet :polarity - )  :name ( name :op1 croatia )  :wiki croatia )  :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  :arg2 member )  :name ( name :op1 schengen )
hundred :arg0-of ( reach :arg1 ( continent :location ( world-region :name ( name :op1 west )  :wiki western_world )  :name ( name :op1 europe )  :wiki europe )  :arg2 ( country :arg0-of ( seal :arg1 ( border :arg0 there :arg1 ( thing :name ( name :op1 hungarian )  )  :arg2 ( country :name ( name :op1 serbia )  :wiki serbia )  )  :op1-of after )  :name ( name :op1 croatia )  :wiki croatia )  )  :mod refugee
come :arg0 ( thing :name ( name :op1 croatian )  )  :arg1 person :arg4 ( country :arg2-of ( border :arg1 5 :arg2-of ( report :arg0 ( organization :mod television :name ( name :op1 rtl )  :part-of station )  )  )  :name ( name :op1 tovarnik )  )
cordon :arg0 ( country :name ( name :op1 hungary )  :wiki hungary )  :arg1 border :arg2 refugee :time ( day :mod previous )
fair :mod-of ( proceeding :domain-of ( redundant :mod practical )  :location ( country :name ( name :op1 hungary )  :poss-of ( force :arg4-of ( come :arg0 ( law :mod new )  :arg1 ( day :arg1-of ( same :arg0 moreover )  )  )  )  :wiki hungary )  :topic asylum )
want :arg0 ( country :name ( name :op1 croatia )  :wiki croatia )  :arg1 ( let :arg1 ( pass :arg0 refugee )  :arg0 country )
and :arg1-of ( prepare :arg0 we :arg2 ourselv )  :arg1-of possible :arg1-of possible :op1 ( pass :arg0 they :arg1 ( explain :arg0 ( person :arg0-of ( have-org-role :arg2 ( minister :mod prime )  )  :name ( name :op1 the )  )  :arg1 this )  )
and :arg1-of ( want :arg0 man )  :op1 ( person :mod this )  :op2 ( live :arg0 ( and :op1 woman :op2 ( child :domain they )  )  :arg1 there )  :op3 ( achieve :arg1 something )
want :arg0 person :arg1 ( live :arg0 they :location ( country :name ( name :op1 croatia )  :wiki croatia )  )  :polarity -
pick-up :arg0 ( police :mod ( thing :name ( name :op1 croatian )  )  )  :arg1 refugee :arg2 ( border :arg1 ( country :arg2-of ( neighbor :arg0 morning :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  )  :name ( name :op1 croatia )  :wiki croatia )  :arg2 ( country :name ( name :op1 serbia )  :wiki serbia )  )
say :arg0 ( report :arg0 media )  :arg1 ( come :arg0 most :arg3 ( country :name ( name :op1 syria )  :wiki syria )  :op1-of ( and :op2 ( country :name ( name :op1 iran )  :wiki iran )  :op3 ( country :name ( name :op1 afghanistan )  :wiki afghanistan )  )  )
arrive :arg0 ( and :op1 bus :op2 ( taxi :arg1 both )  )  :arg1 they :arg4 ( town :location ( border :arg1 ( country :name ( name :op1 serbia )  :wiki serbia )  :arg2 ( country :name ( name :op1 sid )  )  )  )
try :arg0 they :arg1 ( reach :arg1 ( border :arg1 ( country :name ( name :op1 croatia )  :wiki croatia )  :arg1-of green )  :prep-on foot :arg0 they )  :time ( after :op1 arrive :op1-of immediately )
come :arg1 refugee :path ( across :op1 ( fence :arg1-of border )  )  :polarity - :time ( border :arg1 ( country :name ( name :op1 serbia )  :wiki serbia )  :arg2 croatian )
hold :arg0 ( strip :arg1-of ( border :arg0 still :purpose ( activity :arg0 ( war :location 90 :mod civil :quant ( thing :name ( name :op1 yugoslavian )  )  )  :arg1 mine )  )  )  :arg1 ( danger :mod other )
plan :arg1 ( it :arg1-of ( create :arg0 ( minesweeper :arg1-of ( pass :arg1-of safe )  )  :arg1-of quick )  )  :time now
come :arg1 ( refugee :quant ( more :mod any )  )  :arg4 ( country :arg2-of border :name ( name :op1 hungary )  :wiki hungary )  :time ( after :op1 closure :quant-of hardly )  :time meanwhile
count :arg0 ( police :mod tuesday )  :arg1 ( person :arg0-of ( pick-up :arg1 they )  )
close :arg0 number :arg1 ( gate :arg1 monday )  :op1-of ( before :quant short )
classify :arg1 ( and :op1 ( climb :arg0 ( law :mod new :topic ( thing :name ( name :op1 hungarian )  )  )  :arg1 ( fence :arg1-of border )  :arg2 ( offence :arg2-of criminal )  )  :op2 damage )
hungarian :op2-of ( name :name-of ( thing :mod-of ( town :location ( border :arg1 35 :arg1-of ( proceeding :arg1-of initiate :arg2-of ( lead :arg1 this )  :arg2-of criminal )  :arg2 ( country :name ( name :op1 szeged )  )  )  )  )  :op1 south )
threaten :arg0 ( 5 :quant-of ( temporal-quantity :unit year )  )  :arg1 that :arg1-of convict :prep-with ( sentence :op1-of ( and :op2 ( extradite :arg0 country )  )  )
say :arg0 ( authority :arg0-of ( accept :arg1 new )  :arg0-of ( cross :arg1 93 :mod ( big :degree most )  )  :arg0-of ( border :arg1 ( almost :op1 all )  )  :arg0-of ( of :arg1 94 )  :arg0-of ( transition :arg1 zone )  :arg0-of ( total :arg1 application )  :arg1-of immigrate )  :arg1 asylum
and :op1 ( person :arg0-of apply )  :op2 ( family :quant 13 :topic ( child :mod small )  )  :op3 ( person :mod old :quant 2 )
stop :arg0 wednesday :arg1 ( refugee :mod another :quant 40 )  :location there :time morning
chance :arg0 ( nobody :mod else )  :arg1 ( grant :arg1 asylum :location ( country :name ( name :op1 hungary )  :wiki hungary )  )  :time practice
opine :arg1 ( country :name ( name :op1 hungary )  :wiki hungary )  :arg1-of ( say :arg0 ( country :arg1-of safe )  )
deport :arg1 ( person :arg0-of ( seek :arg1 asylum )  :arg1-of reject )
transition :arg0 zone :arg1-of ( gather :arg0 ( refugee :mod ( only :mod-of few )  )  :time now )
begin :arg1 ( clean :arg0 worker :arg1 ( country :name ( name :op1 röszke )  )  )
collect :arg0 ( they :arg0-of ( lie :arg1 ( thousand :mod person )  :arg1-of ( leave :arg0 ten :time ( last :mod-of ( week :unit-of temporal-quantity )  )  )  :arg2 side )  )  :arg1 rubbish :arg2 road
and :op1 ( dismantle :arg1 ( barrier :mod crowd )  )  :op2 ( rebuild :arg1 ( centre :location ( town :location border )  :mod reception )  )
want :arg1 ( talk :arg1 ( goal :topic ( rebuild :arg1 - :mod this )  )  )
and :op1 ( country :arg1-of ( border :arg2 ( country :name ( name :op1 hungary )  :wiki hungary )  :part ( closure :op1-of after )  )  :name ( name :op1 serbia )  )  :op2 ( country :name ( name :op1 austria )  :poss-of ( refugee :quant ( few :mod only )  )  :wiki austria )
strengthen :arg0 ( country :domain-of furthermore )  :arg1 ( control :arg1 border )
say :arg0 ( government-organization :arg0-of ( govern :arg1 country )  :arg1-of ( have-org-role :arg0 ( person :arg0-of migrate :quant around )  :arg2 still )  )
travel :arg0 ( person :op1-of some )  :arg2-of ( wait :location ( country :name ( name :op1 salzburg )  )  :arg1 person )  :arg4 ( country :name ( name :op1 germany )  :wiki germany )
stop :arg1 ( service :mod train :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :path ( instruction :mod-of ( authority :mod ( country :name ( name :op1 germany )  :wiki germany )  )  )  :time morning
meet :arg0 one :arg1 ( group :location ( country :name ( name :op1 freilassing )  )  :mod small :mod refugee )  :arg1-of regular :arg2 foot
drive :arg1 ( person :arg0-of ( have-org-role :arg2 mayor )  :arg1-of strand )  :arg1-of border
say :arg0 suitcas :arg1 ( of :arg1-of ( have-org-role :arg0 ( person :arg0-of ( stand :arg1 entrance :arg2 tent :time ( after :time-of ( bridge :arg0 ( we :arg0-of ( clean-up :arg1 busy )  )  :arg1 festival :arg2 sunday )  )  :time there :time ten :time sudden )  )  :arg2 mayor )  )  :arg2 ( person :name ( name :op1 &quot; )  )
tour :arg0 ( person :arg0-of ( want :arg1 train )  )
say :arg0 ( he :arg0-of ( offer :arg1 immediate :arg3 ( come :arg1 ( journey :arg0 refugee :arg1 ( flux :arg0 ( country :arg0-of ( stop :arg1 unexpectedly )  :arg0-of ( cause :arg1 train )  :name ( name :op1 germany )  :poss-of service :wiki germany )  :arg1 sunday )  )  :arg1-of halt )  )  :arg0-of ( chauffeur :arg1 helper )  :arg0-of ( help :arg1 2 )  )  :arg1 ( and :op1 together :op2 ( person :arg0-of ( border :arg1 ( country :name ( name :op1 austria )  :wiki austria )  )  :arg1-of ( strand :arg0 other )  :op2-of ( and :op1 car )  )  )
and :arg2-of ( entertain :arg0 we :arg1 ( guest :arg0-of surprise :poss we )  :time ( before :op1 that )  )  :op1 snack :op2 drink
say :arg0 we :arg1 ( take :arg0 we :arg3 ( country :name ( name :op1 passau )  )  :manner car )  :arg2 once
say :arg0 it :arg1 ( person :arg0-of ( talk :arg1 ( organization :name ( name :op1 &quot; )  )  )  :name ( name :op1 &quot; )  :poss-of ( course :mod of :mod matter )  )
grateful :degree very :domain they
insist :arg0 ( man :quant 1 )  :arg1 ( hand :arg2 ( donate :arg1 100 :arg2-of ( generous :arg1 ( fire :arg1 brigade )  )  )  )
say :arg0 ( we :arg0-of ( please :arg1 that :arg2 about :degree very )  )  :arg1 ( person :name ( name :op1 &quot; )  )
attempt :arg1 ( cross :arg1 ( border :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2 ( country :location-of ( train :arg1-of ( change :arg0 ( passenger :arg1-of strand :mod train )  :arg2 ( train :mod ( ice :arg0 evening )  )  :time ( after :op1 ( announce :arg0-of surprise :arg1 ( service :mod train )  )  )  )  )  :name ( name :op1 wels )  )  )  :mod anyway )  :arg2-of ( suspend :arg0 ( country :destination-of ( train :mod region )  :name ( name :op1 passau )  )  :arg1 sunday )
contrast :arg1 ( stop :arg1 ( train :mod region )  :time ( before :op1 ( country :arg1-of border :name ( name :op1 wernstein :op2 am :op3 inn )  )  )  )
popular :arg1 ( excursion :topic ( border :arg1 ( country :name ( name :op1 wernstein )  )  )  )  :arg1-of general :degree very
and :op1 ( sunday :quant 2 )  :op2 ( bridge :mod athletic )  :op3 ( walk :arg0 ( thing :arg1-of bridge :name ( name :op1 festival :op2 association )  )  :arg1 ( event :mod society )  :manner before :prep-with ( neighbour :mod ( person :mod ( state :name ( name :op1 bavaria )  )  :op2-of ( and :domain ( thing :domain-of ( effort :mod joint )  :name ( name :op1 bridge :op2 festival )  )  :op1 ( person :name ( name :op1 neukirchen )  :op3-of ( and :op1 ( country :name ( name :op1 wernstein )  )  :op2 ( thing :name ( name :op1 bavarians )  )  )  )  )  )  )  :time day )
result :arg0 thousand :arg1 ( policy :mod hypocrisy )  :arg2 ( fact :topic ( send :arg0 ( person :name ( name :op1 viktor :op2 orbán )  )  :degree more )  )  :manner ten :mod logical
and :op1 ( move :arg0 official :arg1 ( we :arg0-of ( have-org-role :arg1 ( construct :arg0 camp :arg1 structure :arg1-of ( ensure :arg2 level )  :arg1-of ( provide :arg0 ( socialism :mod nation )  :arg2 ( help :arg0 immediate )  )  :arg1-of ( instead-of :arg2 humanity )  )  :arg2 chancellor )  )  :arg1-of public :arg2 ( government-organization :arg0-of govern :arg0-of ( stand :arg1 atmosphere :arg2 close )  )  )
thing :arg1-of ( confront :arg2 ( condition :location ( area :location-of ( border :arg1 ( victim :mod policy )  )  )  :mod chaotic )  :time now )  :domain it :mod ( only :polarity - )  :name ( name :op1 austrians )
welcome :arg1 ( and :arg1-of ( invite :arg0 ( they :arg0-of ( consider :arg1 camp :arg2 ( refugee :mod another )  :polarity - )  )  )  :arg2-of ( promise :arg0 ( notice :arg0 too :arg1 that )  :arg1 land )  :op1 ( flee :arg1 that )  )
asylum :arg1-of ( seek :arg0 ( person :beneficiary-of ( condition :arg1-of ( create :arg0 it :arg1-of ( challenge :mod huge )  )  :mod humane )  :op4-of ( and :op1 light :op2 ( flow :arg1 refugee :arg1-of continue )  :op3 ( winter :arg1-of approach )  )  )  )
and :arg1-of ( maintain :arg0 ( still :mod-of great )  :location ( country :name ( name :op1 austria )  :wiki austria )  )  :op1 peace :op2 security :op3 stability
look :arg0 ( person :name ( name :op1 konrad )  )  :arg1 ( accommodation :mod ( proof :mod winter )  )
host :arg1 refugee :arg2 ( person :name ( name :op1 konrad )  :part hand )  :compared-to-of full
carry-out :arg0 word :arg1 weight :topic-of ( fact :arg1-of ( use :arg0 ( person :name ( name :op1 christian :op2 konrad )  )  )  )
engage :arg1 ( government-organization :arg0-of ( establish :arg1 accommodation :arg2 ( bank :arg0 ( thing :name ( name :op1 raiffeisen )  )  :arg1 ( refugee :mod-of thousand )  :arg1-of powerful :time former )  )  :arg0-of govern )
reception :mod-of ( centre-left :location-of ( chaos :arg1-of ( grip :arg0 ( person :name ( name :op1 konrad )  )  :arg1-of ( get :time already :arg0 person )  )  )  :mod ( country :name ( name :op1 traiskirchen )  )  )
report :arg0 ( he :arg2-of ( long :arg0 we :arg1 home :polarity - )  )  :arg1 ( he :arg0-of ( achieve :arg1 ( person :mod any :mod ( country :name ( name :op1 &quot; )  )  )  :op1-of first )  )
say :arg0 masterpiece :arg1 ( praise :location organisational )  :arg1-of ( fuss :arg0 ( country :location-of ( and :op1 ( accommodate :arg1 refugee )  :op2 ( arrive :arg1 monday )  )  :name ( name :op1 austria )  :wiki austria )  :mod ( great :mod any )  )
of :arg0-of ( have-org-role :arg1 ( situation :arg1-of critical :arg1-of ( talk :arg0 interior )  )  :arg2 minister )
estimate :arg0 ( person :name ( name :op1 konrad )  )  :arg1 ( require :arg2 accommodation :time ( year :mod current )  )  :arg2 total
and :arg0-of ( meet :arg1 ( figure :mod this )  :time-of ( find :arg1 accommodation )  )  :op1 ( state :arg1-of ( provide :arg0 ( government-organization :arg0-of ( govern :arg1 ( next :mod-of ( week :unit-of temporal-quantity )  )  )  :mod federal )  :op1-of another )  )
possible :arg1 ( manage :arg0 we :arg1 ( refugee :quant more )  )
contrast :arg1 it :arg2 ( say :arg0 bottomles :arg1 ( person :arg1-of ( pit :arg0 - )  :name ( name :op1 &quot; )  )  )
carry-out :arg0 he :arg1 ( talk :arg0 ( organization :name ( name :op1 state :op2 governors )  )  )  :time already
assure :arg0 ( they :arg0-of ( find :arg1 accommodation :mod also :time ( arrive :arg0 ( refugee :mod next )  )  )  )
say :arg0 ( country :name ( name :op1 austria )  :wiki austria )  :arg1 ( person :mod well :name ( name :op1 &quot; )  )  :topic it
mandatary :arg0-of ( assist :arg1 ( person :name ( name :op1 konrad )  )  )  :time former
meet :arg1 ( person :arg0-of ( have-org-role :arg1 ( organization :arg0-of ( help :arg1-of confirm )  :name ( name :op1 church )  :wiki christian_church )  :arg2 cardinal )  :name ( name :op1 christoph :op2 schönborn )  )  :location there :time tomorrow
expect :arg0 coordinator :arg1 ( thing :arg1-of ( get :arg0 asylum :arg1-of high :mod also )  :manner-of ( help :arg0 ( we :arg0-of ( campaign :arg1 way )  )  )  )  :time of
possible :arg1 ( offer :arg0 ( individual :arg1-of private )  :arg1 ( accommodation :arg1-of simple :topic ( platform :mod this )  )  )
hope :arg0 it :arg1 ( include :arg0 this :arg1 ( hotel :arg1-of ( empty :frequency often :time winter )  )  )  :mod also
and :op1 ( person :name ( name :op1 konrad )  )  :op2 ( person :arg0-of ( high :arg1 ( accommodation :mod specification )  :degree too )  :name ( name :op1 konrad )  )  :op3 yesterday :op4 critisis
recommend :arg1 ( towel :arg1 - :arg2-of ( rail :arg1 skylight :op2-of ( or :op1 ( height :arg1-of ( comply :arg0 ( accommodation :arg1-of provide )  )  :mod certain )  :op3 size )  )  )  :arg1-of need
recommend :arg0 ( emergency :mod-of standard )  :arg1 ( period :arg1-of limit :arg1-of apply )
contrast :arg1 ( ministry :topic interior )  :time-of ( succeed :arg1 he :arg1-of ( justify :arg2-of ( use :arg1 ( experience :arg0 ( person :name ( name :op1 konrad )  )  )  )  )  :arg1-of recommend :arg2 accommodation )
and :op1 ( tell :arg0 nobody :arg1 untruth :arg2 face :manner ready :time ( i :domain-of ( man :mod old )  )  )
power :domain ( weapon :mod ( important :degree most )  :poss he )  :mod persuasion
cost :arg0 ( and :op1 ( person :name ( name :op1 konrad )  )  :op2 ( person :name ( name :op1 maier )  )  )  :arg1 republic :arg2 ( anything :arg1-of ( explain :arg0 they )  )  :polarity -
want :arg0 3 :arg1 ( raise :arg0 4 :arg1 ( number :quant-of ( person :arg2-of staff )  )  )
succeed :arg0 ( search :arg2 accommodation )  :polarity - :time yet
want :arg0 ( person :name ( name :op1 konrad )  :op1-of ( container :topic ( person :name ( name :op1 stephansplatz )  )  )  )  :arg1 office
contrast :arg2 ( problem :arg0-of ( obtain :arg1 approve )  )  :mod apparent
demand :arg0 ( country :name ( name :op1 linz )  )  :arg1 ( allocate :mod good )
plan :arg0 ( city :location ( country :name ( name :op1 linz )  )  )  :arg1 ( open :arg1 ( hall :mod new :mod sport )  :arg2 and )  :arg2 ( or :example-of ( building :mod other )  :op1 such :op2 ( country :mod-of ( refugee :beneficiary-of accommodation )  :name ( name :op1 tips :op2 arena )  )  :op3 ( thing :name ( name :op1 design :op2 centre )  )  )  :duration time :polarity -
say :arg0 ( person :arg0-of ( have-org-role :arg1 moment :arg2 mayor )  :arg1-of ( measure :arg0 - :arg2-of ( accommodate :arg1 ( person :arg1-of ( question :arg0 sp )  )  :arg1-of possible :time current )  :mod this )  :name ( name :op1 klaus :op2 luger )  )  :arg1 ( recommend :arg1 ( necesssary :domain this )  )
contrast :arg2 ( need :arg1 ( check :arg1 ( location :mod further )  :purpose suitability )  :time ( case :arg1 emergency )  )
criticize :arg0 ( chief :arg2-of ( have-org-role :arg1 town )  )  :arg1 ( allocate :arg0 ( state :mod federal )  :arg1 refugee )
recommend :arg1 ( contribute :arg0 ( district :mod other :wiki pulwama_district )  :mod also )
mean :arg1 ( will :arg1-of border :arg1-of ( cordon :polarity - )  )
agree :arg0 ( person :arg0-of ( call :arg1 ( telephone :arg1-of ( long :arg0 monday )  )  :arg2 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 csu )  )  :arg2 ( minister :mod prime )  )  :name ( name :op1 horst :op2 seehofer )  )  )  :name ( name :name-of ( person :arg0-of ( have-org-role :arg1 state :arg2 governor )  )  :op1 josef :op2 pühringer )  )  :arg1 ( further :mod-of ( action :topic ( issue :arg0 refugee )  )  )  :arg2 ( person :mod ( state :name ( name :op1 bavaria )  )  )
assure :arg0 ( person :arg0-of ( cordon :arg1 ( border :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :polarity - )  :name ( name :op1 seehofer )  )  :arg1 i
continue :arg0 ( country :name ( name :op1 federal :op2 republic )  )  :arg1 ( journey :arg1 refugee :arg1-of possible :mod onward )
exist :arg1 ( control :arg1 border :arg1-of appropriate )  :time now
travel :arg0 now :arg1 ( refugee :prep-with-of ( train :arg1-of special :mod any :polarity - )  )  :arg4 ( country :name ( name :op1 germany )  :wiki germany )
seek :arg0 that :arg1 ( protect :arg1 ( regular :arg1 train )  )  :arg1-of ( bring :arg2 ( country :name ( name :op1 germany )  :wiki germany )  )
call :arg0 ( person :name ( name :op1 pühringer )  )  :arg1 ( issue :arg0 ( state :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  :arg2 member )  :mod other )  :arg1 once :mod refugee )  :arg2 ( increase :arg1 solidarity )  :degree more
approach :arg0 ( country :arg1-of ( border :manner ( control :arg0 ( country :name ( name :op1 austria )  :wiki austria )  :arg1 it :arg1-of ( reintroduce :mod ( also :mod-of now )  )  )  )  :name ( name :op1 germany )  :wiki germany )  :arg1 of :mod ( consequence :op1-of logical )  :mod ( that :mod-of fact )
matter :domain ( person :mod next :name ( name :op1 runtastic )  )  :mod only :mod time
of :arg0-of ( renovate :arg1-of ( general :arg0 ( thing :mod-of ( industry :arg1-of ( finish :arg0 official )  :mod area )  :name ( name :op1 the )  )  )  )
list :arg0 it :arg1 ( move :arg0 ( group :name ( name :op1 s-400 )  )  :arg1 4 :arg2 ( and :op1 office :op2 ( manufacture :arg0 floor :arg1 of :arg2 ( build :arg0 6 :arg1 it )  )  :op3 ( plan :mod that :time ( rest :arg0-of ( innovate :arg1 ( technology :mod sector :mod business )  )  :arg0-of ( rent-out :arg1 young )  )  :time ( date-entity :year 2700 )  )  )  :mod ( aircraft-type :name ( name :op1 t50 )  :wiki sukhoi_pak_fa )  :op1-of into )  :arg1-of public
say :arg0 in :arg1 ( aircraft-type :name ( name :op1 t50 )  :wiki sukhoi_pak_fa )  :arg1-of ( work :arg0 ( person :arg0-of ( have-org-role :arg1 niederhaus :arg2 boss )  :arg0-of ( head :arg1 we )  :arg1-of ( clever :arg0 it )  :name ( name :op1 s-400 )  :op1-of ( and :op2 raw :op3 material :op4 must :op5 ( try :arg0 we :arg1 ( get :arg1 they )  )  )  )  )
possible :arg1 ( imagine :arg0 ( he :arg0-of ( invest :arg1 ( business :arg1-of ( start :op1-of also )  )  :arg2 ( thing :name ( name :op1 neuen :op2 werft )  )  )  )  :arg1 ( and :op1 ( acquire :arg1 this :time late )  )  )
and :arg1-of ( want :arg0 ( aircraft-type :name ( name :op1 t50 )  :name ( name :op1 s-400 )  :wiki sukhoi_pak_fa )  :arg1-of collaborate )  :arg1-of ( start :arg0 ( neighbour :mod new )  )  :arg2-of ( promise :arg1 ( matter :mod only :mod next :mod-of ( time :mod of )  )  )
and :op1 ( come :arg1 federal :op1-of ( and :arg1-of ( invest :location location )  )  )  :op2 ( state :location ( country :mod upper :name ( name :op1 austria )  :wiki austria )  )  :op3 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 lintz )  :name-of ( town :mod ( each :arg0-of belong )  )  )  )  )
and :arg1-of ( build :arg2-of ( lease :arg1 ( organization :name ( name :op1 the )  :name ( name :op1 s-400 )  )  )  )  :op1 ( aircraft-type :name ( name :op1 t50 )  :wiki sukhoi_pak_fa )  :op2 ( 60 :quant-of ( temporal-quantity :unit year )  )
and :op1 ( remain :mod-of m :time ( date-entity :year 2700 )  )  :op2 ( rent-out :arg1 build :time already )  :op3 ( enquiri :quant-of ( percentage-entity :mod ( other :mod-of ( percentage-entity :mod thirty )  )  :value 40 )  )
open :arg0 ( person :name ( name :op1 lia :op2 peroni )  )  :arg1 business :arg2 arcade :arg3 owner
focus :arg1 ( shop :mod new )  :arg2 handbag
want :arg0 ( person :name ( name :op1 jutta :op2 breit )  )  :arg1 dog :mod actual
premise :arg1-of ( take :arg0 ( she :arg0-of ( expand :arg1 ( thing :consist ( proprietor :arg0-of ( postpone :arg1 ( plan :arg0 arcade :mod this )  :manner unceremoniously )  :mod ( old :quant ( temporal-quantity :quant 49 :unit year )  )  )  :name ( name :op1 lia :op2 peroni )  )  :time final :time now )  )  )  :mod new
and :arg0-of ( obtain :arg1 75 )  :arg1-of possible :arg1-of ( start :arg0 ( she :arg0-of ( differ :arg1 ( and :op1 garment :op2 woman )  :arg2 around )  :arg0-of ( shoe :arg1 bag )  :arg0-of ( revolve :arg1 everything )  :arg0-of ( opposite :arg1 shop )  :arg0-of ( sell :arg1 business )  :arg0-of ( manufacture :arg1 ( thing :arg1-of case :mod other )  )  )  :time now )  :op1 ( purse :arg0 handbag )
cost :arg1 ( and :op1 ( bag :mod large )  :op1-of 500 :op2 accessory )
open :arg1 ( shop :mod new )  :time yesterday
convert :arg1 it :arg2 ( week :mod last :unit-of ( temporal-quantity :op1-of few )  )
say :arg0 ( i :arg0-of ( open :arg2 another :arg3 ( consider :arg0 i :arg1 ( long :arg1 wheth :arg2 time )  )  )  :arg0-of ( recommend :arg1 shop )  )  :arg1 ( person :name ( name :op1 &quot; )  )
handbag :arg1-of ( sell :arg2 ( country :arg0-of ( decide :mod this )  :location-of ( base :arg1 ( person :arg0-of ( manufacture :arg1 ( thing :name ( name :op1 furla )  )  )  :arg1-of ( impress :arg0 crucial :arg2 ( idea :topic location )  )  )  :arg2 ( thing :mod other )  )  :name ( name :op1 bologna )  )  )  :mod only
say :arg0 we :arg1 herself :arg2 ( person :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( have-rel-role :arg1 ( country :mod-of root :name ( name :op1 italy )  :wiki italy )  :arg2 daughter )  :quant 2 )  :arg2 mother )  :arg2-of ( sell :arg0 ( country :mod-of ( area :mod ( great :domain ( person :mod only )  )  )  :name ( name :op1 &quot; )  )  :arg1 ( brand :mod this )  :extent amr-unknown )  :op1-of of )
get :arg0 ( person :name ( name :op1 breit )  )  :arg1 ( interest :arg2 fashion :arg1 person )  :arg2 ( person :arg0-of ( have-rel-role :arg1 ( she :arg0-of ( cradle :manner still )  )  :arg2 mother )  )
suit :arg0 it :arg1 ( i :arg0-of ( emerge :arg1 something :op1-of ( and :op2 ( possible :arg1 afford )  :op3 ( show :arg0 i :arg1 ( trend :mod new :topic price )  )  )  )  )  :manner ( good :degree most )
possible :arg1 ( give :arg0 certainty :arg1 ( answer :arg0 ( person :arg1-of expert )  :arg1 ( question :arg1 ( go :arg0 ( woman :quant many )  :arg1 absolute :arg4 raptur :time ( sight :arg1 ( handbag :arg1-of beautiful )  )  )  )  )  :arg2 i )
cause :arg1 ( possible :arg0-of ( enhance :arg2 ( outfit :mod any )  :arg2-of ( beautiful :arg0 perhaps :arg1 it )  )  :arg1 handbag )
braggart :source ( country :name ( name :op1 kallstadt )  )
come :arg1 ( person :arg0-of ( have-rel-role :arg1 ( person :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  :arg2 ancestor :location ( organization :name ( name :op1 palatine )  )  )  )  :arg3 ( place :location-of ( know :arg1 ( person :arg0-of inhabit )  :arg2 braggart )  )
connect :arg0 ( characteristic :mod this )  :arg1 many :arg2 ( billionaire :arg0-of ( want :arg1 ( become :arg2 ( president :arg2-of ( have-org-role :arg1 ( country :name ( name :op1 us )  :wiki united_states )  )  )  )  )  )  :mod also
source :concession 69 :consist-of controversy :domain ( person :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  :time always
create :arg0 ( candidate :poss ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 us )  :wiki united_states )  :arg2 president )  )  )  :arg1 ( stir :arg1 ( campaign :arg1 ( elect :arg1 ( politics :mod crisis )  )  )  )  :condition ( or :op1 ( express :arg0 ( he :arg0-of ( reveal :arg1 ( gap :location knowledge )  )  )  :arg1 ( opine :arg0 xenophobic )  :op1-of wheth )  :op2 ( rude :arg2 journalist )  )
and :op1 come
originate :arg0 grandparent :arg1 ( property :arg1-of ( happen :arg0 ( something :mod ( also :mod-of this )  )  :arg2 ( town :value-of of )  :mod that )  :value-of billionaire )
winemak :location-of ( village :location ( route :mod wine :op1 ( dry :arg1 hairstyle :arg1-of ( blow :arg0 ( concept :domain ( magazine :name ( name :op1 the :op2 new :op3 yorker )  :wiki the_new_yorker )  )  )  :arg2 many )  )  )
relate :arg1 ( village :location-of many :poss ( person :arg0-of inhabit )  )
mode :location-of here :mod ( campaign :arg0 ( organization :name ( name :op1 palatine )  )  :arg1 ( elect :arg1 ( person :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  )  :manner ( come :arg1 ( person :arg0-of ( have-rel-role :arg1 he :arg2 grandfather )  )  :arg3 ( country :name ( name :op1 kallstadt )  )  )  )
reside :arg0 ( person :name ( name :op1 simone :op2 wendel )  )  :arg1 ( person :mod ( country :mod-of ( person :name ( name :op1 trump )  :topic-of film )  :name ( name :op1 kallstadt )  )  )
think :arg0 ( person :arg0-of ( inhabit :arg1 village )  )  :arg1 ( ambition :arg0-of ( become :arg1 ( man :arg1-of ( powerful :compared-to world :degree most )  )  )  )  :mode interrogative :op1-of and
contrast :arg1 ( impress :arg0 ( person :arg1-of ( find :arg0 ( i :arg0-of ( think :arg1 it )  )  :arg2 ( rather :arg0-of ( excite :arg1 of :arg2 also )  )  :manner they )  :mod ( country :name ( name :op1 &quot; )  )  )  :arg1-of ( deep :arg0 they :polarity - )  )  :arg2 way
include :arg0 documentary :arg1 ( and :op1 ( offshoot :mod famou )  :op2 ( person :name ( name :op1 trump )  :op1-of besides )  :topic-of ( film :arg1-of amuse :mod ( country :mod-of ( family :mod ketchup :mod also :name ( organization :name ( name :op1 heinz )  )  )  :name ( name :op1 kallstadt )  :poss-of native )  :topic place )  )
state :arg0 ( person :arg1-of ( know :arg0 ( he :arg0-of ( speak :time ( date-entity :year 2014 )  )  :arg0-of ( get :arg1 ( thing :arg1-of ( live :arg0 he :mod even )  :name ( name :op1 trump )  )  :arg1-of ( chance :arg0 modesty )  :mod also )  )  :polarity - )  :name ( name :op1 trump )  )  :arg1 ( he :arg0-of ( succeed :mod anyway )  )  :mod that
win :arg0 he :arg2 person :location there :polarity -
contrast :arg1 ( respect :arg1 he :arg1-of ( view :mod bit :mod also :mod indeed )  :arg1-of say :arg1-of certain :arg1-of trump :arg2 family )  :arg2 ( tend :arg1 ( thing :arg1-of achieve )  )
say :arg0 ( she :arg2-of ( translate :arg0 ( term :mod dialect )  :arg1 ( die :arg1 brulljesmach :arg2-of ( nickname :arg1 coincidentally :mod-of region )  )  )  )  :arg1 braggart
come :arg1 ( person :name ( name :op1 trump )  )  :arg3 ( village :name braggart )
trump :arg0 ( story :arg0-of ( open :arg1 saloon :arg2 ( gold :mod-of prospector )  :op3-of ( and :op1 man :op2 ( person :arg0-of ( have-rel-role :arg1 ( person :arg2-of ( become :arg1 ( country :name ( name :op1 usa )  :wiki united_states )  )  :name ( name :op1 donald :op2 trump )  :wiki donald_trump )  :arg2 grandfather )  :arg1-of emigrate )  )  )  :arg1-of ( begin :arg1-of succeed :time ( date-entity :year 1885 )  )  )  :arg1 of
purchase :arg0 business :arg1 land :arg2 ( stone :mod foundation :poss property )  :location ( city :name ( name :op1 new :op2 york )  :wiki new_york_city )
contrast :arg1 ( he :poss-of ( life :mod grandparent )  )  :arg2 ( free :arg1 ( return :arg1 ( person :arg0-of ( belong :arg1 palatine :time then )  :arg1-of ( collapse :arg0 state )  :mod ( state :name ( name :op1 bavaria )  )  )  :arg1-of ( wish :arg0 country )  :arg4 home :time-of permanent )  :arg2 tragedy :arg3 - )
authorisation :manner-of ( leave :arg0 he :arg1 ( person :arg0-of ( enter :arg1-of ( let :arg0 they :arg1-of ( explain :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 institute :op2 for :op3 palatinate :op4 history :op5 and :op6 cultural :op7 anthropology )  )  :arg2 director )  :name ( name :op1 roland :op2 paul )  )  :time ( begin :arg1 film )  )  :polarity - )  )  :name ( name :op1 trump )  )  :mod original )
grandson :domain ( person :name ( name :op1 trump )  )  :mod-of ( of :mod-of ( law :mod-of emigrant :polarity - )  )
state :arg1 ( thing :poss ( descendant :poss this )  )  :arg2 odds :arg3 sometimes :manner pithy
and :op1 ( demand :arg0 ( he :arg0-of ( speak :arg1 ( person :arg0-of immigrate :mod ( country :name ( name :op1 mexico )  :wiki mexico )  )  :arg1-of repeat :manner ( term :mod derogatory )  )  )  :arg1 ( build :arg1 ( wall :mod ( border :arg1 ( country :name ( name :op1 us )  :wiki united_states )  )  )  :purpose ( deter :arg1 ( person :arg0-of ( immigrate :mod ( law :polarity - )  )  )  )  )  )
trump :arg0 of :arg1 ( person :arg0-of ( have-rel-role :arg1 i :arg2 grandmother )  :arg0-of ( bear :arg1 ( person :arg0-of ( have-rel-role :arg1 i :arg2 grandfather )  :arg0-of ( bear :arg1 heinz )  :arg1-of ( trump :arg0 ( he :arg0-of ( make :arg1 about )  :arg0-of ( say :arg1 ( person :arg0-of ( distant :arg1 relative )  :arg1-of ( nice :arg0 it :degree very )  :name ( name :op1 &quot; )  )  )  :arg1-of fuss )  )  )  :polarity - )  )
see :arg0 ( he :arg0-of ( fuse :arg1 short :time always )  )  :arg1 ( rather :mod-of aloof )  :arg1-of retire :op1-of winemak
think :arg0 ( he :arg0-of do )  :arg1 ( come :arg1 ( person :name ( name :op1 trump )  )  )  :mode interrogative
say :arg0 ( i :arg0-of ( imagine :arg1 it :arg2 old :polarity - )  :op1-of ca )  :arg1 72 :arg2 year
interest :arg0 he :arg1 nev :arg2 ( country :name ( name :op1 &quot; )  )  :mod any
mention :arg0 ( person :arg0-of ( inhabit :arg1 ( house :mod guest :mod-of landlady )  )  :arg2-of resemble :quant ( many :mod-of of )  )  :arg1 heinz :arg1-of ( descend :arg0 ( person :arg0-of ( visit :arg1 they )  :arg0-of ( receive :arg1 ( church :mod-of organ )  :mod ( well :degree very )  )  :arg0-of ( donate :arg1 towards :arg2 family )  :mod that )  )
say :arg0 ( i :arg0-of ( do :arg1 that :arg2 old :arg2-of ( imagine :arg0 ca :arg1 donald )  :polarity - )  )  :arg1 68 :arg2 year
opine :arg0 ( he :arg0-of ( win :arg1 ( thing :arg1-of ( know :arg0 i :polarity - )  :mod good )  :polarity - )  :arg1-of elect :arg1-of ( prefer :arg0 she )  )  :arg1 ( radical :mod such )
charge :arg0 ( anyone :arg1-of resemble )  :arg1 ( person :arg0-of ( have-rel-role :arg1 he :arg2 grandfather )  )  :arg2 ( he :arg0-of ( go :time time )  )
say :arg0 ( there :arg0-of ( interest :arg1 ( person :arg1-of ( have-rel-role :arg0 person :arg2 daughter )  :name ( name :op1 sarah )  :wiki sarah_palin )  :arg2 bühl :degree more :op1-of topic )  )  :arg1 winemak :arg2 '
and :op1 ( have-org-role :arg2 president :mode interrogative )
say :arg0 ( she :arg1-of ( have-org-role :arg0 ( he :op1-of ( ' :mod-of certain )  )  :arg2 president :polarity - )  )  :arg1 i
and :op1 ( ripen :arg0 grap :arg1 ( president :arg2-of have-org-role )  )
trump :arg1 ( give :arg1 film :arg2 ( person :arg0-of ( see :arg1 ( and :arg1-of ( interest :arg0 goer :arg2 cinema )  :op1 ( grow :arg1 ( country :name ( name :op1 usa )  :wiki united_states )  :mod also )  )  )  :arg1-of ( interview :arg0 lengthy )  :name ( name :op1 wendel )  )  )
mountaineer :mod-of ( village :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :poss ( person :mod ( state :name ( name :op1 bavaria )  )  :mod upper :poss-of ( district :mod-of of )  )
receive :arg0 ( country :arg0-of award :arg1-of ( inhabit :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :mod ( country :name ( name :op1 germany )  :wiki germany )  :name ( name :op1 the )  )  :arg2 ( president :mod ( vice :poss hand )  )  )  :name ( name :op1 the )  :poss-of wednesday )  :mod ( of :mod-of village )  )  :name ( name :op1 the )  )  :arg1 ( thing :name ( name :op1 the )  )
mountaineer :arg1-of ( already :mod 20 )  :part ( villag :location ( country :name ( name :op1 austria )  :wiki austria )  )
responsible :arg1 ( award :arg0 ( organization :arg1-of local :name ( name :op1 alpine :op2 association )  )  :arg1 distinguish )  :location ( country :poss ( we :arg2-of neighbor )  )
permit :arg1 ( village :mod mountaineer )  :arg2 ( person :arg0-of reside :mod ( of :mod maximum )  )
designate :arg1 ( area :quant fifth )  :arg2 ( area :arg1-of protect )
show :arg0 today :arg1 ( leadership :arg1-of ( cover :arg0 ( rating :arg1-of ( dominate :arg0 7 :mod sunrise )  )  )  :arg1-of ( attempt :manner despite :mod nine )  :mod-of spill )
and :op1 ( person :name ( name :op1 karl )  )  :op2 wilkinson :op3 ( fail :arg0 ( political-party :arg0-of ( dash :arg1 ( city :name ( name :op1 canberra )  :wiki canberra )  )  :arg0-of ( cover :arg1 aftermath )  :name ( name :op1 liberal )  :wiki liberal_party_of_australia )  :arg1 leadership :arg2 of :arg2-of ( generate :arg0 today :arg1 much :arg1-of ( boost :arg0 rating )  )  :mod spill )
screen :arg1 ( show :arg0 nine :arg1 ( capital :mod-of after :mod-of nation )  :arg1-of breakfast :arg1-of ( overthrow :arg0 ( company :name ( name :op1 abbott )  :wiki abbott_laboratories )  :arg2 of )  )
and :arg1-of ( include :arg0 ( city :name ( name :op1 dubai )  :wiki dubai )  :arg2 ( series :arg1-of ( long :arg2 week )  :quant-of ( telecast :mod international :mod ( person :name ( name :op1 samantha :op2 armytage )  :op2-of ( and :arg0-of ( host :arg1 ( thing :arg1-of ( stick :arg2 ( city :name ( name :op1 london )  :wiki london )  )  :name ( name :op1 rival :op2 sunrise )  )  )  :op1 ( person :name ( name :op1 david :op2 koch )  )  )  )  )  )  :mod also )  :op1 ( city :name ( name :op1 new :op2 york )  :wiki new_york_city )  :op2 ( thing :name ( name :op1 niagara :op2 falls )  )  :op3 cancun
seem :arg0 ( do :arg0 ( person :arg0-of ( view :arg1 tv )  )  :arg1 that :arg3 ( distance :arg0 of :arg2 tyranny )  :concession ( average :arg0 sunrise :arg2 ( person :arg0-of ( view :arg1 capital )  :quant ( 5 :quant-of across :quant-of ( city :time today )  )  )  )  :polarity - )  :arg1 ( matter :quant ( much :quant-of aussie )  )
contrast :arg1 ( tuesday :mod last )  :arg2 ( and :arg2-of ( compare :arg0 uptick :arg1 it :arg3 ( rating :mod-of monday )  :arg3-of ( score :arg0 today :arg2 slight )  )  :op1 ( figure :mod-of ( behind :mod-of ( thursday :mod last )  )  )  )
close :arg0 today :arg1 gap :arg2 ( sunrise :location ( recent :mod-of ( month :unit-of temporal-quantity )  )  )
sunrise :arg1-of ( average :arg0 8 :time today )
and :op1 ( run :arg1 gap :time ( start :arg1 year )  )
cause :arg0 today :arg1 ( far :arg1-of ( view :arg0 ( person :arg2-of ( average :arg1 sunrise )  )  )  :mod-of ( date-entity :month 9 )  )
interest :arg1 ( thing :mod that :mod this :quant all )  :arg2 morning :arg3 most
affect :arg0 ( wind :mod ( change :arg1 morning )  )  :arg1 ( folk :mod this )  :arg2 ( more :compared-to parliament )
check :arg1 ( and :arg1-of fine :op1 ( person :name ( name :op1 karl )  )  :op2 ( person :name ( name :op1 lisa )  )  )  :arg1-of thank
post :arg0 today :arg2 monday :time ( date-entity :day 14 :month 9 :year 2015 )
debut :arg0 ( person :name ( name :op1 erik :op2 thomson )  )  :arg0-of ( rafter :arg1 800 )  :arg1 ( word :arg1 ( pack :arg1 star :time former )  )  :arg1-of stun :domain ( news :beneficiary 7 :mod big )
seaside :purpose-of ( relocate :arg0 ( person :arg1-of ( decide :arg0 ( person :arg0-of ( have-rel-role :arg1 ( person :arg0-of view :arg1-of ( average :arg0 ( drama :mod new )  )  )  :arg2 father )  :arg1-of ( widow :arg0 2 :arg1-of ( impress :degree very )  :time recent )  )  )  )  :arg1 child :arg2 ( country :name ( name :op1 new :op2 zealand )  :wiki new_zealand )  )
wonder :arg0 ( person :arg0-of criticize )  :arg1 ( possible :arg1 ( carry-out :arg0 ( person :name ( name :op1 thomson )  )  :arg1 ( show :arg1-of hit :arg1-of ( rafter :arg0 ( person :name ( name :op1 rebecca :op2 gibney )  )  :mod-of star )  )  :arg2 solo )  )
answer :arg1 ( result :arg1 that :arg1-of ( resound :mod-of yes )  :mod ( last :mod-of night )  )
and :arg1-of ( block :arg2 ( person :arg0-of ( beat :arg1 easily )  :arg0-of view :arg1-of ( stay :arg1-of ( factor :arg0 x :arg2 7 )  :arg1-of strong )  )  )  :op1 famili
fortun :arg3-of ( mix :arg1 ( 7 :op1 2 )  )  :location ( night :poss ( organization :name ( name :op1 chase :op2 australia )  )  )
host :arg1 ( show :arg0 ( person :arg0-of ( average :arg1 ( person :arg0-of view )  )  :mod andrew :name ( name :op1 o'reilly )  :wiki bill_o'reilly_[political_commentator] )  :arg1 ( half :mod-of ( temporal-quantity :unit hour )  )  :arg1-of ( quiz :arg0 of :mod new )  )
win :arg0 ( person :arg0-of ( view :arg1 enough )  :arg1-of ( jump :arg0 ( half :mod-of ( temporal-quantity :unit hour )  )  )  )  :arg1 ( hot :arg1-of seat )  :mod ( small :mod-of over )
whopping :arg0-of ( chase :arg1 ( country :name ( name :op1 australia )  :poss-of ( half :arg0-of ( average :arg1 ( and :op1 ( person :arg0-of ( view :arg1 ( temporal-quantity :unit hour )  )  )  :op2 ( half :quant-of ( temporal-quantity :unit hour )  )  )  :time night )  )  :wiki australia )  :op1-of monday )
seat :arg1-of average :arg1-of hot
drop :arg0 rating :arg1 ( confident :arg1 quiet :arg1-of ( hot :arg0 nine :mod that )  :arg1-of ( prevail :mod ultimate )  :arg1-of ( chase :arg0 ( country :name ( name :op1 australia )  :wiki australia )  )  :arg1-of seat )  :time night
show :arg0 ( country :arg1-of chase :name ( name :op1 australia )  :wiki australia )  :arg1 ( fail :arg1 dollar :arg1-of dent :arg1-of replace :mod minute )
publish :arg1 ( sunrise :arg0-of ( dominate :arg1 ( stay-on :arg1 today :arg3 local )  )  )  :manner originally
contrast :arg2 ( choose :arg0 he :arg1 ( person :domain-of ( guy :arg1-of ( perfect :arg0 interrogative )  )  :name ( name :op1 sam :op2 wood )  )  :condition ( agree :arg0 final :arg1 bachelor :arg3 3 )  )
reveal :arg1 ( secret :op1-of expressive )  :mode interrogative
possible :arg1 ( thing :name ( name :op1 sarah :op2 mackay )  )  :op3-of ( and :arg0-of ( reveal :arg1 ( win :arg1 bachelor )  :mod ( witting :polarity - )  )  :op1 ( person :name ( name :op1 lana :op2 jeavons-fellows )  )  :op2 ( thing :name ( name :op1 snezana :op2 markoski )  )  )
bachelor :location-of ( end :arg0 ( woman :arg1-of ( swathe :arg2 ( secrecy :mod utmost )  )  )  :arg1 ( person :name ( name :op1 sam :op2 wood )  )  )
and :op1 ( girl :time-of ( stand :arg1 certain :time 3 )  )  :op2 ( let :arg0 ( he :arg1-of receive :arg1-of ( rise :time final )  )  :arg1 ( slip :arg1 they )  :polarity - )
contrast :arg2 ( possible :arg0 winn :arg1 ( give :arg1 clue :arg2 ( they :arg1-of become )  :arg3 away :manner inadvertent :purpose ( check :arg0 we :arg1 ( person :name ( name :op1 sarah :op2 mackay )  :op1-of ( and :op2 ( person :name ( name :op1 snezana :op2 markoski )  )  :op3 ( person :name ( name :op1 lana :op2 jeavons-fellows )  )  )  )  :time ( before :op1 day :op2 3 :op3 2 )  )  )  )
lip :arg1-of ( firm :arg0 ( he :arg0-of ( seal :arg1 finale :op1-of ( until :mod-of thursday )  )  :arg1-of ( keep :arg0 ( person :name ( name :op1 sam )  )  :mod wood )  )  )
wax :arg0 ( woman :arg0-of ( cite :arg1 ( sense :arg0 ( they :domain-of ( partner :arg1 reason :arg2-of ( love :arg0 each :arg1 ( value :mod family )  )  )  )  :arg1 ( and :op1 ( person :domain-of ( man :arg1-of perfect )  :name ( name :op1 wood )  )  :op2 humour :op3 ambition :op4 positivity )  )  )  :quant 3 :quant all )  :arg1 lyrical
answer :arg1 ( possible :arg1 ( provide :arg0 ( you :arg0-of ( recommend :arg1 final :arg1-of ( rise :arg2 interrogative )  )  :arg0-of ( ask :arg1 question )  )  :arg1 ( win :arg0 heart :arg1 bachelor )  :arg1-of spoil :polarity - )  )
good :degree most :mod-of ( match :arg0 both :arg1 wood :arg2-of ( name :arg0 and :arg1 ( person :name ( name :op1 jeavons-fellows )  )  :arg1-of ( quick :arg0 apart )  )  )
and :arg0-of ( share :arg1 ( rapport :arg1-of easy )  :arg2 day :time since )  :op1 ( person :name ( name :op1 sarah :op2 mackay )  )  :op2 ( person :name ( name :op1 sam :op2 wood )  )
say :arg0 ( i :arg0-of ( feel :arg1 ( resemble :arg1 they :arg2 quite )  :op2-of ( and :op1 ( person :name ( name :op1 sarah )  :op2-of ( and :op1 ( walk :arg0 ( i :arg0-of read )  :arg1 into :arg2 house :op1-of ( from :time-of moment )  )  :op3 ' :op4 energy :op5 ( sam :mod-of energy )  )  :wiki sarah_palin )  :op3 compatible :op4 ( keep :arg0 ( i :arg0-of ( think :arg1 course )  )  :arg1 ( that :mod-of throughout )  )  )  )  )  :arg1 ( fellow :arg1-of ( show :arg0 of )  :mod jeavon )
add :arg0 ( person :name ( name :op1 sarah )  :wiki sarah_palin )  :arg1 markoski :op3-of ( around :op1 ( down :mod really :mod-of earth )  :op2 ( fun :quant ( much :arg1-of ( cause :arg0 ( she :op1-of ' )  )  )  )  )
and :op1 ( see :arg0 i :arg1 chemistry )  :op2 together :op3 they
and :op1 ( feel :arg0 they :arg1 nice )  :op2 ( comfortable :compared-to ( other :mod each )  )
and :arg2-of ( suit :arg1 couple )  :op1 ( person :arg0-of believe :name ( name :op1 sarah :op2 mackay )  )  :op2 she :op3 ( person :name ( name :op1 sam :op2 wood )  )
say :arg0 ( she :arg0-of ( make :arg1 date )  :arg0-of ( visit :arg1 home )  :arg0-of ( realize :arg1 wood :arg1-of possible )  )  :arg1 ( week :mod last )
say :arg0 ( she :arg1-of ( invest :arg0 wholeheartedly )  )  :arg1 ( and :arg1-of ( see :arg0 i :mod once )  :op1 i :op2 ( person :arg0-of ( have-rel-role :arg2 friend )  )  :op3 ( realize :arg0 i :arg1 this :arg2 ( obvious :arg0 family :arg1 ( just :mod-of game )  :arg2 i :polarity - )  )  )  :time now
recommend :arg0 she :arg1 ( choose :arg0 ( person :name ( name :op1 wood )  )  :arg1 - :arg1-of ( ask :arg0 ( she :domain-of enigmatic )  :op1-of and )  )
say :arg0 i :arg1 ( she :arg0-of ( say :arg1 ( know :arg0 ( i :arg0-of do )  :arg0-of ( cause :polarity - )  )  )  )  :arg1-of possible
equal :arg0 tie :arg1 ( girl :arg1-of ( love :arg0 i )  :arg1-of ( remain :op1-of ( and :op2 between )  )  )
ten :arg2-of ( air :arg0 bachelor :arg1 wednesday :domain-of 30pm )
originally :arg1-of ( publish :arg0 ( person :arg0-of ( choose :arg1 ( person :name ( name :op1 sam :op2 wood )  )  :arg2 interrogative :mod top )  :name ( name :op1 sarah )  :wiki sarah_palin )  )
option :quant several :topic ( begin :arg0 ( person :name ( name :op1 jarryd :op2 hayne )  )  :arg1 ( career :mod ( organization :name ( name :op1 nfl )  )  )  )
inquire :arg0 ( team :quant plenty )  :time ( after :op1 ( day :arg1-of impress :arg1-of open :time-of ( train :op2-of ( and :arg0-of ( show :arg1 ( and :op1 ( city :name ( name :op1 detroit )  :wiki detroit )  :op2 ( country :name ( name :op1 seattle )  )  )  :time ( after :op1 ( move :arg0 ( last :mod-of ( year :op1-of late )  )  :arg1-of ( interest :arg0 other )  :arg2 ( country :name ( name :op1 us )  :wiki united_states )  )  )  )  :op1 plenty )  )  )  )
contrast :arg1 ( choose :arg0 ( person :arg0-of ( look :arg1 it :arg1-of ( decide :arg0 ( person :arg0-of coach :op2-of ( and :op1 49er )  )  :time wise )  :arg1-of resemble )  :name ( name :op1 jim )  :op1-of and :wiki - )  :arg1 ( city :name ( name :op1 san :op2 francisco )  :wiki san_francisco )  )
win :arg0 ( he :arg0-of ( do :arg1 ( return :arg1 tuesday :arg1-of ( convert :arg0 ( state :name ( name :op1 minnesota )  :wiki minnesota )  :arg2 ( lose :arg0 rest :arg1 game :arg1-of fumble :arg2-of bench :arg2-of resemble :arg2-of ( coach :arg1 some )  )  :mod league :mod rugby )  :arg1-of punt )  :arg3 of )  )  :arg1 against
contrast :arg2 ( show :arg0 ( person :arg0-of ( give :arg1 ( opportunity :mod next :purpose ( return :arg1 ( and :op1 punt )  :manner ( game :arg1-of run )  :time ( after :op1 ( injure :arg1 ( person :name ( name :op1 bush )  :wiki george_w._bush )  )  )  )  )  :arg2 ( person :name ( name :op1 hayne )  )  )  :name ( name :op1 tomsula )  )  :arg1 ( faith :prep-in man )  )
continue :arg0 ( person :name ( name :op1 tomsula )  )  :arg1 ( show :arg1 ( person :mod ( colour :mod true )  )  :location ( room :arg1-of lock )  :time ( after :op1 game )  :arg0 person )
encourage :arg0 ( he :arg0-of ( chew :arg1 rooki :arg2 front :arg2-of ( instead-of :arg1 ( team :part rest )  )  )  )
back :arg0 ( person :name ( name :op1 tomsula )  )  :arg1 ( person :arg1-of public :name ( name :op1 hayne )  )  :medium ( conference :mod press :time ( post :arg1-of match )  )  :mod also
forget :arg1 49er :arg2-of ( advise :arg1 ( thing :arg1-of special :arg1-of ( encourage :arg1-of ( receive :arg0 ( person :arg0-of ( play :mod next )  :name ( name :op1 hayne )  )  :arg1-of ( report :arg0 ( person :arg0-of report :arg0-of beat :name ( name :op1 cam :op2 inman )  )  )  :mod also )  :arg2 team )  :mod ordinator :name ( name :op1 thomas :op2 mcgaughey )  )  )  :condition ( drop :arg1 ( catch-up :op1-of ( and :op2 worry )  )  )
fumble :arg0 ( person :name ( name :op1 jarryd :op2 hayne )  )  :arg1 ( punt :arg1-of ( recover :arg0 ( organization :name ( name :op1 minnesota :op2 vikings )  )  :arg2 quarter )  )
follow :arg1 ( and :arg0-of ( hope :arg1 ( debut :arg0 ( organization :name ( name :op1 nfl )  )  )  )  :arg0-of ( start :domain it :mod certain :polarity - )  :op1 ( person :name ( name :op1 hayne )  )  )  :mod massive :mod ( country :name ( name :op1 australia )  :wiki australia )
tell :arg0 he :arg1 radio :arg2 ( he :arg0-of ( start :arg1 ( bad :arg1 duo :arg1-of imagine :polarity - )  )  :arg1-of possible :poss-of career )  :op2-of ( and :op1 ( fumble :arg0 ( he :arg0-of ( see :arg1 way :arg1-of ( curse :arg0 ( person :name ( name :op1 hayne )  )  )  )  )  :arg1 field )  :op3 ( country :name ( name :op1 australia )  :wiki australia )  )  :time late :time after
say :arg0 ( you :arg0-of ( worry :arg2 about :condition it :mod just :op2-of ( and :op1 ( thing :mod that :mod ( just :mod-of of )  :quant 1 )  :op3 next :op4 ( play :arg1 it )  :op5 that :op6 ' )  )  )  :arg1 hayne
liken :arg0 ( person :arg0-of ( lead :arg1 ( pass :arg1 goal )  :arg4 ( try :arg1 queensland )  )  :name ( name :op1 hayne )  )  :arg1 ( blunder :arg1 ( debut :arg1 origin )  :time ( back :op1 ( date-entity :year 2007 )  )  )
experience :arg0 27 :arg1-of amaze :arg2 old :mod still :time year :time overall
and :op1 ( post :arg0 ( person :arg0-of ( pose :arg1 photo :manner ( hold :arg0 fan :arg1 ( flag :mod ( country :name ( name :op1 australia )  :wiki australia )  )  :time ( after :op1 game )  )  )  :name ( name :op1 hayne )  )  :arg2 ( organization :name ( name :op1 instagram )  )  )
and :arg0-of ( meet :purpose ( discuss :arg1 ( right :mod gay )  )  )  :op1 ( person :name ( name :op1 john )  :wiki - )  :op2 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 russia )  :wiki russia )  :arg2 president )  :name ( name :op1 vladimir :op2 putin )  :wiki vladimir_putin )
wealthy :op1 ( man :arg1-of ( arrest :arg0 ( country :name ( name :op1 russia )  :poss-of ( siberian :op1 runway )  :wiki russia )  :time ( date-entity :year 2003 )  )  :poss-of gunpoint )
seize :arg0 ( organization :name ( name :op1 yukos )  )  :op1-of ( and :op2 ( curtail :arg0 ( company :arg0-of ( convict :arg1 ( person :name ( name :op1 khodorkovsky )  )  :condition ( challenge :arg1 ( person :arg0-of ( have-org-role :arg2 president )  :arg0-of have :name ( name :op1 vladimir :op2 putin )  :wiki vladimir_putin )  :arg1-of open )  )  :mod oil )  :arg1 ( effort :mod pro :purpose democracy )  )  )
call :arg0 ( organization :name ( name :op1 freie :op2 wähler )  )  :arg1 ( person :arg0-of teach :location ( country :name ( name :op1 bavaria )  )  :mod new :quant 1000 )  :arg1-of ( cause :arg0 ( number :mod large :quant-of refugee )  )
say :arg0 ( person :arg0-of teach :arg1-of ( suffice :arg0 ( and :arg0-of issue :arg0-of ( lead :arg1 faction :arg1-of ( warn :arg0 aiwang )  )  :arg1-of start )  :mod new :mod ( severe :mod-of crisis )  :mod school :mod many :mod new :mod ( conclave :mod-of party )  :mod autumn :polarity - )  )  :arg1 ( need :arg0 ( we :arg0-of ( collapse :arg1 school )  )  :arg1-of mean :arg1-of ( stop :arg0 ( person :arg0-of ( teach :arg1 1000 )  :mod additional )  )  )
upheaval :time-of ( educate :arg0 we :arg1 ( person :mod ( state :name ( name :op1 bavaria )  )  )  :arg2 system :time otherwise )
faction :mod ( organization :name ( name :op1 freie :op2 wähler )  :poss ( thing :location-of session :mod-of ( community :location ( friday :op1-of until )  )  :name ( name :op1 lower :op2 franconian )  )  )
plan :arg1 ( topic :arg1-of ( differ :degree very )  :mod main )  :mod original
contrast :arg2 ( dominate :arg0 ( number :mod record :quant-of refugee )  :arg1 ( meet :arg0 ( organization :name ( name :op1 freie :op2 wähler )  )  )  :mod too )
say :arg0 conclave :arg1 ( person :name ( name :op1 &quot; )  )  :arg2-of ( issue :arg0 ( asylum :mod ( of :op1 ( subject :op1-of course )  )  )  :mod main )
demand :arg0 ( person :name ( name :op1 aiwanger )  )  :arg1 ( establish :arg1 ( zone :location ( country :name ( name :op1 syria )  :wiki syria )  :mod ( safe :arg1 ( organization :name ( name :op1 un )  :wiki united_nations )  )  )  :arg2 ( resemble :arg1 ( thing :mod-of ( war :location nineti )  :name ( name :op1 yugoslavian )  )  :arg2 one )  )
say :arg0 ( we :arg0-of ( head :arg1 wähl )  :arg0-of ( get :arg1 ( go :arg0 ca :arg4 - )  )  :arg1-of ( resemble :arg2 this )  )  :arg1 freie :arg1-of ( cause :arg0 it )
possible :compared-to-of ( quick :arg1 ( deport :arg0 ( organization :name ( name :op1 freie :op2 wähler )  )  :arg1 ( person :arg0-of ( seek :arg1 asylum )  :arg1-of fail )  :arg1-of ( want :arg0 organization )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 more :arg2 personnel )  :arg0-of ( responsible :arg1 court )  :arg0-of ( want :arg1 ( reason :mod this )  :mod also )  )  :arg1 ( need :arg0 ( we :arg0-of ( judge :arg1 asylum )  )  :arg1 50 :arg1-of case :arg1-of ( well :arg0 new )  :arg1-of ( mean :arg0 asylum )  )
mean :arg0 ( state :arg0-of ( criticize :arg1 ( between :arg0-of lack :mod consistency :mod-of several :quant-of of )  :arg1-of ( head :arg0 ( state :mod federal :mod-of nationwide )  )  )  )  :arg1 ( need :arg0 we :arg1 standard :arg1-of unify )  :mod federal
and :arg1-of deport :op1 ( do :arg0 other :polarity - )
must :arg1-of ( efficient :arg0 we :degree more )
recommend :arg1 ( allow :arg1 ( suffer :arg0 ( politics :mod region )  )  :polarity - )
remain :arg1 ( issue :arg1-of ( run :duration ( many :op1 ( temporal-quantity :unit year )  )  )  :location agenda )  :arg1-of ( educate :topic-of policy )
result :arg1 ( return :arg0 ( middle :mod-of level )  :arg1 ( school :mod grammar )  :arg1-of ( will :arg0 this )  :arg1-of ( test :arg0 project :duration ( temporal-quantity :quant 3 :quant 4 :unit year )  )  :purpose-of ( take :arg0 ( person :arg0-of extend :arg0-of ( start :arg1 middle :time year )  :arg0-of ( have-org-role :arg1 ( school :mod new )  :arg2 ( minister :mod education )  )  :name ( name :op1 in )  )  :arg1 ( school :arg1-of ( pilot :arg0 plus )  )  :duration ( temporal-quantity :unit year )  :location 9 )  :purpose-of ( qualify :arg0 university :arg1 exam )  )
contrast :arg0 ( person :name ( name :op1 aiwanger )  )  :arg2 ( enough :mod-of that :polarity - )
say :arg0 ( organization :arg0-of issue :name ( name :op1 g-8 )  :op1-of 9 :wiki g8 )  :arg1 head :arg1-of ( speed :arg0 must )
demand :arg0 ( we :arg0-of ( want :arg1 ( school :mod grammar )  )  )  :arg1 ( free :arg3 ( choose :arg1 all )  )
move :arg0 ( 9 :location everywhere )  :arg1 ( organization :name ( name :op1 g-8 )  :wiki g8 )  :arg1-of want :arg1-of free
thing :arg0-of ( help :arg1 strong )  :arg2-of ( give :arg0 ( company :name ( name :op1 wall :op2 street )  :wiki wall_street )  :arg1 hand )  :name ( name :op1 dax )
edgy :arg1 ( trade :op2-of ( and :op1 aimles :quant ( thing :arg1-of stretch :arg1-of ( long :op1-of over )  :op1-of ( after :time-of ( close :arg1 ( market :mod stock :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg2 ( thing :arg1-of gain )  )  )  )  )  )
clear :arg0 afternoon :arg1 ( direction :arg0-of ( lift :arg1 ( thing :name ( name :op1 dax )  )  :arg2 ( percentage-entity :mod only )  :arg3 point :time ultimate )  :arg2-of ( provide :arg0 ( rally :arg1 ( market :mod ( country :name ( name :op1 us )  :wiki united_states )  :mod stock )  :arg1-of strong )  :arg1 it )  )
gain :arg0 ( company :location ( country :mod-of medium :name ( name :op1 mdax )  )  :mod size :part value )  :arg1 percentage-entity :arg4 point
rise :arg1 ( heavy :mod-of technology )  :arg2 percentage-entity :arg3 point
move :arg0 ( benchmark :mod-of ( index :location ( organization :name ( name :op1 eurozone )  :wiki eurozone )  )  :wiki bse_sensex )  :arg1 ( organization :name ( name :op1 eurostoxx )  :poss-of ( point :op1-of 50 )  )  :arg2 percentage-entity :direction ahead
and :location-of ( market :arg0-of ( register :arg1 ( thing :arg1-of gain :arg1-of solid )  :mod also )  :location ( city :name ( name :op1 london )  :wiki london )  )  :op1 ( city :name ( name :op1 paris )  :wiki paris )
close :arg1 ( index :mod ( company :name ( name :op1 dow :op2 jones )  :wiki dow_jones_&_company )  )  :location ( country :name ( name :op1 usa )  :wiki united_states )  :time ( about :mod-of ( percentage-entity :value 1 )  )
maturity :arg1-of ( major :polarity also )  :compared-to ( exchange :arg0 ( country :location-of ( decide :arg0 interest :arg1 rate :op1-of ( after :op1-of ( until :mod static )  :time-of ( and :arg1-of ( reckon :arg0 ( broker :quant many )  )  :op1 ( friday :mod this )  )  :time-of ( remain :arg1 market )  )  )  :name ( name :op1 usa )  :wiki united_states )  :arg1 future )
push :arg1 ( stock :arg1-of ( low :arg2 ( time :quant all )  )  :mod ( organization :name ( name :op1 rwe )  )  )  :op1-of ( and :op2 ( leave :arg0 ( discussion :topic ( impact :arg1 ( nucleus :mod-of ( energy :arg1-of phase-out )  )  )  )  :arg1 ( mark :arg1 ( person :name ( name :op1 eon )  )  :arg1-of significant )  :mod also )  )  :time meanwhile
reserve :arg0 30 :arg1 ( potential :arg1-of ( say :arg0 ( country :mod-of energy :name ( name :op1 germany )  :wiki germany )  )  :arg1-of ( lack :arg0 company )  )
deny :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :mod-of federal :name ( name :op1 germany )  :wiki germany )  )  )  :arg1 ( figure :arg1-of ( quote :arg0 press )  )
recover :arg0 stock :arg1 ( and :op1 ( country :mod-of ( business :mod energy :mod ( large :degree most )  )  :name ( name :op1 germany )  :wiki germany )  :op2 ( lose :arg0 ( organization :name ( name :op1 rwe )  )  :arg1 percentage-entity :arg2 2 :mod ultimate )  :op3 ( person :name ( name :op1 eon )  )  :op4 percentage-entity )  :degree somewhat :time subsequent
climb :arg0 ( share :mod ( organization :name ( name :op1 infineon )  )  )  :arg2 ( percentage-entity :mod further )  :purpose ( top :part-of ( thing :name ( name :op1 dax )  )  )
report :arg0 trader :arg1 positive :arg1-of view :arg1-of ( invest :arg0 ( country :arg0-of ( effect :arg1 ( continue :arg0 weekend :arg1 ( magazine :wiki time_[magazine] )  )  )  :name ( name :op1 us )  :wiki united_states )  )
say :arg1 ( pay :arg1 ( attend :arg0 ( person :arg0-of ( invest :arg1 ( manufacture :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 chip )  )  )  :quant ( little :degree too )  )  :time current )
recommend :arg1 ( pay :arg0 ( and :op1 ( invest :arg2 ( technology :arg2-of ( promise :arg1 thu )  :mod wafer )  )  :op2 ( focus :arg2 ( market :manner automotive )  )  )  )
mean :arg1 ( tradition :mod-of week )  :arg2 ( sell :arg0 ( car :quant ( more :mod ( again :mod ( 8 :mod of :quant-of ( temporal-quantity :mod summer :unit month )  )  )  )  )  :arg1 than :arg2 ( person :arg0-of ( manufacture :arg1 period )  :arg0-of ( start :arg1 ( international :mod-of aotomobile :mod-of frankfurt :mod-of ( exhibition :mod-of iaa )  )  )  :arg1-of ( associate :arg0 ( year :mod previous )  )  :arg2-of ( disclose :arg1 at :mod acea )  )  )  :mod ( demand :arg1 ( stock :mod car )  )  :mod even
and :arg1-of ( gain :arg0 and :arg2 percentage-entity )  :op1 ( person :arg0-of ( manufacture :arg1 car )  :mod percentage-entity )  :op2 ( organization :name ( name :op1 bmw )  )  :op2-of ( and :arg1-of ( stock :arg0 ( organization :name ( name :op1 daimler )  )  )  :mod respective :op1 ( organization :name ( name :op1 opel )  )  :op3 ( car-make :name ( name :op1 fiat )  :wiki fiat_s.p.a. )  )
increase :arg0 ( stock :arg1 ( company :name ( name :op1 volkswagen )  :wiki volkswagen )  )  :arg1 ( price :arg1 percentage-entity )
yield :arg0 friday :arg1 ( securiti :arg1-of ( list :arg0 percentage-entity )  :mod ( government-organization :arg0-of ( govern :arg1 ( country :arg1-of ( bond :arg0 federal )  :name ( name :op1 germany )  :wiki germany )  )  )  )  :arg1-of ( fall :arg2 percentage-entity :arg4 market )  :time current
rise :arg1 ( index :mod ( bond :arg1 ( person :name ( name :op1 rex )  :wiki - )  )  )  :arg2 percentage-entity :arg3 point
lose :arg0 ( future :mod ( government-organization :arg0-of ( govern :arg1 point )  )  )  :arg1 percentage-entity
sink :arg0 euro :arg1 ( rate :arg0-of end )  :arg2 afternoon
reference :arg1 ( around :degree-of midday )  :arg1-of ( price :arg0 ( organization :name ( name :op1 european :op2 central :op3 bank )  )  :location ( country :name ( name :op1 us )  :wiki united_states )  )
mean :arg1 this :arg2 ( cost :arg1 ( dollar :unit-of monetary-quantity )  )
kill :arg0 ( person :arg0-of protest :location ( country :name ( name :op1 nepal )  :wiki nepal )  )  :arg1 ( thing :mod police :name ( name :op1 fire :op2 rubber :op3 bullets )  )  :quant 4 :time after
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :arg0-of ( propose :arg1 ( constitution :mod new )  )  )  :arg2 official )  :arg1-of ( demonstrate :arg0 ( person :mod 4 )  :op5-of ( against :op1 police :op2 ( fire :arg0 ( country :name ( name :op1 nepal )  :part ( south :arg1-of ( kill :arg0 ( year :mod 4 )  :mod ( boy :mod old )  )  :op1-of after )  :wiki nepal )  :op1-of bullet :op1-of rubber )  :op3 into :op4 crowd )  )  )  :arg1 wednesday
occur :arg0 violence :arg1 tuesday :arg2 capital :arg3 ( about :op1 ( distance-quantity :quant 175 :unit mile )  )  :concession ( country :name ( name :op1 kathmandu )  )  :location ( district :location ( thing :name ( name :op1 rupandehi )  :op1 west )  )  :time evening
say :arg0 ( person :arg0-of ( have-org-role :arg1 district :arg2 officer )  :name ( name :op1 bishnu :op2 prasad :op3 dhakal )  :op1-of ( and :op2 ( throw :arg0 some :arg1 stone )  :op3 firebomb )  )  :arg1 ( gather :arg0 ( person :arg0-of protest :arg0-of ( have-org-role :arg2 chief )  :quant more )  :location ( outside :op1 ( station :mod police )  )  )
say :arg0 ( thing :name ( name :op1 mr. :op2 dhakal )  )  :arg1 ( and :op1 ( use :arg0 ( police :arg0-of ( fire :arg1 air :time ( before :op1 ( resort :arg1 ( bullet :source-of rubber )  )  )  :time then )  )  :arg1 ( gas :arg1-of tear )  )  )
say :arg0 he :arg1 ( wound :arg1 ( person :arg0-of ( have-org-role :arg1 police :arg2 officer )  :op1-of and :quant 5 )  :manner twenty )  :arg2 civilian
contrast :arg1 ( know :arg0 ( bullet :arg1-of ( die :arg1-of ( high :degree such )  :mod-of ( toll :arg1-of ( produce :manner apparent )  )  )  )  :arg1 ( kill :arg0 ( it :arg0-of ( clear :polarity - :time immediate )  )  )  )  :arg2 ( use :arg1 rubber :arg2 ( alternative :mod lethal :mod less )  :manner tradition )
say :arg0 ( person :arg0-of ( influence :arg1 politics :arg1-of dilute )  :arg0-of ( have-org-role :arg1 ( south :arg1-of ( protest :arg0 ( of :quant-of ( temporal-quantity :unit week )  )  :arg2 across :mod violent )  :arg1-of ( clash :time ( late :degree most )  )  :mod-of plain :part-of ( country :name ( name :op1 nepal )  :wiki nepal )  )  :arg2 member )  :arg0-of ( establish :arg1 group :mod ( new :mod-of province )  :op1-of under )  :arg0-of ( propose :arg1 ( constitution :mod new )  )  )  :arg1 ethnic
protest :location ( country :arg0-of ( want :arg1 ( state :poss ( tharu :mod ethnic )  )  )  :location ( world-region :name ( name :op1 west )  :wiki western_world )  :name ( name :op1 nepal )  :wiki nepal )  :mod also
kill :arg1 ( person :quant 40 )  :arg2 ( clash :arg1 ( person :arg0-of ( have-org-role :arg1 police :arg2 official )  :quant 11 )  :mod violent )  :time since
contrast :arg1 ( step :arg1-of major )  :arg2 ( issue :arg0 ( contentious :degree high )  :arg1 10 :location ( country :arg0-of ( agree :arg1 ( new :mod-of constitution )  :arg1-of ( sign :arg0 ( party :arg0-of ( divide :arg1 ( country :arg1-of ( govern :arg2 ( temporal-quantity :unit century )  :degree centrally )  )  :arg2 province )  :mod politics :quant 4 )  )  :arg1-of major )  :name ( name :op1 nepal )  :wiki nepal )  )
contrast :arg1 ( accelerate :arg0 ( work :arg0 person :arg1 ( constitution :mod new )  )  :arg1 process :arg2 lawmaker :time ( after :op1 ( earthquake :arg0-of ( kill :arg1 thousand :time 4 )  :arg1-of devastate )  )  :time ( since :op1 ( date-entity :year 2008 )  :op1-of underway )  )
and :op1 ( vote :arg0 lawmaker :arg1 clause :location ( country :name ( name :op1 kathmandu )  )  :time ( constitution :arg1-of ( draft :arg0 ( week :mod this )  )  )  )  :op2 ( say :arg0 ( person :arg0-of ( have-org-role :arg2 official )  )  :arg1 ( possible :arg1 ( enact :arg0 sunday :arg1 ( charter :mod new )  )  )  )
plan :arg1 area :arg2 town
plot :arg1 land :purpose ( build :arg0 ( country :location-of ( centre-left :mod youth :mod ( organization :name ( name :op1 alte :op2 post )  )  )  :name ( name :op1 emden )  )  :mod again )
metre :mod-of ( area :manner-of ( prepare :arg1 town :arg2 market :arg3 4000 :manner current )  :mod square )
plan :arg0 ( offer :mod firm )  :arg1 ( and :op1 ( trade :arg1 far :quant mixture )  :op2 commerce :op3 ( house :arg1 - )  )
metr :mod square :mod ( direct :arg1 ( adjacent :prep-to ( centre-left :mod youth :mod ( organization :name ( name :op1 alte :op2 post )  )  )  )  )  :quant ( around :op1 4000 )  :quant ( land :arg1-of plot :arg1-of ( sell :arg1-of ( want :arg0 town )  :arg2 ( country :name ( name :op1 emden )  )  )  )
preparation :mod-of ( underway :time current )
plan :arg1 ( use :arg0 it :arg1 land :arg2 ( mixture :quant-of ( trade :op1-of ( and :op2 commerce :op3 house )  )  )  )
state :arg0 ( person :arg0-of ( have-org-role :arg1 town :arg2 spokesperson )  )  :arg1 ( await :arg1 ( offer :arg1-of suitable )  )
clear :arg1 ( identity :poss ( person :arg0-of ( invest :arg1-of possible )  )  )  :polarity - :time yet
conclude :arg1 ( contract :polarity - )  :time yet :time consequently
stand :arg1 ( build :arg0 ( country :name ( name :op1 emden )  :name-of ( town :arg0-of ( sell :arg1 ( few :op1 ( temporal-quantity :unit month )  )  )  )  )  :arg1 site :arg1-of demolish :op2-of ( and :op1 ( country :name ( name :op1 grosse :op2 strasse )  :part ( corner :arg1-of situate :op1-of slash )  )  )  )  :time previous
open :arg0 fact :arg1 ( hieve :mod-of project )
take :arg0 ( plan :arg1 ( develop :arg1 holiday :location ( near :arg1 ( thing :name ( name :op1 kleines :op2 meer )  )  :arg2 ( country :name ( name :op1 emden )  )  )  :mod home )  )  :arg1 shape
present :arg0 ( person :arg0-of invest )  :arg1 ( plan :arg1 ( project :beneficiary public )  )
concern :arg0 of :arg1 ( person :arg0-of ( reside :arg1 number )  )  :arg2 ( worry :arg0 they :arg1 ( leisure :mod-of refuge )  :arg2 about )  :mod again
and :op1 ( mull :arg0 ( temporal-quantity :unit month )  :arg1 ( plan :arg1-of negotiate :arg1-of debate )  )  :op2 plot :time ( behind :op1 ( door :arg1-of close )  )
plan :arg1 ( develop :arg1 ( thing :arg1-of ( near :arg0 now :arg2 ( country :name ( name :op1 emden )  )  )  :name ( name :op1 kleines :op2 meer )  )  :mod home :mod new :time holiday )  :arg1-of open
interest :arg1 party :arg2 ( thing :arg1-of ( present :arg1-of ( develop :mod committee )  :arg1-of ( plan :arg0 company :time ( time :mod-of ( monday :mod-of evening )  )  )  )  :name ( name :op1 the )  )
schedule :arg1 ( point :arg0-of ( open :arg1 agenda :arg2 public :polarity - )  :mod this )  :polarity originally
say :arg0 ( he :arg1-of ( question :arg0 ( we :arg0-of ( do :arg0-of ( answer :arg1 yet )  :arg1 ( go :arg1 behrend :arg1-of manage :arg1-of ( offense :arg0 ( person :arg0-of ( invest :arg1 faction )  :arg1-of ( accuse :arg0 ( critic :arg1-of ( pressure :op1-of under )  )  )  :op1-of ( and :op2 ( administrate :arg1 secretivenes )  )  :op2-of ( and :op1 project )  )  )  )  :polarity - )  )  )  )  :arg1 ( and :op1 ( person :arg0-of ( have-org-role :arg1 council :arg2 member )  )  :op2 more :op3 50 :op4 spectator :quant all )  :location front
contrast :arg1 ( possible :arg1 ( counter :arg1 ( rumour :quant all )  :time now )  )  :arg2 good
project :arg1-of ( discuss :arg0 10 :arg2 12 :arg3 ( temporal-quantity :unit month )  )
provoke :arg0 ( and :op1 picture :op2 ( detail :arg1 ( build :arg1 hotel :arg1-of propose )  :mod new )  )  :arg1 ( react :arg0 ( person :arg0-of ( own :arg1 ( property :arg2-of ( attend :arg0 lake :arg1 meet )  )  )  )  :arg1-of strong )
and :op1 ( person :name ( name :op1 roberto )  )  :op2 schulz :op3 ( person :arg0-of ( have-org-role :arg1 board :arg2 member )  :arg0-of ( own :arg1 property )  )  :op4 of :op5 ( person :arg0-of ( reside :arg1 group )  :arg0-of ( lobby :arg1 pro )  :arg0-of ( loom :arg1 ( building :arg1-of ( develop :mod huge )  :mod other )  :op1-of ( over :mod all )  )  :arg0-of ( claim :arg1 it )  )
say :arg0 ( he :arg0-of ( reckon :arg1 ( we :arg1-of arrive )  :arg2 ( whole :mod-of busload )  )  :arg0-of ( propose :arg1 size )  :poss-of ( project :mod ( critic :arg0-of ( increase :arg1 number :arg2 enormous :mod traffic )  :arg2-of ( resemble :arg0 furthermore )  :mod other )  )  )  :arg1 facility
clear :arg1 ( size :arg0 exact :arg1 ( area :location-of ( area-quantity :unit hectare )  :mod ( restaurant :time former )  )  )  :polarity - :time yet
identify :arg1 ( person :arg0-of operate )  :polarity - :time yet
say :arg0 ( we :arg0-of ( cohere :arg1 ( concept :mod present :mod all :mod of )  )  )  :arg1 ( person :name ( name :op1 &quot; )  )
subject :arg1 ( plan :arg1 construct :arg1-of ( exist :arg0 this :op1-of since :polarity - :time yet )  )  :arg2 variation :mod still
twin :arg1 ( gorilla :arg1-of ( bear :location ( zoo :mod ( country :name ( name :op1 frankfurt )  )  )  )  )
zoo :arg0-of ( celebrate :arg1 ( birth :arg1 ( gorilla :quant 2 )  )  )  :mod ( country :name ( name :op1 frankfurt )  )
bring :arg1 ( twin :arg0 old :arg1 ( year :mod ( 6 :mod twenty )  )  )  :arg2 world :time yesterday
twin :arg1 ( birth :arg1-of ( rare :arg2 gorilla )  )
say :arg1 ( zoo :mod-of ( last :mod-of time )  )  :op1-of ( zoo :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :op2-of ( almost :mod-of ( country :name ( name :mod also :op1 frankfurt )  )  :op1 ( temporal-quantity :quant 50 :unit year )  )  :time ( date-entity :year 1967 )
hold :arg0 ( sex :arg2-of ( twin :arg0 far :arg1 gorilla :arg1-of ( bear :location new )  )  )  :arg1 yet :arg1-of ( keep :arg0 ( person :arg0-of ( have-rel-role :arg2 mother )  )  )  :manner close :polarity ( - :polarity-of certain )
report :arg0 ( organization :name ( name :op1 first )  )
say :arg0 ( chance :arg1 ( south :mod cyclone :part-of ( island :location ( country :name ( name :op1 cape :op2 verde )  :wiki cape_verde )  :wiki senkaku_islands )  )  :arg2 ( percentage-entity :value 60 )  )
say :arg0 ( thing :name ( name :op1 hurricane :op2 ( center :mod ( thing :name ( name :op1 u.s. :op2 national )  )  )  )  )  :arg1 ( chance :arg0 ( system :arg1-of broad :arg1-of ( pressure :arg0 ( next :mod-of ( temporal-quantity :op2-of ( about :op1 ( distance-quantity :quant 350 :unit mile )  )  :quant 48 :unit hour )  )  :arg1-of ( low :arg0 560 )  )  :mod ( island :location ( country :name ( name :op1 cape :op2 verde )  :wiki cape_verde )  :wiki senkaku_islands )  )  :arg1 ( develop :arg0 tuesday :arg1 south :arg2 ( cyclone :mod tropic )  )  :arg2 ( percentage-entity :value 60 )  )  :arg2 southernmost
add :arg0 ( forecast :arg1 ( weather :arg1-of ( base :location miami )  )  )  :arg1 ( chance :arg0 ( system :arg1-of ( pressure :arg1-of low )  :arg1-of ( define :arg0 well )  )  :arg1 ( form :arg0 another :arg1 cyclone :mod tropic )  :arg2 ( percentage-entity :value 60 )  :mod also :time ( temporal-quantity :quant 2 :unit ( day :mod next )  )  )  :op3-of ( and :location-of midway :op1 ( island :location ( country :name ( name :op1 cape :op2 verde )  :wiki cape_verde )  :wiki senkaku_islands )  :op2 ( antill :mod less )  )
launch :arg0 ( company :name ( name :op1 google )  :wiki google )  :arg1 ( campaign :arg1 ( match :arg1-of ( donate :arg0 11 )  )  :arg1-of ( raise :purpose refugee )  )
announce :arg0 ( organization :name ( name :op1 google :op2 inc )  )  :arg1 ( campaign :arg0 ( they :arg0-of ( flee :arg1 ( and :op1 ( tear :arg1 war )  :op2 ( country :arg1-of impoverish )  )  )  :arg2-of ( overwhelm :arg0 ( refugee :mod-of ( thousand :arg1-of ( aid :arg0 ( organization :mod humanitarian )  )  )  )  :arg1 ( nation :location ( continent :name ( name :op1 europe )  :wiki europe )  )  )  )  :arg0-of ( aim :arg1 raise )  :arg1 11 :arg1-of ( match :arg1-of donate )  )  :arg3 ( organization :name ( name :op1 googl.o )  )
approach :arg0 ( company :name ( name :op1 google )  :wiki google )  :arg1 ( announce :arg1 ( drive :arg1 donate :arg2 blog )  )  :arg1-of ( personal :arg0 uncharacteristically )
announce :arg0 executive :arg1 ( personal :arg0 rather :arg1 ( experience :arg0 ( person :arg0-of ( write :arg1 ( temporal-quantity :quant 7 :unit year )  )  :arg0-of ( employ :arg1 ( person :arg0-of ( flee :arg1 ( city :name ( name :op1 kabul )  :wiki kabul )  :arg2 family :condition ( old :domain she )  )  )  :medium ( company :name ( name :op1 google )  :wiki google )  )  :name ( name :op1 rita :op2 masoud )  )  :mod about )  )
fear :arg1-of ( write :arg0 she )  :arg1-of ( hunger :arg0 well )  :arg1-of ( ride :arg0 bus :arg1-of ( dark :arg0 ( we :arg0-of ( journey :arg1 ( involve :arg1 ( and :op1 train )  :arg2 many )  )  )  )  )  :arg1-of ( thirst :arg2 ( cold :op1-of and )  )
lucky :domain i
contrast :arg2 ( desperate :domain ( person :arg0-of help :arg1-of ( resemble :arg2 family )  :arg1-of ( grow :arg0 ( and :op1 refugee :op2 ( person :arg0-of migrate )  )  :arg2 ( crisis :location ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :quant many )  )
and :op1 ( organization :name ( name :op1 doctors :op2 without :op3 borders )  :wiki médecins_sans_frontières )  :op2 ( organization :name ( name :op1 international :op2 rescue :op3 committee )  )  :op2-of ( and :arg2-of ( provide :arg0 ( organization :arg1-of ( go :arg0 donate )  :mod nonprofit :quant 4 )  :arg1 ( aid :arg2 refugee )  )  :op1 ( person :arg0-of migrate )  )  :op3 ( organization :name ( name :op1 save :op2 the :op3 children )  )  :op4 ( organization :name ( name :op1 un :op2 high :op3 commissioner :op4 for :op5 refugees )  )
say :arg0 ( company :name ( name :op1 google )  :wiki google )  :arg1 ( match :arg0 globe :arg1 ( donate :arg1 5.5 )  :arg2 worth :time ( until :op1 ( raise :arg1 ( refugeerelief :op1-of slash )  )  )  )  :arg2 11
face :arg0 ( continent :name ( name :op1 europe )  :wiki europe )  :arg1 ( crisis :arg1-of ( bad :arg0 4 )  :mod refugee )  :time ( since :op1 ( drive :arg0 ( war :location ( country :name ( name :op1 syria )  :wiki syria )  :mod civil :mod ( old :quant ( temporal-quantity :quant 4 :unit year )  )  )  :arg1 ( war :arg0-of ( displace :arg1 ( more :quant-of person )  )  :name ( name :op1 world :op2 war :op3 ii )  :wiki world_war_ii )  :arg2 ( this :mod-of year )  :degree large )  )
flee :arg0 ( and :op1 ( country :name ( name :op1 yemen )  :wiki yemen )  :op2 ( country :name ( name :op1 iraq )  :wiki iraq )  :op3 ( country :name ( name :op1 libya )  :wiki libya )  )  :arg1 ( country :arg1-of ( tear :arg0 many :mod war )  :name ( name :op1 afghanistan )  :wiki afghanistan )  :mod also
edit :arg1 and :arg1-of ( plumb :mod ( religious-group :name ( name :op1 christian )  :wiki christian )  )  :arg2 ( report :arg0 ( person :name ( name :op1 yasmeen :op2 abutaleb )  )  )
possible :arg1 ( helpful :arg0 ( surgery :arg0 weight :arg1 loss )  :arg1 ( diabetic :mod ( obese :manner mildly )  )  )
say :arg0 ( study :arg0 ( disease :name ( name :op1 type :op2 2 :op3 diabetes )  :wiki diabetes_mellitus_type_2 )  :mod new )  :arg1 ( last :arg1 ( benefit :arg0 ( surgery :arg0 weight :arg1 ( 5 :quant-of ( temporal-quantity :unit year )  )  :arg2 loss )  :arg1 ( person :mod ( obese :manner mildly )  )  )  :arg1-of possible )
say :arg0 ( person :arg0-of ( live :arg1 diabetes :arg1-of ( surgery :arg0 weight :arg1-of ( receive :arg0 mildly )  )  :arg1-of long )  :arg1-of ( treat :arg0 ( surgery :arg0 it )  :op1-of after :polarity - )  :poss-of obese )  :arg1 still :time early
say :arg0 ( show :arg0 mortality :arg1-of ( take :arg0 data :arg2 ( long :arg1 ( study :arg0 ( person :arg0-of ( write :arg1 editorial )  :name ( name :op1 &quot; )  )  :arg1 ( organization :name ( name :op1 &quot; )  )  :arg1-of ( surgery :arg0 weight :arg0-of ( expert :arg1 amr-unknown )  )  :mod new )  :arg2 time )  )  )  :arg1 dr.
use :arg0 ( or :op1 ( operation :arg0-of weight :mod loss )  :op2 ( surgery :arg2 bariatric )  )  :arg1 ( method :mod various )  :arg2 ( shrink :arg1 ( size :poss stomach )  )
and :arg1-of limit :op1 ( hunger :arg0 body :arg1 ( reduce :arg0 they :arg1 ( ability :arg1-of ( absorb :arg0 food )  )  )  )
contrast :arg0 35 :arg1 ( prove :arg0 ( surgeri :arg0-of ( treat :arg1 ( disease :name ( name :op1 type :op2 2 :op3 diabetes )  :wiki diabetes_mellitus_type_2 )  )  )  :arg1 effective )  :arg2 ( do :arg0 ( person :domain-of ( obese :mod morbid :op1-of ( or :op2 ( index :mod mass :mod body )  :op3 above )  )  )  :arg1 ( study :arg0 ( organization :name ( name :op1 bmi )  )  :arg1 ( temporal-quantity :op1-of over :unit year )  :quant most )  )
consider :arg1 ( normal :arg1 ( organization :name ( name :op1 bmi )  )  :purpose ( relate :arg1 ( measure :arg1 weight )  :arg2 height )  )  :op1-of and
indicate :arg0 ( organization :name ( name :op1 bmi )  )  :arg1 ( overweight :domain someone )  :arg1-of ( high :arg0 30 :op1-of or )  :op1-of ( and :op2 ( consider :arg0 25 :arg1 ( obese :domain person )  )  )
possible :arg1 slash :arg3 ( calculate :arg0 you :arg1 ( organization :name ( name :op1 bmi )  )  :location here )
and :op1 sleeve :op2 gastrectomy :op3 ( treat :arg1 ( person :arg0-of ( use :arg1-of ( compare :arg0 since :time ( date-entity :year 2007 )  )  :arg1-of ( collect :arg0 ( hospital :wiki - )  )  )  :arg0-of ( research :arg1 ( study :arg0 new :arg0-of ( surgery :arg1 ( kind :quant 2 )  )  :arg1 ( country :name ( name :op1 taiwan )  :wiki taiwan )  )  )  :name ( name :op1 min )  :poss-of ( data :poss general )  :wiki hla_min )  :arg2 ( disease :name ( name :op1 type :op2 2 :op3 diabetes )  :wiki diabetes_mellitus_type_2 )  :op1-of medicine :time gastric )  :op4 ( person :poss-of obese :poss-of mildly )  :quant bypass
fall :arg0 surgery :arg1 ( organization :arg0-of ( end :arg1 ( year :mod fifth :time ( study :arg1 31 )  )  )  :arg1-of average :name ( name :op1 bmi )  )
receive :arg1 ( treat :arg1 diabetes :manner ( surgery :arg1 29 :polarity - )  :manner-of ( stay :arg0 ( organization :name ( name :op1 bmi )  )  :arg1 ( same :mod about )  :time meanwhile )  )
and :op1 ( diabetes :arg0-of ( resolve :arg1 ( percentage-entity :value 36 )  :arg1-of complete )  )  :op2 ( partial :degree ( percentage-entity :value ( 28 :arg1-of surgery )  )  )
and :op1 ( diabetes :arg1-of ( resolve :arg1-of complete :arg2 ( percentage-entity :mod only :value 1 )  :manner ( compare :arg1 ( group :arg0-of ( treat :arg1 ( 2 :value-of ( percentage-entity :op1-of ( about :mod only )  )  )  :arg2 medical )  )  )  )  )  :op2 partial
and :op1 ( bad :arg0 triglycerid :arg1 ( pressure :arg0 blood :arg1-of ( control :arg0 addition )  )  :arg1-of ( surgery :arg0-of ( author :manner-of ( find :arg0 ldl :arg1 group )  )  )  :arg1-of ( general :arg0 cholesterol :manner good )  )
of :mod ( blood :arg1-of ( research :arg0 ( person :arg1-of ( have-rel-role :arg0 ( person :arg1-of monitor :mod also )  :arg2 patient )  )  )  :mod-of ( level :mod hemoglobin )  :mod-of ( level :mod ( blood :arg1-of reflect )  :mod sugar-cane :mod-of ( over :time time )  )  )
write :arg0 ( person :arg0-of research )  :arg1 ( thing :arg1-of ( keep :arg2 below :arg4 ( percentage-entity :value 7 )  :degree ( good :degree most )  )  :mod hemoglobin :name ( name :op1 a1c )  )
fall :arg1 ( level :arg1-of average :mod ( thing :name ( name :op1 a1c )  )  )  :arg2 ( percentage-entity :value 6 )  :arg4 ( percentage-entity :op1-of about :value 9 )  :time ( after :op1 ( surgery :arg1 hemoglobin )  )
remain :arg1 ( group :mod ( therapy :mod medicine )  )  :arg3 steady :time ( percentage-entity :op1-of about :value 8 )
contrast :arg1 this :arg2 ( control :arg0 ( 5 :quant-of ( temporal-quantity :unit year )  )  :arg1 ( thing :arg0-of ( reduce :arg1 mortality :arg2 rate :polarity - :time-of ( say :arg0 ( person :arg0-of research :name ( name :op1 chih )  :wiki - )  :arg1 ( and :arg2-of lead :op1 colleagu )  )  )  :arg1-of reflect :arg1-of improve :mod hemoglobin :mod-of level :name ( name :op1 but )  )  :mod good )
outcome :arg1-of average :arg1-of ( compare :arg0 ( team :mod ( research :arg1 ( surgery :mod ( type :quant 2 )  )  )  )  :mod also )
and :arg1-of ( drop :arg0 percentage-entity :arg1-of ( achieve :arg0 ( group :arg0-of ( lose :arg1 ( weight :quant more )  )  :arg0-of ( surgery :arg1 bypass :op1-of percentage-entity :op1-of percentage-entity )  )  :op1-of ( and :arg1-of ( compare :arg0 ( year :mod fifth )  :arg2 ( group :mod gastrectomy :mod sleeve )  )  :op2 ( likely :arg1 ( remission :arg1-of ( complete :arg2 7.4 :op1-of kg )  :mod diabetes )  :degree more )  )  )  :location ( organization :name ( name :op1 bmi )  )  :mod large :op1-of percentage-entity )  :op1 ( thing :mod hemoglobin :name ( name :op1 a1c )  )
say :arg0 ( person :name ( name :op1 blackstone )  )  :arg0-of ( while :arg1 ( show :arg0 ( study :arg0 ( person :arg0-of ( study :arg0-of ( evidence :arg1 ( lead :arg0 surgery :arg1 ( city :name ( name :op1 phoenix )  :wiki phoenix,_arizona )  )  :mod heavy )  :arg1 ( college :mod ( organization :name ( name :op1 university :op2 of :op3 arizona )  )  )  )  :location ( country :name ( name :op1 sweden )  :wiki sweden )  )  :mod new )  :arg1 ( benefit :arg1 survive :op1-of ( or :op2 ( surgery :arg1 ( long :arg1 life )  )  )  )  :polarity - :time after )  )  :arg1 ( 5 :quant-of ( temporal-quantity :unit year )  )
try :arg0 ( group :arg2-of ( compare :arg1 ( person :arg0-of ( study :arg1 ( country :name ( name :op1 sweden )  :wiki sweden )  )  :arg0-of ( surgery :arg1 ( temporal-quantity :quant 15 :unit year )  :arg2 ( percentage-entity :op1-of about :value 29 )  )  :arg1-of ( die :arg1-of ( likely :degree less )  )  :mod obese )  )  )  :arg1 ( method :mod ( conventional :degree more )  )
say :arg0 ( person :arg0-of ( do :arg1 ( study :arg0-of benefit :arg0-of ( show :arg1 bmi :polarity - )  :arg0-of survive :arg1 new :arg1-of surgery )  )  :arg0-of ( have-rel-role :arg1 ( person :arg1-of ( interest :arg0 35 :arg2 procedure )  )  :arg2 patient )  )  :arg1-of ( reassure :arg0 it )
say :arg0 she :arg1 ( or :arg1-of die :arg2-of ( risk :arg0 ( organization :arg2-of ( low :arg0 safe :arg1 group :mod that )  :name ( name :op1 &quot; )  )  :arg1 of :arg1-of ( increase :arg0 ( paper :arg0-of ( say :arg1 this )  :arg0-of ( critical :arg1 it )  :arg0-of ( cause :arg1 surgery )  :mod this :mod this )  :arg2 disease )  :polarity - )  :op1 renal )
add :arg0 ( person :arg0-of ( take :arg1 weight :arg1-of ( start :arg0 ( person :op1-of and )  )  :arg1-of ( recommend :arg0 doctor )  :arg2 serious :op1-of ( and :op2 ( between :arg1-of ( fall :arg0 bmi )  )  :op3 27 :op4 30 )  )  :arg1-of ( have-rel-role :arg0 ( person :mod once )  :arg2 patient )  :name ( name :op1 blackstone )  )  :arg1 that
say :arg0 ( she :arg2-of ( think :arg0 ( i :arg0-of ( get :arg1 person :arg1-of ( long :arg2 about :degree too )  )  )  :arg1 ( we :arg1-of ( wait :arg2 serious )  )  )  )  :arg1 this
think :arg0 ( i :arg0-of ( hard :arg1 really )  :arg0-of ( reverse :arg1 hardwir :op5-of ( and :op1 ( change :arg0 they :arg1 gene :arg2-of ( accumulate :arg1 this )  )  :op2 body :op3 obesity :op4 diabetes )  )  )  :arg1 once
story :mod love :mod ( country :name ( name :op1 hunsrück )  )
and :arg1-of ( increase :arg2 ( fiction :arg2-of ( use :arg0 she :arg1 ( theme :domain it )  )  )  )  :op1 ( meet :arg0 ( and :op1 plain :op2 ( thing :degree-of popular )  )  :arg1 ( crush :arg0 teenage :arg1 school )  :time late )  :op2 ( fall :arg0 ( woman :mod young )  :arg1 he :prep-in ( love :arg0 nowadays :arg1 ( temporal-quantity :unit year )  )  )
publish :arg0 ( we :arg0-of ( happen :arg1 amr-unknown )  :arg0-of ( bind :arg1 this )  :arg1-of ( resemble :arg2 that :polarity - )  :poss-of really )  :arg1 novel :arg3 recent
possible :arg1 ( interest :arg0 novel :arg1 ( person :arg0-of ( read :mod every )  :arg0-of ( love :mod-of ( story :op1-of beyond )  )  :location ( country :name ( name :op1 hunsrück )  )  )  )  :op1-of ( and :op2 ( country :name ( name :op1 langweiler )  )  :op3 ( location :arg1-of surround )  )
possible :arg1 ( create :arg1 ( monument :mod literary )  :arg3 ( area :mod native )  )  :condition-of ( happy :op1-of ( and :arg0-of ( grow :arg1 ( person :arg0-of author :mod ( time :mod full )  )  :arg2 langweil )  )  )
come :arg1 ( person :name ( name :op1 dalai :op2 lama )  :wiki dalai_lama )  :arg3 ( continent :name ( name :op1 europe )  :wiki europe )  :concession it :op1-of everyone
say :arg0 ( person :name ( name :op1 dalai :op2 lama )  :wiki dalai_lama )  :arg1 ( possible :arg1 ( host :arg0 ( continent :arg0-of add :arg0-of ( lie :arg1 ( solution :beneficiary ( crisis :mod refugee :time current )  :mod real )  :arg2 ( world-region :name ( name :op1 middle :op2 east )  :wiki middle_east )  )  :name ( name :op1 europe )  :wiki europe )  :arg1 ( refugee :quant all )  )  :polarity - )
call :arg0 ( end :arg1 violence )  :arg1 ( lead :arg0 country :arg1 ( province :name ( name :op1 tibet )  :wiki tibet )  :arg2 ( religious-group :name ( name :op1 buddhism )  :wiki buddhism )  )  :arg2 ( refugee :quant home )
address :arg0 ( person :arg0-of ( visit :arg1 ( country :name ( name :op1 uk )  :wiki united_kingdom )  :arg1-of begin :duration ( temporal-quantity :quant 10 :unit day )  )  :name ( name :op1 dalai :op2 lama )  :poss-of ( organization :name ( name :op1 compassion )  )  :wiki dalai_lama )  :arg2 ( issue :arg0 ( crisis :location speech :mod refugee :mod ongo )  :location ( country :arg1-of ( dedicate :arg2 ( study :arg1 ethic )  )  :name ( name :op1 oxford )  )  :time ( open :arg1 ( thing :name ( name :op1 lama :op2 centre )  )  )  )
claim :arg0 he :arg1 ( recommend :arg1 ( put :arg1 ( interest :poss humanity )  :arg2 ( circumstance :time current )  :time ( before :op1 ( interest :poss ( nation :arg1-of single :op1-of ( or :op2 ( continent :mod even )  )  )  )  )  )  )
respond :arg0 country :arg1 ( thing :arg1-of ( admirable :arg0 ( he :arg0-of ( stress :arg1 ( situation :mod ( adequate :polarity - )  )  :mod also )  )  )  :name ( name :op1 he )  )  :arg2 ( refugee :op1 crisis )
say :arg0 ( he :arg1-of ( come :arg0 ( everyone :op1 ( ' :op1 it )  )  :arg2 ( continent :name ( name :op1 europe )  :wiki europe )  :accompanier it )  )  :arg1 ( he :arg0-of speak )
praise :arg0 ( person :name ( name :op1 dalai :op2 lama )  :wiki dalai_lama )  :arg1 ( country :location-of ( and :op1 ( country :arg0-of ( deal :arg1 effort :arg2 ( he :arg0-of ( stress :arg1 it )  )  )  :name ( name :op1 austria )  :wiki austria )  :op2 crisis :op3 ( temporary :mod only :mod-of solution )  )  :name ( name :op1 germany )  :wiki germany )
contrast :arg1 ( term :arg0-of ( bring :arg1 ( and :op1 genuine :op2 peace :op3 genuine :op4 develop )  :arg2 ( he :arg0-of ( emphasize :arg1 country )  :arg1-of ( educate :arg0 through :arg2 ( religious-group :mod this :name ( name :op1 muslim )  :wiki muslim )  :mod main )  )  )  :arg1-of ( long :arg2 solution :degree about )  )  :arg1-of ( wonderful :arg0 thousand )  :arg2 ( think :arg0 ( you :arg0-of ( take :arg0-of ( care :arg1 of )  :arg1 several :arg1-of cause :arg2 refugee )  )  :arg1 amr-unknown :arg2-of ( mean :arg1 time )  )
kill :arg1 ultimate :arg1-of ( reduce :arg0 ( we :arg0-of think )  :location country )
reduce :arg0 we :arg1 ( use :arg1 force )
add :arg0 he :arg1 ( problem :arg1-of ( solve :arg0 ( force :mod of )  )  :domain this )  :arg1-of use
address :arg0 ( country :arg0-of ( respond :arg1 ( engender :arg1 event :location chain )  :mod violent )  :name ( name :op1 us )  :wiki united_states )  :arg1 ( issue :arg1 ( comment :arg1 ( terrorist :arg1-of ( claim :arg0 ( person :name ( name :op1 bush )  :wiki george_w._bush )  :arg1-of attack )  :arg1-of ( follow :arg0 ( event :mod-of 11 :name ( name :op1 9/11 )  :wiki september_11_attacks )  :mod action )  )  :mod also )  :manner-of ( of :arg0 ( person :name ( name :op1 dalai :op2 lama )  :wiki dalai_lama )  :arg1 violence )  )
event :name ( name :op1 9/11 )  :op1 ( 11 :op1-of ( and :arg2-of ( tell :arg0 ( person :arg0-of ( have-org-role :arg1 - :arg2 president :op1-of violence )  :name ( name :op1 bush )  :wiki george_w._bush )  :arg1 ( way :manner-of ( solve :arg1 ( problem :mod this )  )  )  )  :op2 ( express :arg0 i :arg1 ( condolence :poss i )  :time letter )  )  )  :op1-of after :wiki september_11_attacks
contrast :arg1 ( know :arg0 i :arg1 motive )  :arg2 ( and :arg1-of ( say :arg0 ( person :name ( name :op1 dalai :op2 lama )  :wiki dalai_lama )  )  :op1 force :op2 ( create :arg1 ( use :arg0 he :arg1 good )  :arg1-of ( expect :arg0 consequence :polarity - )  )  )
increase :arg0 fourfold :arg1 ( child :arg0-of ( ingest :arg1 ( sanitize :arg0 ( 4 :quant-of ( temporal-quantity :unit ( year :mod last )  )  )  :arg1 hand )  )  )
say :arg0 ( thing :location ( country :name ( name :op1 georgia )  :wiki georgia_[country] )  :name ( name :op1 poison :op2 center )  )  :arg1 ( report :arg0 ( center :arg0-of ( control :arg1 ( poison :arg1 12 )  )  :location ( around :op1 ( country :name ( name :op1 united :op2 states )  :wiki united_states )  )  )  :arg1 ( uptick :arg0-of ( swallow :arg1 ( sanitize :arg1 hand :mod ( alcohol :mod high )  )  :arg1-of ( age :arg0 ( number :quant-of child )  )  )  :mod ( percentage-entity :quant ( 400 :mod nearly )  )  )  :time ( since :op1 ( date-entity :year 2010 )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( thing :location ( country :name ( name :op1 georgia )  :wiki georgia_[country] )  :name ( name :op1 poison :op2 center )  )  :arg2 director )  :name ( name :op1 gaylord :op2 lopez )  )  :arg1 ( go :arg0 ( center :arg0-of ( control :arg1 ( poison :arg1 12 )  )  :arg2-of ( report :arg1 child )  )  :arg1 ( case :arg0 dr. :arg1 ( hand :arg1-of sanitize )  :arg2 ingestion )  :time ( date-entity :year 2014 )  :time ( date-entity :year 2010 )  )
tell :arg0 they :arg2 ( publication :name ( name :op1 cnn )  :wiki cnn )  :destination room :op3-of ( and :arg0-of ( fortunate :arg1 ' :arg2 there )  :op1 ( get :arg0 kid :arg1 ( product :mod this )  )  :op2 ( frequent :arg0 into :arg1 ( percentage :op1-of of )  :degree more )  )  :time lopez :time emergency
say :arg0 ( he :arg1-of ( have-rel-role :arg0 ( person :arg1-of ( dare :mod ( media :mod-of society )  )  :arg1-of ( impress :arg0 some :op1-of or )  )  :arg2 friend )  )  :arg1 ( drink :arg0 ( kid :quant some )  :arg1 sanitize :manner intentional )
show :arg0 video :arg1 ( sanitize :arg1-of ( drink :arg0 ( publication :name ( name :op1 youtube )  :wiki youtube )  )  )  :arg2 teenager :purpose ( buzz :arg1-of cheap )
stiff :arg1-of ( drink :purpose-of ( contain :arg1 mouthwash :manner-of ( mix :arg0 teen :arg1 sanitize :arg1-of report :arg2 alcohol )  )  )
draw :arg1 ( child :arg0-of ( scent :arg1 sanitize :arg1-of attract )  :mod young )  :arg1-of possible
say :arg0 ( person :arg2-of ( bad :arg1 they :arg1-of ( think :arg0 kid :arg2 this :polarity - )  )  :name ( name :op1 &quot; )  )
sanitizer :arg1-of ( scent :arg0 ( one :domain lot )  :arg1-of ( attract :degree more )  )  :mod hand
sanitizer :mod hand :mod ( appeal :arg2 kid :degree ( very :mod-of strawberry )  )  :mod ( flavor :mod orange )  :mod grape
contain :arg0 ( sanitize :arg1 ( hand :arg1 95 )  )  :arg1 and :arg2 anywhere :arg3 ( alcohol :mod percentage-entity :quant 45 )
cause :arg0 ( squirt :quant ( few :mod only )  )  :arg1 ( poison :arg1 alcohol )  :arg1-of ( possible :li especially )  :condition ( child :mod young )
tell :arg0 ( hospital :wiki - )  :arg1 4 :arg2 ( name :op1 fox )  :arg3 medicine :name ( name :op1 kansas )  :time ( control :arg0 it :arg1 ( center :arg1-of ( have-org-role :arg0 ( thornton :mod ( stephen :mod dr. )  )  :arg2 director )  :arg1-of ( concentrate :arg0 ' :arg2 alcohol :manner high )  )  :arg1-of ( poison :arg0 of )  )  :time ( name :op1 kansas )
contrast :arg1 hand :arg2 ( and :op1 ( sit :arg1 ( person :arg0-of ( leave :arg1 kid )  :arg1-of ( shoot :arg0 ( you :arg0-of ( cause :arg1 ( consume :arg1 it :arg2 ( alcohol :quant lot )  :arg2-of ( quick :arg1 way )  )  :polarity - )  )  :arg2 whiskey )  )  :arg2 around )  :quant ( sanitizer :mod this )  )
ingest :arg0 ( girl :mod old :mod ( 6 :quant-of ( temporal-quantity :unit year )  )  )  :arg1 ( squirt :arg1 ( sanitize :arg1 ( hand :part-of ( person :arg1-of ( take :arg0 4 :arg3 ( room :mod emergency )  :purpose treat )  :name ( name :op1 nhaijah :op2 russell )  )  )  :arg1-of ( scent :arg2 strawberry )  )  :location school )  :arg2 many :time recent
say :arg0 ( thing :name ( name :op1 chris :op2 ritchey )  :poss ( she :poss-of ( level :mod blood :mod alcohol )  )  )  :arg1 ( consider :arg0 threshold :arg1 drunk :location adult :purpose-of ( treat :arg0 ( doctor :mod ( emergency :mod-of room )  )  :arg1 she :arg2 ( thing :name ( name :op1 medical :op2 center )  :time ( outside :op1 ( city :name ( name :op1 atlanta )  :wiki atlanta )  )  )  )  )  :arg2 dr.
and :op1 ( slur :arg0 ( person :arg0-of ( walk :time ( arrive :arg1 she :arg4 ( room :mod emergency )  )  )  :name ( name :op1 nhaijah )  )  :arg1 word )
say :arg0 ( she :arg0-of ( hit :arg1 ( brain :mod ( of :mod ( any :mod-of sign )  )  :mod-of trauma )  :arg2 alcohol :mod-of head :op2-of ( and :arg1-of ( cause :arg0 ( she :arg0-of ( separate :arg1 ( child :mod at :mod-of ' )  :arg2 hospital )  :arg2-of ( monitor :arg0 doctor :arg1 overnight )  )  )  :op1 ( fall :arg1 girl )  )  )  )  :arg1 ritchey
tell :arg0 ( person :arg0-of ( have-rel-role :arg2 mother )  )  :arg1 ( scary :arg0 that :arg1 scott :degree very )  :arg2 ( publication :name ( name :op1 cnn )  :wiki cnn )  :time '
possible :arg1 ( it :domain-of ( lethal :compared-to child :degree very )  )
and :op1 ( person :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( recommend :arg1 ( or :arg0-of sanitize :arg0-of ( wipe :arg1 ( move :arg0 of :arg1 hand :arg1-of ( sanitize :arg2 ( child :arg1-of reach )  )  :arg2 out )  :arg2 short )  )  )  :name ( name :op1 lopez )  )  :arg2 parent )  )  :op2 ( person :arg0-of ( use :arg1 product :arg2 nonalcoholic )  :arg0-of teach )
link :arg1 ( sanitizer :quant some )  :arg2 death :time ( beyond :op1 ( poison :arg1 alcohol )  )
declare :mod-of ( ingredient :arg1-of ( contain :arg0 ( sanitize :arg1 hand :arg1-of ( swallow :op1-of ( after :time-of ( die :arg1 ( woman :mod ( country :name ( name :op1 ontario )  )  :quant 2 )  :time ( date-entity :year 2013 )  )  )  )  )  )  :mod toxic )  :polarity -
surmise :arg0 ( person :arg0-of ( activity :arg1 ( ingredient :arg2-of ( list :arg0 ( deadly :mod-of agent )  :arg1 ( alcohol :mod ethyl )  )  )  )  :arg0-of ( have-org-role :arg1 health :arg2 official )  )  :arg1 ( contain :arg0 product :arg1 methanol )
say :arg0 ( classroom :op1-of around )  :arg1 ( put :arg0 3 :arg1 antibacterial :arg1-of ( report :arg0 police )  :arg1-of mean :arg1-of ( teach :arg0 ( person :arg0-of ( study :arg1 fourth )  :arg0-of poison :arg0-of ( plot :arg1 ( city :location-of upstate :name ( name :op1 new :op2 york )  :wiki new_york_city )  )  )  )  :arg2 product :time ( date-entity :month 1 )  )
and :op1 ( ban :arg1 room :arg1-of ( sanitize :arg0 ( teach :arg1-of ( allergic :degree high )  )  :mod hand )  )
refer :arg0 ( plan :arg0-of ( foil :arg1 ( district :arg1-of chatter :mod school )  :arg1-of ( consider :arg0 police )  )  :arg1 idle )  :arg1 discipline
damage :arg0 ( country :name ( name :op1 villingen-schwenningen )  )  :arg1 ( vehicle :quant 3 )
receive :arg0 ( person :arg0-of drive :arg0-of ( cross :arg1 over )  :arg1-of ( collide :arg0 ( and :op1 nordr :op2 ( thing :name ( name :op1 auf :op2 herdenen )  )  )  )  :age ( temporal-quantity :quant 33 :quant-of old :unit year )  )  :arg1 ( injure :mod minor )
and :op1 ( drive :arg0 ( person :arg0-of ( drive :arg1 lorry )  :age ( temporal-quantity :quant 60 :quant-of old :unit year )  )  :arg1 ( cross :op1-of ( onto :op2 over )  )  :arg2 ( direction :poss ( roundabout :mod ( estate :mod industry )  )  )  )  :op2 ( realize :arg1 ( late :degree too )  )  :op3 ( stop :arg1 ( vehicle :location front :quant 2 )  :location roundabout )
run :arg0 ( he :arg0-of ( push :arg1 vehicle :arg2 ( thing :arg1-of ( stop :arg0 front )  :name ( name :op1 ford :op2 fiesta )  )  :op1-of and )  )  :arg1 ( rear :poss ( organization :name ( name :op1 audi )  )  )  :arg2-of ( result :arg0 this )
say :arg0 police :arg1 ( suffer :arg0 ( vehicle :arg1-of ( involve :arg0 around )  )  :arg1 ( damage :arg1-of amount )  )
possible :arg1 ( and :op1 ( drive :arg1 ( organization :arg0-of ( belong :arg1 33 :direction old :prep-to year )  :name ( name :op1 audi )  )  )  :op2 ( tow :arg1 away )  )  :polarity -
mill :arg0 ( disharmony :mod ( organization :name ( name :op1 celtic )  )  )  :arg1-of ( rumor :arg0 - )
contrast :arg1 ( place :arg1-of bad )  :arg2 ( he :arg0-of ( play :arg1 ( person :arg0-of ( talk :arg1 of :arg2-of ( admit :arg0 deila :arg1 hoop )  )  :name ( name :op1 griffiths )  )  :arg2 ( disharmony :mod-of ( at :mod-of celtic )  )  :direction down )  :arg0-of ( turn :arg1 ( it :op1-of around )  )  )
signing :arg1-of disrupt :mod 1 :topic-of ( wary :mod-of ( and :arg0-of ( fight :arg1 ( organization :name ( name :op1 sfa )  )  :domain-of ( organization :name ( name :op1 hearts )  )  )  :op1 ( charge :arg1 ( squad :name ( name :op1 unity )  )  :arg2 ( organization :name ( name :op1 neilson )  )  )  :op2 ( person :name ( name :op1 warburton )  )  )  )
don :arg0 5 :arg1 ( lead :arg0 ( thing :arg1-of stretch )  :arg1 ( organization :name ( name :op1 celtic )  )  )  :arg2 point
penalize :arg0 half :arg1 ( give :arg0 first :arg1 ( victory :mod-of over )  :arg2 ( person :arg0-of ( open :arg1 5 :arg2 point :op1-of ( and :arg1-of allow :op2 gap :op3 between :op4 celtic )  )  :name ( name :op1 adam )  )  :arg2-of narrow )
play :arg0 ( person :name ( name :op1 griffiths )  )  :arg1 ( talk :arg0 disharmony )
sense :arg1 ( he :arg1-of ( have-rel-role :arg0 ( person :op3-of ( and :op1 ( insist :arg0 hand :arg1 ( person :arg0-of ( dismiss :arg1 ( organization :name ( name :op1 celtic )  :time-of ( spark :arg0 it :arg1 ( rumour :mod disharmony )  :arg2 - )  )  )  :name ( name :op1 griffiths )  )  )  :op2 team )  )  :arg2 mate )  :arg1-of ( prepare :arg0 they :arg2 ( face :arg1 ( person :arg0-of ( lead :arg1 ( league :mod dutch )  )  )  :arg0 they )  )  )  :arg2 ( scrutiny :arg1-of increase )  :degree any
think :arg0 i :arg1 ( look :arg0 ( person :arg0-of play :arg1-of ( pressure :arg1-of ( think :arg0 ( i :arg0-of ( feel :arg1 we )  )  :polarity - )  :op1-of under )  )  :arg1 forward )
lack :arg1 ( thing :mod ( race :arg1-of ( bore :arg0 ( ethnic-group :mod-of title :name ( name :op1 scot )  :wiki scottish_people )  :arg2 ( person :name ( name :op1 de :op2 boer )  )  )  )  :name ( name :op1 dutch )  )
say :arg0 bo :arg1 ( that :mod-of dutch )  :arg2 ( lose :arg0 ( fan :mod football )  :arg0-of ( cause :arg1 there )  :arg1 celtic :arg2-of ( interest :arg1 ( title :mod rivalry :polarity - )  )  :op6-of ( and :op1 former :op2 midfield :op3 ex :op4 ( country :name ( name :op1 netherlands )  :wiki netherlands )  :op5 ( international :mod-of de )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :arg0-of ( show :arg1 ( and :op1 celtic :op2 game :op3 why :op4 interrogative :quant ( more :mod any )  )  :arg1-of ( highlight :arg0 they :arg2 of :polarity - )  )  :name ( name :op1 holland )  :wiki netherlands )  :arg2 ambassador :time current )  :mod-of bo :name ( name :op1 de )  )  :arg1 in
cause :arg0 it :arg1 -
ranger :arg0-of ( come :arg1 ( person :arg0-of ( talk :mod only :op1-of about :polarity - )  )  :direction back :purpose here )
talk :arg0 they :arg1 ( firm :mod old )
and :arg1-of ( interest :arg0 they )  :op1 ( talk :arg0 they :op1-of about )  :op2 both :op3 team :op4 together
and :op1 ( person :arg0-of ( want :arg1 ( see :arg0 old :arg1 game )  :purpose ( firm :arg1 game )  )  :location ( country :name ( name :op1 scotland )  :wiki scotland )  :mod ( just :polarity - )  )  :part ( tension :quant lot )
vow :op2-of ( around :op1 ( thing :arg1-of ( turn :arg0 i )  )  )
contrast :arg1 ( accept :arg0 ( person :name ( name :op1 ronny :op2 deila )  )  :arg1 ( struggle :arg0 ( organization :name ( name :op1 celtic )  )  )  )  :arg2 ( vow :arg0 ( boss :arg2-of ( have-org-role :arg1 ( country :name ( name :op1 norway )  :wiki norway )  )  )  :arg1 ( turn :arg1 thing :arg2 around :arg0 boss )  )
sit :arg1 ( aberdeen :arg4-of ( lose :arg1 5 :arg2-of ( follow :arg1 ( and :op1 ( defeat :arg0 10 :arg1 ( country :name ( name :op1 malmo )  )  )  :op2 ( exit :arg1 ( thing :name ( name :op1 champions :op2 league )  )  :time subsequent )  )  :manner swift )  )  :mod man )  :arg2 ( top :part-of table )  :manner ( clear :arg1 point )  :time now
contrast :arg2 ( say :arg0 ( we :arg1-of ( come :purpose again )  )  :arg1 ( and :time ( before :time-of ( bad :arg1 period )  )  )  )
possible :arg1 ( come :arg1 we :arg1-of ( want :time now :arg0 we )  )  :compared-to-of quick
and :op1 ( know :arg0 i :arg1 ( frustrate :arg1 ( person :quant lot )  :arg1-of ( happen :arg1-of ( sad :op2-of ( or :op1 ( angry :degree very )  )  )  )  :degree very )  )  :op2 very
contrast :arg1-of ( go :arg0 we )  :arg2 ( same :arg1 that :arg2 we )
need :arg0 we :arg1 ( support :arg0 ( organization :name ( name :op1 celtic )  )  :arg1 much )  :arg1-of ( cause :arg0 ( make :arg0 that :arg1 ( good :domain ( person :arg0-of play )  )  )  )  :mod ( really :degree-of really )
important :domain ( stay :arg3 together :time now )
wary :domain ( person :name ( name :op1 warburton )  )  :topic ( transfer :arg1 1 )
suggest :arg0 ( couple :arg0-of ( transfer :arg1 ( he :arg0-of ( have-org-role :arg1 target :arg2 boss )  :arg0-of ( sign :arg1 ( he :arg0-of ( disrupt :arg1 squad )  :arg0-of ( do :arg1 spree :arg1-of ( want :concession-of ( name :op1 unity )  :polarity - )  )  :arg1-of insist )  )  :arg0-of ( identify :arg1 some )  :arg0-of ( mark :arg1 wary )  )  :time ( date-entity :month 1 )  )  :mod just :quant-of ( temporal-quantity :unit week )  )  :arg1 ( comment :arg1 despite )
say :arg0 gaff :arg1 ( mean :arg1 ( transfer :arg1 window :arg2 ( differ :arg1 window :arg2 summer :degree very )  :time ( date-entity :month 1 )  :time ex )  )
see :arg0 you :arg1 ( period :mod season :op1 bed :poss ( you :arg0-of ( come :arg1 ( person :arg0-of ( play :arg1 term )  :poss-of summer )  )  )  :poss they )  :time-of ( own :arg0 we :arg1 group :arg2 ( season :mod this )  )
do :arg0 squad :arg1 really
do :arg1 ( harm :degree more )  :arg2 ( add :arg1 ( person :arg0-of ( play :arg2 ( need :arg0 you :mod really )  )  :mod unnecessary )  )  :time sometimes
target :arg0 ( organization :name ( name :op1 celtic )  )  :arg1 ( person :arg0-of ( hint :arg1 retire )  :name ( name :op1 michu )  )
drop :arg0 ( person :arg0-of ( strike :arg1-of ( link :arg0 ( window :mod transfer )  :arg2 ( organization :name ( name :op1 celtic )  )  )  )  :name ( name :op1 michu )  )  :arg1 ( hint :arg0 ( organization :name ( name :op1 swansea )  )  :arg1 ( possible :arg1 ( retire :arg0 he :arg1 ( contract :arg2 ( country :name ( name :op1 swans )  )  )  )  )  )
and :op1 ( plague :arg1 old )  :op2 ( ankle :mod troublesome )  :op3 ( fail :arg0 29 :arg1 year :arg2 ( find :arg1 ( move :arg1 ( temporal-quantity :quant 2 :unit year )  :arg2 ( country :name ( name :op1 wales )  :op1-of away :wiki wales )  )  )  :location summer )
comment :arg0 ( organization :name ( name :op1 neilson )  )  :arg1-of ( battle :arg0 ( organization :name ( name :op1 hearts )  )  :mod ( organization :name ( name :op1 sfa )  )  )
contrast :arg1 red :arg2 ( lose :arg2-of ( rescind :arg0 red :arg1 ( 8 :quant-of ( temporal-quantity :unit month )  )  )  :arg2-of ( overturn :arg0 card :op1-of late )  :op2-of ( and :op1 ( go :arg0 card :arg1-of defend :arg1-of ( lead :arg0 ( organization :name ( name :op1 hearts )  )  )  :arg1-of dismiss )  )  )
say :arg0 ( he :arg0-of ( insist :arg1 ( i :arg0-of question )  )  :arg0-of ( perform :arg1 ( integrity :mod any )  :arg1-of ( comment :arg0 i )  :polarity - :polarity - )  :arg1-of ( stick :arg0 ( organization :name ( name :op1 neilson )  )  )  )  :arg1 amr-unknown
vow :purpose ( avoid :arg0 ( person :name ( name :op1 griffiths )  )  :arg1 ( organization :name ( name :op1 tynecastle )  )  )
rudi :mod ( thing :arg0-of play )  :op1-of ( name :name-of ( thing :arg0-of ( admit :arg1 ( sing :arg1 song )  :op1-of ( after :time-of ( carpet :arg0 ex :arg1 ( organization :mod diehard :name ( name :op1 hibee )  )  :arg1-of ( offense :arg0 lyric )  )  )  )  )  :op2 skacel )
incident :op1-of ( before :op2 ( derby :location ( organization :mod-of ( area :location-of ( pub :poss ( date-entity :month 3 )  )  :mod ( country :name ( name :op1 roseburn )  )  :mod ( city :name ( name :op1 edinburgh )  :wiki edinburgh )  :quant ( date-entity :year 2014 )  )  :name ( name :op1 tynecastle )  )  :location ( city :name ( name :op1 edinburgh )  :wiki edinburgh )  )  )
say :arg0 safe :arg1 tynecastle :arg2 i :arg2-of ( mean :arg1 unles :arg1-of ( add :arg0 ( moment :arg0-of ( play :arg1 celtic )  :arg0-of ( strike :arg1 ( say :arg0 ( and :op1 it :op2 derby :op3 it :op4 heat )  :arg1 back )  )  :mod of :polarity - )  )  )
faith :domain ( manage :arg0 ( organization :mod-of board :name ( name :op1 tannadice )  )  :arg1 ( organization :name ( name :op1 dundee :op2 united )  )  )  :prep-in ( person :name ( name :op1 donnelly )  )
contrast :arg1 ( thing :arg1-of ( manage :mod ( still :mod-of faith )  )  :arg1-of ( turn :arg0 team )  )  :arg2 ( round :arg0-of ( concede :arg1 ( field :arg1-of end :arg1-of ( decline :arg0 ( person :arg0-of ( insist :arg1 board )  :name ( name :op1 simon )  :wiki - )  )  :mod-of must )  )  )
think :arg0 i :arg1 faith :arg2 ( person :name ( name :op1 stephen :op2 thompson )  )
say :arg0 again :arg1 ( go :arg0 we :arg1-of ( ready :arg0 boy )  )
glad :arg1 ( person :arg0-of ( win :arg1 ( ugly :mod-of ( against :op1 ( organization :name ( name :op1 mcinnes )  )  )  )  )  :name ( name :op1 mcinnes )  )
penalize :arg0 ( he :arg0-of ( admit :arg1 mcinn )  :arg0-of ( thank :arg1 table :arg2 top )  :arg0-of ( cling :arg1 ( against :mod desperate :mod side )  )  :arg0-of ( move :arg1 they :arg1-of ( win :arg0 ( person :name ( name :op1 derek )  )  )  :arg2 ( point :mod 5 )  :manner ( succeed :arg0 seventh :arg1 league )  :mod that )  :arg0-of ( clear :arg1 of )  :arg0-of ( see :arg1 acci :arg2 out )  )  :arg1 half :arg2 first
say :arg0 team :arg1 ( or :arg0-of ( win :arg1 game :polarity - )  :arg1-of resemble :op1 ( anything :arg1-of ( win :arg0 there :polarity - )  )  :op2 it :op3 cup :op4 league )
remain :arg3 ( change :arg1 ( employ :arg1 ( ethnic-group :name ( name :op1 scot )  :wiki scottish_people )  :polarity - )  :arg2 ( rise :arg1 ( country :name ( name :op1 uk )  :wiki united_kingdom )  :arg2-of total )  :polarity - )
remain :arg1 ( number :arg1-of ( increase :arg0 ( country :name ( name :op1 scotland )  :wiki scotland )  :time ( period :arg1-of ( same :arg0 ( date-entity :mod period :month 5 )  )  )  )  :quant-of ( work :arg0 ( country :name ( name :op1 uk )  :wiki united_kingdom )  :arg1 7 :prep-as whole )  )  :arg3 ( change :arg1 ( country :name ( name :op1 unemployment )  )  :polarity - )
show :mod ( figure :mod ( on :mod statistic )  :mod ( country :name ( name :op1 scotland )  :wiki scotland )  :mod office :mod ( country :mod-of ( rate :mod-of ( 5.5 :mod-of ( cent :unit-of monetary-quantity )  )  )  :name ( name :op1 uk )  :wiki united_kingdom )  :mod ( employ :mod-of ( rate :mod-of ( of :mod-of ( 5.9 :mod-of ( cent :unit-of ( monetary-quantity :mod-of above )  )  )  )  )  :polarity - )  )
work :arg0 ( country :location-of ( employment :arg1-of ( fall :time meanwhile :time ( period :mod ( temporal-quantity :quant 3 :unit month )  )  )  )  :name ( name :op1 scotland )  :wiki scotland )  :arg0-of ( stand :arg1 number :time now )
average :arg0 employment :arg1 ( country :name ( name :op1 uk )  :wiki united_kingdom )  :op1-of ( above :location-of figure )  :purpose ( quarter :arg2-of ( fall :arg0 ( monetary-quantity :unit cent )  :arg1 ( rate :beneficiary ( country :name ( name :op1 scotland )  :wiki scotland )  )  :location ( monetary-quantity :unit cent )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 of :arg2 secretary :location state )  :arg0-of comment :mod ( country :arg1-of ( govern :arg0 ( government-organization :arg0-of ( plan :arg0-of ( lay :arg1 ( economy :arg1-of strong )  :arg2 ( foundation :wiki mac_cosmetics )  )  :arg1 ( term :arg1-of long )  )  )  )  :name ( name :op1 scotland )  :wiki scotland )  :name ( name :op1 david )  :wiki - )  :arg1 ( figure :mod ( late :degree most )  )
remain :arg1 ( country :name ( name :op1 scotland )  :wiki scotland )  :arg1-of ( decide :arg0 almost :mod history :op1-of ( since :mod exact :time-of ( year :domain it )  )  )  :arg2 ( country :name ( name :op1 uk )  :wiki united_kingdom )
increase :arg1 employment :op1-of ( and :arg1-of ( fall :arg0 ( we :arg0-of ( see :arg1 ( improve :arg1 ( market :mod ( political-party :name ( name :op1 labour )  :wiki labour_party_[uk] )  :mod ( country :name ( name :op1 scotland )  :wiki scotland )  )  :degree further )  :time ( month :unit-of ( temporal-quantity :quant 12 )  )  )  )  )  :op2 ( employ :polarity - )  )
create :arg0 drunk :arg1 disturbance
call :arg0 ( person :arg0-of ( have-org-role :arg1 security :arg2 personnel )  :arg0-of ( appease :arg1 situation :arg1-of ( possible :polarity - )  )  )  :arg1 ( person :arg1-of employ )  :arg2 police :time since
possible :arg1 ( take :arg0 officer :arg1 troublemaker :arg2 custody :time ( after :op1 ( use :arg1 ( spray :arg1 pepper )  )  )  )  :mod only
show :arg0 ( test :arg0 16 :arg1 ( breathe :arg1 ( alcohol :mod-of ( level :mod blood :poss old :poss year )  )  )  )
pick-up :arg0 ( person :arg0-of ( have-rel-role :arg2 mother )  )  :arg1 teenager
detain :arg0 ( year :mod 28 )  :arg1 ( old :op1 ( level :mod alcohol :mod blood )  )  :location custody :time initial
witness :arg0 i
watch :arg0 ( i :arg0-of ( bar :arg1 ( intervene :arg0 legal :time late )  )  )  :arg1 ( man :arg1-of ( put :arg2 ( die :arg1 late )  )  )  :time today
hope :arg0 i :arg1 ( execute :arg0 state :arg1 oklahoma :arg1-of ( inject :arg0 lethal )  :polarity - )  :arg1-of ( happen :arg0 it )  :op1-of ( and :op2 ( sit :arg1 ( i :arg0-of ( will :arg1 ( view :arg1 chamber :arg1-of die :mod-of gallery )  )  )  )  )
ask :arg0 ( he :domain-of ( person :arg0-of ( witness :arg1 ( die :arg1 4 )  )  :mod official )  )  :arg1 i
and :op1 ( agree :arg0 i :arg1 invite :time ( shock :arg1 ( i :arg1-of ( have-rel-role :arg0 1 :arg2 ( friend :mod ( good :degree most )  )  :manner back )  )  )  )
approach :arg1 day :arg2 ( i :arg0-of ( dread :arg1 it )  :arg1-of come )
cause :mode interrogative
penalize :manner die :topic-of ( story :arg1-of ( tell :instrument ( way :arg1-of ( think :arg0 i :arg0-of ( cause :arg1 ( agree :arg0 i )  )  )  :mod good )  )  :mod full )
offer :arg0 it :arg1 ( perspective :mod unique )
permit :arg1 ( watch :arg0 journalist :arg1 ( execute :arg1 often :location ( country :name ( name :op1 america )  :wiki united_states )  )  )  :op1-of ( and :arg1-of true :op2 ( take :arg0 ( decide :arg0 ( lottery :mod macabre )  :arg1 choose :arg1-of ( cause :arg0 ( application :quant more )  )  )  :arg1 place :manner ( available :arg2 seat )  )  )
reduce :arg0 ( country :name ( name :op1 oklahoma )  )  :arg1 ( number :quant-of ( seat :mod media :mod 12 :value 5 )  )
whoev :arg1-of ( pick-up :condition-of ( watch :arg1 dispassionately )  )
possible :arg1 ( do :arg0 i :arg1 that )  :polarity -
and :arg1-of ( visit :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  :arg1-of close :arg1-of ( develop :arg0 i :op2-of ( and :op1 ( sit :arg1 i :arg2 alongside )  )  )  :arg1-of ( relation :arg0 i )  )  :arg1-of ( last :arg0 half :arg2 ( temporal-quantity :unit hour )  )  )  :op1 ( call :arg0 phone :arg1 ( month :unit-of temporal-quantity )  :arg2 2 :op1-of and )
resemble :arg0 i :arg1 guy
laugh :arg0 ( we :arg0-of ( talk :arg1 lot )  )  :arg1 we :frequency often
say :arg0 i :arg1 ( authority :arg0-of ( pen :arg1 amr-unknown :op2-of ( and :arg1-of allow :op1 notebook :op3 record :op4 ( see :arg0 i :polarity - )  )  )  :arg1-of ( witness :arg0 ( person :mod both :op1-of ( and :arg1-of ( cause :arg0 i )  :op2 journalist )  )  )  :arg1-of ( possible :polarity - )  :mod prison )
try :arg0 i :arg1 ( remember :arg1 ( detail :quant all )  :manner just :arg0 i )
accuse :arg0 ( journalist :mod ( country :name ( name :op1 oklahoma )  )  :quant 1 )  :arg1 i :arg2 ( compromise :arg1 impartiality )  :time ( product :name ( name :op1 twitter )  :wiki twitter )
lesson :location here
tell :arg0 story :arg1 way :arg2 ( he :arg0-of ( like :arg1 access )  )
complain :arg0 i :arg1 she
contrast :arg1 phrase :arg2 ( think :arg0 ( i :arg1-of ( wrong :arg0 ( she :arg1-of possible :arg1-of ( admit :arg0 she )  )  )  )  :arg1 good :arg1-of ( do :arg0 i )  :mod still )
say :arg0 i :arg1 ( and :arg1-of ( write :arg0 ( person :arg0-of ( take :arg1 issue :arg2 of :arg3 some )  :name ( name :op1 richard )  )  )  :op1 thing )
tell :arg0 he :arg2 i :arg3 - :op1-of ( and :arg1-of ( write :arg0 he )  :op2 i :op3 even )  :polarity -
list :arg1 ( person :arg0-of ( witness :arg1 ( time :mod any )  )  :arg1-of ( remove :arg0 ( he :arg1-of ( tell :arg0 i :arg2 i )  :arg1-of possible )  )  )
contrast :arg2 ( want :arg0 ( he :arg0-of ( write :arg1 there )  )  :arg1 ( report :mod international )  )
think :arg1 ( help :arg0 publicity :arg1 ( movement :arg1 ( oppose :arg1 ( die :mod-of penalize )  )  )  )  :time ( die :arg1 he )
report :arg0 ( person :name ( name :op1 kim :op2 bellware )  )  :arg1 ( i :poss-of alongside )  :arg2 ( organization :name ( name :op1 huffington :op2 post )  )
listen :arg0 ( want :arg0 ( you :arg0-of ( please :arg1 case )  )  :arg1 ( know :arg0 ( i :arg0-of ( make :arg1 podcast )  )  :arg1 more )  )  :arg1 series
detail :arg0 here :arg1 ( go :arg0 i :arg1 all :arg4 - )  :op1-of again
say :arg0 i :arg1 ( innocent :arg1 ( person :name ( name :op1 richard :op2 glossip )  )  )  :arg1-of ( possible :polarity - )  :arg2 certainty
fact :op2-of ( after :op1 ( murder :arg1 ( person :arg1-of ( guilty :arg0 ( action :poss he )  )  :name ( name :op1 barry :op2 van :op3 treese )  )  :op1-of after )  :time-of accessory )
contrast :arg1 ( murder :arg1 ( probability :arg1-of strong )  :arg2-of ( guilty :arg1 he :polarity - )  )  :arg2 ( believe :arg0 i )
believe :arg0 i :arg1 ( evidence :arg1 ( justify :arg1 ( sentence :arg2 ( die :arg1 - )  )  )  :quant enough )  :mod certain
believe :arg0 i :arg1 ( wrong :arg1 execute )
and :example perspective :op1 it :op2 ( watch :arg0 i :arg1 die :mod this )
possible :arg1 ( claim :arg0 i :arg1 objective )  :polarity -
report :arg0 ( person :arg1-of ( turn :arg0 you :arg1-of possible )  :mod other )  :arg1 that
resemble :arg3 ( watch :arg0 i :arg1 ( die :degree-of unnecessary )  :arg3 ( i :arg3-of ( resemble :arg1 die )  )  :extent ( amr-unknown :degree-of you )  :mod man :topic it )
coax :arg1 man :arg2 ( country :name ( name :op1 canning :op2 river )  )  :time ( after :op1 ( chase :arg1 police :mod soggy )  )
remain :arg1 ( coax :arg0 he :arg1 man :arg2 ( country :name ( name :op1 canning :op2 river )  )  )  :arg3 ( dry :arg1 ( constable :mod ( organization :name ( name :op1 canning :op2 vale )  )  )  )
bid :arg1 man :arg2 ( lose :arg0 ( he :arg0-of find :arg0-of ( coax :arg1 gently )  :arg0-of ( shore :arg1 back )  :arg0-of ( try :arg1 ( metr :mod just )  )  :arg0-of ( have-org-role :arg1 police :arg2 officer )  :arg1-of undo :arg1-of come :poss-of after :poss-of shallow )  :arg1 water :arg2-of ( tail :arg0 police :arg1 muddy )  )
call :arg1 ( police :mod ( country :name ( name :op1 canning :op2 vale )  )  )  :arg2 ( incident :arg1-of trespass :location ( country :location tuesday :name ( name :op1 beckenham )  )  )
try :arg0 ( he :arg0-of ( head :arg1 ( country :name ( name :op1 canning :op2 river )  )  )  )  :arg1 ( they :arg0-of ( spot :arg1 suspect )  )
contrast :arg1 ( far :mod-of ( too :polarity - )  )  :arg2 he
say :arg0 ( he :arg0-of ( say :arg1 ( and :op1 ( come :arg1 i )  :op2 ( get :arg0 ( i :arg0-of ( get :arg1 sergeant :arg2 out :polarity - )  )  :arg1 senior )  )  )  :arg0-of ( stand :arg1 water )  )  :arg1 castledine :time shandell
cause :arg0 ( thing :arg1-of ( uniform :arg0 ( he :arg0-of ( keen :arg1 constable :polarity ( - :polarity-of too )  )  )  )  :mod-of wet )  :arg1 ( he :arg0-of ( employ :arg1 ( safe :mod-of tactic )  )  :arg2-of ( negotiate :arg1 police :mod good )  )
say :arg0 ( person :name ( name :op1 &quot; )  )  :arg1 ( and :op1 funny :op2 ( try :arg0 ( person :arg0-of ( escape :arg1 sergeant )  :arg0-of ( do :arg1 thing :time sometimes )  )  :arg1 senior )  )
provide :arg0 ( person :arg1-of ( champion :arg0 football )  :name ( name :op1 ben :op2 cousins )  )  :arg1 ( example :mod memorable )
and :op1 ( attempt :arg0 ( person :arg0-of ( avoid :arg1 ( bus :arg1-of booze )  )  :name ( name :op1 cousins )  :poss-of car )  :arg1 ( swim :arg0 ( date-entity :year 2006 )  :arg1 ( across :op1 ( country :name ( name :op1 swan :op2 river )  )  )  )  )
contrast :arg1 ( succeed :arg0 cheek :arg1 tongue :polarity - )  :arg2 ( inspire :arg1 ( effort :poss he )  :purpose ( begin :arg0 ( person :arg1-of local )  :arg1 ( plan :arg1 ( biathlon :mod ( thing :name ( name :op1 ben :op2 cousins )  )  )  )  )  )
and :op1 ( allege :arg0 ( person :arg0-of ( try :arg2 spy )  :arg0-of ( threaten :arg1 ( quit :arg1 race )  )  :name ( name :op1 peter :op2 moody )  )  :arg1 steward )
race :arg1 ( year :mod last )  :arg1-of ( quit :arg1-of ( threaten :op2-of ( and :op1 ( attempt :arg0 ( steward :arg0-of ( spy :arg1 stable )  :mod ( state :name ( name :op1 victoria )  :wiki victoria_[australia] )  )  :arg1 plant :arg1-of ( race :arg0 ( person :name ( name :op1 peter :op2 moody )  )  :arg1-of allege )  )  )  )  )  :time immediate
cause :arg0 ( and :op1 ( aim :arg0 ( he :arg0-of allege :arg0-of ( race :arg1 ( treat :arg1 straw :arg2 wednesday :time day :time final )  )  )  :arg1 department :arg1-of ( campaign :arg0 they )  :arg1-of personal :arg1-of ( scratch :arg0 late )  )  :op2 steward :op3 ( race :arg0 ( state :name ( name :op1 victoria )  :wiki victoria_[australia] )  :arg1 integrity )  )  :arg1 lady
tell :arg0 ( organization :name ( name :op1 moody )  :name ( name :op1 fairfax )  )  :arg1 media :arg2 ( he :arg0-of ( find :arg1 ( difficult :mod-of circumstance )  :manner ( good :degree most )  :op1-of ( and :arg1-of race :op2 ( come :arg1 it :purpose ( explain :arg0 ( he :arg0-of ( swab :arg1 positive )  )  :arg1 cobalt :arg1-of possible :polarity - )  )  )  )  :arg0-of ( try :arg1 amr-unknown :time always )  )
and :arg1-of ( want :arg0 ( he :arg0-of ( bite :arg1 tongue )  :arg0-of ( spy :arg1 about :arg1-of ( allege :arg0 18 )  )  )  :arg0-of ( look :arg1 ( month :unit-of temporal-quantity )  :arg1-of ( sour :arg0 grap )  :arg1-of resemble )  :polarity - )
contrast :arg1 ( frustrate :arg0-of ( come :arg1 once :arg2 out )  :arg1 all :arg1-of ( long :arg2 time :arg2-of ( sit :arg1 it :op5-of ( and :arg1-of ( say :arg0 i )  :op1 anything :op2 about :op3 that :op4 i )  )  )  :arg1-of ( cause :arg0 sometimes :polarity - )  :arg1-of ( get :arg0 you )  )  :arg2 ( say :arg1 moody )
know :arg0 they :arg1 ( go :arg0 they )
say :arg0 i :arg2-of ( live :arg0 i :arg1 ( you :arg0-of ( live :arg1 consequence )  :arg0-of ( react :op1-of and :op1-of and :time sometimes )  )  )
and :arg1-of ( go :arg0 i )  :op1 ( tonight :mod home )  :op2 sleep
try :arg0 i :arg1-of ( think :arg0 ( person :arg0-of own )  :arg1-of ( want :op2-of ( and :op1 ( walk :arg0 i :arg1-of ( want :arg0 i )  :destination ( head :arg1-of ( hold :arg2 high )  )  :direction around )  )  )  )  :manner ( good :degree most )
think :arg0 ( they :arg0-of start )  :arg1 ( recommend :arg0 ( i :arg0-of ( train :arg2 - )  )  :arg1 - :arg2 i )
licence :arg1-of ( consider :arg0 i :manner then )  :poss i
drop :arg0 ( organization :name ( name :op1 moody :op2 had )  )  :arg1 bombshell :manner ( interview :arg1 ( try :arg0 ( department :mod integrity )  :arg1 ( spy :arg1 stable )  )  )  :time early
say :arg0 ( i :arg0-of ( offer :arg1 ( information :arg1-of ( work :arg0 man :arg1-of ( offer :arg0 ( and :name name :op1 ( sit :arg1 ( person :name ( name :op1 stewart )  :wiki jon_stewart )  :arg2 room :duration ( temporal-quantity :unit month )  :op5-of ( and :op1 eighteen :op2 ago :op3 ( person :name ( name :op1 &quot; )  )  :op4 ( person :name ( name :op1 brown )  :wiki gordon_brown )  )  )  :op2 ( ask :arg0 i :arg1-of ( cause :arg0 amr-unknown )  :arg2 employ )  )  )  )  )  )  :arg0-of ( stable :arg1 amr-unknown )  )  :arg1 ( organization :name ( name :op1 &quot; )  )  :arg1-of ( stable :arg0 ( i :arg2-of ( do :arg0 i :arg1 within )  )  )
believe :arg0 ( i :arg0-of cheat )  :arg1-of ( obvious :arg0 they )
cause :arg0 ( brief :arg0 hand :arg1 ( recommend :arg0 ( they :arg0-of ( sure :arg1 case )  )  :arg1 all :arg1-of ( try :arg0 ( person :arg0-of ( catch-up :arg1 i )  :arg1-of ( competent :arg0 they )  )  )  )  )
and :op1 ( person :name ( name :op1 david :op2 moodie )  :op1-of and )  :op2 ( person :arg0-of ( have-org-role :arg1 ( organization :arg1-of ( have-org-role :arg0 ( person :name ( name :op1 robert :op2 roulston )  :poss-of ( today :op1-of time )  )  :arg2 chairman :time former )  :name ( name :op1 rvl )  )  :arg2 ceo :time current )  :arg0-of ( have-org-role :arg2 chairman :time current )  :name ( name :op1 bernard :op2 saundry )  )
think :arg0 i :arg1 it :arg1-of ( recommend :mode interrogative )  :arg2-of ( become :arg1 personal )
and :arg1-of ( get :arg0 ( organization :arg1-of ( have :arg0 industry )  :name ( name :op1 rvl )  )  )  :op1 ( grow :arg1 ( set :consist-of ball )  )  :op2 ( responsible :arg0 ( person :location ( outside :op1 train )  )  :arg1 interrogative )
be :arg1 ( bad :arg1 i :arg2 industry :mode interrogative )
be :arg1 ( i :arg2-of ( bad :arg1 industry :degree that :mode interrogative )  )
think :arg0 person :concession i :domain-of there
say :arg0 ( i :arg0-of ( take :arg1 i :arg1-of ( need :arg0 they :arg1-of ( push :arg0 i :arg2 i :op1-of and )  )  :arg2 licence :op1-of ( and :op2 away :op3 ( i :arg0-of ( doubt :arg1 ( amr-unknown :arg1-of ( think :arg0 they :arg2 about )  )  )  )  )  )  )  :arg1-of ( possible :polarity - :time now )
contrast :arg1 i :arg2 ( and :arg0-of ( sadden :arg1 i :time ( now :time-of point )  )  :op1 ( care :arg0 i :polarity - )  )
sadden :arg0 that :arg1 i :mod really
and :arg1-of ( decide :arg0 ( i :arg0-of ( put :arg1 pressure )  )  )  :op1 onu
and :op1 i :op2 ( walk :arg0 family :arg1 away :arg1-of ( get :arg0 i :arg1-of ( support :arg0 i )  )  :arg1-of possible )
say :arg0 ( he :arg0-of ( throw :arg1 table :arg1-of scratch :arg1-of possible :arg2 i :op1-of ( and :arg2-of ( involve :arg1 ( inquire :arg0 cobalt )  :time late )  )  :op1-of across :op1-of licence )  :arg0-of ( build :arg1 ( frustrate :arg1-of long :arg1-of train :arg1-of run :mod-of level )  )  )  :arg1 that
or :arg0-of ( clay :arg1 ( leg :arg1-of apply )  )  :op1 ( treat :arg1 ( rule :arg1-of ridiculous )  :arg2 ( person :arg0-of ( label :arg1 race )  :arg1-of ( know :arg0 ( organization :arg0-of ( prepare :arg1 unbeaten :arg2 champion )  :name ( name :op1 moody )  )  :manner ( good :degree most )  )  :name ( name :op1 moody )  )  :mod day :op1-of after :op1-of ( against :mod horse :op2 rule )  )  :op2 mud :op3 poultice
race :arg0 it :arg1 rule
say :arg0 he :arg1 ( get :arg0 ( i :arg0-of ( accept :arg1 full :arg1-of responsible )  )  )
lace :arg0 ( person :arg2-of ( staff :quant 1 )  )  :arg1 mud :arg1-of mistake :time leg
possible :arg1 ( last :mod-of ( night :mod it )  )
possible :op1-of ( yesterday :mod it )
race :poss-of ( day :poss it )
inquire :arg1 day :arg1-of ( open :arg0 steward :arg2 ( poultice :arg1-of ( use :arg0 ( treat :arg0 ( organization :arg1-of ( disqualify :duration ( temporal-quantity :quant 3 :unit month )  )  :arg1-of ( face :arg1-of possible )  :name ( name :op1 moody )  )  :mod race )  )  )  )
joke :arg2 it
know :arg0 ( rule :mod this )  :arg1 ( nothing :topic horse )  :time person
contrast :arg1 ( go :arg0 ( we :arg0-of ( understand :arg1 that :mod all )  )  :arg1 far :arg1-of ( say :arg0 ( we :arg0-of ( need :arg1 rule )  )  )  :arg4 too )  :arg2 it
and :op1 ( hit :arg1 ( run :arg1-of ( drive :arg0 ( person :arg1-of arrest )  )  )  )
arrest :arg0 police :arg1 man :arg1-of ( collide :arg1-of ( run :op2-of ( and :op1 hit )  )  :arg2 ( cyclist :location weekend )  )
airlift :arg1 cyclist :arg2 ( country :name ( name :op1 royal :op2 melbourne :op3 hospital )  )  :time ( after :op1 ( strike :arg0 car :arg1 ( morning :poss-of ( organization :name ( name :op1 murray :op2 valley :op3 highway )  )  )  :arg2-of ( injure :arg1 saturday :mod serious )  )  )
say :arg0 police :arg1 ( drive :arg0 motorist :direction away :manner ( stop :arg1 ( help :arg1 ( rid :arg1-of injure )  )  )  )
hand-over :arg0 ( man :age ( temporal-quantity :quant 50 :unit year )  :mod old )  :arg1 monday :arg2 police
expect :arg1 ( charge :arg0 ( he :arg0-of ( fail :arg2 ( render :arg1 ( and :op1 ( offence :mod traffic :mod other )  )  :arg2 assist )  )  )  :arg2 ( fail :arg2 ( stop :arg1 accident )  )  )
remain :arg0 ( man :mod ( thing :name ( name :op1 40 :op2 - :op3 year :op4 - :op5 old :op6 cobram )  )  )  :arg1 ( cyclist :poss-of ( condition :arg1-of stable )  )  :location hospital
hit :arg0 ( person :arg0-of ( claim :arg1 wrestle :arg1-of rival )  :name ( name :op1 craig :op2 bellamy )  )  :arg1 ( person :arg0-of ( coach :arg1 ( organization :name ( name :op1 melbourne :op2 storm )  )  )  )  :direction back
criticize :arg0 ( he :arg0-of ( tackle :arg1 nrl :mod side )  :arg0-of ( call :arg1 ( person :arg0-of coach :arg1-of ( storm :arg0 ( city :name ( name :op1 melbourne )  :wiki melbourne )  )  )  :arg2 ( premiership :mod-of favourit :quant 2 )  )  :arg0-of ( set :arg1 agenda )  )  :arg1 of
say :arg0 ( person :arg0-of ( coach :arg1 rooster )  :arg0-of ( win :arg1 friday :arg1-of ( upset :arg0 ( he :arg0-of ( storm :arg1 during )  :arg0-of ( wrestle :arg1 side )  :arg0-of ( qualify :arg1 final :location ( city :location-of night :name ( name :op1 sydney )  :wiki sydney )  )  :arg0-of ( storm :arg1 ( city :name ( name :op1 sydney )  :wiki sydney )  )  )  )  )  )  :arg1 robinson :arg1-of ( referee :arg1-of allow )
say :arg0 ( he :arg0-of ( showcase :arg1 of )  :arg0-of ( qualify :arg1 final :mod side )  :arg0-of ( win :arg1 queensland :op1-of ( over :op2 north_korea )  )  :arg1-of ( storm :arg0 ( person :arg0-of ( coach :arg1 bennett )  :mod ( bronco :mod ( organization :name ( name :op1 brisbane )  )  )  )  :op1-of after )  :arg2-of ( veil :arg0 thinly :arg1-of reference )  )  :arg1 ( and :op1 ( call :arg0 ( he :arg0-of ( wrestle :arg1 ( into :mod ( big :mod-of ( too :polarity - )  )  )  )  )  :arg1 ( that :mod-of game )  :arg2 ( saturday :mod-of night )  )  :op2 rugby :op3 league :op4 2 )
say :arg0 he :arg1 ( and :arg1-of ( tackle :arg0 side )  :op1 ( focus :arg1-of ( contact :arg0 ( person :arg1-of defend :name ( name :op1 bellamy )  )  :arg1-of tackle )  :arg2 they :mod just )  )
add :arg0 ( person :arg0-of ( beat :arg1 ( storm :arg0-of ( concern :arg1 they :arg2-of mean :condition-of ( criticize :arg0 ( coach :arg0-of ( lead :arg1 he )  :quant 2 )  :arg1 side )  )  )  )  :name ( name :op1 bellamy )  )  :arg1 confidence
say :arg0 bellamy :arg1 wednesday :arg1-of ( beat :arg0 they :arg1-of ( wrestle :arg1-of ( bring :arg0 ( i :arg0-of ( hear :arg1 trent :arg1-of ( keep :mod that )  :polarity - )  :arg0-of ( do :arg1 robinson )  :arg1-of come )  )  )  )
emphasize :arg0 we :arg1 ( contact :arg0 we :arg1 ( 6 :quant-of ( temporal-quantity :unit ( week :mod last )  )  )  :arg1-of ( tackle :arg0 ( we :arg0-of ( defend :arg1 ( or :arg1-of ( possible :arg1-of ( guarantee :arg0 we :arg2 i :purpose ( change :arg0 ( year :mod all )  :arg1 nothing :polarity - )  )  )  :op1 technique )  )  :poss-of ( system :mod just )  )  :op1-of and )  :arg1-of ( turn :op1-of around )  )  :mod real
cause :arg0 ( lose :arg0 ( he :arg1-of ( coach :arg0 person )  :domain-of ( side :mod great )  )  :arg1 ( bit :quant-of ( shock :arg1 ( temporal-quantity :quant 3 :unit year )  )  )  :arg1-of ( use :arg0 ( person :arg1-of obvious :location there :name ( name :op1 trent )  :op1-of and )  :arg1-of cause :mod probable :polarity - )  )
funny :poss ( it :poss-of ( amr-unknown :arg1-of ( come :arg0 year :arg3 ( time :mod this )  :time always )  :domain this )  )
win :arg0 ( person :arg0-of play :arg2-of ( remind :arg1 ( he :arg0-of ( excite :arg1 football :arg2 ( challenge :arg1 ( person :name ( name :op1 bellamy )  )  :topic-of idea )  :mod of )  :arg0-of ( bore :arg1 football )  :arg0-of ( mentor :arg1 that )  )  )  :name ( name :op1 george )  :wiki george_lucas )  :arg1 premiership :time ( date-entity :year 2010 )
talk :arg0 ( person :name ( name :op1 wayne )  )  :arg1 excite
say :arg0 ( he :arg0-of ( compare :arg1 game :arg2 point )  )  :arg1 ( and :op1 friday :op2 amr-unknown :op3 ( excite :arg0 we :arg1 game :time night :time ( night :time saturday )  )  )
say :arg0 ( he :arg0-of ( criticize :arg1 ( 2010 :year-of date-entity )  )  :arg0-of ( give :arg1 arse :arg2 rat :polarity - )  )  :arg1 ( and :arg1-of ( remember :arg0 i )  :op1 ( team :arg0-of ( bore :arg1 lot )  )  )
contrast :arg1 ( possible :arg1 ( play :arg0 he :arg1 ( see :arg0 ( we :arg0-of ( halve :arg1 speed :mod young :mod especially )  )  :arg1 ( footy :arg0-of excite )  )  )  :domain-of team )  :arg2 now
of :arg1-of ( play :arg0 ( person :arg0-of ( play :arg1 ( want :arg0 you :arg1 you :arg3 that )  )  :arg1-of sort )  )
and :arg1-of ( play :arg0 they :arg1-of ( resemble :arg0 ( date-entity :year 2010 )  :arg2 ( that :mod-of ( point :arg0 he )  )  )  :arg1-of ( possible :arg1-of cause )  :arg2 - )  :arg2-of ( resemble :arg1 ( halve :arg0 ( he :arg0-of ( want :arg1 ( play :arg0 everyone :arg1 style :arg3 footy )  :time now )  )  :arg1 ( team :mod every )  :quant 2 )  )  :op1 ( person :name ( name :op1 anthony :op2 milford )  )  :op2 ( person :name ( name :op1 ben :op2 hunt )  )
cause :arg0 ( bit :arg0-of ( concern :arg1 play )  :mod little )  :arg1 ( say :arg0 they :arg0-of ( cause :arg1 ( build :arg1 ( confidence :quant more )  :arg2 i )  )  :arg1 ( thing :mod this )  )
probable :mod-of ( think :arg0 they :arg1 they :arg2 ( big :mod-of game )  :polarity - )  :quant ( 6 :quant-of ( temporal-quantity :unit week )  )
point-out :arg0 ( person :name ( name :op1 bellamy )  )  :arg1 ( contest :arg0 ( game :mod ( storm :op1-of ( and :op2 ( organization :name ( name :op1 roosters )  )  )  )  )  :arg1 ( and :op1 ( organization :name ( name :op1 broncos )  )  :op2 ( game :mod ( organization :name ( name :op1 cowboys )  )  )  )  :arg1-of high :arg1-of score )  :mod also
contrast :arg1 ( probable :mod-of game :mod-of ( good :mod-of game :mod-of ( watch :arg0 ( i :arg0-of ( score :arg1 interrogative :time interrogative )  )  :arg1 it :mod yet :polarity - )  )  )  :arg2 amr-unknown
contrast :arg1 ( try :arg0 ( we :poss-of game )  :arg1 ( game :poss we )  :degree more :quant 2 )  :arg2 ( footy :arg0-of excite :mod that )  :mode interrogative
and :op1 break :op2 ( score :arg1 ( try :arg1-of ( excite :arg0 interrogative :op1-of or )  )  :polarity - )
' :degree agenda :part-of ( i :part it )
mean :arg1 ( mention :arg0 they :arg1 there )  :arg2 ( possible :arg1 ( meet :arg0 we :time ( stage :mod some )  )  )
host :mod ( right :mod-of north_korea :mod-of ( tuesday :mod-of ( morning :mod next )  )  :mod-of ( win :arg0 they :arg1 ( or :arg1-of ( shark :time ( night :mod saturday :mod next :time final )  )  :arg1-of ( park :arg0 preliminary :arg2 ticket )  :op1 queensland :op2 cowboy )  :arg2 ( off :arg2-of ( storm :arg1 ( weekend :mod this )  )  )  )  :mod-of either )
bail-out :arg1 ( charge :arg1 ( man :arg0-of get :mod ( country :name ( name :op1 serbia )  :wiki serbia )  )  :arg2 drug )
possess :arg1 ( cocaine :arg1-of ( smuggle :arg3 ( country :name ( name :op1 queensland )  )  )  :quant ( mass-quantity :quant 40 :unit kilogram )  )  :arg1-of ( attempt :arg1-of ( sentence :arg1-of ( face :arg0 ( man :arg2-of ( grant :arg1 ( bail-out :arg1 surety )  )  )  )  :arg1-of possible :mod life )  )
and :manner-of ( come :arg1 ( person :arg0-of ( yacht :arg1 8 )  :name ( name :op1 solay )  )  :arg3 ( continent :name ( name :op1 south :op2 america )  :wiki south_america )  )  :op1 ( country :name ( name :op1 vanuatu )  )  :op2 ( dock :arg0 29 :arg2 ( country :name ( name :op1 coomera )  )  )  :time ( after :op1 ( track :arg0 ( police :mod federal )  :arg1 ( drug :quant ( mass-quantity :quant 100 :unit kilogram )  )  )  :time-of ( arrest :arg0 ( man :quant 5 )  :arg1 ( person :name ( name :op1 marko :op2 maksimovic )  )  :time ( month :mod last :unit-of temporal-quantity )  )  )
and :arg1-of ( accuse :location marina )  :op1 ( meet :arg1 ( person :arg0-of ( meet :arg1 ( 40 :quant-of ( mass-quantity :quant-of drug :unit kilogram )  )  :arg1-of observe )  :name ( name :op1 maksimovic )  )  :time late :time ( cafe :arg1-of ( find :arg0 ( police :arg0-of ( echo :arg1 toyota )  )  )  :mod ( thing :name ( name :op1 coomera :op2 roadhouse )  )  )  )  :op2-of ( throughout :op1 morning )
evidence :arg0 quantity :arg1 ( argue :arg0 lawyer :arg1 cocaine :arg1-of ( attempt :arg0 ( potential :arg0-of ( sentence :arg1 life )  )  )  :arg1-of ( attempt :arg0 ( he :arg0-of ( possess :arg1 ( and :op1 he :op2 ( possible :arg1 it :polarity - )  :quant all )  )  )  )  :arg1-of ( face :arg0 despite )  :arg1-of ( innocent :arg0 cafe :mod-of purpose )  :arg1-of ( possess :arg0 commerce )  )
concern :arg0 ( judge :arg1 ( government-organization :name ( name :op1 supreme :op2 court )  :wiki supreme_court_of_new_south_wales )  )  :arg1 ( person :arg1-of ( flight :arg2-of ( risk :arg1 ( person :name ( name :op1 maksimovic )  )  )  )  :name ( name :op1 peter :op2 flanagan )  )
connect :arg0 he :arg1-of clear :arg2 ( country :name ( name :op1 serbia )  )
tell :arg0 ( he :arg1-of ( travel :arg0 he )  )  :arg1 wednesday :arg2 court :time often
lie :arg0 ( he :arg1-of stay )  :arg1 ( case :arg1 crown )  :arg2 police
and :op1 ( person :arg0-of ( have-rel-role :arg1 ( person :name ( name :op1 maksimovic )  )  :arg2 mother )  :arg0-of ( offer :arg1 surety :mod joint )  :arg1-of ( release :arg0 ( he :arg0-of ( secure :arg1 of )  )  )  )  :op2 stepfath
say :arg0 ( person :arg1-of ( constitute :arg0 ( person :arg0-of ( clear :arg1 that :arg2 imposition )  :arg0-of ( have :arg0-of ( read :arg2 affidavit )  :arg1 of )  :mod that :mod both )  )  :arg1-of ( burden :arg2 they :mod ( real :mod-of finance )  )  :arg1-of ( judge :arg0 it )  :name ( name :op1 &quot; )  )  :arg1 surety
appear :arg2-of ( fail :arg2-of ( deter :arg2-of ( suffice :arg1 that :arg1-of ( warn :arg0 he )  :arg2-of ( contrast :arg1 alone )  :polarity - )  )  )
and :op1 ( report :arg0 ( he :arg0-of ( surrender :arg1 ( passport :mod ( country :name ( name :op1 serbia )  :wiki serbia )  )  )  :arg0-of ( adhere :arg2 curfew :op1-of ( and :arg1-of ( grant :arg2 ( person :arg0-of ( bail-out :arg1 condition )  :name ( name :op1 maksimovic )  )  )  )  )  )  :arg2 ( police :mod ( country :name ( name :op1 australia )  :wiki australia )  )  )  :quant both
cab :arg1 ( tear :arg0 ( person :arg0-of drive :arg2-of ( near :arg1 5 :mod accident )  )  :arg1 apart )
injure :arg1 ( person :arg0-of ( drive :time evening )  :arg0-of ( collide :arg1 ( lorri :location ( near :arg1 ( motorway :mod 5 )  :arg2 tuesday )  :quant 3 )  )  :mod lorry )  :degree serious
brake :arg1 ( approach :arg0 ( lorri :arg1-of involve :quant 2 :quant 3 )  :arg1 ( roadwork :arg1-of long )  :arg2 ( direction :poss basel )  )
say :arg0 police :arg1 ( and :op1 ( try :arg0 ( person :arg0-of ( notice :arg1 ( late :degree too )  )  :arg0-of drive )  :arg1 ( swerve :time ( moment :mod last )  )  :arg2 unsuccessfully )  )
tear :arg1 ( cab :arg0 ( person :arg0-of drive :arg0-of ( responsible :arg1 accident )  )  )  :arg1-of complete :degree apart
take :arg1 ( person :arg0-of drive :arg1-of ( injure :mod serious )  )  :arg3 hospital
a.m. :location-of ( 2 :op1-of until :time-of ( close :arg0 5 :arg1 ( temporal-quantity :quant 6 :unit hour )  :arg1-of complete :op2-of ( and :op1 north_korea )  )  )
amount :arg1 damage
use :arg0 ( person :name ( name :op1 stevan :op2 hogg )  )  :arg2 ( lure :arg0 ( phone :mod girl )  :arg1 ( person :mod paedophile )  :purpose ( send :arg1 image )  )
paedophile :mod-of ( use :arg2 ( child :arg0-of abuse :arg2-of ( solicit :arg0 11 :arg1 ( girl :poss-of phone :quant-of ( temporal-quantity :unit year )  )  )  :mod old :mod-of image )  )
send :arg0 ( he :arg0-of ( succeed :arg1 of )  :arg2-of ( log :arg0 ( she :arg0-of ( sleep :arg1 ( girl :mod-of phone )  :arg2 ( person :mod-of hogg :name ( name :op1 stevan )  )  )  )  :arg1 into )  )  :arg1 ( image :mod indecent )  :arg1-of ( use :arg0 ( person :mod another )  )  :arg2 child :polarity then :polarity ( message :mod-of ( service :mod online )  )
and :op1 ( discover :arg1 ( girl :arg1-of ( wake-up :arg0 late )  :arg1-of ( miss :op1-of ( and :arg0-of ( sleep :arg1 hand )  :op2 ( find :arg0 phone :arg1 it )  )  )  )  )
and :op1 ( find :arg0 ( she :arg0-of look )  :arg1 ( message :arg1-of disturb )  :time ( before :op1 ( alert :arg1 ( person :arg0-of ( have-rel-role :arg2 mother )  )  :time immediate )  )  )
address :arg1-of ( find :manner computer :manner ( see :arg1 picture :op3-of ( and :op1 police :op2 ( attend :arg1 5 )  )  )  :manner then :manner at :manner analyse )  :op1-of ( and :arg0-of ( concern :arg1 ( search :arg0 web :arg1 ( use :arg1 ( term :arg0-of ( find :arg1 indecent )  )  )  :arg2 ( child :mod of )  )  )  :op2 discover :op3 image )
claim :arg0 ( person :name ( name :op1 hogg )  )  :arg1 ( person :arg0-of ( have-org-role :arg2 officer )  )  :arg2 ( he :arg0-of ( do :arg1 it :arg2 ( person :arg1-of lead :arg2-of ( pretend :arg0 ( he :arg0-of ( have-org-role :arg1 police :arg2 officer )  :arg2-of ( scare :arg1 they )  )  :arg1 internet :mod before )  :mod paedophile )  )  )  :mod then
say :arg0 ( he :arg0-of ( addict :arg1 ( person :arg1-of scar :arg1-of ( addict :arg0 he )  )  )  :arg2-of ( mean :arg1 it :op1-of court )  :arg2-of ( tell :arg0 ( person :name ( name :op1 fiscal )  )  :arg1 sheriff :time depute :time fiscal )  )  :arg1 that
contrast :arg1 ( accept :arg0 he )  :arg2 ( say :arg1 search :arg1-of ( cause :arg0 ( want :arg0 he :arg1 ( pretend :arg1 ( have-org-role :arg0 ( person :arg1-of ( scare :arg0 computer )  :mod paedophile )  :arg1 police :arg2 officer )  :arg0 he )  )  )  :arg0 he )
send :arg1 ( photo :quant more )  :arg1-of ( ask :op2-of ( and :arg1-of ( send :arg0 ( person :arg0-of ( know :polarity - )  :prep-with-of ( ask :arg0 he :arg1 conversation )  )  )  :op1 image )  )
say :arg0 he :arg1 ( do :arg0 ( he :arg0-of lure )  :arg1 he )
say :arg0 he :arg1 ( sick :arg1 ( he :arg0-of head :arg1-of drink )  )  :op1-of ( and :op2 ( say :arg1 ( want :arg1 ( view :arg1 image )  :purpose ( and :op1 rape :op2 murder )  )  )  )
add :arg0 ( person :name ( name :op1 ms )  )  :arg1 ( girl :manner-of ( find :arg0 ( she :arg0-of ( shake :arg1 ( and :arg1-of cry )  )  :arg1-of ( shout :arg0 she )  :arg1-of ( have-rel-role :arg0 ( person :op1-of and )  :arg2 mother )  )  :arg1 message )  :mod-of phone )
and :op1 ( see :arg0 she :arg1 ( image :mod indecent :topic phone )  )  :op2 ( confront :arg1 accuse :time then )
interview :arg1 girl :op1-of ( and :op2 ( speak :arg0-of ( use :arg1 ( and :op1 computer )  :arg2 ( talk :arg2 ( girl :arg0-of ( look :arg1 ( way :mod young )  )  )  )  )  :arg1 accuse )  )
plead :arg0 ( organization :name ( name :op1 dundee )  )  :arg1 ( guilty :arg0 25 :arg1 ( person :mod ( country :name ( name :op1 ward :op2 road )  )  :name ( name :op1 hogg )  )  :arg2 indict )  :arg2 ( charge :arg1 14 :arg2 ( take :arg0 ( year :mod last )  :arg1 ( image :mod indecent :topic child )  :op1-of ( and :op2 ( breach :arg0 23 :arg1 ( bail-out :arg0 24 :arg1 1 )  )  :op3 ( fail :arg1 ( year :mod this )  :arg2 ( attend :arg1 ( date-entity :month 6 )  :location court :purpose ( hear :arg1 ( date-entity :month 3 )  )  )  :time ( this :mod-of year )  )  )  :op1-of or )  )
offend :arg0 person :arg1 ( argue :arg1 there :arg1-of ( register :arg0 it )  :arg1-of ( crime :arg0 he )  :arg1-of ( place :arg0 ( person :arg2-of ( ask :arg0 ( person :mod solicitor :name ( name :op1 defence )  )  :arg1 defence )  :mod that :name ( name :op1 defence )  )  :arg2 sex :polarity - )  :arg1-of ( significant :polarity - )  :arg1-of possible :domain-of ( element :mod sexual )  )
defer :arg0 ( person :arg0-of ( report :arg2 ( background :mod ( society :arg0-of ( work :arg1 sheriff )  )  )  )  :name ( name :op1 alistair :op2 carmichael )  )  :arg1 sentence :time ( until :op1 ( date-entity :month 10 )  )
contrast :arg1 ahead :arg2 ( hold :arg1 ( person :arg2-of ( grant :arg1 ( bail-out :arg1-of ( hearing :arg2 ( case :mod outstanding :mod other )  )  )  :time ( case :mod this )  )  :name ( name :op1 hogg )  )  :prep-in custody )
place :arg1 he :arg2 ( sex :arg1-of ( register :arg0 ( person :arg0-of offend )  :direction ( ahead :op1 ( date :arg1-of sentence )  )  )  )
move :arg0 trafficker :arg2 ( country :arg2-of ( border :arg1 ( crossing :mod minor )  )  :name ( name :op1 germany )  :wiki germany )
pick-up :arg1 ( refugee :quant ( and :op1 more-than )  )  :arg2 away :manner ( control :arg1 ( border :arg0 more :arg1 ( country :name ( name :op1 austria )  :wiki austria )  :arg2 ( country :name ( name :op1 germany )  :wiki germany )  )  :mod-of ( point :arg1-of major )  )
arrest :arg1 person :op2-of ( and :op1 ( fear :arg0 ( person :arg0-of leave :arg0-of traffic :quant many )  :arg1 ( discover :compared-to-of due )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( police :mod federal )  :arg2 spokesperson )  )  :arg1 ( border :mod minor )  :manner ( side :mod ( country :name ( name :op1 austria )  :wiki austria )  )
pick-up :arg1 ( refugee :quant more-than )  :location ( along :op1 ( river :arg1-of ( border :arg2 ( country :name ( name :op1 inn )  )  :arg3 tuesday )  :op1-of ( and :op2 ( country :location-of ( district :wiki pulwama_district )  :name ( name :op1 passau )  )  :op3 ( country :name ( name :op1 rottal-inn )  )  )  )  )  :time since
arrive :arg0 ( and :op1 bridge :op2 weir )  :arg1 ( they :poss-of ( side :mod ( country :name ( name :op1 germany )  :wiki germany )  )  )  :arg4 foot
and :op1 ( receive :arg0 ( police :mod federal )  :arg1 they :location there )  :op2 ( pass :manner register )
say :arg0 ( report :arg0 ( police :mod federal )  :arg1 ( begin :arg1 week :arg2 wednesday :arg2-of compare )  )  :arg1 ( arrive :arg1 refugee :arg1-of ( significant :mod-of more )  :arg4 ( station :location ( city :name ( name :op1 munich )  :wiki munich )  :mod ( railway :mod main )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 morning :arg2 spokesperson )  )  :arg1 ( arrive :arg0 ( a.m. :quant 8 )  :arg1 ( person :quant ( about :op1 700 )  )  :arg4 ( city :location state :mod capital )  )
follow :arg1 ( reach :arg0 refugee :arg1 ( city :location tuesday )  )  :arg2 ( reintroduction :mod ( control :arg1 ( border :mod ( country :name ( name :op1 austria )  :wiki austria )  :mod ( country :name ( name :op1 germany )  :wiki germany )  )  )  )
expect :arg0 ( person :arg1-of ( tail :arg0 ( country :arg0-of end :name ( name :op1 stuttgart )  )  )  :mod ( storm :mod ( tropic :mod of )  )  :name ( name :op1 stuttgart )  )  :arg1 ( south :mod-of west )
warn :arg0 meteorologist :arg1 ( squall :arg1 south :op1-of ( evening :mod wednesday :time-of onward )  )  :op1-of west
advise :arg0 ( service :mod meteorological :poss ( country :mod due :name ( name :op1 germany )  :wiki germany )  )  :arg1 ( flow :arg1 ( air :arg1-of ( warm :op1-of ( organization :name ( name :op1 dwd )  )  )  :location sea )  :destination country :time moment )  :arg2 ( world-region :location-of depression :name ( name :op1 western :op2 europe )  :wiki western_europe )
move :arg0 ( end :arg0-of ( tail :arg2-of ( powerful :arg1 trough )  )  :arg1 ( of :mod-of ( tropic :mod-of storm )  )  )  :arg1 ( island :mod-of ( few :mod ( last :mod-of ( day :unit-of temporal-quantity )  )  )  :wiki senkaku_islands )  :arg2 ( ocean :name ( name :op1 atlantic )  :wiki atlantic_ocean )  :op1-of over
anticipate :arg1 ( and :op1 ( storm :mod violent )  :op2 thunderstorm )  :location ( country :mod particular :name ( name :op1 baden )  )
say :arg0 ( organization :name ( name :op1 dwd )  :op1-of and )  :arg1 ( possible :arg0 60 :arg1 ( anticipate :arg0 ( and :op1 ( country :name ( name :op1 bodenseekreis )  )  )  :arg1 ( gust :arg0 90 :arg1 ( distance-quantity :unit kilometer )  )  :arg2 ( organization :name ( name :op1 swabian :op2 mountains )  )  :duration ( temporal-quantity :unit hour )  )  )
forecast :arg1 ( put :arg0 sun :arg1 ( appear :arg1-of long )  :mod ( again :mod once )  )  :arg2 friday
make :arg0 ( chassi :arg0-of ( differ :arg1 every )  )  :arg1 ( year :unit-of ( temporal-quantity :quant 2 )  )  :arg2 ( car :arg1-of ( manufacture :arg0 ( person :arg0-of ( present :arg1 ( model :location ( organization :name ( name :op1 iaa )  )  :mod new )  )  )  )  )
notice :arg1 ( movement :arg0 especially :arg2 ( compact :arg1 car )  )  :arg1-of possible :location ( particular :arg1-of ( sell :time moment )  )  :time ( date-entity :year 2015 )
say :arg0 ( organization :name ( name :op1 federal :op2 office :op3 for :op4 motor :op5 transport )  )  :arg1 ( belong :arg0 8 :arg1 segment )  :manner ( demand :arg0 ( car :arg1-of ( compact :arg0 ( about :op1 ( percentage-entity :quant-of ( registration :mod new :mod alone )  )  )  :mod-of class )  :domain-of ( much :degree very :time current )  )  :arg1 ( organization :name ( name :op1 kba )  )  :arg2 this )
reflect :arg0 17 :arg1 this :arg2 ( organization :name ( name :op1 iaa )  )  :manner ( public :op1 ( temporal-quantity :unit day )  )  :mod also :time ( 9 :quant 27 )
and :op1 ( high :arg1 futuristic :mod new )  :op2 ( end :arg1 ( compact :arg0 ( this :mod-of ( year :location above )  )  :arg1 ( model :arg1-of ( introduce :arg0 all )  :mod ( new :mod-of all )  )  )  :op2-of ( and :op1 ( vehicle :mod concept )  )  )  :op3 ( model :mod luxury )
thing :arg0-of ( hit :arg1 ( dealership :mod car :quant ( 1 :quant-of ( most :degree-of ( big :mod-of ( premiere :arg1 ( sector :mod ( country :name ( name :op1 germany )  :wiki germany )  :mod car )  )  )  )  )  )  :arg2 here :location autumn )  :name ( name :op1 opel :op2 astra )
say :arg0 ( organization :name ( name :op1 &quot; )  )  :arg1 ( show :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 &quot; )  )  :arg2 boss )  :name ( name :op1 &quot; )  )  :arg1 ( model :mod ( important :degree extreme )  )  )
heart :part-of ( brand :mod it )
increase :arg1 ( price :arg0-of ( ensure :arg1 sell )  :arg1 ( organization :mod new :name ( name :op1 astra )  )  )  :arg2 significant :polarity -
propose :arg0 ( organization :name ( name :op1 opel )  )  :arg1 ( point :location below :mod entry :prep-with that )  :medium ( person :arg0-of ( start :arg1 ( organization :name ( name :op1 vw :op2 golf )  )  )  :arg0-of compete :mod main )
cost :arg1 ( organization :name ( name :op1 astra )  )  :time ( late :degree most )
output :location ( organization :name ( name :op1 astra )  )  :poss ( hp :mod ( slash :op1 ( kw :mod ( volume-quantity :mod-of ( engine :mod new :quant 1.4 )  :unit litre )  :quant 74 )  )  :quant 100 )
and :op1 diesel-electric :op2 petrol :op3 ( engine :arg1-of ( offer :arg0 ( manufacture :arg0 95 :arg1 ( thing :name ( name :op1 hessian )  )  :arg2 ( 3 :quant-of ( model :mod petrol :mod cylind )  )  )  :arg2 ( kw :op1-of slash :quant 70 )  :mod also :op1-of ( slash :op2 hp :op3 200 )  )  )
unlike :direction-of ( available :arg0 ( most :degree-of ( important :mod-of 5 )  )  :arg1 ( and :op1 company :op2 ( organization :name ( name :op1 vw :op2 golf )  )  :op3 ( thing :name ( name :op1 ford :op2 focus )  )  )  :arg2 ( thing :name ( name :op1 opel :op2 astra )  )  :location door :mod only :purpose time )
follow :arg1 ( car :arg1-of ( see :time already )  :mod estate )  :manner option :manner spring
introduce :arg1 ( car :arg1-of compact :mod other )  :arg2 ( organization :name ( name :op1 iaa )  )  :location ( alongside :op1 ( organization :name ( name :op1 astra )  )  )  :mode interrogative :op1-of and
thing :arg0-of ( introduce :arg1 ( generation :consist-of ( person :arg0-of compete )  :mod fourth )  :arg2 ( organization :name ( name :op1 astra )  )  :arg4 race )  :name ( name :op1 renault :op2 mégane )
and :arg1-of ( show :time exclusive )  :op1 ( possible :arg0 ( door :quant 5 )  :arg1 ( see :arg1 ( thing :name ( name :op1 mégane )  )  )  )  :op2 conventional :op3 ( version :mod ( sporty :mod distinct )  )
available :arg0 it :arg1 also :location dealership :time ( begin :arg0 ( model :mod estate )  :arg1 ( year :mod next )  :time then )
q :domain-of ( new :degree brand :domain 30 :location ( segment :mod ( this :mod-of ( organization :name ( name :op1 infiniti )  )  )  )  )
segment :arg1-of ( grow :manner rapid :purpose-of ( look :arg0 ( offshoot :arg0-of ( find :arg1 place )  :mod ( organization :name ( name :op1 nissan )  )  )  :arg1 ( model :mod new )  )  )
fit :arg1 ( organization :arg1-of compact :name ( name :op1 infiniti )  )  :arg2 ( line :arg1-of ( design :arg0 brand :arg2-of ( curve :arg1 line )  )  )  :mod right
hp :purpose-of ( perform :arg0 ( model :mod ( basic :poss-of 90 )  :poss-of ( engine :mod petrol )  )  :arg1 ( kw :op1-of slash )  )
hp :op1-of slash :op1-of ( or :op2 ( offer :arg0 diesel-electric :manner 170 :op1-of ( 80 :poss also )  :op1-of 125 :op2-of ( slash :op1 kw )  )  )
segment :arg2-of ( celebrate :arg0 ( organization :name ( name :op1 suzuki :op2 baleno )  )  :arg1 ( premiere :arg0 world :arg1 ( organization :name ( name :op1 suzuki :op2 baleno )  )  :location ( country :name ( name :op1 frankfurt )  )  )  )  :location-of ( new :mod also )
and :arg1-of ( offer :arg0 hp :topic-of ( model :mod engine :mod petrol :op1-of slash )  )  :op1 ( engine :mod turbo :mod ( volume-quantity :unit litre )  )  :op2 ( perform :arg1 kw :arg1-of ( develop :arg0 82 :manner newly )  )
say :arg2 specification :part ( maximum :mod-of 170 )
launch :arg1 ( person :name ( name :op1 baleno )  )  :location ( continent :name ( name :op1 europe )  :wiki europe )  :time ( date-entity :op1-of early :year 2016 )
contrast :arg1 ( new :degree total :polarity - )  :arg2 ( redesign :arg1 ( see :arg0 ( person :arg0-of ( have-rel-role :arg1 ( person :arg0-of ( have-rel-role :arg1 4 :arg2 ds )  )  :arg2 ds )  )  :arg1 ( model :arg1-of compact :quant 4 :topic car )  :arg1-of possible :location iaa )  :arg1-of complete )
radiator :mod-of ( grille :arg1-of ( design :mod newly :op3-of ( and :op1 ( designer :arg0-of ( turn :arg1 ( hand :poss ( offshoot :arg1-of classy :mod ( organization :name ( name :op1 citroën )  )  )  )  :arg2 ( end :arg1 front )  :manner primary )  )  :op2 here :op4 ( equip :arg1 ( headlight :arg1-of modify )  :instrument ( technology :arg0-of lead )  )  )  )  )
and :op1 time :quant ( number :arg1-of ( touch :arg0 ( infotainment :mod-of system )  :arg1-of ( modernize :arg0 particular )  :arg1-of ( incorporate :arg0 apple )  :arg1-of ( reduce :arg0 screen )  :arg1-of ( button :arg0 interior )  )  )
feature :arg0 ( organization :name ( name :op1 iaa )  )  :arg1 string :arg2 ( class :arg1-of compact )  :mod also :op1-of ( and :domain such :op2 ( revise :arg1 308 )  :op3 ( version :example ( or :op1 ( thing :arg1-of update :name ( name :op1 mercedes :op2 a :op3 class )  )  )  :mod new )  )
unfit :beneficiary ( being :mod ( human :poss-of ( 5 :quant-of ( square :mod-of ( cell :mod metre )  )  )  )  :mod-of ( country :location-of ( country :name ( name :op1 berlin :op2 tegel )  )  :name ( name :op1 jva )  )  )
uphold :arg0 ( organization :arg0-of ( complain :arg1 ( prison :arg1-of ( house :arg0 he :arg2 ( cell :domain-of small )  )  :mod ( country :name ( name :op1 tegel )  )  :mod-of ( inmate :time former )  )  :op1-of too )  :name ( name :op1 federal :op2 constitutional :op3 court )  )  :arg1 ( temporal-quantity :unit month )
prisoner :arg0-of ( keep :arg1 they :manner ( cell :mod small )  )  :arg1-of ( right :arg2 ( compensate :arg0 too :arg1 principle :mod finance )  :purpose ( violate :arg1 ( dignity :mod human )  )  )
reach :arg0 ( organization :arg0-of ( decide :mod this :time ( rule :arg0 public :arg1 wednesday )  )  :name ( name :op1 federal :op2 constitutional :op3 court )  )
say :arg0 ( judge :arg1 too )  :arg1 ( possible :arg0 14 :arg1 ( hope :arg0 ( affect :arg0 ( thing :name ( name :op1 1 :op2 bvr :op3 1127 )  :op1-of slash )  :arg1 ref )  :arg1 money :condition ( shut-down :arg1 they :duration ( few :mod only :op1 ( temporal-quantity :unit day )  )  :location ( room :domain-of small )  )  :mod actual )  )
detain :arg0 prison :arg1 ( he :arg1-of ( complain :arg0 floor :arg2-of ( succeed :arg0 ( prison :time former )  :arg1 ( reason :mod this )  )  :location ( organization :mod-of area :name ( name :op1 karlsruhe )  )  :mod constitution :purpose-of ( single :arg1 cell )  )  )  :arg2 ( country :name ( name :op1 berlin :op2 tegel )  )  :arg2-of ( separate :arg0 ( date-entity :year 2009 )  :arg1 room )  :location ( and :op1 ( date-entity :month 6 )  :op2 ( date-entity :month 11 )  )  :op1-of toilet :op1-of 5 :op1-of ( square :mod-of ( metr :location around )  )  :op1-of -
state :arg0 ( lawyer :arg1-of ( release :arg0 ( man :arg1-of ( transfer :arg2 ( cell :mod large )  )  )  :time since )  )  :arg1 afterward :arg1-of say
claim :arg0 ( reason :mod ( condition :arg1-of ( suitable :polarity - )  :mod prison )  )  :arg1 ( city :name ( name :op1 berlin )  :wiki berlin )  :arg1-of fail :mod liability :poss he :prep-against state
contrast :arg2 ( and :op1 ( judge :arg0 ( judge :mod constitution )  :arg1 ( government-organization :location ( city :name ( name :op1 berlin )  :wiki berlin )  :name ( name :op1 supreme :op2 court )  :wiki supreme_court_of_new_south_wales )  :arg1-of ( assess :arg1-of renew )  :degree aside )  :op2 ( case :location there )  )
violate :arg1 ( dignity :mod human :poss man )  :arg1-of view
decide :arg0 ( government-organization :name ( name :op1 supreme :op2 court )  :wiki supreme_court_of_new_south_wales )  :arg1 ( damage :quant amount )  :time now
claim :arg1 ( compensate :arg0 ( entitlement :arg1-of ( exist :condition ( significant :arg1 ( temporal-quantity :arg0-of ( compensate :arg1 ( custody :location-of period )  )  :op1-of ( few :mod only )  :unit day )  :mod even )  )  )  :arg1 ( legal :arg1 reason )  )
fear :arg0-of ( deteriorate :arg1 otherwise )  :arg0-of ( protect :arg1 person :mod right )  :arg1 there
settle :arg0 ( government-organization :name ( name :op1 supreme :op2 court )  :wiki supreme_court_of_new_south_wales )  :arg1 ( amount :quant-of ( compensate :arg3 pecuniary )  )  :time now
strengthen :arg0 ( judge :mod constitutional )  :arg1 ( right :location ( past :location-of prisoner )  )  :frequency often
naked :manner-of ( lock :arg0 prison :arg0-of ( cause :arg1 ( award :arg0 they :arg1 damage :prep-as 4 :time recent )  )  :arg1 he :arg3 cell )
and :op1 ( decide :arg0 ( also :mod-of ( humane :polarity - )  )  :arg0-of ( say :arg2 ( toilet :arg1-of separate )  )  :arg1 ( function :arg0 cell :arg1 multiple )  :time ( date-entity :year 2011 )  )
say :arg0 ( organization :name ( name :op1 berlin :op2 constitutional :op3 court )  )  :arg1 ( attest :arg1 prison :arg1-of ( confirm :arg0 ( thing :name ( name :op1 furthermore :op2 karlsruhe )  )  :arg2 ( date-entity :year 2009 )  :time wednesday )  :arg2 accommodation :topic ( case :arg1 ( humane :polarity - )  :arg2-of ( parallel :arg1 addition )  :location ( date-entity :month 11 )  )  )
and :op1 ( keep :arg0 ( temporal-quantity :quant 3 :unit month )  :arg1 prison :manner ( cell :arg1-of ( resemble :arg0 9 :arg2 ( that :mod-of time )  )  )  )  :op2 ( case :arg0 daily :arg1 ( organization :name ( name :op1 karlsruhe )  )  )  :op3 ( p.m. :quant 3 )  :op4 p.m.
hit :arg0 ( prison :location ( city :arg0-of ( lack :arg1 ( person :arg2-of staff )  )  :name ( name :op1 berlin )  :wiki berlin )  )  :arg1 headline :mod also :time ( week :mod last :unit-of ( temporal-quantity :op1-of few )  )
and :arg1-of ( cause :arg0 ( and :op1 prisoner :op2 ( lock :arg1 ( tense :arg1 situation )  :duration ( temporal-quantity :quant 23 :unit hour )  :mod again )  )  )  :op1 time :op2 ( rise :arg1 aggressivenes )  :op3 ( lead :arg2 ( brawl :arg1 this )  :mod even )
say :arg0 ( information :source ( office :mod press )  )  :arg1 ( and :op1 ( fill :arg1 ( position :location ( country :name ( name :op1 tegel )  )  )  :arg4 ( lack :arg1 ( person :mod young )  )  :polarity - )  :op2 ( exist :arg1 21 :arg1-of ( cease :arg0 19 )  :time ( date-entity :year 2016 )  )  )  :purpose ( prosecute :arg0 public )
and :op1 ( person :name ( name :op1 angela :op2 merkel )  :wiki angela_merkel )  :op2 refugee :op3 ( policy :arg1-of possible )  :op4 ( handle :arg0 we :arg1 it )
flux :arg1 of :arg2 ( refugee :arg2-of ( accept :arg0 ( country :arg1-of ( have-org-role :arg2 chancellor )  :name ( name :op1 germany )  :wiki germany )  :arg1 it :arg1-of determine :manner ( challenge :arg1 enormous )  )  )
see :arg0 we :arg1 ( change :arg1 amr-unknown :location ( country :name ( name :op1 germany )  :wiki germany )  )  :mode interrogative
state :arg0 ( country :arg0-of ( take :arg1 actual :manner refugee :purpose-of position )  :name ( name :op1 germany )  :wiki germany )  :arg1-of ( say :op2-of ( and :arg1-of ( say :arg0 ( predict :arg1 ( have-org-role :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 spd )  )  :arg2 ( chancellor :mod vice )  )  :name ( name :op1 sigmar :op2 gabriel )  )  :arg1 interior :arg2 ( minister :mod federal )  )  )  )  :op1 ( arrive :arg1 ( person :arg0-of ( seek :arg1 asylum )  :quant around )  :arg4 ( country :name ( name :op1 germany )  :wiki germany )  :time ( year :mod this )  )  )  )
say :arg0 i :arg1 ( and :arg1-of ( determine :arg1-of demonstrate )  :op1 ( organization :arg1-of ( have-org-role :arg0 ( person :arg0-of ( face :arg1 of :mod this )  :mod ( country :name ( name :op1 germany )  :wiki germany )  :name ( name :op1 angela :op2 merkel )  :wiki angela_merkel )  :arg2 chancellor )  :name ( name :op1 german )  )  :op2 ( challenge :op1-of ( usual :polarity - )  )  :op3 again :op4 again :op5 ( mean :arg1 we )  :op6 ( and :arg1-of possible :op1 ( handle :arg1 it )  :op2 ( will :arg1 we )  :op3 ( handle :arg1 it )  )  )
summary :arg1-of follow :topic ( come :arg4 ( country :name ( name :op1 germany )  :wiki germany )  )
say :arg0 ( between :arg1-of ( forecast :arg0 various )  )  :arg1 ( and :arg0-of ( of :arg1 ( building :arg1-of estimate )  )  :op1 ( need :arg0 ( 5 :quant-of ( temporal-quantity :unit year )  )  :arg1 next :arg1-of estimate :arg1-of ( institute :arg0 home )  :op1-of ( and :op2 fact )  )  )
build :arg0 ( that :domain-of many )  :arg1 home :time moment
contrast :arg1 ( dramatic :domain ( lack :arg1 ( space :mod ( live :arg1 ( property :mod rental )  :arg1-of ( rent :arg1-of ( control :arg0 year :arg2-of ( exclude :arg1 ( dwelling :mod society )  :op1-of ( and :op2 ( compete :arg0 refugee :arg1 afford :arg2 ( home :arg1-of ( cheap :manner particular )  :mod ( this :mod ( all :mod-of above )  )  )  :mod also )  )  )  )  )  )  )  )  )  :arg2 and
want :arg0 ( person :arg0-of ( have-org-role :arg1 ( build :arg2 federal )  :arg2 minister :time current )  :name ( name :op1 barbara :op2 hendricks )  )  :arg1 ( double :arg0 ( organization :name ( name :op1 spd )  )  :arg1 ( fund :arg1 1 )  )  :manner thus-far
dwelling :arg1-of ( develop :op1-of ( and :op2 ( invest :arg0 ( government-organization :arg0-of ( govern :arg1 this )  )  :arg1 sum )  :time ( year :mod ( this :domain-of ( little :degree ( too :mod far )  )  )  )  )  )  :mod ( society :arg1-of ( view :arg0 ( organization :name ( name :op1 pestel :op2 institute )  )  )  )
benefit :arg0 ( and :arg0-of ( agree :arg1 ( provide :arg1 that :arg2 ( invest :arg2 ( build :arg1 ( house :arg1 this )  )  )  )  )  :op1 academic :op2 ( organization :name ( name :op1 federal :op2 building :op3 ministry )  )  )  :arg1 tax :mod more
say :arg0 ( thing :arg1-of ( estimate :arg0 ( organization :name ( name :op1 institute :op2 for :op3 employment :op4 research )  )  )  )  :arg1 ( expect :arg0 ( term :arg1-of long )  :arg1 ( possible :arg1 ( work :arg1 ( percentage-entity :quant-of ( refugee :location ( country :name ( name :op1 germany )  :wiki germany )  )  :value 55 )  )  :arg1-of recommend )  :arg1-of possible )
criticize :arg0 ( person :arg0-of ( ask :arg1 ( qualify :arg1 ( country :name ( name :op1 germany )  :wiki germany )  )  :arg2 refugee :manner systematical :polarity - :purpose ( possible :arg1 ( help :arg1 start )  )  )  :name ( name :op1 claudia :op2 walter )  )  :arg1 ( thing :name ( name :op1 bertelsmann :op2 foundation )  )  :arg2 ( and :op1 ( manage :arg1 project )  :op2 train )  :purpose integrate
contrast :arg2 ( crucial :prep-for ( integrate :arg1 refugee :arg1-of ( find :arg0 ( they :arg1-of ( work :location ( country :name ( name :op1 germany )  :wiki germany )  )  )  )  )  )
say :arg0 ( person :arg0-of ( esteem :arg1 self :op1-of also )  :arg0-of ( work :arg1-of ( key :arg0 ( and :op1 ( and :op1 ( appreciation :poss ( society :arg0-of host )  )  )  )  :arg2 ( contact :arg1 society )  )  )  :arg0-of immigrate )  :arg1 ( migration :arg1-of ( research :mod-of dietrich )  )
say :arg0 ( person :name ( name :op1 thränhardt )  )  :arg1 ( take :arg0 ( shift :mod politics )  :arg1 ( place :location ( country :name ( name :op1 germany )  :wiki germany )  )  )  :arg1-of ( work :arg0 ( refugee :beneficiary-of ( employment :arg1-of ban )  )  :mod appreciation )
seek :arg0 ( person :arg1-of ( limit :arg0 ( thing :arg2-of ( obligate :arg1 ( reside :arg0 ( person :arg0-of seek :arg0-of ( work :arg2-of ( forbid :arg0 ( temporal-quantity :quant 3 :unit month )  :arg0-of ( while :arg1 ( date-entity :year 2014 )  )  :condition-of ( reduce :arg0 domicile :arg1 this :time ( date-entity :month 11 )  )  :location ( asylum :mod past )  )  :duration ( temporal-quantity :quant 5 :unit year )  )  )  )  )  )  :arg2 place )  )  :arg1 asylum
recommend :arg1 ( allow :arg1 ( gain :arg0 refugee :arg1 ( access :arg1 ( market :mod job )  :degree fast )  :purpose ( short :arg1 far :arg1-of ( view :mod particular )  :arg2 ( skill :arg0-of ( concern :arg1 ( society :quant majority )  :time now )  )  )  )  )
obstacle :arg0-of ( access :arg1 ( market :arg0-of ( lack :arg1 ( knowledge :poss ( language :mod ( country :name ( name :op1 germany )  :wiki germany )  )  )  )  :mod job )  )  :mod big :quant 1
and :arg2-of ( relate :arg0 - :arg1 ( course :arg1-of ( general :arg0 date )  :mod language )  )  :op1 ( supply :mod adequate )  :op2 ( work :arg1 still )
show :arg0 study :arg1 ( find :arg1 ( contact :arg1 job :arg1-of personal )  :frequency ( often :degree most )  )  :mod also
integrate :arg1 ( work :arg0 ideal :arg1 solution :arg1-of ( build :arg0 network :arg2-of ( view :arg0 thu )  )  )
say :arg0 ( person :arg0-of ( have-org-role :arg1 family :arg2 spokesman )  :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( prioritize :arg1 together )  :arg0-of ( keep :arg1 family )  :arg1-of uproot :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( place :arg1 ( school :arg1-of administrate )  :arg2 child :manner ( notice :arg0 ( city :name ( name :op1 berlin )  :wiki berlin )  :arg1 that )  :manner refugee :mod ( only :mod-of few )  )  :op1-of ( and :op2 kindergarten :op3 ( estimate :arg1 ( 15 :value-of percentage-entity )  )  :quant 15 )  )  :arg2 parent )  )  :arg2 parent )  :name ( name :op1 the )  )  :arg1 ( and :op1 youth :op2 affair :op3 ( government-organization :arg0-of ( administrate :arg1 ( city :name ( name :op1 berlin )  :wiki berlin )  )  :name ( name :op1 senate )  :wiki united_states_senate )  )
benefit :arg1 kindergarten :arg2-of ( administrate :arg1 ( leaflet :arg0-of ( convince :arg1 family :arg1-of possible )  :arg1-of ( issue :manner ( number :quant-of language )  )  )  )
try :arg0 ( government-organization :arg0-of ( increase :arg1 ( need :arg1 ( person :arg0-of teach )  )  :arg1-of ( cause :arg0 ( number :mod large :quant-of refugee )  )  :manner sharp )  :location ( city :name ( name :op1 berlin )  :wiki berlin )  :name ( name :op1 senate )  :wiki united_states_senate )  :arg1 ( raise :arg1 ( capacity :arg0-of train )  :manner ( allow :arg0 example :arg1 ( college :mod ( technical :degree more )  )  )  :arg0 government-organization )
prepare :arg1 pupil :arg2 ( lesson :mod ( class :arg0-of ( welcome :arg1 ( country :name ( name :op1 germany )  :poss-of ( knowledge :part-of state :polarity - )  :wiki germany )  )  )  )
contrast :arg0 also :arg1 ( teach :arg0 ( person :arg0-of teach :arg1-of ( qualify :arg0 ( city :name ( name :op1 berlin )  :wiki berlin )  :degree full )  :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg1 they :polarity - :purpose-of ( qualify :arg0 ( person :arg0-of teach )  :arg1 language :mod only )  :time always )
say :arg0 ( person :name ( name :op1 beate :op2 stoffers )  )  :arg1 ( short :arg1 this :polarity - :purpose ( administrate :arg1 ( school :mod ( city :name ( name :op1 berlin )  :wiki berlin )  )  )  )
estimate :arg0 ( service :mod ( country :arg1-of ( study :arg0 person )  :name ( name :op1 germany )  :wiki germany )  )  :arg1 ( want :arg1 ( study :arg0 ( refugee :quant around )  :arg1 ( percentage-entity :value 20 )  :location ( country :name ( name :op1 germany )  :wiki germany )  )  )
mean :arg0 ( city :location-of interior :name ( name :op1 berlin )  :time now :wiki berlin )  :arg1 ( study :arg0 ( person :arg0-of ( have-org-role :arg1 frank :arg2 senator )  :arg0-of ( seek :arg1 ( or :arg1-of ( long :arg0 ( state :arg0-of ( prohibit :arg1 federal )  :polarity - )  :arg2 refugee :degree that )  )  :manner asylum )  )  :arg1 status :arg1-of ( stand :arg0 ( he :arg1-of abandon )  :time now )  :arg1-of ( except :arg0 principle :mod only )  )
possible :arg1 ( want :arg0 ( refuge :arg0-of ( facilitate :arg1 university )  )  :arg1 ( study :arg1 entrance )  )
say :arg0 ( person :arg0-of study :arg0-of ( seek :arg1 asylum )  :arg1-of ( act :arg0 ( benefit :arg1-of ( begin :arg0 they )  )  )  )  :arg1 ( receive :arg0 ( refuge :op1-of ( or :op2 ( permit :arg1 ( reside :arg1 - )  )  :op3 ( protect :arg1 deport )  )  )  :arg1 benefit )
receive :arg0 latter :arg1 grant :polarity - :prep-in principle :time ( fall :arg1 they :arg4 category :manner ( entitle :arg1 person :arg2 ( grant :arg1 - )  )  )
and :arg0-of ( reduce :arg1 ( period :mod this )  )  :arg1-of ( grant :arg2-of ( entitle :arg0 ( temporal-quantity :unit year )  :arg1 ( 15 :quant-of ( temporal-quantity :unit month )  )  :purpose-of ( live :arg0 ( refugee :mod ( tolerate :arg1 ( date-entity :day 15 :month 15 :year 2016 )  )  )  :arg1 now :location ( country :name ( name :op1 germany )  :wiki germany )  )  )  )
contrast :arg1 ( finance :arg0 gap )  :arg2 ( and :op1 ( person :arg0-of ( claim :arg1 science :arg1-of ( close :arg0 state :arg2 ( city :name ( name :op1 berlin )  :wiki berlin )  :mod also :mod this )  )  :arg0-of ( have-org-role :arg2 secretary )  :arg0-of study :mod ( country :mod-of service :name ( name :op1 germany )  :wiki germany )  )  )
recommend :arg1 ( receive :arg0 ( person :arg0-of study )  :arg1 grant :manner immediate )
important :arg2-of ( play :arg0 ( religious-group :name ( name :op1 islam )  :wiki islam )  :arg1 ( role :mod ( important :mod-of ( identity :domain ( religion :quant many )  )  )  :time future )  :op1-of ( and :domain refugee :op2 ( person :mod ( religious-group :name ( name :op1 muslim )  :wiki muslim )  )  )  )
recommend :arg1 ( grant :arg0 state :arg1 ( right :arg1-of same )  :arg2 ( religious-group :name ( name :op1 islam )  :wiki islam )  :manner gradual :manner ( and :op1 ( recommend :arg1 ( develop :arg0 church :arg1 ( law :topic church :topic state )  :arg2 ( relation :arg1 religion :arg2 state )  )  :arg1-of exist )  )  )
manner :mod professional :op1 ( found :arg1 ( organize :arg0 ( religious-group :name ( name :op1 islam )  :wiki islam )  :arg1 welfare :arg1-of ( look :arg0 also :time ( after :op1 ( arrival :mod new )  )  )  )  :domain-of important )
involve :arg0 right :arg1 ( thing :arg1-of responsible )  :mod also
and :arg2-of ( ready :op2-of ( and :op1 ( clear :arg1 ( contact :arg1 thu )  :arg1-of ( agree :arg0 ( person :arg0-of ( represent :arg1 ( religious-group :name ( name :op1 islam )  :wiki islam )  )  )  )  )  :poss-of point )  )  :op1 ( cooperate :arg1 state :arg2 ( area :quant many )  )  :op2 ( concede :arg1 ( option :mod ( control :arg1 certain )  )  )
require :arg0 this :arg1 ( ready :arg2 ( act :manner courageously :prep-against fundamentalism )  )  :arg2 religion :mod also
express :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 central :op2 council :op3 of :op4 muslims )  )  :arg2 chairman )  :name ( name :op1 aiman :op2 mazyek )  )  :arg1 ( fear :arg0 ( possible :arg1 ( bring :arg1 ( conflict :arg1 thursday :mod religion )  :arg2 ( country :name ( name :op1 germany )  :wiki germany )  :mod also )  )  )
say :arg0 ( he :arg0-of ( want :arg0-of ( wage :arg2 ( country :name ( name :op1 germany )  :wiki germany )  )  :arg1 ( stay :arg0 here :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg1-of ( forfeit :arg0 immediate )  :mod right )  :arg1-of ( conflict :degree such )  :arg3 that )  :poss-of ( person :mod ( state :name ( name :op1 bavaria )  )  )  )  :arg1 radio
suggest :arg0 he :arg1 ( translate :arg1 ( law :mod this :mod basic )  )  :arg3 ( language :name ( name :op1 arabic )  :wiki arabic_language )
integrate :arg0 ( whole :mod-of ( society :mod ( even :mod-of more )  )  )  :arg1 today :arg2 future :domain-of topic
mean :arg1 this :arg2 ( and :op1 ( change :arg1 ( society :arg0-of mainstream )  )  :op2 ( become :arg1 ( remove :arg1 ( and :op1 discriminate :op2 racism )  )  :arg2 ( urgent :degree more )  )  )  :direction too
equal :arg1 ( 10 :quant-of ( temporal-quantity :op1-of nearly :unit year )  )  :mod-of ( act :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 ( result :arg1 ( ruling :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :arg1-of general :op2-of ( and :op1 ( agency :mod ( discriminate :arg1-of oppose )  )  )  )
contrast :arg2 ( learn :arg0 ( series :arg0-of ( murder :arg1 ( organization :name ( name :op1 nsu )  )  )  :arg0-of ( show :arg1 ( ignore :arg0 ( and :op1 police :op2 authority )  :arg1 ( motive :mod racist )  :manner systematical )  )  )  :mod ( slow :degree very )  )
equal :arg1 opportunity :arg2 ( pressure :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2-of ( long :arg1 time )  :mod-of group :op4-of ( and :op1 ( person :arg0-of ( migrate :arg1 amr-unknown )  :quant all )  :op2 organization :op3 white :op5 ( demand :op1-of ( and :op2 ( oppose :arg0 such :arg1 ( treaty :mod international )  :op1-of racism )  :op3 ( commit :arg0 ( country :arg1-of ( become :arg2 reality )  :name ( name :op1 germany )  :wiki germany )  :arg1 convention :op1-of must )  :op4 ( remain :arg1 ( next :quant-of ( temporal-quantity :quant 10 :unit year )  )  :arg2 ( opportunity :mod-of of )  :op1-of everyone :op1-of ( and :arg1-of ( want :arg0 country :polarity - )  :op2 peace :op3 ( exploit :arg1 it )  :op4 ( citizen :mod new )  :op5 good )  )  )  )  )  )
opine :arg0 of :arg1 ( president :arg1-of ( expect :arg0 ( country :arg0-of ( provide :arg1 medicine :arg1-of care :arg2 ( position :arg1-of ( general :arg2 refugee )  )  )  :name ( name :op1 germany )  :wiki germany )  :time now )  :arg2-of ( have-org-role :arg0 doctor :arg1 ( association :mod-of ( frank :mod-of montgomery )  )  )  )
tell :arg0 ( he :arg1-of ( cope :arg0 ( we :arg1-of ( concern :arg0 ( and :op1 manpower :op2 capacity )  )  )  :arg1-of possible )  )  :arg1 far :arg2 ( organization :name ( name :op1 &quot; )  )
add :arg1 ( money :mod extra )  :arg2 ( system :topic this )
ask :arg0 ( person :arg0-of ( avoid :arg1 bottleneck )  :arg0-of ( issue :arg1 ( arrival :mod new :quant all )  :arg3 ( card :mod healthcare )  )  :name ( name :op1 montgomery )  )  :arg1 ( register :arg1 they )
possible :arg1 ( account :arg0 ( state :time late )  :arg1 ( service :arg1 federal :arg1-of provide )  )
and :op1 ( doubt :arg1 ( possible :arg1 ( provide :arg0 ( benefit :arg1 ( thing :name ( name :op1 asylum :op2 seekers :op3 act )  )  )  :arg1 ( service :arg1-of ( catalogue :arg0 ( person :quant many )  :arg1-of limit )  )  )  )  :degree high :time ( term :arg1-of long )  )
doctor :arg0-of ( deal :arg1 priority :arg2 ( barrier :mod ( language :mod apart )  :poss this )  )
receive :arg0 ( person :arg0-of migrate :arg1-of ( establish :arg0 ( person :arg0-of ( research :arg1 ( health :name-of ( city :name ( name :op1 berlin )  :wiki berlin )  )  )  :arg1-of ( have-rel-role :arg0 ( person :mod other )  :arg2 patient )  :name ( name :op1 thea :op2 borde )  )  )  )  :arg1 ( information :mod poor )  :purpose illness :time ( up :arg1 now )
contrast :arg1 ( take :arg0 interpreter :arg3 hospital :mod must :polarity - :purpose ( demand :arg0 she :arg1 practice )  :purpose only )  :arg2 ( doctor :mod also )
contrast :arg1 ( drop :arg0 ( centre :arg1-of ( general :degree more )  :location ( room :mod emergency )  )  :arg1 medicine )  :arg2 ( help :arg1 ( refugee :quant many )  :mod also :time already )
and :arg1-of differ :op1 ( view :mod diagnostic )
and :op1 ( suffer :arg0 ( child :mod refugee )  :arg1 ( disabiliti :mod ( untreat :degree more )  )  :arg1-of clear )  :op2 ( case :arg0 example :arg1 ( information :topic ( disease :name ( name :op1 hiv )  :wiki hiv/aids )  )  :arg2 ( person :mod young )  :degree more )
say :arg0 ( person :name ( name :op1 montgomery )  )  :arg1 ( possible :arg1 ( use :arg1 ( train :arg1 ( doctor :mod ( country :name ( name :op1 germany )  :wiki germany )  )  )  :arg2 ( deal :arg2 ( pattern :arg1-of ( differ :degree part )  :mod disease )  )  )  )
cause :arg0 ( and :op1 ( difficult :domain that )  :op2 ( recognize :arg0 ( or :arg0-of ( sight :arg1 ( short :arg1 doctor )  :arg1-of ( relieve :arg0 there :arg1-of ( possible :polarity - )  )  )  :arg1-of ( infect :arg0 parasite )  :op1 tuberculosi )  :arg2 refugee )  )  :arg1 of
and :op1 ( develop :arg0 ( system :arg0-of educate )  :degree high )  :op2 ( expect :arg0 ( country :name ( name :op1 syria )  :wiki syria )  :arg1 ( doctor :domain-of ( number :quant-of refugee )  )  )
prove :arg0 ( they :arg0-of ( allow :arg1 practice )  :arg0-of ( take :arg1 exam :arg1-of possible :op1-of and )  )  :arg1 ( qualify :arg1 more )
ill :arg0 most :arg1 ( half :arg0-of ( estimate :arg1 ( organization :name ( name :op1 federal :op2 psychotherapeutic :op3 association )  )  :arg2 ( thing :op1-of ( or :arg1-of suffer :op2 ( disord :arg1-of ( stress :arg0 ( organization :name ( name :op1 bptk )  )  )  :time ( post :op1 traumatic )  )  :op3 depression )  )  )  :poss ( refugee :arg1-of ( arrive :arg4 ( country :name ( name :op1 germany )  :wiki germany )  )  )  )  :mod mental
explain :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 bptk )  )  :arg2 president )  :name ( name :op1 dietrich :op2 munz )  )  :arg1 ( vulnerable :domain ( child :mod refugee )  :mod particular )
arrive :arg1 ( child :mod every :mod ( country :name ( name :op1 syria )  :wiki syria )  :mod ( refugee :mod ( city :name ( name :op1 munich )  :wiki munich )  )  :mod fifth )  :arg1-of ( study :arg0 soon :arg1-of publish :prep-as-of document )  :arg4 ( country :name ( name :op1 germany )  :wiki germany )  :time traumatise
traumatic :op1-of ( post :time-of ( disord :arg1-of stress :arg1-of ( suffer :arg0 that :op1-of ( and :arg0-of ( suffer :arg1 ( flashback :arg1-of cause :arg1-of call )  )  :op2 ( thing :mod other )  :op3 ( difficulty :topic breathe )  :op4 dizzy :op5 palpitation :op6 ( fear :arg1 die )  )  )  )  )
and :op1 ( sleep :arg1 ( symptom :mod further )  )  :op2 concentrate :op3 ( and :op1 disorder :op2 nervousnes :op3 ( numbnes :arg1-of emotional )  )
become :arg1 ( symptom :arg0-of ( explain :arg1 ( person :name ( name :op1 munz )  )  )  :arg1-of ( prevent :arg0 ( treat :time early )  )  )  :arg2 chronic
receive :arg0 ( refugee :mod ( ill :arg1 ( up :arg1 now )  :time mental )  :quant ( percentage-entity :mod ( only :op1 4 )  )  )  :arg1 psychotherapy
contrast :arg1 ( permit :arg1 ( apply :arg0 psychotherapy :arg1 ( service :mod ( program :name ( name :op1 social :op2 security )  :wiki social_security_[united_states] )  )  )  )  :arg1-of ill :arg2 ( take :arg0 process :arg1 ( person :arg0-of ( seek :arg1 asylum )  :mod mentally )  :frequency ( several :op1 ( temporal-quantity :unit month )  )  :mod usual )
or :arg1-of ( decide :arg0 ( illness :arg2-of ( train :arg0 ( service :mod ( society :mod-of therapy )  )  :op1-of - :polarity - )  :mod psychological )  )  :op1 ( person :arg0-of ( have-org-role :arg1 addition :arg2 official )  :op1-of ( or :mod most :op2 doctor )  )
say :arg0 ( person :name ( name :op1 munz )  )  :arg1 ( lead :arg0 this :arg1-of frequent :arg2 ( assessment :mod false )  )
invite :arg0 ring :arg1 you :arg2 ( dream :arg0 you )
circus :poss ( art :arg1-of ( return :arg0 circu :arg1-of ( produce :arg0 new :location passion )  )  :mod tradition )
animal :mod-of ( dressage :op3-of ( and :op1 ( draw :arg0 ( aim :arg1 mesmerise )  :arg1 ( group :arg1-of age :mod every )  )  :op2 ( acrobatic :arg1-of spell )  :op4 ( entertain :mod unique )  )  )
issue :arg0 ( thing :name ( name :op1 circus :op2 probst )  )  :arg1 ( invite :arg1 ( dream :arg1 ring :arg2 ( thing :name ( name :op1 ziegelwasen )  )  )  )  :time now
circus :op1 ( passion :op1 we )  :op2 we
say :arg0 ( i :arg2-of ( imagine :arg0 ( i :arg0-of ( live :arg1-of ( possible :polarity - )  )  )  :arg1 circus )  )  :arg1 ( and :arg1-of manage :op1 probst :op2 animal :op3 ( train :arg0 family :arg1 junior )  )  :arg2 stephanie
motto :arg0-of ( produce :arg1 ( ring :mod passion :mod this )  :time current )
circus :arg1-of ( own :arg0 ( family :name ( name :name-of person :op1 probst )  )  :duration ( temporal-quantity :quant 33 :unit year )  )
thing :arg1-of ( gift :arg0 family :arg2 ( person :arg1-of enthrall :poss-of blood )  )
and :op1 ( take :arg1 ( world :mod another )  :arg2 ( person :arg0-of ( stress :arg1 27 :arg2 year )  )  :arg3 ' :time important )  :op2 daily :op3 life :op4 ( take :arg0 it :arg1 ( they :arg0-of ( manage :mod ( old :mod-of junior )  )  )  :arg2 into :arg3 ( 2 :quant-of ( temporal-quantity :unit hour )  )  :time away )
cosmopolitan :mod-of ( flair :arg2-of ( call :arg0 ( he :mod-of ( concept :mod-of ( ring :mod cocktail )  )  )  :arg1 ( person :arg0-of ( have-org-role :arg2 director )  :name ( name :op1 director )  )  )  )
chance :arg0 ( town :mod fifty )  :arg1 ( experience :arg1 ( flair :mod this )  :time ( tour :arg0 ( distance-quantity :arg1-of long :unit kilometer )  :arg1 ( 3000 :degree almost )  )  )
win :arg0 ( program :mod circus )  :arg1 all :arg2 person :manner over :manner ( artist :mod talent )  :op1-of world
captivate :arg0 ( family :arg0-of ( clown :arg1 ( organization :name ( name :op1 stoliarov )  )  )  :arg0-of ( distinguish :time ( festival :location ( country :name ( name :op1 monte :op2 carlo )  )  :mod circus :mod international )  )  :mod ( country :name ( name :op1 russia )  :wiki russia )  )  :arg1 public :op1-of ( and :op2 wit :op3 charm )
know :arg0 ( brother :arg2-of have-rel-role )  :arg1 craft :degree too
silent :arg1-of ( ready :arg2 ( compete :arg0 ( duo :mod ( country :name ( name :op1 cuba )  :wiki cuba )  )  :arg2 ( hero :mod film )  )  )
and :op1 lightnes :op2 ( agility :domain-of ( word :mod this :mod-of sum )  )
win :arg0 ( artistry :mod humorou )  :arg1 woman :arg2 heart :mod pole
cause :arg0 ( apart :arg0-of ( burst :arg1 laught :mod numerous )  )  :arg1 ( and :mod ( also :mod-of mesmerise )  :op1 ( finesse :arg0 circu :arg1 acrobat )  :op2 supplenes )
balance :arg1 ( ball :topic unicycle )  :mode interrogative
problem :polarity - :poss ( he :mod yuan )
and :op1 ( terrify :arg1 enthrall :time ( time :arg1-of same )  )
and :op1 ( acquaint :arg1 ( country :name ( name :op1 china )  :wiki china )  :arg2 ( form :mod acrobatic :mod ( old :degree most )  )  :duration most :manner good )  :op2 ( thrill :arg0 ( person :name ( name :op1 lin )  :wiki - )  :arg2 flexibility )
offer :arg0 ( entertainer :mod sixty )  :arg1 diversity :topic ( respect :arg0 ( nation :quant 12 )  :mod every )
insist :arg0 ( we :arg1-of ( belong :arg0 animal :arg2 family )  )  :arg2 ( person :arg0-of ( have-rel-role :arg1 ( brigitte :mod-of probst )  :arg2 mother )  :mod ' )
complain :arg0 ( organization :mod different :mod ( welfare :part-of animal )  )  :arg1 ( mistreatment :mod ( animal :mod circus :mod-of all )  )  :frequency often :mod too
answer :arg0 she :arg1 we :arg2 ( animal :mod-of ( happy :mod-of then :polarity - )  :op1-of we )  :mod-of this
enjoy :arg0 ( animal :op1-of about :source ( continent :arg1-of differ )  )  :arg1 ( bit :mod every :quant-of ( attend :arg0 80 :arg1 5 )  )
fulfill :arg1 ( far :arg1-of ( wish :mod every )  :arg1-of possible :arg1-of ( know :arg0 they :mod affectionately :mod ( artist :mod ( legg :mod 4 )  )  )  )
want :arg0 we :arg1 ( work :arg3 animal :manner together :arg0 we )  :op1-of ( and :op2 fun )
feel :arg0 ( do :arg0 animal )  :arg1 ( go :arg0 ( want :arg0 it :arg1 ( ring :mod either )  :polarity - :polarity - )  )  :arg1-of well
cause :arg0 ( look :arg0 ( priority :mod top )  :time ( after :op1 animal )  )
and :op1 ( person :name ( name :name-of ( family :domain-of ( proud :compared-to zebroid )  )  :op1 probst )  )  :op1-of especially :op2 ( stallion :mod ( pony :mod ( country :name ( name :op1 shetland )  )  )  )  :op3 ( mare :mod ( zebra :poss jumbo )  )  :topic-of offspr
and :op1 ( live :arg0 ( animal :quant ( 2 :mod 8 )  )  :duration ( temporal-quantity :unit year )  :location enclosure :mod together )  :op2 nothing
say :arg0 we :arg1 ( person :mod ( little :mod-of jumbo )  :name ( name :op1 &quot; )  )  :time ( then :op1-of sudden )  :time there
contrast :arg1 ( instead-of :arg1 ( mascot :beneficiary ( thing :name ( name :op1 circus :op2 probst )  )  :domain he :mod unique :mod little )  )  :arg2 ( ready :arg1 zebroid :arg2 ring :polarity - :time yet )
something :beneficiary ( person :arg0-of ( visit :mod every )  )
say :arg0 certain :arg1 ( or :op1 ( thing :quant 1 )  :op2 there :op3 5 :op4 ( person :op1-of ( and :op2 audience :op3 ( give :arg0 we :arg1 we :arg2 they )  :op4 ( good :degree most )  :op5 ( do :arg0 we :arg1 it :arg2 heart )  :quant all )  )  )  :arg2 ( person :arg0-of ( regard :arg1 of :arg2 wheth :polarity - )  :name ( name :op1 &quot; )  )
invite :arg0 ( thing :mod 20 :name ( name :op1 circus :op2 probst )  )  :arg1 ( and :op1 ( come :arg0 you :arg1 ( day :mod every :quant 9 )  )  :op2 ( see :arg0 17 :arg1 ( show :arg0 5 :arg1 ( and :op1 p.m. :op2 ( p.m. :quant 8 )  )  )  )  )
begin :arg1 program :op1-of ( and :op2 ( a.m. :quant 11 )  :op3 ( p.m. :location sunday :quant 4 )  )
show :arg1 ( and :domain ( thursday :domain ( day :time-of family )  )  )  :arg1-of ( price :arg1-of discount )
and :arg1-of ( show :arg0 animal :arg1-of ( open :arg0 ( a.m. :quant 10 )  :arg2 p.m. )  :time 6 )
speech :mod wrong :mod-of parliament :poss ( person :mod ( country :name ( name :op1 zimbabwe )  :wiki zimbabwe )  :name ( name :op1 robert :op2 mugabe )  :wiki robert_mugabe )
mr :mod-of ( person :arg0-of ( lead :arg1 ( step :arg1 ( person :arg0-of ( lead :arg1 ( continent :name ( name :op1 africa )  :wiki africa )  )  :mod ( old :degree most )  )  :arg1-of ( fall :arg0 ( year :mod this )  )  :arg2 podium :mod down :mod early )  )  :name ( name :op1 mugabe )  :wiki robert_mugabe )
contrast :arg1 ( hurt :arg1 he :polarity - )  :arg1-of fall :arg2 ( go :arg0 video :arg1 viral :arg2 ( media :mod society )  )
mr :mod-of ( person :arg1-of ( boo :arg2-of ( warn :arg1 ( threaten :arg1 die :arg1-of ( receive :arg0 they :arg1-of ( claim :arg0 ( legislator :arg0-of oppose )  :arg0-of ( tarnish :arg1 ( open :arg1 parliament )  :mod also )  )  )  :mod anonymous )  )  :time address )  :name ( name :op1 mugabe )  :wiki robert_mugabe )
repeat :arg0 he :arg1 speech :arg2-of ( heckle :arg0 ( they :arg0-of ( boo :arg1 tuesday :time ( name :name-of ( address :location parliament )  :op1 state :op2 of :op3 the :op4 nation )  )  )  :op1-of and )  :op1-of ( temporal-quantity :unit ( month :mod last )  )
say :arg0 ( political-party :name ( name :op1 movement :op2 for :op3 democratic :op4 change )  :wiki movement_for_democratic_change_–_tsvangirai )  :arg1 7 :arg1-of ( whip :arg0 ( political-party :arg0-of ( address :arg1 ( person :arg0-of ( have-org-role :arg2 chief )  :name ( name :op1 mugabe )  :wiki robert_mugabe )  :arg1-of ( warn :arg0 phone )  :arg1-of ( disrupt :arg0 they :polarity - )  )  :arg0-of ( oppose :arg1 ( politician :arg0-of ( receive :arg1 text )  :arg0-of ( mobile :arg1 message )  )  )  :name ( name :op1 mdc )  :wiki movement_for_democratic_change_–_tsvangirai )  )
contrast :arg1 ( title :arg1 ( die :arg1 ( he :arg0-of ( tell :arg2 journalist :arg3 ( come :arg0 message :arg1 number )  :polarity - :time ( after :time-of ( speak :arg0 ( person :name ( name :op1 mugabe )  :wiki robert_mugabe )  :arg1 mr )  )  )  )  )  )  :arg2 ' :arg2-of ( reflect :arg1 it )
warn :arg0 it :arg1 ( concern :arg1 ( person :arg0-of ( have-org-role :arg2 member )  :arg0-of ( know :arg1 ( and :op1 ( end :arg0 parliament :arg1 ( immunity :arg0-of ( step :arg1 they :op1-of once )  )  )  :op2 ( operate :arg0 parliament :arg1 ( immunity :mod parliament )  :polarity - )  )  )  )  )
say :arg0 ( person :arg0-of ( lead :arg1 party )  :arg0-of ( have-org-role :arg2 chief )  :arg0-of ( worry :arg1 about )  :name ( name :op1 morgan :op2 tsvangirai )  :wiki morgan_tsvangirai )  :arg1 ( threaten :arg0 politician :arg2 it )  :arg1-of whip
cut :arg0 ( organization :name ( name :op1 hewlett-packard )  )  :arg1 job
expect :arg0 ( organization :name ( name :op1 hewlett-packard )  )  :arg1 ( cut :arg1 job :arg0 organization )  :arg1-of ( restructure :arg0 enterprise :op1-of ( and :op2 ( effort :arg1-of ( save :arg1-of ( cost :arg0 ( business :mod service )  )  )  )  )  )
split :arg1 ( book :name ( name :op1 hp )  :wiki harry_potter )  :arg2 ( company :arg1-of list :quant 2 )  :purpose ( separate :arg0 ( and :op1 ( hardware :arg1-of ( grow :manner fast )  :mod corporation )  :op2 ( operation :mod service )  )  :arg1 computer :arg3 ( and :op1 ( business :mod printer )  )  )  :time ( late :op1 ( year :mod this )  )
say :arg0 ( book :name ( name :op1 hp )  :wiki harry_potter )  :arg1 ( state :arg1 ( result :arg1 ( cut :arg1 job :arg1-of expect )  :arg2 charge :purpose ( begin :arg1 ( quarter :arg1 about :mod fourth )  )  )  )
say :arg0 ( organization :mod new :name ( name :op1 &quot; )  )  :arg1 ( and :arg1-of ( split :time after )  :op1 ( person :arg0-of ( head :arg1 unit )  :arg0-of ( have-org-role :arg1 amr-unknown :arg2 chairman )  :arg0-of ( have-org-role :arg1 executive :arg2 chief )  :arg2-of ( enable :arg1 ( compete :arg0 more :arg1 ( structure :arg1-of sustain :arg1-of cost )  :arg1-of ( activity :arg1-of ( restructure :arg0 this )  )  )  )  :name ( name :op1 &quot; )  )  :op2 ( book :name ( name :op1 hp )  :wiki harry_potter )  )
say :arg0 business :arg1 ( person :arg2-of ( help :arg0 ( we :arg0-of ( broad :arg1 of :arg2 business :op2-of ( and :arg0-of ( deep :arg1 portfolio )  :op1 ( focus :arg0 small :arg1 ( book :name ( name :op1 hp )  :wiki harry_potter )  :arg2 that :degree more :op1-of ( and :op2 today )  :op2-of ( and :op1 ( organization :name ( name :op1 &quot; )  )  )  )  )  )  )  :arg1 ( enterprise :arg0-of ( transition :arg1 ( style :mod new )  )  )  )  :name ( name :op1 &quot; )  )
position :arg0 ( company :arg1-of separate )  :arg1 ( meet :arg0 we :arg1 ( need :arg0 ever :arg1 ( customer :poss we )  :mod evolve )  :time ( around :op1 world )  )  :manner good
state :arg0 company :arg1 ( and :op1 revenue :op2 ( focus :arg0 ( organization :name ( name :op1 hewlett )  )  :arg1-of deliver :arg1-of ( rival :polarity - )  :arg2 solution :arg2-of ( integrate :arg1 technology )  )  :quant more )  :arg1-of ( say :arg0 company )
and :op1 ( form :arg0 company :arg1 ( break :arg1 it )  )  :op2 ( organization :name ( name :op1 it )  )  :op3 ( person :arg1-of ( graduate :arg0 1930 )  :name ( name :op1 it )  )  :op4 ( person :name ( name :op1 it )  :op1-of ( and :op2 electric :op3 equipment :op4 ( country :arg0-of ( dub :arg1 ( garage :arg1-of ( birth :arg0 ( country :name ( name :op1 it )  )  )  )  )  :name ( name :op1 it )  )  )  )
undergo :arg0 ( book :name ( name :op1 hp )  :wiki harry_potter )  :arg1 ( reorganize :arg1 ( cope :arg1 ( move :arg1 ( mobile :arg1 device )  )  :arg2-of ( personal :arg1 ( computer :mod tradition :op1-of away )  )  )  :mod massive )
and :arg2-of ( move :arg1 ( book :name ( name :op1 hp )  :wiki harry_potter )  )  :op1 ( political-party :arg0-of ( make :arg1 world )  :mod ( large :degree most )  :name ( name :op1 pc )  :wiki political_correctness )  :op2 1 :op3 of :op4 ( focus :arg1 ( tech :mod ( big :degree most )  :mod-of firm )  :arg1-of ( tight :arg1-of ( believe :arg0 ( country :name ( name :op1 us )  :wiki united_states )  )  )  :arg2 ( perform :arg0 firm :arg1 good :time ( late :degree most )  )  :concession-of ( base :arg1 sector )  :mod that )
say :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 arsenal )  )  :arg2 captain )  :arg1-of ( have-rel-role :arg0 ( person :mod team )  :arg2 mate )  :name ( name :op1 mikel :op2 arteta )  )  :arg1 ( behind :op1 ( thing :arg1-of ( injure :arg0 ( tie :mod ( thing :name ( name :op1 dinamo :op2 zagreb )  )  :op1-of ahead )  )  :name ( name :op1 jack :op2 wilshere )  )  )
and :op1 ( stress :arg0 ( person :arg1-of ( plan :arg1-of ( go :arg0 ( provide :arg1 ( rehabilitate :arg1 still )  )  )  :domain-of ( reason :polarity - )  )  :name ( name :op1 wenger )  )  :arg1 ( play :arg0 he :arg1 ( festival :name ( name :op1 christmas )  :wiki christmas )  :arg1-of possible :manner back :polarity - )  :arg2 ( person :name ( name :op1 wilshere )  )  :mod also )  :op2 ( 9 :mod only )
mean :arg0 already :arg1 that :arg2 ( and :arg1-of ( give :arg0 ( country :name ( name :op1 england )  :wiki england )  :arg2 ( he :arg0-of ( involve :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :arg2 summer :arg3 4 :time next )  :arg0-of ( case :arg1 scenario )  :arg0-of ( miss :arg1 least :manner certain )  :arg0-of ( clear :arg1 ( certain :polarity - )  )  )  :arg3 next :concession history :concession championship )  :op1 game )  :manner ( good :degree most :degree that )
shame :arg2-of ( look :arg0 ( person :arg0-of ( finish :arg1 ( season :mod last )  :arg1-of strong :time ( after :op1 ( injure :arg1 ankle :arg1-of separate )  )  )  :name ( name :op1 wilshere )  )  :arg1 ( sharpnes :mod old )  :direction back :op1-of and :time then :time pre :time season )  :domain-of great :quant-of ( problem :mod ( late :degree most )  :mod this )
say :arg0 ( career :polarity - )  :arg1 weng :arg2-of ( threaten :arg0 ( kind :mod this )  :arg1-of ( injure :arg0 of )  )
bone :arg1-of ( heal :polarity - )  :domain it
major :arg0 it :arg1 nothing
accident :domain this :mod just
or :op1 ( link :arg1 it :arg2 ankl :polarity - )  :op2 ( injure :arg0 ( he :domain-of before )  )
contrast :arg1 ( possible :arg1 ( true :domain that )  :condition ( try :arg0 ( thing :arg0-of play :mod any )  :arg1 ( return :arg0 perspective :arg1 midseason :arg1-of ( injure :arg0 whenever :degree further )  )  :arg2 ( pure :arg1 medicine )  )  )  :arg2 ( danger :arg1-of relate :arg1-of ( acknowledge :arg0 ( person :name ( name :op1 wenger )  )  :mod also )  )
pattern :arg1-of develop :mod ( comfortable :polarity - )  :mod also
record :time ( since :time-of ( ailment :arg1-of ( differ :arg0 ( 6 :quant-of ( temporal-quantity :unit year )  )  )  :mod ( person :arg0-of ( have-org-role :arg1 ( thing :arg0-of ( research :arg1 ( he :arg1-of ( debut :arg0 23 )  )  )  :name ( name :op1 injuries :op2 ltd )  )  :arg2 premier )  :name ( name :op1 wilshere )  )  )  )
season :arg0 ( he :arg0-of ( play :arg1 ( league :mod ( only :mod-of 65 )  :mod-of game )  :mod also )  )  :arg1 5 :mod last
thing :mod-of ( club :arg0-of ( lose :arg1 ( most :quant-of ( temporal-quantity :unit day )  )  :manner ( injure :arg0 8 :arg2 ( season :arg0 ( out :quant 6 :time ( since :op1 ( date-entity :day 8 :month 7 :year 20 )  )  )  :purpose ( wide :arg0 they :arg1 ( picture :beneficiary ( organization :name ( name :op1 arsenal )  )  )  )  )  )  )  :quant 2 )  :name ( name :op1 premier :op2 league )
contrast :arg1 ( accept :arg0 ( person :name ( name :op1 wenger )  )  :arg1 ( circle :mod vicious :topic-of potential )  )  :arg2 ( believe :arg0 ( organization :name ( name :op1 arsenal )  )  :arg1 ( continue :arg1 ( improve :arg1 ( record :mod ( injure :arg3 ( season :mod last )  )  )  )  )  )
say :arg0 ( you :arg2-of ( injure :arg0 sometimes :arg1 ( vulnerable :mod-of period )  :arg1-of ( come :direction back )  )  )  :arg1 ( person :name ( name :op1 &quot; )  )  :arg1-of ( compete :arg1-of ( strengthen :arg0 time :op1-of ( and :arg1-of ( need :arg0 you )  :op2 body )  )  :arg1-of ( gain :arg0 you )  )
young :domain ( person :mod that :name ( name :op1 jack )  )  :op1 enough
hope :arg0 ( i :arg0-of ( deserve :arg1 kind )  :poss-of body )  :arg1 ( and :op1 ( confident :arg1 i )  :op2 career )  :time he
and :arg1-of ( match :arg0 ( person :arg0-of ( rotate :arg1 team :arg2-of ( prepare :arg1 ( wednesday :mod next )  )  )  :arg0-of ( begin :arg1 ( campaign :arg0 ( organization :name ( name :op1 arsenal )  :part wednesday )  :arg1 ( thing :name ( name :op1 champions :op2 league )  )  :location night )  :arg2 ( organization :name ( name :op1 dinamo :op2 zagreb )  )  )  :name ( name :op1 wenger )  )  :arg2 ( organization :name ( name :op1 chelsea )  )  :topic-of ahead )  :op1 saturday :op2 ( organization :name ( name :op1 tottenham :op2 hotspur )  )
and :arg0-of ( start :arg1-of ( likely :arg2-of ( mean :arg0 ( person :name ( name :op1 héctor :op2 bellerín )  )  :arg1 ( travel :arg4 ( country :name ( name :op1 croatia )  :wiki croatia )  :op2-of ( and :op1 ( person :name ( name :op1 aaron :op2 ramsey )  )  )  )  )  :polarity - )  )  :op1 ( person :name ( name :op1 mathieu :op2 debuchy )  )  :op2 ( person :name ( name :op1 arteta )  )
possible :arg1 ( begin :arg0 ( person :name ( name :op1 wenger )  )  :arg1 ( and :op1 ( person :name ( name :op1 kieran :op2 gibbs )  :op1-of ( and :op2 place :op3 ( person :name ( name :op1 nacho :op2 monreal )  )  :op4 ( person :name ( name :op1 theo :op2 walcott )  )  )  )  :op2 ( person :name ( name :op1 olivier :op2 giroud )  )  )  )  :mod also
say :arg0 ( person :arg0-of play :arg2-of ( give :arg0 ( and :arg1-of balance )  :arg1 ( breathe :arg1 ( need :arg0 amr-unknown :arg1 it )  )  :arg1-of ( keep :arg0 ( i :arg0-of ( try :arg1 little )  )  )  )  )  :arg1 ( person :name ( name :op1 &quot; )  )
stadium :arg0-of ( intimidate :arg1 ( progress :arg0 favourit :arg1 group :arg1-of clear :arg2 ( aircraft-type :name ( name :op1 f22 )  :wiki lockheed_martin_f-22_raptor )  )  :degree most :location ( continent :name ( name :op1 europe )  :wiki europe )  )
unbeaten :arg0-of ( match :arg1 41 :op1-of ( after :op2 ( produce :arg0 ( organization :arg0-of ( campaign :arg1 ( season :mod last )  )  :name ( name :op1 dinamo )  )  :arg1 invincible )  )  )  :mod also
shake-up :arg0 ( tremor :arg0-of ( measure :arg1 ( richter :poss-of 3.2 )  :arg2 tuesday )  :mod earth )  :arg1 stadium :time night
year :mod this :time-of ( 10th :domain ( it :poss-of ( country :name ( name :op1 zagreb )  )  )  )
hope :arg1 club :arg1-of distant :arg1-of manage :op4-of ( and :op1 ( country :name ( name :op1 monaco )  :wiki monaco )  :op2 ( remain :arg1 ( person :arg0-of ( believe :arg1 that )  :arg0-of ( learn :arg1 lesson )  :name ( name :op1 wenger )  )  :arg2-of ( champion :arg0 season :arg1 league :mod last )  :op1-of against )  :op3 ( drive :arg0 of :arg1 ( cup :arg0 first :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  )  )  )
say :arg0 immense :arg1 ( person :name ( name :op1 &quot; )  )  :arg1-of ( drive :arg0 this )
do :arg0 ( organization :name ( name :op1 arsenal )  )  :arg1 it
contrast :arg1 ( long :arg0 ( date-entity :year 2006 )  :arg1 ( i :domain-of ( realistic :arg0 very :arg1 we )  )  :arg2 ( hand :mod other )  :degree enough )
contrast :arg1 ( ambitious :domain we )  :arg2 ( dreamer :domain we :polarity - )
friendsf :poss ( friendship :mod-of ( lesson :mod serious :time-of ( teach :arg1 ( show :arg0 male :arg1 comedy )  )  )  )
need :arg1 ( open :arg0 man :arg1 ( desperate :degree more )  :arg1-of ( show :arg1-of ( glare :arg1-of ( give :arg0 15 :arg2 ( absent :arg0 now :arg1 ( portrayal :arg1-of ( resemble :arg0 ever )  )  )  :time particular )  )  :arg2 ( high :arg1 ( rate :mod suicide :source ( male :mod young :op1-of amongst )  )  :time year )  )  )
cause :arg1 ( die :arg0 3 :arg1 female )  :arg1-of single :mod ( big :degree most )  :op1-of ( and :op2 ( country :location-of ( age :arg0 ( date-entity :year 2013 )  :arg1 man )  :name ( name :op1 uk )  :wiki united_kingdom )  :op3 ( remain :arg3 ( common :degree more )  :location male )  )
seek :arg0 man :arg1 ( help :arg1-of ( need :arg0 they )  :arg2 ( organization :name ( name :op1 calm )  )  )  :arg1-of ( prevent :arg0 ( culture :arg1-of ( challenge :arg1-of ( aim :arg0 ( organization :arg0-of ( announce :arg1 ( year :mod male )  :time ( date-entity :year 2015 )  )  :arg0-of ( bid :arg1 ( address :arg1 problem )  )  :name ( name :op1 campaign :op2 against :op3 living :op4 miserably )  )  )  )  )  )
lie :arg1 ( organization :name ( name :op1 friendship )  )  :arg2 ( heart :part-of ( battle :arg1 ( meet :arg1 ( challenge :mod this )  )  )  )
cause :arg0 ( study :arg0 recent :arg1 of :arg1-of high )  :arg1 ( suffer :arg0 ( person :arg0-of ( study :arg1 school )  :arg0-of ( find :arg1 that :arg3 more :manner symptom )  :arg0-of ( display :arg1 depressive )  :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( chance :arg1 ( recover :arg1-of double :arg2 mood )  )  :poss-of healthy )  :arg2 friend )  )  :arg1 ( percentage :arg1-of high :mod-of enough )  )
depress :arg1 mental :polarity - :purpose-of ( arise :arg0 equally :arg1 ( thing :arg1-of ( chance :arg1-of ( halve :arg0 ( person :arg0-of ( have-rel-role :arg1 circle :arg2 friend )  :mod healthy )  )  )  :arg2-of challenge :mod mental )  )
contrast :arg2 ( need :arg1 ( access :time place )  :time ( work :time-of friendship )  )
age :arg1 ( society :arg1-of ( lead :arg0 media :arg2 ( communicate :arg1 often )  )  )  :mod this :time-of ( contact :arg0 ( immediacy :mod-of respond )  :mod meaningful )  :time-of ( focus :arg2 ( style :topic substance )  )
and :op1 ( strong :arg1-of ( appear :arg1-of ( need :arg1-of ( double :arg0 ( life :mod digital :poss we )  )  )  )  :concession ( succeed :arg1 ( isolate :arg1 king :arg2 reality )  )  )  :op2 ( love :arg0 fun :arg1 even )
and :arg0-of ( succeed :arg1 term :arg1-of ( dominate :arg0 ( value :mod extrinsic )  )  :manner superficial :mod this )  :arg1-of ( yearn :arg0 we :mod inner )  :arg2-of ( expend :arg1 ( value :mod intrinsic )  )  :op1 ( and :op1 ( money :domain that )  :op2 image :op3 ( status :mod society )  )  :op2 ( friendship :mod ( personal :arg0 all :arg1 ( grow :arg1 ( deep :arg1 ( impact :arg1 ( health :mod mental :poss we )  )  :degree more )  )  )  )
and :op1 billionaire :op2 ( buy :arg1 happiness :example-of ( recent :mod ( explain :arg0 creator :arg1 money :purpose-of game )  )  :op1-of video :op1-of - :op1-of really :op1-of great )
beauty :arg0-of ( turn :arg1 ( focus :mod this )  :arg2 ( head :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  )
contrast :arg1-of ( define :arg0 ( work :arg0 ( person :arg0-of ( have-rel-role :arg2 friend )  :accompanier-of ( shine :arg1 personaliti :path interact )  )  :arg1 ( character :mod each )  )  :polarity - )
cause :arg0 ( possible :arg1 ( man :arg1-of ( relate :arg2 this :mod all )  :arg1-of ( come :op5-of ( and :op1 ( watch :arg1 football :arg1-of ( hug :arg1-of frequent )  :mod moment :op3-of ( and :op1 humour :op2 of )  )  :op2 ( chair :mod comfy )  :op3 ros :op4 ( pin :arg1 rachel )  )  )  :poss-of ( knowledge :mod ( that :mod-of yes )  )  )  )  :arg1 ( feel :arg0 ( they :arg0-of ( hold :arg1 often :mod even :time back )  )  :arg1 full :arg1-of explore )
highlight :arg0 ( person :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( differ :arg1 possible )  :op2-of ( and :op1 suicidal )  )  :arg2 friend )  :arg1-of ( feel :arg0 ( i :arg0-of ( listen :arg1 ( explain :arg0 ( samaritan :arg1-of ( work :arg0 i )  )  :arg1-of mean )  :manner role :manner ( interaction :mod ( small :degree most )  )  :manner even )  )  :arg1-of depress )  :poss-of really )  :arg1 amr-unknown
feel :arg0 ( man :arg0-of contact )  :arg2 ( speak :arg2 ( person :arg0-of ( have-rel-role :arg2 friend )  )  )  :frequency often
sense :arg0-of ( open :arg1 problem :arg1-of ( weak :arg1-of perceive )  :mod about )  :arg1 that :manner ( strong :arg1 ( get :arg0 ( of :mod ( old :mod-of adage )  )  :arg1 it )  )
and :arg1-of show :op1 ( come :arg4 mind )  :op2 ( offer :arg0 ( i :arg0-of ( try :arg1 ( mechanism :arg1-of cope :arg1-of ( long :degree more )  )  )  :arg1-of ( have-rel-role :arg0 person :arg2 friend )  )  )
highlight :arg0 it :arg1 ( moment :mod little :time-of friendship )  :arg2 male
come :arg0 ( person :arg2-of ( help :arg0 ( status :mod outsider )  :arg1 ( moment :time-of ( despair :arg1 phone )  )  )  )  :arg1 ( support :arg1-of long )  :arg3 ( and :op1 ( family :arg1-of ( personal :mod-of ( network :arg0-of ( have-rel-role :arg1 close :arg2 friend )  )  )  )  )  :degree ( much :location-of objective )
cause :arg0 ( and :op1 ( take :arg0 ( you :arg0-of ( attend :arg1 comedy )  )  :arg1 ( person :arg0-of ( have-rel-role :arg2 friend )  :arg0-of ( drink :arg1 ( set :arg1-of redesign :example-of ( weekend :mod this )  :mod-of full )  )  )  :arg1-of perk :arg1-of celebrate :polarity - )  )  :arg1 friendsf
and :mod ( still :time-of good )  :op1 ( give :arg1 smile )  :op2 ( say :arg1 hello )  :op2-of ( or :op1 ( see :arg0 you :arg1 someone :manner alone :source ( organization :name ( name :op1 starbucks )  )  )  )
know :arg0 you :arg1 ( possible :arg1 ( differ :arg1 friendship :arg2 amr-unknown )  )
broadcast :arg0 ( person :arg0-of ( finish :arg1 ( episod :mod full )  :arg1-of start :arg2 friendsf )  :arg0-of ( have-rel-role :arg2 friend )  )  :arg1 ( thing :name ( name :op1 comedy :op2 central )  )
aside :direction-of ( swat :arg0 ( organization :name ( name :op1 psg )  )  :arg1 ( country :name ( name :op1 malmo )  )  :arg1-of ( help :arg0 ( person :name ( name :op1 di :op2 maria )  )  :arg2 score )  )
and :arg1-of ( score :arg0 ( country :name ( name :op1 malmo )  )  :op1-of ( after :time-of ( celebrate :arg0 ( person :name ( name :op1 angel :op2 di :op3 maria )  )  )  )  )  :op1 ( person :name ( name :op1 blaise :op2 matuidi )  )  :op2 ( person :name ( name :op1 edinson :op2 cavani )  )
score :arg1 ( person :arg0-of ( help :arg1 ( side :mod ( country :name ( name :op1 sweden )  :wiki sweden )  :time past )  :arg2 ( organization :arg0-of ( ease :arg1 ( country :name ( name :op1 malmo )  )  )  :name ( name :op1 psg )  )  )  :name ( name :op1 angel :op2 di :op3 maria )  )  :arg2 ( debut :arg0 tuesday :arg1 ( thing :name ( name :op1 champions :op2 league )  )  )
and :arg1-of ( report :arg0 game :arg1-of ( match :location here )  :arg1-of react )
des :op2-of ( name :name-of ( thing :mod-of ( princ :location-of ( win :arg0-of ( comfortable :degree ultimate )  :arg1 tuesday :arg2-of ( begin :arg0 ( and :op1 ( person :arg1-of target :name ( name :op1 angel :op2 di :op3 maria )  )  :op2 ( person :name ( name :op1 edinson :op2 cavani )  )  )  :arg1 ( campaign :arg0 ( organization :name ( name :op1 paris :op2 saint-germain )  )  :arg1 ( thing :name ( name :op1 champions :op2 league )  )  )  )  :prep-against malmo )  )  )  :op1 parc )
contrast :arg1 ( score :arg1 ( person :arg0-of ( champion :arg1 way )  :name ( name :op1 di :op2 maria )  )  :arg2 ( thing :arg0-of ( play :arg2 ( organization :name ( name :op1 psg )  )  )  )  :arg3 ( debut :arg0 ( temporal-quantity :op1-of less :quant 4 :unit minute )  :arg1 ( thing :name ( name :op1 champions :op2 league )  )  )  )  :arg2 ( miss :arg0 ( they :arg0-of ( extend :arg1 advantage :arg1-of ( head :arg0 ( person :name ( name :op1 cavani )  )  :arg4 home :time ( minute :unit-of temporal-quantity )  )  :op1-of before :time final )  )  :arg1 ( succeed :arg0 france :arg1 opportunity )  )
contrast :arg1 ( target :arg0 ( they :arg0-of ( campaign :mod last )  :arg0-of ( qualify :arg1 ( round :mod knockout )  :mod just )  :arg0-of ( improve :arg1 ( quarter :arg0 each :arg1 final )  :arg2 ( run :arg1 ( thing :name ( name :op1 group :op2 a )  )  )  )  )  :arg1 3 :condition-of ( need :arg0 ( city :name ( name :op1 paris )  :wiki paris )  :arg1 ( start :arg1 ( champion :arg0 ( country :name ( name :op1 sweden )  :wiki sweden )  )  :arg1-of strong )  :condition ( organization :mod also :name ( name :op1 shakhtar :op2 donetsk )  )  )  :polarity - )  :arg2 ( and :op1 ( city :mod real :name ( name :op1 madrid )  :wiki madrid )  )
contrast :arg1 ( while :mod-of ( point :mod they :mod-of it )  )  :arg2 ( and :arg1-of ( display :arg2 ( blanc :mod-of side )  :mod vintage :time - )  :example ( and :op1 team )  :op1 front :op2 goal :time ( late :time-of ( substitute :arg0 ( he :time-of ( start :arg0 ( he :poss-of ( career :mod illustriou )  )  :time ( date-entity :year 1999 )  :time club :time hometown :time back )  )  :arg1 against )  )  )
say :arg0 certain :arg1 blanc :arg1-of ( go :arg0 season :arg1-of perfect :arg1-of ( need :arg0 we :arg1-of ( cause :arg0 even )  :arg1-of ( cause :arg0 ( or :arg0-of ( win :arg1 ( look :arg0 ( person :arg0-of ( oppose :arg1 problem )  :arg0-of ( start :arg1 there )  )  :arg1 thing :arg1-of ( champion :arg0 away :arg2 league )  :arg2 ( comfortable :arg0 we :arg1 good :arg2 back )  :op1-of ( and :arg1-of ( cause :arg0 it )  )  )  )  :arg1-of ( easy :polarity - )  :arg1-of ( win :arg0 ' )  :op1 home )  )  )  )
augur :arg0 it
and :op1 ( want :arg0 we :arg1 ( win :arg0 we :arg1 goal )  :op1-of 2 )  :op1-of or :time ( regret :arg0 i :arg1 ( score :arg0 we :arg1 more :polarity - )  )
contrast :arg1 ( return :arg0 weekend :arg1 ( person :name ( name :op1 ibrahimovic )  )  :purpose ( change :arg0 ( fourth :mod-of ( minute :unit-of ( temporal-quantity :quant 1 )  )  )  :arg1 ( team :arg1-of ( hold :arg0 ( country :name ( name :op1 bordeaux )  )  :arg2 ( draw :arg0 ( person :name ( name :op1 di :op2 maria )  )  :arg1 he :location home )  )  :mod ( city :name ( name :op1 paris )  :wiki paris )  )  )  :time ( after :op1 ( injure :arg1 3 )  )  )
indicate :arg0 ( he :arg0-of ( finish :arg1 past )  :op1-of ( and :arg1-of ( unite :arg0 ( he :arg0-of ( pass :arg1 malmo )  :arg0-of ( sign :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  )  :arg1-of ( take :arg0 man :arg1-of ( wing :arg0 ( country :name ( name :op1 argentina )  :wiki argentina )  )  :arg1-of label :time ( next :mod-of level )  )  )  :mod ( last :mod-of ( temporal-quantity :unit month )  )  )  :op2 ( run :arg1 he :op1-of onto :op1-of ( and :op2 behind :op3 into :op4 ( far :arg1-of ( angle :arg0 ( before :time-of defend )  )  :arg1-of beautiful :mod-of net :mod-of of :mod-of corner )  )  )  )  )  :arg1 why
victory :arg2-of ( romp :arg0 ( organization :name ( name :op1 psg )  :poss ( they :arg1-of disappoint )  )  :arg1-of ( expect :arg0 anyone :time then )  )  :mod big
kick :arg0 2 :arg1 off :arg2-of ( line :arg1 ( organization :arg0-of ( reach :arg1 ( stage :mod this )  :arg1-of ( play :arg0 ( person :arg0-of oppose :mod stuffy )  :arg2 off )  :purpose-of ( beat :arg1 ( country :name ( name :op1 malmo )  )  )  )  :name ( name :op1 celtic )  )  :op1-of ( and :arg1-of ( deep :arg0 midfield )  :op2 ( and :op1 ( international :location field :mod full )  )  :op3 ( defend :arg0 9 :arg1 ( man :quant 5 )  )  )  )
contrast :arg1 ( save :arg0 ( they :arg0-of ( offer :arg1 little :time attack )  )  :arg1 ( far :arg1-of ( wide :mod just )  :arg1-of slide :arg1-of ( shoot :arg0 ( 34th :mod-of ( temporal-quantity :unit minute )  )  )  :mod-of post )  )
and :op1 ( let :arg0 ( organization :name ( name :op1 psg )  )  :arg1 5 :arg1-of instead-of )  :op2 ( attempt :arg0 ( person :arg0-of ( put :arg1 touch )  :name ( name :op1 cavani )  )  :arg1 ( few :polarity - )  :arg1-of ( restart :op1-of ( after :mod just )  )  :arg1-of ( convert :arg0 ( person :name ( name :op1 ibrahimovic )  )  :arg2-of ( fail :arg1 then :location half )  )  :location alone )  :op3 ( let :arg1 - :op2-of ( and :op1 ( pass :arg1 ( finish :arg1 poor )  :mod wasteful :quant some )  )  )
prove :arg0 ( he :arg0-of ( pass :arg1 ( person :name ( name :op1 ibrahimovic )  )  )  :arg0-of ( come :arg1 ( set :arg1 colleagu )  )  )  :arg1 ( adept :degree ( more :degree much )  )  :manner nevertheles :op1-of ( and :op2 ( send :arg0 ( person :name ( name :op1 di :op2 maria )  )  :arg1 ( shoot :arg1 ( temporal-quantity :unit minute )  :arg1-of ( curl-up :arg0 52 )  :arg1-of ( tip :arg0 ( person :name ( name :op1 wiland )  )  :location ( around :op1 post )  )  )  )  )
flick :arg0 ( person :arg0-of ( cross :arg1 maxwell :mod ( wing :mod left )  )  :name ( name :op1 ibrahimovic )  )  :arg1 season :op1-of ( after :time-of ( head :arg0 ( thing :arg1-of ( mark :arg0 ( temporal-quantity :unit hour )  :arg3-of ( thank :arg1 ( person :name ( name :op1 cavani )  )  )  :op1-of ( after :mod just :time-of ( arrive :arg1 goal :time final )  )  )  :name ( name :op1 uruguayan )  )  :arg1 sixth :arg2 home )  )
and :arg1-of ( come :arg0 ( country :arg0-of ( deny :arg1 ( keep :arg1 ( thing :name ( name :op1 david :op2 luiz )  )  :arg2 ( score :arg1-of ( substitute :mod-of ( thing :mod ( before :compared-to-of down )  :name ( name :op1 ezequiel :op2 lavezzi )  )  )  :arg1-of ( disallow :arg0 goal :arg2 right :manner ( die :arg1 ( person :name ( name :op1 wiland )  )  )  )  :mod final )  )  :manner ( that :arg0-of ( end :arg1 ( idea :mod any )  )  )  )  :name ( name :op1 malmo )  )  :arg3 ( range :mod blank :mod point :mod superb )  :arg4 game :direction back )  :op1 ( stop :arg1 only )
say :arg0 ( he :arg2-of ( admit :arg0 ( person :arg1-of ( coach :arg0 ( person :mod ( country :name ( name :op1 malmo )  )  )  )  :name ( name :op1 malmo )  )  :arg1 ( organization :name ( name :op1 malmo )  )  :mod late )  :mod-of ( side :mod ( above :mod class )  )  )  :arg1 ( thing :mod last :mod we :mod ( last :mod-of ( year :quant 12 )  )  :mod-of game :name ( name :op1 malmo )  )  :mod ( country :name ( name :op1 norway )  :wiki norway )
play :arg0 we :arg1 ( level :arg1-of ( same :polarity - )  )  :arg2 ( league :mod ( country :name ( name :op1 sweden )  :wiki sweden )  )  :manner only :time ( since :op1 then )
qualify :arg2 ( thing :domain-of ( enough :polarity - )  )
city :name ( name :op1 paris )  :wiki paris
magnificent :mod-of ( match :domain it )
raise :arg0 ( organization :arg0-of ( share :arg1 2.5 )  :name ( name :op1 glencore )  )
sale :arg1-of ( plan :arg1-of ( slash :arg1-of ( hit :arg2 ( collapse :arg1 ( price :arg1 commodity )  :arg1-of ( mine :arg0 2.5 :arg1-of base :mod-of giant )  )  :purpose-of ( raise :arg1 wednesday )  )  :arg2 debt )  :mod vast )  :mod share
state :arg1 worth :arg1-of ( say :arg0 ( city :name ( name :op1 london )  :wiki london )  :arg1-of list )  :arg2 ( sell :arg0 it :arg2 about :arg2-of ( pay :arg0 down :arg1 debt )  :mod-of ( share :mod new )  )  :mod that
spark :arg1 ( market :mod across )  :op4-of ( and :op1 ( lose :arg0 company :arg1 percentage-entity :mod-of 57 )  :op2 ( weigh :arg1 ( economy :arg1-of slow-down :mod ( country :name ( name :op1 china )  :wiki china )  )  )  :op3 ( demand :arg1 ( price :arg1 commodity :arg1-of grapple :arg1-of ( tumble :arg0 ( market :arg1-of value :mod of :mod-of ( this :mod-of ( year :unit-of temporal-quantity )  )  :poss it )  )  )  )  :op5 havoc )
soar :arg1 ( price :arg1-of share :arg1-of ( send :arg0 issue :arg2 ( city :name ( name :op1 london )  :wiki london )  :mod right :time ( early :mod-of ( deal :arg1 ( market :mod stock )  :arg2 wednesday )  :mod-of morning )  :time ( of :mod top )  )  )
jump :arg0 share :arg1 percentage-entity :arg2 penny :arg3 ( index :arg0-of ( open :arg1 high )  :quant 100 )  :op1-of percentage-entity
reveal :arg0 ( organization :arg0-of ( plan :arg1 ( slash :arg0 2.5 :arg1 pile )  :arg1-of broad )  :name ( name :op1 glencore )  )  :arg1 ( sale :mod share )  :op1-of ( 30 :quant-of debt )  :op1-of about :time ( week :mod last )
close :arg1-of ( price :arg1-of ( discount :arg1-of ( mark :arg2 ( penny :location-of ( sell :arg0 company :arg1 ( stock :mod new )  )  :quant 125 )  )  :arg1-of share :mod ( percentage-entity :quant 2.4 )  )  :location tuesday )
worth :domain ( percentage-entity :mod-of ( group :arg2-of ( offload :arg0 it :arg1 share )  :mod 1.3 )  )
roughly :arg0-of ( prolong :arg1 ( grow :arg0 ( country :name ( name :op1 china )  :wiki china )  :arg1 20 :arg1-of ( concern :op1-of ( and :arg0-of ( fall :arg1 ( slash :arg0 half :arg1 ( price :arg1 ore )  )  :arg2 ( percentage-entity :value 40 )  )  :op2 coal :op3 copper :op4 ( commodity :mod other )  )  )  :arg1-of stall :arg2 iron )  )
arrive :arg1 refuge :arg4 ( country :name ( name :op1 weimar )  )
reach :arg0 ( person :arg0-of ( flight :arg1 tuesday :arg1-of ( long :arg0 afternoon :degree most )  )  :quant 49 )  :arg1 ( municipality :poss ( country :name ( name :op1 weimar )  )  )  :time after
and :op1 ( country :arg3-of ( come :arg1 refugee )  :name ( name :op1 syria )  :wiki syria )  :op2 ( country :name ( name :op1 albania )  :wiki albania )  :op3 ( country :name ( name :op1 afghanistan )  :wiki afghanistan )  :op4 ( country :name ( name :op1 macedonia )  :wiki republic_of_macedonia )  :op5 ( country :name ( name :op1 somalia )  :wiki somalia )
arrive :arg1 ( temporal-quantity :quant 6 :unit month )  :domain-of ( girl :mod old :source ( country :name ( name :op1 syria )  :wiki syria )  )  :mod young
confirm :arg0 ( government-organization :name ( name :op1 white :op2 house )  :wiki white_house )  :arg1 ( person :arg0-of ( visit :arg1 ( city :name ( name :op1 washington )  :wiki washington,_d.c. )  )  :name ( name :op1 xi :op2 jinping )  :wiki xi_jinping )
confirm :arg0 ( government-organization :name ( name :op1 white :op2 house )  :wiki white_house )  :arg1 ( state :arg1 tuesday )  :location ( temporal-quantity :unit ( month :arg1-of ( end :time-of ( visit :arg1 state :arg2 ( country :name ( name :op1 u.s. )  :wiki united_states )  :accompanier ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 china )  :wiki china )  :arg2 president )  :name ( name :op1 xi :op2 jinping )  :wiki xi_jinping )  )  )  )  )
state :arg1 ( and :op1 ( take :arg0 ( person :arg0-of ( visit :arg1 ( city :name ( name :op1 washington )  :wiki washington,_d.c. )  )  :name ( name :op1 xi )  :wiki xi_jinping )  :arg1 place )  :op2 25 :op3 reciprocate :op4 ( person :arg0-of ( trip :arg1 ( city :name ( name :op1 beijing )  :wiki beijing )  )  :arg0-of ( have-org-role :arg2 president )  :name ( name :op1 barack :op2 obama )  :wiki barack_obama )  )  :arg1-of ( say :arg0 ( person :arg0-of ( have-org-role :arg2 official )  :quant 1 )  )  :mod ( last :mod-of ( date-entity :month 11 )  )
host :arg0 ( and :op1 ( organization :name ( name :op1 first :op2 lady )  )  :op2 ( person :name ( name :op1 michelle )  :wiki michelle_obama )  :op3 ( person :arg1-of ( have-rel-role :arg0 person :arg2 wife )  :name ( name :op1 xi )  :wiki xi_jinping )  )  :arg1 ( and :op1 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 u.s. )  :wiki united_states )  :arg2 president )  :name ( name :op1 obama )  :wiki barack_obama )  :op2 ( person :name ( name :op1 peng :op2 liyuan )  )  )  :mod also :time ( after :op1 ( engage :arg2 ( talk :arg0 ( person :arg0-of ( lead :arg1 ( state :mod-of dinner )  )  :quant 2 )  :arg1 ( that :mod-of evening )  :mod bilateral )  )  )
add :arg0 ( person :arg0-of ( have-org-role :arg2 president )  :arg2-of ( enable :arg0 also :arg1 ( president :arg2-of ( have-org-role :arg0 ( person :arg0-of ( visit :arg1 ( expand :arg0 present :arg0-of ( range :arg1 globe :arg1-of ( cooperate :arg0 ( country :name ( name :op1 china )  :wiki china )  :arg2 ( and :arg0-of issue :op1 region :op2 bilateral )  )  :arg2 of )  :arg1 ( country :name ( name :op1 u.s. )  :wiki united_states )  )  :arg2 opportunity )  :arg0-of ( have-org-role :arg1 ' :arg2 president )  :name ( name :op1 xi )  :wiki xi_jinping )  )  )  )  :name ( name :op1 obama )  :op1-of ( and :arg2-of ( interest :arg0 mutual :arg1 while )  )  :wiki barack_obama )  :arg1-of ( state :arg0 ( person :arg0-of ( disagree :arg1 constructively )  :arg0-of ( address :arg1 area )  :name ( name :op1 xi )  :wiki xi_jinping )  )
expect :arg1 ( stop :arg0 ( person :arg0-of ( announce :arg1 ( visit :arg0 ( organization :mod-of ( organization :name ( name :op1 general :op2 assembly )  :wiki united_nations_general_assembly )  :name ( name :op1 u.n. )  :wiki united_nations )  :arg1 ( country :name ( name :op1 new :op2 york :op3 city )  )  )  :time ( date-entity :month 9 )  )  :name ( name :op1 xi )  :wiki xi_jinping )  :arg1 ( meet :arg0 ( person :arg0-of ( lead :arg1 ( country :name ( name :op1 u.s. )  :wiki united_states )  )  :prep-on way :quant several )  :arg1 tech :purpose ( city :name ( name :op1 washington )  :wiki washington,_d.c. )  )  :location ( country :name ( name :op1 seattle )  )  )  :time before
expect :arg0 ( person :arg1-of ( concern :arg0 ( city :name ( name :op1 washington )  :wiki washington,_d.c. )  :op1-of ( and :op2 ( allege :arg0 ( country :name ( name :op1 china )  :wiki china )  :arg1 ( water :arg1-of ( dispute :arg2 ( sea :name ( name :op1 south :op2 china :op3 sea )  :wiki south_china_sea )  )  )  )  :op3 ( increase :arg0 it :arg1 assertivenes )  )  :op1-of over )  :name ( name :op1 xi )  :op2-of ( and :op1 ( person :name ( name :op1 obama )  :wiki barack_obama )  )  :wiki xi_jinping )  :arg1 ( range :arg0 of :arg1 issue :arg1-of broach :arg2 contentious )
and :op1 440 :op2 ( write :arg1 ( car :arg1-of rent-out :mod sport :mod hp )  )
and :op1 ( want :arg0 old :arg1 ( fulfill :arg0 29 :arg1 dream )  )  :op2 ( rent-out :arg0 year :arg1 ( mustang :mod ( car-make :name ( name :op1 ford )  :wiki ford_motor_company )  )  )
get :arg0 he :arg1 ( awaken :arg1 ( motorway :mod wet )  :arg1-of rude )
hp :mod-of ( car :arg1-of ( drive :op1-of ( and :manner-of ( fulfill :arg0 you :arg1 ( dream :arg1 ( country :name ( name :op1 gotha )  )  )  :arg1-of ( allow :arg0 ( company :location district )  )  :manner ( rent :arg1 ( thing :arg1-of boss :name ( name :op1 v :op2 8 :op3 ford :op4 mustang )  )  )  )  )  )  :mod sport :quant 440 )
cause :arg0 ( year :source ( district :source-of old )  )  :arg1 that :arg2 29 :arg3 just
come :arg1 ( end :arg1 ( dream :arg1 71 )  )  :location ( motorway :arg1-of ( near :arg2 ( country :name ( name :op1 arnstadt )  )  )  )
and :op1 ( lose :arg0 old :arg1 ( control :arg1 ( car :mod sport )  )  )  :op2 ( get :arg0 29 :arg1 ( skid :arg1 ( road :mod wet )  )  )  :op3 ( drive :arg0 year :arg1 ( barrier :arg1-of crash )  )
contrast :arg2 ( injure :arg1 ( write :arg1 ( car :domain-of off :mod sport )  :arg2 - )  )
estimate :arg1 damage
switch :arg0 ( person :name ( name :op1 xavi )  )  :arg1 ( thing :arg0-of ( prevent :arg1 ( date-entity :year 2008 )  )  :name ( name :op1 pep :op2 guardiola )  )  :arg2 ( organization :name ( name :op1 fc :op2 bayern )  )
and :arg1-of ( play :arg0 ( person :mod ( continent :mod-of ( date-entity :year 2015 )  :name ( name :op1 europe )  :wiki europe )  :mod champion :name ( name :op1 xavi )  )  :arg2 ( organization :name ( name :op1 sport :op2 club )  )  :location ( country :name ( name :op1 qatar )  :wiki qatar )  :time ( since :op1 summer )  )  :op1 world
barcelona :arg1-of ( play :mod-of ( time :mod ( apparent :mod-of ( close :arg2-of ( commit :arg0 ( country :name ( name :op1 spain )  :poss-of superstar :wiki spain )  :arg1 few )  )  )  :quant-of ( temporal-quantity :unit year )  )  )
list :arg1 ( breathe :arg1 ( take :arg1 ( cup :arg0-of ( champion :arg1 ( world :mod club :mod-of champion )  :arg3 ( language :mod eight :mod-of champion :name ( name :op1 spanish )  :wiki spanish_language )  :mod 4 :op1-of league )  :mod 3 :mod-of winn )  :arg3 title :time ( time :mod ( champion :op1 ( continent :name ( name :op1 europe )  :wiki europe )  )  :mod-of ( world :mod-of champion )  )  )  )
and :op1 ( leave :arg0 old :arg1 ( thing :name ( name :op1 fc :op2 barcelona )  )  :time ( after :op1 ( temporal-quantity :quant 24 :unit year )  )  )  :op2 ( transfer :arg0 year :arg1 ( 35 :time then )  :arg2 ( country :name ( name :op1 qatar )  :wiki qatar )  :op1-of ( and :op2 ( club :arg1 summer :mod sport )  )  )
contrast :arg1 ( reveal :arg0 ( person :arg1-of ( ready :arg0 ( thing :name ( name :op1 european :op2 championship )  :op1-of ( before :mod just )  :time ( date-entity :year 2008 )  )  :arg2 ( leave :arg0 he :arg1 ( organization :name ( name :op1 barcelona )  )  )  )  :name ( name :op1 xavi )  )  :medium ( interview :arg0 ( person :name ( name :op1 marca )  )  :arg1 person )  :time now )
tell :arg0 i :arg1 that :arg2 ( i :arg1-of ( want :arg0 ( organization :name ( name :op1 &quot; )  )  :arg0-of sell )  )
say :arg0 he :arg1 ( and :op1 ( win :arg0 ( city :name ( name :op1 madrid )  :wiki madrid )  :arg1 we :arg2 - :time ( time :mod at )  )  :op2 everything )
notice :arg0 ( organization :name ( name :op1 fc :op2 bayern )  )  :arg1 that :mod too :op1-of and
mean :arg1-of offer
want :arg0 ( person :name ( name :op1 &quot; )  )  :arg1 i
remind :arg1-of ( quick :arg0 ( date-entity :season summer :year 2008 )  :arg2 ( organization :name ( name :op1 fc :op2 bayern )  :poss ( person :name ( name :op1 jürgen :op2 klinsmann )  )  )  )
reason :arg1-of ( transfer :arg0 ( person :name ( name :op1 xavi )  )  :polarity - )  :domain ( person :name ( name :op1 guardiola )  )
transfer
and :op1 ( work :arg1 ( man :mod crucial )  :arg1-of ( instead-of :arg0 ( thing :name ( name :op1 pep :op2 guardiola )  )  )  :arg2 ( champion :mod ( record :mod ( country :name ( name :op1 germany )  :wiki germany )  )  )  :time now )
and :op1 ( organization :name ( name :op1 xavi )  )  :op2 ( person :arg0-of ( sign :arg1 ( thing :arg1-of brilliant :arg1-of ( explain :arg0 ( person :name ( name :op1 xavi )  )  :mod-of why )  :name ( name :op1 xavi )  )  )  :arg0-of play :name ( name :op1 xavi )  )  :op3 i
tell :arg0 i :arg1 that :arg2 ( i :arg0-of ( transfer :arg1 ( he :arg0-of ( imagine :arg1 team :arg1-of ( possible :polarity - )  )  )  :arg2 i :polarity - )  :arg0-of recommend )
get :arg0 he :arg1 that :arg2 i
know :arg0 amr-unknown :arg1 amr-unknown :op1-of ( slash :arg0-of turn :op2 ( date-entity :year 2009 )  :op3 season :time ( date-entity :year 2008 )  )
and :op1 ( knock :arg0 ( person :arg0-of ( quarter :arg1 ( thing :name ( name :op1 champions :op2 league )  :prep-against ( organization :name ( name :op1 bayern )  )  )  :mod final )  :arg0-of ( cover :arg1 ( distance :arg0 1 :arg1 turf :degree entire :op1-of 1 )  :purpose ( organization :name ( name :op1 barça )  )  )  :name ( name :op1 xavi )  )  :arg1 ( organization :name ( name :op1 reds )  )  )  :op2 ( celebrate :arg0 4 :arg1 ( triumph :arg1 class :arg1-of ( premiere :arg0 0 )  )  :time end )
downplay :arg0 ( person :name ( name :op1 matt :op2 damon )  )  :arg1 diversity :location filmmak
say :arg0 ( person :arg0-of ( confront :arg1 film :mod damon )  :name ( name :op1 matt )  )  :arg1 ( need :arg0 it :arg1 ( discuss :arg0 during :arg1 diversity :arg2 ( person :name ( name :op1 brown )  :wiki gordon_brown )  )  :op1-of ( behind :mod-of scene )  :polarity - )
emphasize :arg0 ( she :arg0-of ( black :arg1 ( choose :arg0 ( person :name ( name :op1 brown )  :wiki gordon_brown )  :arg1 screenplay :op1-of project )  )  :arg0-of ( need :arg1-of ( regard :arg0 perspective :arg2 protagonist :polarity alternative )  )  )  :arg1 ( off :arg2-of ( cut :arg0 actor :arg1 ( season :arg0 ( sunday :time-of night )  :arg1 ( project :arg1 episode )  )  )  )
show :arg0 ( you :arg0-of ( do :arg1 it :polarity - )  )  :arg1 ( assert :arg0 damon )  :arg1-of ( cast :arg0 ( we :arg0-of ( talk :arg1 diversity :op1-of about )  :arg0-of ( cast :arg1 film :arg2 of )  )  )
offend :arg0 ( person :arg0-of ( let :arg1 ( okay :arg0 expressive :arg1 wow )  )  :arg0-of ( comment :arg1-of ( settle :arg0 actor :arg2 air )  )  :arg1-of react :arg1-of shock :name ( name :op1 brown )  :wiki gordon_brown )  :arg1 disbelief
show :arg1 ( discuss :arg0 and :arg1 finalist :arg1-of ( have-rel-role :arg0 ( person :arg0-of ( join :arg1 ( fellow :arg1-of ( produce :arg0 person )  )  )  :name ( name :op1 brown )  :op2-of ( and :op1 ( person :name ( name :op1 damon )  )  )  :wiki gordon_brown )  :arg2 brother )  )
say :arg0 ( person :arg1-of ( treat :arg0 they :arg1-of ( have-org-role :arg0 ( person :arg1-of ( urge :arg0 ( i :arg0-of ( think :arg1 amr-unknown :arg2 about )  )  :arg2 whoever )  )  :arg2 director )  :op1-of of :op1-of character )  :name ( name :op1 brown )  :wiki gordon_brown )  :arg1 harmony :time initial
hook :arg1 ( hit :arg0 character :arg1 pimp :arg1-of ( get :arg0 ( she :poss-of white )  )  :arg1-of ( black :mod only )  )
push :arg0 ( person :arg1-of produce :mod white :op1-of ( and :arg1-of ( want :arg0 ( we :arg0-of ( do :arg1 something )  )  :concession-of ( give :arg1-of end :arg1-of ( possible :arg1-of direct )  )  :polarity - )  :arg1-of retort :arg1-of ( direct :mod right )  :op2 film )  :op1-of ( and :op2 angelo )  )  :arg1 dear :arg2 finalist
comment :arg1 ( discuss :arg1 society :arg1-of disapprove :arg1-of air :arg1-of ( explode :arg0 media )  :time after )
anger :arg0 ( he :arg0-of ( cause :arg1 ( possible :arg1 ( explain :arg0 ( person :mod only )  :arg1-of ( speak :arg0 ( person :arg0-of ( write :arg1 clip )  :name ( name :op1 twitter )  )  :op1-of over )  :mod-of diversity :purpose-of ( hurt :arg0 she :arg1 it :arg2 ( white :mod so )  )  )  )  )  :part room )  :arg1 ( express :arg0 ( person :name ( name :op1 twitter )  )  :arg1 toward :arg2 ( person :arg0-of ( use :arg1 ( product :name ( name :op1 twitter )  :wiki twitter )  )  )  )
and :op1 ( earn :arg0 tweet :arg1 more )  :op2 ( like :arg1 retweet :time ( since :op1 post )  )
representation :arg0 racial :arg1 ( discuss :arg0 media :arg1 ( society :mod of :mod forefront )  :arg1-of ( comment :arg0 ( person :arg1-of come :name ( name :op1 damon )  )  )  )  :arg2 time :manner accurate
halt :arg0 ( and :arg1-of ( urge :arg0 ( movement :arg0 ( organization :name ( name :op1 black :op2 lives :op3 matter )  )  :arg0-of ( effect :arg1 ( date-entity :year 2014 )  :mod nationwide :time ( after :op1 ( kill :arg0 ( officer :arg2-of ( have-org-role :arg0 ( person :mod color )  :arg1 police )  :mod white )  :arg1 ( person :mod teen :name ( name :op1 michael :op2 brown )  )  )  )  )  )  :arg2 lawmaker )  :op1 authority )  :arg1 ( practice :arg1-of discriminate )
allude :arg0 ( person :arg0-of sing )  :arg1 ( prince :arg0-of ( introduce :arg1 ( thing :arg1-of ( nominate :arg2 ( album :time year )  )  )  )  :arg1-of award )  :arg2 movement
say :arg0 he :arg1 ( matter :mod still :mod album )
matter :arg1 album :arg1-of ( resemble :arg2 ( and :op1 book :op2 ( life :arg1-of black )  )  )  :mod still
state :arg0 ( person :arg0-of ( live :arg1-of matter :arg1-of ( movement :arg0 hasselbeck )  )  :arg0-of ( hate :arg1 group :arg1-of ( consider :arg0 ( ' :arg1-of question )  )  )  :arg0-of ( lead :arg1 ( recent :degree more )  )  :arg0-of ( respond :arg1 ( broadcast-program :mod-of personality :name ( name :op1 fox :op2 news )  :wiki fox_news_channel )  )  :arg1-of ( black :arg0 of )  )  :arg1 ( recommend :arg1 group :arg4 wheth )  :arg1-of release
say :arg0 ( person :arg0-of lead )  :arg1 ( live :arg1 ( matter :arg0-of ( love :arg1 group )  :arg1 ( network :wiki american_broadcasting_company )  )  :arg1-of black )
list :arg0 1 :arg1 of :arg2 ( person :arg0-of ( produce :arg1 ( discuss :arg0 pope :arg1 portrayal :arg1-of ( visit :arg0 ( person :arg0-of ( announce :arg1 recent )  :name ( name :op1 damon )  )  )  :arg2 ( world-region :name ( name :op1 west )  :wiki western_world )  :mod-of ( religious-group :name ( name :op1 catholic :op2 church )  :wiki catholic_church )  )  )  :arg1-of ( invite :arg0 mogul )  :op2-of ( and :op1 entertainer :op3 media )  )
or :op1 ( accept :arg0 he :arg1 ( invite :arg0 ( pope :arg1-of ( clear :polarity - )  )  )  :op1-of wheth )  :op2 ( meet :time already :arg0 he )
crown :arg1 warrior :arg2 champion
become :arg1 ( and :op1 ninja :op2 warrior :op3 monday )  :arg2 athlete :purpose ( win :arg0 ( climb :arg1 1 :mod ( pro :mod-of rock )  )  :arg1 ( thing :mod busboy :name ( name :op1 isaac :op2 caldiero )  )  :manner ( take :arg0 night :arg1 ( prize :mod grand :wiki - )  :arg4 home )  )
see :arg0 ( show :arg0-of ( wrap :arg1 ( season :mod 7th )  :mod just )  :arg1 compete )  :arg1 ( complete :arg0 ( person :arg0-of compete :mod any :poss-of obstacle )  :arg1 ( stage :mod all )  )
cameraman :mod-of ( person :name ( name :op1 geoff :op2 britten )  :op4-of ( and :op1 ( finale :mod season )  :op2 ( man :quant 2 )  :op3 ( person :name ( name :op1 caldiero )  )  :op5 ( round :mod final )  )  )
task :arg0-of ( climb :arg1 ( rope :mod ( foot :op1-of 75 )  )  )  :arg1-of ( involve :arg0 ( 30 :quant-of ( temporal-quantity :unit second )  )  )  :mod final
howev :mod ( stage :arg1-of ( finish :arg0 ( person :arg0-of ( go :arg1 ( ever :mod-of athlete )  :arg1-of ( complete :arg0 first )  :arg1-of ( challenge :mod-of time )  )  :name ( name :op1 britten )  )  :arg2 ( challenge :arg1 ( fast :mod ( full :mod-of ( temporal-quantity :quant 3 :unit second )  )  :mod-of winn )  )  )  :mod ( gruel :mod ( warrior :mod ( ninja :arg1-of complete )  )  )  :mod-of 4 )
win :arg0 ( person :arg0-of ( speak :arg1 still :arg2 e )  :name ( name :op1 caldiero )  )  :arg1 ( prize :mod grand :wiki - )  :arg1-of ( shock :arg0 1 :time after )  :arg2 ( fight :arg1 victory :arg1-of hard )
mean :arg1 it :arg2 ( think :arg0 i :arg1 ( or :op1 ( live :arg0 ( i :arg0-of ( tell :arg1 e :arg2 ( he :arg0-of bump :arg0-of ( pay :arg1 of :mod serious )  )  :degree more :time isaac :time year :time expressive )  )  :arg1 ( off :arg2-of ( resemble :arg1 nev )  )  )  )  :arg2-of ( amaze :arg0 ' :arg1 about )  )
cause :arg1 ( go :arg0 ( i :arg0-of ( know :arg1 future :arg2-of ( resemble :arg1 it )  :polarity - :polarity - )  :arg0-of ( imagine :arg1 even )  :arg2-of ( resemble :arg1 ( sudden :quant all )  )  )  :arg1 amr-unknown )
and :arg0-of ( discuss :arg1 ( money :arg1-of ( award :polarity - )  :mod ( any :mod-of ( prize :wiki - )  )  )  :arg1-of ( produce :arg0 executive )  :arg1-of ( report :arg0 ( city-district :name ( name :op1 hollywood )  :wiki hollywood )  :arg2-of ( sit :arg1 ( person :arg0-of ( compete :arg1 ever :mod first )  :arg0-of ( finish :arg1 course )  )  :arg1-of weed :direction down )  )  )  :op1 finale :op2 why :op3 despite
go :arg1 money :arg3 rule :arg4 ( person :mod ( fast :degree most )  )
say :arg0 ' :arg1 ( weed :arg0 there :arg1 ( get :arg0 ( fast :degree most :mod-of time )  :arg1 it :arg1-of ( finish :arg0 1 :degree more )  )  )
and :op1 ( change :arg0 ( money :compared-to-of much :domain-of ( prize :arg1-of wonderful :wiki - )  )  :arg1 life :arg2 ( gratification :domain he :mod great )  )
ill :arg0 ( he :arg0-of ( harbor :arg1 about )  :arg1-of ( think :arg0 i :polarity - )  )  :arg1 any
cause :arg0 ( he :arg0-of ( do :arg1 ( he :arg0-of ( do :arg1 happy )  )  )  )  :arg1 just
receive :arg0 he :arg1 ( accolade :mod-of fan )  :op1-of ( mass-quantity :unit ton )
and :op1 he :op2 ( guy :mod ( great :mod such )  )  :op3 ( man :op1-of family )
and :op1 hero :op2 kid :op3 ( person :arg0-of ( have-rel-role :arg1 he :arg2 wife )  )
say :arg0 ( person :arg0-of ( beat :arg1 someone :arg2 ( i :arg1-of ( glad :arg0 it :arg2 isaac )  )  )  :name ( name :op1 geoff )  )  :arg1 i :arg2 i
think :arg0 i :arg1 ( way :arg1-of same :arg1-of ( feel :arg0 ( person :arg0-of ( reverse :arg1 they :arg2 role )  :name ( name :op1 isaac )  )  )  )  :op1-of and
renew :arg1 ( organization :name ( name :op1 america :op2 ninja :op3 warrior )  )  :arg2 ( season :arg0-of ( begin :arg1 ( film :arg1 ( spring :time ( date-entity :year 2016 )  )  )  )  :mod eighth )
tiptoe :arg0 ( organization :name ( name :op1 detroit :op2 tigers )  )  :arg1 ( twin :arg1 ( state :name ( name :op1 minnesota )  :wiki minnesota )  :time past )
the :mod ( country :name ( name :op1 minneapolis )  )  :mod-of ( half :mod-of ( season :location ( city :location-of ( fun :quant ( lot :quant-of ( of :polarity - )  )  )  :mod-of tiger :name ( name :op1 detroit )  :wiki detroit )  )  )
good :degree most :domain baseball :domain ( thing :location-of ( place :mod last :time now )  :name ( name :op1 american :op2 league :op3 central )  :poss once )  :mod-of ( organization :name ( name :op1 tigers )  )  :mod-of team
thing :arg0-of spoil :arg1-of ( reduce :arg0 ( organization :arg0-of ( play :manner ( perfect :arg1 tuesday )  )  :arg0-of ( beat :arg1 ( organization :name ( name :op1 minnesota :op2 twins )  )  :arg2 ( country :name ( name :op1 target :op2 field )  )  )  :name ( name :op1 tigers )  )  )
astro :arg2-of ( climb :arg1 ( game :mod ( half :quant 1 )  )  :arg1-of ( chance :arg0 ( spot :mod wild :mod ( thing :name ( name :op1 american :op2 league )  )  :mod card )  :arg1-of ( squander :arg0 ( organization :name ( name :op1 twins )  )  )  )  )  :location ( city :name ( name :op1 houston )  :wiki houston )
cause :arg0 elusive :arg1 ( return :arg0 it :arg1 ( much :quant-of ( season :poss-of half )  )  :arg4 ( city :location-of night :location-of only :name ( name :op1 detroit )  :wiki detroit )  :purpose-of ( word :mod ( aircraft-type :name ( name :op1 f22 )  :op1-of ( letter :quant 3 )  :wiki lockheed_martin_f-22_raptor )  )  )
say :arg0 ( person :arg1-of ( manage :arg0 ( organization :name ( name :op1 &quot; )  )  )  :arg2-of ( happen :arg0 it :arg1 amr-unknown )  :name ( name :op1 &quot; )  )  :arg1 ( matter :arg1-of ( win :arg0 all :arg2 fun )  :polarity - )
and :op1 ( tack :arg1 ( city :arg0-of ( score :arg1 ( person :arg0-of ( pitch :arg1 ( organization :name ( name :op1 tigers )  )  )  :arg1-of ( hold :arg0 ( offense :arg0 ninth :arg1 more )  :arg2 ( support :arg1 3 )  :mod early )  :name ( name :op1 alfredo :op2 simon )  )  :arg3 ( inning :quant 2 )  )  :name ( name :op1 detroit )  :wiki detroit )  :time then )  :op2 sixth
and :op1 ( pitch-in :arg0 ( person :arg0-of ( run :arg1 6 :quant 3 )  :name ( name :op1 simon )  :wiki - )  :arg1 ( inning :op1-of ( slash :quant 1 )  :quant 3 )  )  :op2 allow
start :arg1 ( outing :mod past :quant 9 )  :domain it :mod quality :time only
say :arg0 ( person :name ( name :op1 simon )  :wiki - )  :arg1 year :arg1-of ( want :arg0 i :arg0-of ( finish :arg1 ( strong :arg1 this )  )  :mod just )
and :arg1-of ( want :arg0 ( i :arg0-of ( go :arg1 game :arg1-of deep )  )  :arg0-of ( hard :arg1 it )  )  :op1 ( throw :arg0 bullpen :arg1 every :op1-of game )
and :op1 ( hit :arg1 ( 8 :mod mid :op1-of ( since :time-of rbi )  )  )  :op2 ( drive :arg0 ( person :arg0-of ( designate :arg1 ( organization :name ( name :op1 tigers )  )  )  :mod hitt :name ( name :op1 victor :op2 martinez )  )  :arg1 ( run :arg1 3 :quant 2 )  )
mariner :poss ( he :arg0-of ( hit :arg1 3 :arg2 it )  :arg0-of ( hit :arg1 4 )  :poss-of ( 6 :day-of ( date-entity :month 7 )  )  :poss-of since :poss-of night )
say :arg0 ( he :arg0-of swing :arg0-of ( bat :arg1 well )  )  :arg1 ( person :name ( name :op1 &quot; )  )
notice :arg1 ( look :arg0 ( he :arg0-of ( look :arg1 ( practice :arg1 right :arg1-of bat )  :arg2 good :op1-of ( and :op2 ( carry :arg0 he :arg2 game )  )  )  )  :arg1 ( company :name ( name :op1 bp )  :wiki bp )  :arg2 good )
seventh :mod-of ( inn :arg0-of ( run :arg1 ( back :manner-of game )  :arg1-of ( trail :arg0 ( organization :arg0-of ( chance :arg1 3 :arg2 ( good :degree most )  )  :name ( name :op1 twins )  )  )  )  :poss-of bottom )
left :mod-of ( field :arg2-of ( lead :arg0 ( person :arg0-of ( field :arg1 center )  :name ( name :op1 byron :op2 buxton )  )  :arg1 inn )  :mod-of ( line :direction ( down :direction-of double )  )  )
lift :arg1 ( thing :arg1-of ( hand :arg0 left )  :name ( name :op1 blaine :op2 hardy )  )  :op1-of ( before :time-of ( swing :arg2-of ( strike :arg0 ( person :arg0-of ( get :arg1 ( person :name ( name :op1 brian :op2 dozier )  )  :op2-of ( and :op1 ( reach :arg0 ( person :arg1-of field :mod right :name ( name :op1 aaron :op2 hicks )  )  :arg1 ( bunt :arg1-of ( single :arg0 baseman )  )  )  )  )  :name ( name :op1 simon )  :wiki - )  )  )  )
drew :op4-of ( name :name-of ( thing :arg1-of ( leave :arg0 ( person :arg0-of ( run :arg1 2 )  :arg0-of walk :name ( name :op1 mauer )  )  :arg2-of single )  :arg2-of ( rip :arg0 ( person :arg1-of ( designate :arg2 ( person :mod hitt :name ( name :op1 miguel :op2 sano )  )  )  :mod rookie :op1-of ahead )  :arg1 ( he :arg0-of ( face :arg1 ( man :mod only )  )  )  )  )  :op1 right :op2 - :op3 hander :op5 verhagen )
get :arg0 ( person :name ( name :op1 verhagen )  )  :arg1 ( person :arg0-of ( pair :arg1 runner :op1-of ( and :op2 ( run :arg1-of tie )  )  )  :mod baseman :name ( name :op1 trevor :op2 plouffe )  )  :arg2 ( play :mod double )  :destination ground
dp :arg2-of ( hit :arg0 ( season :mod this )  :arg1 ( it :domain-of ( time :arg1-of ( lead :arg0 league :arg1-of major )  :mod 27th )  )  )
ninth :arg2-of ( rip :arg0 ( person :name ( name :op1 mauer )  )  :arg1 gap :mod double :time ( after :op1 ( tack :arg0 ( city :name ( name :op1 detroit )  :wiki detroit )  :arg1 ( insure :arg1 ( thing :name ( name :op1 rbi )  )  :arg1-of ( run :arg0 ( person :mod close :name ( name :op1 bruce :op2 rondon )  )  :location top )  )  )  )  )
strike :arg0 right :arg1 ( pitch :quant 3 )  :arg2 hand :purpose ( save :mod fifth )
advantage :part-of ( person :arg0-of ( go :arg4 ( city :name ( name :op1 detroit )  :wiki detroit )  :degree early )  :arg1-of rust :name ( name :op1 phil :op2 hughes )  )
cause :arg0 ( inflammation :arg1-of low :mod back )  :arg1 ( miss :arg1 ( temporal-quantity :op1-of more :unit month )  :op1-of ( after :time-of ( come :arg0 ( inning :quant 2 )  :arg1 ( person :arg0-of ( have-org-role :arg1 ( organization :arg0-of ( post :arg1 run )  :name ( name :op1 tigers )  )  :arg2 veteran )  :arg0-of ( right :arg1 hand )  )  :time ( before :op1 game :time-of ( list :arg1 3 :arg1-of disable )  )  )  )  )
contrast :arg1 ( execute :arg0 i :arg0-of ( pitch :arg1 there )  :arg1 some :arg1-of obvious :arg1-of start :arg1-of possible :arg2 pretty :polarity - )  :arg2 ( comfortable :arg1 ( go :arg0 ( i :arg0-of ( feel :arg1 good :op2-of ( and :arg1-of ( say :arg0 i :arg2-of ( resemble :arg1 hugh )  )  :op1 along )  )  )  :arg1-of ( feel :arg0 i )  )  :arg2 inn :degree more )
give :arg0 ( person :arg1-of ( batter :arg0 leadoff )  :name ( name :op1 hushes )  )  :arg1 ( single :arg1 baseman )  :arg2 ( person :name ( name :op1 ian :op2 kinsler )  )  :time after
bring :arg0 ( walk :arg1 ( thing :arg1-of ( field :arg2 right )  :name ( name :op1 j.d. :op2 martinez )  )  )  :arg1 ( thing :arg0-of ( single-out :arg1 middle :purpose ( run :arg0 2 :arg1 game )  )  :name ( name :op1 victor :op2 martinez )  )
snap :arg0 ( person :name ( name :op1 victor :op2 martinez )  )  :arg1 ( streak :arg1 runner :mod 21 :mod 0 )  :arg3 ( position :arg1-of score )
contrast :arg1 ( follow :arg1 ( person :arg0-of ( score :arg1 run )  :arg1-of right :mod baseman :name ( name :op1 nick :op2 castellanos )  )  )  :arg2 ( single :arg1 another )  :manner ( try :arg0 ( person :arg1-of throw :name ( name :op1 victor :op2 martinez )  )  :arg1 ( advance :arg1 third :purpose ( end :arg1 threaten )  )  )
add :arg0 ( organization :name ( name :op1 tigers )  )  :arg1 2 :arg2 ( single :arg1 ( field :arg0 ( out :mod one )  :arg1 ( thing :name ( name :op1 anthony :op2 gose )  )  :location center )  :op3-of ( and :op1 double :op2 ( thing :arg1-of catch :name ( name :op1 james :op2 mccann )  )  )  )
say :arg0 ( person :arg1-of manage :arg1-of ( twin :arg0 ( hit :arg0 big )  )  :name ( name :op1 &quot; )  )  :arg1 that
contrast :arg0 ( he :arg0-of ( get :arg1 ( hit :arg0 he :arg1 - )  )  :arg1-of ( right :arg0 spot )  )  :arg1 particular
pitch-in :arg1 ( inn :mod scoreles )  :time ( before :op1 ( replace :arg0 ( thing :name ( name :op1 a.j. :op2 achter )  :purpose ( relieve :arg1 ( hand :arg1-of right )  )  )  :arg1 ( count :arg1 pitch )  )  )
charge :arg1 4 :op1-of ( and :op2 ( run :arg1 ( hit :quant 6 )  )  :op3 ( walk :arg0 3 :arg2 strikeout )  )
shut-down :arg0 ( person :mod ( thing :name ( name :op1 tigers :op2 rhp )  )  :name ( name :op1 anibal :op2 sanchez )  )  :arg1 note :manner ( strain :location ( shoulder :arg1-of throw )  :wiki influenza_a_virus_subtype_h5n1 )
dr. :arg1-of ( jam :arg0 ( he :arg0-of ( examine :arg1 ( person :name ( name :op1 sanchez )  :wiki mark_sanchez )  )  :arg0-of ( perform :arg1 ( surgery :arg0 back :arg1 shoulder )  :time ( date-entity :year 2007 )  :time andrew )  )  )
schedule :arg1 ( activate :arg0 ( person :arg0-of ( list :arg1-of disable :arg2 ( strain :mod shoulder :time ( since :op1 ( 8 :mod mid )  )  :wiki influenza_a_virus_subtype_h5n1 )  )  :name ( name :op1 sanchez )  :wiki mark_sanchez )  :arg1 ( start :arg1 wednesday )  )
come :arg0 ( person :mod-of out :name ( name :op1 sanchez )  :wiki mark_sanchez )  :arg1 ( person :mod ( thing :name ( name :op1 lhp )  )  :name ( name :op1 daniel :op2 norris )  )  :purpose ( start :arg0 ( country :name ( name :op1 dl )  )  :arg1 ( organization :name ( name :op1 twins )  )  )
thing :mod-of ( person :arg1-of ( trade :arg2 7 :arg2-of ( acquire :arg0 4 :arg1 ( organization :arg1-of ( start :arg0 ( person :name ( name :op1 norris )  )  :time 30 )  :name ( name :op1 tigers )  )  :op1-of since )  )  :name ( name :op1 david :op2 price )  )  :name ( name :op1 lhp )
strain :arg0 he :arg1 right :arg2 20 :manner ( since :op1 ( date-entity :month 8 :op1 oblique )  )
wrap :arg0 ( and :op1 ( organization :name ( name :op1 tigers )  )  :op2 ( organization :name ( name :op1 twins )  )  )  :arg1 ( series :arg0-of ( field :arg1 wednesday :arg1-of target )  :mod ( game :quant 3 )  )
thing :name ( name :op1 era )  :quant ( thing :mod-of ( person :arg1-of ( oppose :arg0 ( person :name ( name :op1 norris )  )  )  :name ( name :op1 ervin :op2 santana )  )  :name ( name :op1 minnesota :op2 rhp )  )
give :arg1 accommodation :arg2 ( hundred :mod refugee )  :location ( country :name ( name :op1 wiesbaden )  )
hundred :arg1-of ( carry :arg0 ( train :poss-of ( way :manner-of ( name :op1 hesse )  )  )  )  :mod refugee
expect :arg1 ( arrive :arg0 they :arg1 wednesday :arg4 night )
state :arg0 ( person :arg0-of ( travel :location there )  :arg1-of ( house :arg2 ( thing :arg2-of ( shelter :location ( country :name ( name :op1 wiesbaden )  )  )  :mod emergency )  :location evening :time then :time tuesday :time city )  )  :arg1-of say
and :op1 ( estimate :arg0 ( they :arg1-of ( arrive :arg0 refugee :arg2 450 )  )  :arg1 750 )
prepare :arg0 ( number :quant-of ( hall :location ( thing :mod-of capital :name ( name :op1 hessian )  )  :mod sport )  )  :arg1 ( eventuality :mod this )  :time ( last :mod-of ( day :unit-of ( temporal-quantity :op1-of few )  )  )
possible :arg1 ( provide :arg0 this :arg1 ( refugee :arg1-of ( up :arg0 1000 )  )  :arg2 ( accommodation :duration temporary )  )
recommend :arg1 ( redistribute :arg1 they :arg2 ( community :mod other )  :time ( after :op1 this )  )
state :arg0 ( person :arg0-of ( responsible :arg1 ( reception :mod initial )  )  :arg1-of ( arrive :arg4 ( country :name ( name :op1 giessen )  :name ( name :op1 hesse )  )  :duration ( temporal-quantity :op1-of past :unit day )  )  )  :arg1 ( council :mod region )  :arg1-of say :arg2 alone :time ( date-entity :year 7500 )
and :arg1-of ( shelter :arg2 ( thing :mod emergency )  )  :op1 due :op2 ( hall :mod sport )  :op3 ( country :mod-of ( refugee :quant ( number :mod large )  )  :name ( name :op1 frankfurt )  )  :op4 ( city :mod also :name ( name :op1 hanau )  :wiki hanau )
action :location ( country :location-of ( person :name ( name :op1 ischinger )  )  :name ( name :op1 syria )  :wiki syria )  :mod military :poss ( country :location-of option :name ( name :op1 germany )  :wiki germany )
believe :arg0 ( person :arg0-of ( head :arg1 ( organization :name ( name :op1 munich :op2 security :op3 conference )  )  :arg1-of ( participate :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg2 ( country :location-of ( action :mod military )  :name ( name :op1 syria )  :wiki syria )  )  )  :name ( name :op1 wolfgang :op2 ischinger )  )  :arg1 possible
say :arg0 ( he :arg1-of ( take :arg0 military :arg1-of ( recommend :arg0 action )  :arg2 place :arg3 ( consider :arg0 ( i :arg0-of ( determine :arg1 course )  :arg0-of ( believe :arg1 that )  )  :arg1 of :arg2 about )  :polarity - )  )  :arg1 ( country :name ( name :op1 germany )  :wiki germany )
accuse :arg0 ( he :arg0-of ( look :arg1 collective :mod ( other :mod-of way )  )  )  :arg1 ( continent :location-of nation :name ( name :op1 europe )  :wiki europe )
pass :arg0 ( temporal-quantity :quant 4 :unit year )  :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2-of ( involve :arg0 military :arg1 ( chalice :beneficiary-of happy )  )
say :arg0 ( he :arg2-of ( come :arg0-of ( crash :arg1 down :arg2 ( front :op1-of door )  )  :arg1 we :arg2-of conflict :time now )  )  :arg1 ( country :mod-of ( world :mod-of service )  :name ( name :op1 germany )  :wiki germany )
call :arg1 ( increase :arg1 ( aid :arg1 refugee :arg2 ( country :arg1-of ( have-org-role :arg0 ( city :name ( name :op1 washington )  :wiki washington,_d.c. )  :arg2 ambassador :time former )  :name ( name :op1 germany )  :wiki germany )  :mod international )  :arg1-of local :arg2 massive )  :mod also
and :op1 ( check :arg0-of ( run :arg2 ( country :name ( name :op1 austria )  :wiki austria )  )  )  :op2 east :op3 ( border :part south )
say :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 ( and :op1 east :op2 ( border :arg1-of ( check :arg0 ( country :name ( name :op1 austria )  :wiki austria )  :arg1-of ( introduce :degree ( more :degree once )  )  )  :part south )  )
state :arg0 ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 austria )  :wiki austria )  :arg2 ( minister :mod interior )  )  :name ( name :op1 johanna :op2 mikl-leitner )  )  :arg1 ( send :arg0 ( country :name ( name :op1 austria )  :wiki austria )  :arg1 nobody :arg2 ( country :name ( name :op1 hungary )  :wiki hungary )  :direction back :time current )  :medium channel :medium television :medium tuesday :time evening
send :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 ( refugee :quant any )  :arg2 ( country :name ( name :op1 austria )  :wiki austria )  :mod back
confirm :arg0 she :arg1 that :arg1-of agree :polarity -
say :arg0 ( person :arg0-of ( question :arg1 agree )  :name ( name :op1 mikl-leitner )  )  :arg1 ( hold :arg0 ( and :arg0-of ( discuss :arg1 ( matter :mod this )  )  :op1 ( director :arg2-of ( have-org-role :arg0 ( person :arg0-of ( represent :arg1 ( country :name ( name :op1 germany )  :wiki germany )  )  :arg0-of ( take :arg1 ( number :arg1-of specific :quant-of refugee )  :arg1-of possible :arg2 ( go :arg0 day :arg3 ( country :name ( name :op1 austria )  :wiki austria )  :arg4 ( country :name ( name :op1 germany )  :wiki germany )  )  )  )  :arg1 ( security :mod public )  :arg1-of general )  )  )  :time already )
and :op1 ( give :arg0 she :arg1 ( figure :arg1-of specific )  :polarity - )  :op2 ( refer :arg1 ( talk :arg1 wednesday :location ( city :name ( name :op1 berlin )  :wiki berlin )  )  )
arrive :arg1 ( ten :mod ( thousand :mod refugee )  )  :arg3 ( country :name ( name :op1 hungary )  :wiki hungary )  :arg4 ( country :name ( name :op1 austria )  :wiki austria )  :time ( over :arg0-of ( cause :arg1 ( route :arg1-of ( call :arg2 ( world-region :name ( name :op1 balkans )  :wiki balkans )  )  )  )  :op1 ( few :op1 ( temporal-quantity :unit ( day :mod last )  )  )  )
head :arg0 most :arg1 ( country :name ( name :op1 germany )  :wiki germany )
and :op1 ( state :mod other :quant ( number :quant together :quant-of ( government-organization :arg0-of ( govern :arg1 ( country :arg1-of ( have-org-role :arg0 ( person :name ( name :op1 angela :op2 merkel )  :op1-of ( and :arg0-of ( propose :arg1 ( summit :arg1-of special )  )  :beneficiary ( week :mod next )  :op2 ( colleague :mod ( country :name ( name :op1 austria )  :wiki austria )  )  :op3 ( person :name ( name :op1 werner :op2 faymann )  )  )  :wiki angela_merkel )  :arg2 chancellor )  :name ( name :op1 germany )  :wiki germany )  )  )  )  )  :op2 ( person :arg0-of ( head :arg1 ( organization :name ( name :op1 eu )  :part-of ( organization :name ( name :op1 cdu )  )  :wiki european_union )  )  )
start :arg1 ( impose :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 ( control :arg0 sunday :arg1 ( border :arg2 temporary )  )  )
possible :arg0 date :arg1 ( agree :arg1 ( state :mod ( organization :name ( name :op1 eu )  :wiki european_union )  )  :arg2 ( approach :arg1 crisis :mod common )  )  :polarity -
want :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  :arg2 ( minister :topic interior )  )  )  :arg1 ( attempt :arg0 9 :location ( redistribution :mod mandatory :quant-of ( refugee :mod ( further :mod tuesday )  )  )  :mod new )  :time ( meet :arg1-of ( special :arg0 22 :arg2 next )  )
want :arg0 ( government-organization :arg0-of ( view :arg1 ( flux :arg1 refugee :mod heavy )  )  :arg0-of ( govern :arg1 federal )  :arg1-of ( support :quant more )  )  :arg1 ( provide :arg0 ( person :arg1-of distribute )  :arg1 ( and :op1 ( reception :mod initial )  )  :arg2 state )  :location ( country :name ( name :op1 germany )  :wiki germany )
announce :arg0 state :arg1 ( discuss :arg0 tuesday :arg1 almost :arg1-of ( last :arg0 ( government-organization :arg0-of ( govern :arg1 federal )  :arg0-of ( manage :arg1 joint :mod this )  )  :arg2 ( temporal-quantity :quant 4 :unit hour )  )  :arg1-of ( have-org-role :arg0 ( city :arg0-of ( have-org-role :arg1 office :arg2 chancellor )  :name ( name :op1 berlin )  :wiki berlin )  :arg2 ( minister :mod prime )  )  :time ( after :time-of evening )  )  :time late
stress :arg0 ( person :arg1-of ( protect :arg1-of ( need :arg0 person )  )  :name ( name :op1 merkel )  )
contrast :arg2 ( possible :arg0 ( residency :arg1-of ( prospect :polarity - )  :mod permanent )  :arg1 ( stay :location ( country :name ( name :op1 germany )  :wiki germany )  )  :polarity - )
opine :arg1-of ( share :arg1-of general :arg1-of clear :mod also )  :mod this
stress :arg1 ( that :mod-of ( effort :mod huge :mod whole :mod ( country :arg1-of ( have-org-role :arg2 chancellor :time now )  )  )  )
stick :arg1 ( thousand :mod ( refugee :mod desperate )  )  :arg2 ( route :mod ( world-region :name ( name :op1 balkans )  :wiki balkans )  )  :time current
close :arg1 ( country :arg1-of ( border :arg1-of ( long :arg0 monday :arg2 km )  :arg2 ( country :name ( name :op1 serbia )  )  :quant 175 )  :name ( name :op1 hungary )  :wiki hungary )  :time night
announce :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :arg0-of ( seal :arg1 ( border :arg2 ( country :name ( name :op1 romania )  :wiki romania )  )  :manner fence :mod also )  :name ( name :op1 budapest )  )  )  )  :time ( late :op1 ( few :op1 ( temporal-quantity :unit hour )  )  )
belong :arg0 ( country :mod this )  :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  :time ( unlike :op1 ( country :arg1-of neighbor :name ( name :op1 serbia )  )  )
say :arg0 ( country :name ( name :op1 romania )  :wiki romania )  :arg1 ( country :arg0-of ( plan :arg0-of ( border :arg1 fence :mod new )  :mod about )  :arg1-of ( have-org-role :arg0 ( person :arg0-of ( smuggle :arg1 ( person :arg1-of ( prevent :arg0 ( want :arg0 ( country :name ( name :op1 hungary )  :wiki hungary )  :arg1 through )  )  )  )  :arg0-of ( find :arg1 ( alternative :mod-of route )  )  )  :arg2 ( minister :mod foreign )  )  :name ( name :op1 hungary )  :wiki hungary )
condemn :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 romania )  :wiki romania )  )  )  :arg1 plan :time immediate
take :arg0 ( person :arg0-of ( breach :arg1 fence )  :arg1-of arrest )  :arg1 place
say :arg0 ( report :arg0 eyewitness :arg1 ( country :name ( name :op1 turkey )  :wiki turkey )  )  :arg1 ( head :arg0 ( person :arg0-of migrate :quant more )  :arg1 ( border :source ( country :name ( name :op1 greece )  :wiki greece )  )  )  :mod meanwhile
probe :arg1 space :manner-of ( find :arg0 moon :arg1 ( planet :name ( name :op1 saturn )  :wiki saturn_[mythology] )  :arg2 enceladu :time ocean )
splash :arg0 moon :arg1 ( planet :name ( name :op1 saturn )  :wiki saturn_[mythology] )  :location ( globe :op1 ocean )  :op1-of enceladu :op3-of ( under :op1 icy :op2 crust )
deduce :arg0 ( person :arg0-of ( have-org-role :arg2 scientist )  :arg0-of ( observe :arg1 ( from :mod this )  )  )  :arg1 ( space :arg1-of ( probe :arg0 ( person :name ( name :op1 scientists )  )  )  )
wobble :arg0 ( moon :arg1-of ( orbit :arg0 ( planet :arg1-of ring )  )  )  :degree slight :subevent-of ( reason :domain this )
contrast :arg0 tuesday :arg1 minor :arg2 ( state :arg0 ( wobble :arg1 ( solid :arg0 only :arg1 ( body :mod celestial )  )  :mod this )  :arg1 ( much :degree ( too :degree nevertheles )  )  :arg1-of ( communicate :arg0 ( organization :location ( country :name ( name :op1 ithica )  )  :name ( name :op1 cornell :op2 university )  )  :arg2 ( country :name ( name :op1 us )  :poss-of ( state :location ( city :name ( name :op1 new :op2 york )  :wiki new_york_city )  )  :wiki united_states )  )  )
publish :arg1 science :manner-of ( find :arg0 scientist :arg1 thing :time journal )
crust :arg3-of ( know :arg0 it :arg1 ( long :arg0 ice :arg1 water )  :manner under :manner liquid )
cause :arg0 ( and :op1 ( water :arg1-of ( spew :arg0 volcano )  )  :op2 vapour :op3 ice :op4 ( call :arg0 ( person :arg0-of ( discover :arg1 ice :time already )  :name ( name :op1 &quot; )  )  :arg1 ( planet :arg1-of ( feed :arg0 particle )  :name ( name :op1 saturn )  :wiki saturn_[mythology] )  :arg2 ( moon :mod this :mod-of ( date-entity :year 2006 )  )  :op1-of ( ring :mod e :mod of :mod that )  )  )  :arg1 ( south :mod-of pole )
conclude :arg0 astonomer :arg2 ( pole :location-of ( sea :mod subsurface )  :part south )  :time time
clear :arg1 ( extent :mod ( ocean :arg1-of hide )  )  :polarity -
absent :arg1 ( city :name ( name :op1 munich )  :source ( temporal-quantity :op1-of several :unit week )  :time ( date-entity :year 1860 )  :wiki munich )
do :arg0 ( city :name ( name :op1 munich )  :wiki munich )  :arg1 ( attack :arg1 ( person :mod midfield :name ( name :op1 valdet :op2 rama )  )  )  :arg2 ( about :op1 ( temporal-quantity :unit month )  )  :time ( date-entity :year 1860 )
reveal :arg0 club :arg1 ( reveal :arg0 examine :arg1 ( suffer :arg0 27 :arg1 ( injure :arg1 adductor )  :arg2 old :time year )  )
complain :arg0 ( person :arg1-of pain :name ( name :op1 rama )  )  :time ( begin :arg1 week )
say :arg0 ( organization :name ( name :op1 according )  )  :arg1 ( probable :arg1-of ( break-up :arg0 4 :arg1-of ( compel :arg0 week )  )  :arg1-of mean )
bitter :arg1-of ( hit :arg0 it :arg2 ( hard :arg0 ' :arg1 rama )  )
think :arg0 ( we :arg0-of ( regard :arg1 ( attach :arg0 professional :arg1 club :arg1-of possible :arg1-of ( tell :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 &quot; )  )  :arg2 director )  :arg1-of ( sport :arg0 of )  :name ( name :op1 &quot; )  )  :arg2 newspaper )  :arg1-of ( engage :arg0 it )  :polarity - )  :arg2 amr-unknown )  )  :arg1 course :arg2 about
sexagenarian :arg0-of ( defend :arg1 ( guest :mod next :purpose train )  :domain-of present )
and :op1 ( play :arg0 ( thing :mod ( old :quant ( temporal-quantity :quant thirty :unit year )  )  :name ( name :op1 hrvoje :op2 cale )  )  :arg2 ( thing :arg1-of ( contract :mod former )  :name ( name :op1 vfl :op2 wolfsburg )  )  :location ( country :name ( name :op1 belgium )  :wiki belgium )  :manner last )
prove :arg0 moment :arg1 opportunity
follow :arg1 ( return :arg1 ( person :arg1-of score :name ( name :op1 rubin :op2 okotie )  )  :arg4 ( train :arg1 team :arg2 ( come :arg1 week )  )  )  :arg2 concussion :condition-of goal
recommend :arg0 ( thursday :arg1-of ( train :arg0 ( country :name ( name :op1 austria )  :wiki austria )  :arg2 ( run :arg1 back )  )  )  :arg1 international
sustain :arg0 ( person :name ( name :op1 okotie )  )  :arg1 ( injure :arg0 3 :arg1 ( collide :arg1 ( match :arg1 ( organization :name ( name :op1 fortuna :op2 dusseldorf )  )  )  :mod violent )  :arg1-of ( head :arg0 0 )  )
fear :arg1 - :time ( initial :arg1-of ( wound :domain-of serious )  )
contain :arg0 ( fruit :mod ( diet :polarity - )  )  :arg1 mango :arg2 ( lot :mod-of sugar-cane )
and :op1 juicy :op2 ( sweet :arg1 ( exotic :domain mango )  )
contrast :arg2 ( recommend :arg1 ( avoid :arg0 ( anybody :arg0-of ( watch :arg1 waistline )  )  )  )
cause :arg0 ( content :arg0-of ( high :arg1 sugar-cane :mod relative )  :mod-of ( primary :mod-of sucrose )  )  :arg1 mango
contrast :arg1 ( fruit :domain-of most :domain-of ( healthy :mod nevertheles )  :domain-of full :mod exotic :mod-of ( and :op1 ( location :mod-of ( vitamin :arg1-of ( contain :arg0 they )  )  :name ( name :op1 b )  :wiki - )  :op2 ( e :mod vitamin )  )  )  :arg2 ( and :op1 ( mango :quant all )  :op2 ( thing :name ( name :op1 vitamin :op2 a )  )  :op3 precursor :op4 ( beta :mod-of carotene )  )
and :op1 body :op2 ( process :arg1 metabolic :arg1-of eat :arg1-of sight :arg1-of ( boost :arg0 fruit )  :arg1-of ( immune :mod-of system )  )
recommend :arg1 ( and :op1 ( buy :arg1 mango )  :op2 ( or :op1 ( soft :arg1 they :polarity - )  :op2 ( firm :degree too :degree too )  )  :op3 ( recommend :arg1 ( pleasant :arg1 aroma )  )  )
tell :arg0 it :arg1 ( colour :arg1-of ( green :arg0 ( mango :arg1-of ( possible :arg1-of ( taste :arg0 delicious )  )  )  :mod even )  )  :arg1-of ( possible :polarity - )  :arg2 ( amr-unknown :arg1-of ( ripe :arg0 skin )  )  :arg3 fruit
recommend :arg1 ( and :op1 ( keep :arg1 they :arg2 ( temperature :mod room )  )  :op2 ( consume :duration ( few :op1 ( temporal-quantity :unit day )  )  )  )
or :op1 ( dish :arg1-of ( sweet :arg0 ( they :domain-of delicious )  )  )
give :arg0 mango :arg1 ( touch :arg1-of special :mod even )  :arg2 ( dish :mod savoury )  :mod also
bitter :degree slight :mod-of ( taste :arg0 such :arg1 ( salad :mod leaf :quant some )  :arg1-of ( mitigate :arg0 they )  :op1-of ( and :op2 chicory :op3 radicchio )  )
and :op1 ( go :arg0 ( and :op1 fish :op2 poultry :op3 lamb :op4 game )  :arg1 ( chutney :mod mango )  )
take :arg0 ( organization :arg0-of ( parcel :arg1 ( country :name ( name :op1 us )  :wiki united_states )  )  :mod service :name ( name :op1 ups )  )  :arg1 ( person :arg2-of ( staff :arg1 ( service :mod ( festival :name ( name :op1 christmas )  :wiki christmas )  )  :duration temporary )  :location ( country :name ( name :op1 usa )  :wiki united_states )  )  :mod again
report :arg1 ( organization :name ( name :op1 ups )  )  :arg2-of ( recruit :arg0 company :arg1 ( person :arg0-of ( work :arg1 tuesday )  :mod seasonal )  :arg1-of ( start :time already :arg0 company )  )
drive :arg0 ( person :mod particular )  :arg2 we
increase :arg0 ( organization :name ( name :op1 ups )  )  :arg1 ( work :arg1 ( season :mod ( day :quant 4 )  )  :arg0 organization )  :time ( year :unit-of ( temporal-quantity :op1-of few :op1-of past )  )
and :beneficiary ( temporal-quantity :op1-of several :unit year )  :op1 ( organization :name ( name :op1 ups )  )  :op2 ( person :arg0-of compete )  :op3 ( organization :name ( name :op1 fedex )  )  :op4 provision :op5 ( prepare :arg0 ( business :mod ( festival :name ( name :op1 christmas )  :wiki christmas )  )  :arg1 ( boom :arg0 light :arg1 ( business :mod online )  :arg2 early )  )
criticize :arg1 ( deliver :arg0 ( service :mod ( parcel :arg1 ( date-entity :year 2013 )  )  )  :time late )  :arg1-of harsh
storm :mod ( foehn :arg0-of ( pronounce :arg1 ( front :mod cold )  :domain-of then )  )
announce :arg0 ( organization :name ( name :op1 meteoschweiz )  )  :arg1 ( break-up :arg0 foehn :arg1 tuesday :location ( valley :location ( side :mod northen :mod alp )  )  )  :condition-of ( come :arg1 night )
foehn :arg0-of ( blow-up :path ( organization :mod sometimes :name ( name :op1 foehn :op2 valleys )  )  )  :arg0-of ( continue :arg1 ( force :mod gale )  :instrument wednesday :path night )
and :arg1-of ( bring :arg0 ( front :arg1-of ( cut :arg2 ( region :op1-of across :poss we )  :time ( die :arg0 thursday :arg1 foehn :arg3 away :op1-of ( once :poss-of heavy )  )  )  :mod prominent :mod cold )  )  :op1 rain :op2 ( wind :mod gusty )  :op3 ( drop :arg0 morning :location temperature )
say :arg0 ( country :name ( name :op1 meteonews )  )  :arg1 ( face :arg0 ( country :arg1-of ( pressure :arg1-of low :arg1-of ( bring :arg2 ( organization :name ( name :op1 british :op2 isles )  )  :time ( flow :arg1-of strong :mod southwest )  )  )  :name ( name :op1 switzerland )  :wiki switzerland )  :arg1 ( area :arg1-of extensive )  :time current )
break-up :arg0 foehn :arg1 valley :time ( night :poss-of ( alp :location tuesday :part ( side :mod north )  )  )
and :op1 ( person :name ( name :op1 uri )  :op1-of ( and :arg1-of ( increase :arg0 60 :arg2 ( blow-up :arg0 foehn :op1-of occasional :op1-of particular :path ( organization :location thursday :name ( name :op1 foehn :op2 valleys )  )  :time ( until :op1 morning )  :time then )  )  :op1-of slash :op2-of ( slash :op1 ( h :arg0-of ( gust :arg1 ( km :quant 100 )  :arg2 100 )  )  )  )  :poss-of canton )
possible :arg1 ( advance :arg1 foehn :arg2 ( midland :mod adjacent )  :location place :op1-of ( and :op2 ( mountain :mod-of ( force :mod gale )  )  :op3 wind :op4 ( possible :arg1 ( h :op2-of ( slash :op1 km )  :quant 120 )  :mod even )  )  )
begin :arg1 ( build :arg0 moisture :arg1 ( slope :arg0 27 :arg1 alp :location south )  )  :arg1-of while :purpose ( bring :arg0 ( foehn :mod stormy )  :arg1 ( temperature :mod ( summery :name-of wednesday )  )  :arg2 ( degree :time 23 )  :time north )
and :op1 ( start :arg0 here :arg1 ( rain :arg1 thursday )  )  :op2 ( continue :arg0 this :time ( until :op1 evening )  )
possible :arg1 ( expect :arg1 ( south :part-of alp )  :location place :purpose ( follow :arg0 litr :arg1 ( volume :mod large :mod-of ( rain :arg1 100 :arg1-of fall )  )  :arg2 ( rain :arg0 ( few :op1 ( temporal-quantity :unit ( day :mod last )  )  )  :arg1 ( metre :mod square )  )  )  :time ( over :op1 ( temporal-quantity :mod next :quant 48 :unit hour )  )  )
die :arg0 heavy :arg1 ( foehn :arg0-of ( result :arg1 ( rain :arg0 thursday :arg1-of ( roll :arg2 east :source west )  :frequency ( sometimes :time-of thundery )  )  :arg2 ( front :mod cold )  :op1-of ( country :name ( name :op1 switzerland )  :wiki switzerland )  )  )  :prep-on morning
stormy :arg1-of ( increase :arg1-of ( strong :domain wind :op1-of ( and :op2 ( decrease :arg0 ( front :mod cold )  :arg1 temperature :manner sharp )  :topic-of conjunction )  )  )
whereas :arg0-of ( follow :arg1 ( day :unit-of ( temporal-quantity :domain-of ( autumnal :location north )  :poss-of temperature )  )  :arg2 south :op1-of ( weekend :arg2-of ( warm :arg0 20 :arg1 temperature :op1-of 15 :op2-of ( and :op1 sunny )  )  )  :op1-of degree :op1-of ( 25 :quant-of degree )  )
square :location ( city :name ( name :op1 rome )  :wiki rome )  :mod ( person :name ( name :op1 martin :op2 luther )  )  :op1-of now :wiki -
reformation :op1-of ( after :time-of ( city :name ( name :op1 rome )  :wiki rome )  )  :poss-of ( temporal-quantity :op1-of ( some :mod-of now :mod-of ( person :mod-of ( square :wiki - )  :name ( name :op1 martin :op2 luther )  )  )  :quant 500 :unit year )
bestow :arg0 wednesday :arg1 ( square :arg1-of ( name :polarity - )  :location ( park :topic ( person :name ( name :op1 oppio :op2 hill )  )  )  :mod hitherto :mod-of ( person :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 city )  )  :arg2 mayor :arg3 presence )  :arg1-of ( reform :arg0 ( country :name ( name :op1 germany )  :wiki germany )  )  :name ( name :op1 ignazio :op2 marino )  )  )  :arg2 name
recognize :arg0 ( he :poss-of ( person :name ( name :op1 on )  )  :poss-of reformation )  :arg1 ( country :name ( name :op1 germany )  :poss-of theologian :wiki germany )  :time now
park :poss ( city :location ( country :name ( name :op1 colosseum )  :op1-of ( next :mod right )  )  :location-of centre-left :name ( name :op1 rome )  :wiki rome )
propose :arg0 ( consortium :location ( city :name ( name :op1 rome )  :wiki rome )  :mod ( church :mod ( thing :name ( name :op1 evangelical )  )  )  )  :arg1 ( choose :arg1 name )
recall :arg0 ( person :arg0-of ( have-org-role :arg1 of :arg2 minister )  :mod-of martin :name ( name :op1 jens-martin )  )  :arg1 wednesday :arg2 ( community :mod ( lutheran :mod evangelical )  )  :arg3 protestant :location ( city :name ( name :op1 rome )  :wiki rome )  :location ( city :arg1-of ( hide :arg0 often :mod-of faith )  :location-of pope )  :location ( that :mod-of ( temporal-quantity :unit century )  )
thing :arg1-of ( symbolize :arg0 ( tradition :arg1-of ( welcome :location ( city :name ( name :op1 rome )  :wiki rome )  )  :poss ( faith :mod ( religious-group :name ( name :op1 christian )  :wiki christian )  )  )  :duration visual )  :domain square
and :op1 ( person :arg1-of ( stay :arg0 ( date-entity :day 46 :month 15 :year 1483 )  :duration ( temporal-quantity :location ( turn :arg1 year )  :op1-of few :unit month )  :location ( city :name ( name :op1 rome )  :wiki rome )  :prep-as ( monk :mod ( thing :name ( name :op1 augustinian )  )  :mod young )  :time ( date-entity :year 1510 )  )  :name ( name :op1 martin :op2 luther )  )  :op2 ( date-entity :year 1511 )
consider :arg0 ( he :arg0-of ( degenerate :arg1 ( hotb :mod vice )  )  )  :arg1 city :time time
say :arg0 historian :arg1 ( possible :arg1 ( reinforce :arg1 ( impression :mod negative )  :arg3 ( fight :arg1 ( city :name ( name :op1 rome )  :wiki rome )  :time late )  )  )
herald :arg0 ( person :arg0-of ( sell :arg1 indulgenc )  :name ( name :op1 luther )  )  :arg1 ( begin :arg1 ( country :name ( name :op1 western :op2 church )  )  :arg2 thes )
invest :arg0 ( artist :mod talent )  :arg1 ( temporal-quantity :quant 3 :unit year )  :arg2 ( interpret :arg1 ( book :name ( name :op1 bible )  :wiki bible )  :arg1-of personal )
crown :arg1 ( paint :arg0 ( person :name ( name :op1 otmar :op2 alt )  )  :arg1 ( person :name ( name :op1 jesus )  :wiki jesus )  :arg1-of ( work :arg1-of major )  :arg2 ( book :name ( name :op1 bible )  :wiki bible )  )  :arg1-of gild :arg2 thorn
write :arg0 ( person :arg0-of ( update :arg1 ( text :poss ( book :name ( name :op1 bible )  :wiki bible )  )  )  :name ( name :op1 klaus :op2 altepost )  )  :arg1 introduce :op1-of and
begin :arg1 ( word :mode interrogative )
issue :arg0 - :arg1 ( person :name ( name :op1 otmar :op2 alt :op3 bible )  )  :arg2 ( picture :mod magnificent :mod-of - )  :time now
devise :arg0 ( person :name ( name :op1 otmar :op2 alt )  )  :arg1 ( interpret :arg1 ( story :mod biblical )  :arg1-of ( personal :arg0 picture )  :arg2 ( motif :op1-of ( and :arg1-of begin :op2 paper :op3 ( canvas :wiki - )  )  :quant 150 )  )
mean :arg1 synonymou :arg2 ( and :op1 ( person :arg1-of ( bright :arg0 ( he :arg1-of ( conceive :arg0 ( 75 :quant-of ( temporal-quantity :unit year )  )  :mod old )  :poss-of language )  )  :mod colour )  :op2 ( form :mod imaginative )  :op3 ( funny :mod picture )  )  :polarity -
appear :arg1 ( gloomy :domain ( they :arg0-of contrary )  :mod thorough )  :arg1-of ( possible :manner ( theme :arg1-of depend :mod respective )  )
subject :mod ( many :mod ( artistic :arg1-of ( choose :arg0 ( person :arg0-of ( work :arg1 ( he :poss-of ( book :name ( name :op1 bible )  :wiki bible )  )  )  :name ( name :op1 otmar )  )  :arg1-of ( subjective :arg0 ( he :poss-of ( book :mod of )  )  :arg2 perspective )  :op1-of around :op1-of ( book :wiki - )  :op3-of ( and :op1 project :op2 ( project :mod this )  :quant ( temporal-quantity :quant 3 :unit year )  )  )  )  )  :mod-of area
pray :arg0 ( person :name ( name :op1 lord )  :op2-of ( or :op1 commandment )  :wiki lord )  :arg1 ' :arg1-of ( cross :arg0 ( of :mod way )  )  :arg1-of ( dedicate :arg1-of ( evolve :arg1-of cycle )  :mod-of ( topic :mod such )  )  :arg1-of plague
publish :arg0 ( person :arg0-of ( work :arg1 immediate :arg1-of ( approach :arg0 ( he :arg0-of ( partner :arg1 ( person :name ( name :op1 kettler :op2 verlag )  )  )  )  :mod even )  :mod theological )  :arg2-of ( apply :arg1 this )  :name ( name :op1 luther :op2 verlag )  )  :arg1 ( book :arg1-of ( publish :arg0 multiple )  :topic art )  :arg1-of focus
and :op1 ( person :arg0-of author :arg1-of ( grapple :arg0 ( person :name ( name :op1 klaus :op2 altepost )  )  :arg2 ( passage :arg1-of ( base :arg2 paint )  :mod ( book :name ( name :op1 bible )  :wiki bible )  )  )  :mod particular :mod particular )
and :op1 ( person :arg0-of ( translate :arg1 day )  :arg1-of ( select :arg0 ( he :arg0-of ( text :arg1 ( book :name ( name :op1 bible )  :wiki bible )  )  :arg0-of ( interpret :arg1 ( topic :mod context :time current )  )  )  )  :name ( name :op1 he )  )
resemble :arg1 ( text :arg1 this )  :arg2 ( mirror :arg0 verbal :arg1 of :arg1-of paint )
embed :arg0 ( quotation :mod ( book :name ( name :op1 bible )  :wiki bible )  :mod original :op1-of ( and :op2 ( person :arg0-of ( formulate :arg1 ( concept :arg1-of personal )  :arg2 ( situation :mod respective )  :location here )  :name ( name :op1 martin :op2 luther )  )  :op3 ( compose :arg0 artist :mod each )  )  )  :arg1 they
letter :arg1 ( cover-up :arg0 book :arg1-of decorate )  :arg2 gold
and :mod ( both :op1 ( year :time-of ( allow :arg0 old :arg1 ( insight :arg1-of deep :mod twofold )  :manner 75 :time ( time :arg1-of same )  )  )  )  :op1 ( emotion :poss soul )
intimate :domain this :mod particular
and :op1 ( bear :arg1 ( strict :degree ( thing :name ( name :op1 protestant :op2 herrnhut )  )  )  :location ( country :name ( name :op1 wernigerode )  )  :location ( city :name ( name :op1 berlin )  :wiki berlin )  :time ( date-entity :year 1940 )  )  :op2 ( grow :arg0 ultimate :arg1 ( person :arg1-of ( come :arg3 ( family :arg0-of ( belong :arg1 ( key :arg1 ( trigger :arg0 emotion :arg1 ( project :mod ( book :name ( name :op1 bible )  :wiki bible )  )  )  )  )  )  )  :name ( name :op1 otmar :op2 alt )  )  )
shadow :arg0 ( place :arg1-of ( take :arg0 there :arg2 ( person :arg1-of ( remember :arg0 cane )  :name ( name :op1 &quot; )  )  :time education )  :op1-of under )  :arg1 of
cause :arg0 ( process :arg1 this :arg1-of ( try :arg0 i )  )  :arg1 ( possible :arg1 ( come :arg0 ( perhaps :mod that )  :arg1 ( person :mod again :name ( name :op1 lord )  :wiki lord )  :arg2 term :arg3 i )  )
advertise :arg0 today :arg1 loud :arg1-of ( shape :arg2-of ( move :arg0 ( he :arg0-of ( help :arg1 ( art :arg0-of ( take :arg1 more :arg2 ( place :arg1-of significant )  :mod more )  :arg1-of ( want :arg0 ( he :poss-of point )  )  )  :arg2 once )  )  :arg1 ( age :arg1 perceive :arg2 visual )  :mod this :op1-of fast )  :poss-of world )
drive :arg1 symbolism
joy :instrument-of ( present :arg0 artist :arg1 thing )  :op2-of ( and :arg1-of differ :op1 passion )
and :op1 ( decoration :domain they :polarity ( - :arg0-of ( picture :arg1 ( something :mod-of mystery )  :time always )  )  )
in :arg0-of ( respect :arg1 dinosaur :arg2 i :mod this )
impression :arg0 ( they :arg0-of leave )  :arg1 ( look :arg0 ( counterpart :wiki abdel_rahman_shalgham )  :arg1 it :mod picture :op2-of ( and :arg1-of ( experience :arg0 they )  :op1 ( discover :arg0 ( he :arg0-of ( let :arg2 picture )  :arg0-of ( want :arg1 ( person :name ( name :op1 otmar )  )  )  :arg0-of ( let :arg1 themselv :arg2 ( fall :arg1 into )  )  :arg1-of ( view :arg0 person )  )  :arg1 power )  )  )
mean :arg1 ( art :arg1-of ( see :arg0 ( he :arg0-of ( launch :arg1 ( alt :poss-of ( book :name ( name :op1 bible )  :wiki bible )  )  )  :arg0-of ( confess :arg1 tuesday )  :poss-of ( life :poss ( he :poss-of picture )  :poss i :poss way )  )  )  :arg1-of ( love :arg0 always )  :arg1-of resemble )
and :op1 ( person :arg0-of ( select :arg1 theme )  :arg1-of ( interest :arg0 also :arg2 ( record :arg0 only :arg1 ( whole :consist-of ( book :name ( name :op1 bible )  :wiki bible )  )  )  )  :name ( name :op1 alt )  )  :op2 ( significant :arg1 - )  :op3 ( mystery :degree most )  :quant most
say :arg0 ( partner :arg0 between :arg2 it :arg2-of ( collaborate :arg0 this :arg1 ( explain :arg0 text :arg1 ( result :arg1 ( book :name ( name :op1 bible )  :wiki bible )  :arg2 picture )  :mod mere )  :polarity - )  )  :arg1 ( and :op1 about :op2 picture )  :arg2 altepost
and :arg1-of ( free :arg1-of ( find :arg0 ( he :arg0-of ( add :arg1 depth )  :poss-of ( life :poss ( person :name ( name :op1 for )  )  :poss ( person :arg0-of ( work :arg1 this )  :arg1-of invite :name ( name :op1 for )  )  )  )  )  )
speak :arg0 ( person :arg0-of ( love :arg1 of )  :arg0-of ( responsible :arg1 möhl :mod that :mod well )  :mod-of alt :name ( name :op1 otmar )  )  :arg1 picture :arg3 ( language :mod biblical )
show :arg0 ( original :quant ( some :quant-of ( and :op1 paper :op2 ( canvas :wiki - )  :op3 ( person :name ( name :op1 otmar :op2 alt :op3 foundation )  )  )  )  )  :arg1 ( time :time-of ( open :time ( date-entity :arg1-of exhibit :month ( 11 :mod 15th )  )  )  )
draw :arg0 ( start :arg1 construct )  :arg1 close :arg2 ( organization :mod-of track :name ( name :op1 bmx )  )
contrast :arg1 ( model :arg0 ( plan :arg0-of ( finish :arg1 everything :time late :time nearly )  :arg1 ( company :arg0-of commission )  :arg1-of ( find :arg0 site )  )  :arg1 ( mound :arg0 even :arg1 circuit )  )  :arg2 ( close :arg1 ( track :arg1-of ( open :mod official :op1-of before :time year )  :mod ( organization :name ( name :op1 bmx )  )  )  :mod again )
cause :arg0 ( and :op1 politics )  :arg1 ( anger :arg1 ( failing :arg1-of ( administrate :arg0 particular )  )  )  :prep-with ( person :arg0-of reside :arg0-of ( want :arg1 ( put :arg1 track )  :polarity - )  )
permit :arg1 ( plan :arg1 ( and :arg1-of cause :op1 ( demolish :arg1 mound :purpose ( site :mod new )  )  :op2 ( begin :arg1 search )  )  :arg1-of ( apply :mod formal )  :time now )
inform :arg0 ( person :arg0-of ( have-org-role :arg2 councillor )  :arg0-of ( have-org-role :arg2 chief )  :arg1-of local )  :arg1 ( child :arg1-of possible )  :op2-of ( and :op1 ( receive :arg0 approval :mod-of ( date-entity :month 10 )  )  :op3 ( person :mod young )  :op4 committee )  :time now
say :arg0 ( she :arg1-of ( see :arg0 ( i :arg0-of ( hope :arg1 that :arg2 ( year :mod this )  )  )  )  )  :arg1 something
think :arg1 ( site :mod-of of )  :arg1-of ( work :arg1-of ( start :arg0 ( former :mod-of ( indoor :arg0-of ( swim :arg1 pool )  )  )  )  :arg1-of ( recommend :time then )  )  :arg2-of ( pause :arg0 ( further :mod any )  )
step :arg1 ( commit :arg2 refugee )
give :arg0 ( league :mod football :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg1 ( indicate :arg1 ( extend :arg0 ( organization :name ( name :op1 dfb )  )  :arg1 ( commit :arg1 ( date-entity :year 2019 )  :arg2 refugee :arg0 organization )  )  :arg1-of clear )  :time weekend
and :op1 ( react :arg1 ( situation :arg1-of deteriorate :location ( country :name ( name :op1 germany )  :wiki germany )  )  )  :op2 ( promise :arg0 football :arg1 ( help :arg1 ( problem :time current )  )  :arg2 politician )
consider :arg0 i :arg1 this :arg2 ( challenge :arg0 ( big :degree most )  :arg1 ( we :arg0-of ( reunify :arg1 country :time since )  )  )
concern :arg0 it :arg1 ( mine :arg1-of ( know :arg0 nobody :mod basic )  :arg1-of ( do :arg0 i :polarity - )  :mod of )  :polarity - :time '
say :arg0 ( issue :arg0 it :arg1-of ( grip :arg0 ( everybody :mod of )  :arg2 this )  :arg1-of ( get :arg0 interest )  )  :arg1 ( organization :arg1-of ( have-org-role :arg0 ( person :name ( name :op1 &quot; )  )  :arg2 chief )  :name ( name :op1 &quot; )  )
chancellor :arg2-of ( have-org-role :arg0 ( person :arg1-of ( meet :location ( country :location-of ( situation :domain-of ( subject :arg1-of ( debate :arg0 he :arg1-of ( want :arg2 23 :arg0 he )  :manner intensive )  )  :mod refugee )  :name ( name :op1 germany )  :wiki germany )  )  :location ( city :location-of 9 :name ( name :op1 berlin )  :wiki berlin )  :name ( name :op1 angela :op2 merkel )  :wiki angela_merkel )  :arg1 ( country :name ( name :op1 germany )  :wiki germany )  )
and :arg1-of ( have-org-role :arg0 ( state :arg0-of ( have-org-role :arg1 ( meet :arg0 ( i :op4-of ( and :op1 ( office :arg1-of ( have-org-role :arg0 i :arg2 chancellor )  )  :op2 next :op3 wednesday )  )  )  :arg2 minister )  )  :arg2 chancellor )
announce :arg0 ( he :arg2-of ( play :arg1 ( central :mod-of role )  :mod-of ( topic :arg1-of ( sure :arg0 i )  )  )  )  :arg1 there
possible :arg1 ( and :arg0-of ( help :arg1 football )  )
contrast :arg2 ( guideline :arg1-of ( decide :arg0 politician )  )
welcome :arg1 ( initiative :poss ( it :arg1-of extend )  :poss ( organization :mod ( country :name ( name :op1 germany )  :wiki germany )  :name ( name :op1 the )  )  :quant-of ( refugee :arg2-of ( mean :arg1 0 )  :quant ( 1 :quant-of ( temporal-quantity :quant 4 :unit year )  )  )  )
meet :arg0 ( person :arg0-of ( will :arg1 ( continue :arg0 ( we :arg0-of ( ensure :arg1 through )  )  :arg1 ( program :mod this )  :arg1-of ( declare :arg0 until :time ( date-entity :year 2019 )  )  )  )  :name ( name :op1 braun )  :poss-of foundation :wiki - )  :arg1 brink :location julian
support :arg0 ( team :quant several )  :arg1 program :mod also
word :arg0 ( they :arg0-of ( wear :arg1 message )  )  :arg1 ( we :arg0-of ( help :arg1 ( send :arg0 club :arg1 professional :arg1-of clear :arg2 ( weekend :mod this )  :arg3 36 :degree very )  )  :arg0-of ( instead-of :arg1 ( sponsor :arg0 usual :arg1 herm )  :arg1-of ( strip :arg0 of )  :arg2 logo )  :arg0-of ( leave :arg1 sleeve )  )
tell :arg0 ( we :arg0-of ( help :arg2 they :op2-of ( and :arg2-of ( clear :arg1 that )  :op1 ( recommend :arg0 everyone :arg1 ( possible :arg1 leverkusen )  )  :op3 ( way :mod any )  )  )  :arg0-of ( do :arg1 it :arg2 this )  )  :arg1 bild :arg2 newspaper :op1-of ( and :arg0-of ( describe :arg1 ( course :mod of )  :arg2 matter )  :op2 tuesday :op3 scheme )  :time völl :time ( rudi :arg1-of ( have-org-role :arg0 ' :arg2 boss )  )  :time sport
concern :arg0 drama :arg1 ( look :arg0 nobody :arg1 away :arg1-of possible )  :op1-of everyone :time refugee
say :arg0 ( we :arg1-of ( influence :arg0 we :arg2 opportunity :op2-of ( and :op1 ( use :arg0 we :arg1 we :arg1-of ( possible :arg0 ( team :mod football )  :polarity - )  :arg2 charisma :mod must )  :op3 ( help :arg0 we :arg1 amr-unknown :arg2 ( refugee :quant many )  )  )  )  )  :arg1 ( organization :arg0-of ( manage :arg1 ( person :name ( name :op1 &quot; )  )  )  :name ( name :op1 &quot; )  )  :arg2-of ( suffer :arg0 already :arg1 tremendously )
speak :arg0 ( peter :arg1-of ( have-org-role :arg0 league :arg2 director :arg2-of ( manage :arg1 ( signal :mod prominent )  )  )  )  :arg1 of
invite :arg0 ( team :arg0-of ( qualify :arg1 ( game :name ( name :op1 world :op2 cup )  :wiki fifa_world_cup )  :arg1-of ( match :op1-of ( against :op2 ( country :name ( name :op1 hungary )  :wiki hungary )  )  )  )  :mod ( nation :mod woman )  )  :arg1 halle :arg2 refugee :mod-of 100
grand :mod-of ( effort :arg1-of ( support :arg0 ( person :arg0-of describe :name ( name :op1 niersbach )  )  :mod-of refugee )  :mod joint :mod ( country :mod-of football :name ( name :op1 germany )  :wiki germany )  )
license :arg1 ( club :arg0-of ( start :arg1 project :arg1-of ( amaze :arg0 it )  :location location )  :quant ( all :op1 36 )  )
and :mod both :op1 large :source-of ( do :arg0 ( club :mod small )  :arg1 this :arg2 ( it :arg0-of ( amaze :mod just )  )  )
welcome :arg1 ( send :arg0 we :arg1 message :arg1-of live :arg1-of ( mean :arg2 0 :mod 1 )  :arg2 football :mod that )
say :arg0 ( he :arg1-of ( significant :arg0 ( enormous :mod of )  )  )  :arg1 that
integrate :arg1 refugee :arg1-of ( associate :arg2 ( and :mod together :op1 ( and :mod both :mod ( this :mod-of ( year :mod ( next :mod-of year )  )  )  )  :op2 ( team :mod ( organization :arg1-of ( govern :arg0 government-organization )  :name ( name :op1 dfb )  )  :mod federal )  )  )  :arg1-of available
report :arg1 ( person :name ( name :op1 &quot; )  )  :arg1-of ( release :arg0 club :arg2 ( sum :op1 entire )  :time already :time already )  :time ( date-entity :year 2015 )
sap :arg1-of ( have-org-role :arg0 ( executive :arg0-of ( lose :arg1 eye :arg2 accident :time-of report )  )  :arg2 chief )
say :arg0 several :arg1 ( report :arg0 ( group :arg1-of ( have-org-role :arg0 executive :arg2 chief )  )  :arg1 ( large :degree most )  :arg2 ( lose :arg1 ( leave :arg1 eye )  :arg1-of ( begin :arg1-of fall )  :arg1-of bill :arg2-of ( of :arg0 software :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  )  )  )
report :arg0 ( he :arg0-of ( fall :arg1 ( country :name ( name :op1 usa )  :wiki united_states )  )  )  :arg1 wednesday :time ( leave :arg0 ( he :arg1-of ( have-rel-role :arg0 stair :arg2 brother )  :poss-of house :poss-of accident )  :arg1 ( carry :arg0 he :arg1 water :op1-of glass :op2-of ( after :op1 midnight )  )  )  :time hand
cause :arg0 road :arg1 ( tell :arg0 ( he :arg0-of ( found :arg1 hasso :arg2 plattn :arg2-of ( quote :arg1 sap )  )  :arg1-of ( drag :arg0 he :op1-of ( onto :op2 out )  )  )  :arg1 ( thing :name ( name :op1 &quot; )  )  :arg2 ( he :arg1-of die :arg1-of ( bleed :arg0 he :degree almost )  :mod-of ( conscious :polarity - )  )  :time ( week :mod last )  :time then )
possible :arg1 ( return :arg1 ( person :name ( name :op1 mcdermott )  )  :arg4 work )
say :arg0 ( country :arg0-of ( begin :arg1 of )  :name ( name :op1 &quot; )  )  :arg1 ( person :arg1-of ( meet :arg0 ( we :arg0-of ( meet :arg1 board )  )  )  :name ( name :op1 &quot; )  )  :time ( date-entity :month 10 )
and :arg1-of ( fit :arg0 full :arg1-of ( work :arg0 ( 54 :mod-of ( temporal-quantity :unit year )  )  )  )  :arg1-of ( manage :mod old )  :op1 meet
interview :arg0 ( he :arg1-of ( come :direction back :op1-of ( and :arg2-of ( lead :arg1 ( group :mod-of again )  )  :op2 ( take :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg2 edition :arg3 software :op1-of ( over :domain that )  :polarity thursday :time ( date-entity :month 10 )  )  )  )  )  :arg1 ( person :arg0-of announce :name ( name :op1 mcdermott )  )
sap :arg0-of ( involve :arg1 i :arg1-of ( complete :arg0 there )  :arg2 job :arg3 i :mod definite )
tell :arg0 ( person :name ( name :op1 &quot; )  )  :arg1 ( thing :arg1-of ( have-org-role :arg0 it :arg2 chairman )  :name ( name :op1 &quot; )  )  :arg2 ( i :arg0-of ( contact :arg1 ( course :mod of )  :arg1-of regular :op1-of ( and :op2 board :op3 ( person :name ( name :op1 &quot; )  )  )  )  )  :time ( time :mod whole )
contrast :arg1 ( commute :arg0 ( person :name ( name :op1 mcdermott )  :poss-of ( headquarters :mod ( country :name ( name :op1 germany )  :wiki germany )  :mod sap )  :poss-of ( country :name ( name :op1 walldorf )  )  )  :arg1-of normal :arg2 he :op1-of ( and :op2 ( country :name ( name :op1 germany )  :wiki germany )  :op3 ( country :name ( name :op1 usa )  :wiki united_states )  )  :polarity - :time ( since :op1 summer )  )
tell :arg0 ( story :arg0-of ( manage :arg1 it )  :arg1-of personal :mod such :topic public )  :arg1 ( thing :arg1-of possible :name ( name :op1 ii )  )  :arg2 anyone :mod ( important :mod ii )
cause :arg0 again :arg1 ( fall :arg0 ( you :arg1-of ( get :arg0 ( thing :mod important )  )  )  :arg1 down )
reserve :arg0 ( organization :name ( name :op1 mclaren )  )  :arg1 ( person :arg0-of ( drive :arg1 ( magnussen :mod-of ( of :mod-of ( action :op1 expressive )  )  )  )  )  :arg2 out
and :op1 ( twitter :arg0 ( person :name ( name :op1 magnussen )  )  :arg1 ( photo :topic damage )  )  :op2 ( explain :arg1 ( receive :arg0 he :arg1 ( injure :arg0-of ( fall :arg1 bike )  )  )  )
reserve :arg0 ( country :location-of ( thing :name ( name :op1 grand :op2 prix )  )  :name ( name :op1 japan )  :wiki japan )  :arg1 ( person :arg0-of ( drive :arg1 ( and :op1 ( person :arg0-of ( drive :arg1 night )  :mod ( country :location-of race :name ( name :op1 singapore )  :time-of ( slim :arg0 ( late :time-of week )  :arg1 weekend )  :wiki singapore )  :quant 2 )  :op2 ( person :name ( name :op1 fernando :op2 alonso )  )  :op3 ( person :name ( name :op1 jenson :op2 button )  )  )  )  :arg1-of chance )  :arg3-of ( mean :arg0 main :arg1 this )
goal :mod-of ( organization :mod football :mod-of ( organization :location ( country :name ( name :op1 reus )  )  :mod v :name ( name :op1 krasnodar )  )  :name ( name :op1 bvb )  )
crush :arg0 ( organization :name ( name :op1 borussia :op2 dortmund )  )  :arg1 ( hope :mod all )  :arg2 ( possible :arg1 ( match :arg0 ( person :name ( name :op1 marco :op2 reus )  :prep-with-of comeback )  :arg1 ( league :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  :arg3 group )  )
play :arg0 ( thing :arg1-of ( miss :arg0 ( country :arg0-of ( match :arg1 ( it :poss-of dual )  )  :arg0-of lead :name ( name :op1 germany )  :wiki germany )  :mod also )  :mod ( international :mod-of ( p.m. :mod-of sky )  )  )  :arg1 ( thursday :mod-of 7 )
say :arg0 ( he :arg0-of ( run :arg1 wednesday )  :arg1-of ( fortunate :polarity - )  )  :arg1 tuchel :arg2 ( person :name ( name :op1 thomas )  :wiki - )
mean :arg1 ( return :arg1 friday :arg1-of ( expect :arg0 we )  :arg1-of ( coach :arg0 ( person :arg0-of leave )  )  :arg1-of train :arg1-of ( match :arg0 ( there :mod-of sunday )  :op2-of ( against :mod top :op1 ( open :arg0 it :arg1 wheth )  )  )  )
cause :arg0 ( want :arg0 ( he :arg0-of ( do :arg1 professional )  :arg2-of ( burden :arg1 heavy )  )  :arg1 ( choose :arg1 11 :arg1-of light :arg1-of ( position :arg0 just )  :arg1-of change )  :polarity - )
announce :arg0 he :arg1 ( change :arg1 goalkeep )  :arg1-of cause
take :arg0 ( person :name ( name :op1 roman :op2 weidenfeller )  )  :arg1 ( place :poss ( person :arg0-of keep :arg1-of regular :name ( name :op1 roman :op2 bürki )  )  )  :mod thu
praise :arg0 ( he :arg0-of ( train :arg1 ( level :mod top :mod absolute )  :arg2 ( person :arg0-of ( coach :arg1 football )  )  )  :op1-of ' )  :arg1 world :arg2 champion
use :arg1 ( thing :name ( name :op1 weidenfelder )  )  :arg2 ( match :arg1 ( league :mod ( continent :name ( name :op1 europe )  :wiki europe )  )  :arg1-of ( open :arg1-of ( leave :arg0 ( country :name ( name :op1 tuchel )  )  )  )  :quant all )  :time future
likely :arg1 ( he :arg0-of ( play :arg1 game :mod also )  )  :degree high :domain it
state :arg0 ( person :arg0-of ( mark :arg1 ( far :arg1-of ( cause :arg0 league :polarity - )  :arg1-of ( understand :arg0 objective :mod quite )  )  :arg2 off )  :arg0-of ( have-rel-role :arg1 reu :arg2 mate )  :mod ( team :arg0-of ( consider :arg1 midfield )  )  )  :arg1 of :location ( continent :name ( name :op1 europe )  :wiki europe )  :location final :mod brisk :mod that
think :arg0 ( i :arg0-of ( pick :arg1 title )  :arg0-of ( get :arg1 good )  )  :arg1 ( chance :arg0 we :arg1 of )
lead :arg0 ( government-organization :arg0-of ( govern :arg1 ( car :mod robot )  )  :arg0-of ( want :arg1 ( take :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 role )  )  )
want :arg0 ( government-organization :arg0-of govern )  :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2 ( person :arg0-of ( lead :arg1 technology )  :arg1-of ( change :arg0 federal :arg2 car )  )
introduce :arg0 ( cabinet :arg1-of ( resolve :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :name ( name :op1 csu )  )  :arg2 ( minister :topic transport )  )  :name ( name :op1 alexander :op2 dobrindt )  )  )  :mod ( country :name ( name :op1 germany )  :wiki germany )  )  :arg1 ( provide :arg0 ( document :mod policy )  :arg1 ( thing :mod other )  :arg2 ( invest :arg1 wednesday :arg2 ( develop :arg1 ( infrastructure :mod digital )  )  )  )
show :arg0 ( country :mod-of wednesday :name ( name :op1 dobrindt )  )  :arg1 motorcycle :arg1-of ( speak :arg0 ( person :name ( name :op1 dobrindt )  )  )  :mod ( organization :mod ( of :mod brink )  :name ( name :op1 dobrindt )  )  :mod-of ( era :mod new :mod mobility :mod about )
say :arg0 ( person :name ( name :op1 dobrindt )  )  :arg1 ( and :op1 ( ensure :arg0 automate :arg1 ( jam :arg1 traffic :arg2 few )  :op2-of ( and :arg0-of ( increase :arg1 ( safe :arg1 traffic )  )  :op1 ( drive :arg1-of network )  )  )  )
iaa :location-of ( meet :arg1 ( person :arg0-of ( represent :arg1 industry )  )  :mod also :time-of ( discuss :arg0 ( he :poss-of 7 :poss-of ( organization :name ( name :op1 g-8 )  :wiki g8 )  )  :arg1 topic :arg1-of ( want :arg0 he )  :arg2 counterpart :source country )  )
stress :arg0 ( document :mod policy :source ( organization :name ( name :op1 transport :op2 ministry )  )  )  :arg1 ( important :domain ( develop :arg1 ( broadband :arg1-of mobile )  :op1-of ( and :op2 ( switch :arg1 ( radio :mod digital )  :manner rapid )  )  )  )  :arg2 ( thing :mod other )
motorway :mod 9 :purpose ( try :arg0 ( area :arg1-of test )  :arg1 ( technology :mod new )  )  :time current
adapt :arg0 ( government-organization :arg0-of govern :arg0-of ( impose :arg1 ( risk :arg0 extra :arg1 liability :arg1-of will :polarity - )  )  :arg0-of ( want :arg1 ( and :op1 ( develop :arg0 new )  )  :arg1-of drive :arg1-of ( examine :arg1-of legal )  )  )  :arg1 parameter
driverles :mod-of ( car :arg1-of ( raise :arg0 ( agree :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 ( provision :mod international :purpose ( limit :arg0 10 :arg1 speed )  )  :arg1-of ( want :arg2 ( temporal-quantity :unit hour )  :arg0 country )  )  :arg2 ( distance-quantity :quant 130 :unit kilometer )  )  )
convention :arg1-of ( provide :arg0 date :arg2 ( being :mod human )  :mod only )  :arg1-of ( change :arg1-of ( agree :arg1-of ( reach :arg0 ( government-organization :arg0-of ( govern :arg1 ( country :name ( name :op1 germany )  :wiki germany )  )  )  :arg1-of ( want :arg2 ( person :arg0-of drive )  :mod also :arg0 government-organization )  )  )  )  :mod ( city :name ( name :op1 vienna )  :wiki vienna )
and :arg1-of ( increase :time-of ( take :arg0 ( car :arg0-of ( become :arg1 ( person :arg0-of drive )  :arg2 passenger :op1-of and )  )  :arg1 control :arg2 ( drive :mod automatic )  )  )  :op1 more :op2 more
base :arg1 technology :arg2 ( sensor :arg0-of ( process :arg1 data :op2-of ( and :op1 ( capture :arg0 ( and :op1 camera )  :arg1 environment )  )  )  )  :mod primary :op1-of ( temporal-quantity :unit second )
possible :arg1 ( drive :arg1-of ( say :arg0 ( study :arg1 technical :arg1-of ( submit :arg0 ( ministry :mod environment )  )  )  )  :manner ( automate :degree high )  )  :arg2 motorway :time ( date-entity :year 2020 )
driverles :mod-of ( vehicle :arg1-of ( anticipate :arg0 public :arg2 road :mod-of ( until :mod-of ( date-entity :year 2020 )  )  :polarity - )  )
add :arg1 ( value :arg1-of ( estimate :arg0 ( author :arg1 ( study :arg1 around )  :arg1-of ( function :arg1-of drive :location ( country :name ( name :op1 germany )  :wiki germany )  :manner ( automate :arg1 ( date-entity :year 2025 )  :degree high )  :op2-of ( and :op1 ( system :arg0-of ( assist :arg1 ( person :arg0-of drive )  )  )  )  )  )  )  :arg2 field )
say :arg0 ( and :arg1-of possible :arg2-of lead :op1 ( network :arg0 digital :arg1 of )  :op2 car :op3 great :op4 safe :op5 ( efficient :arg1 traffic :arg2 road )  )  :arg1 ( politician :arg1-of ( transport :arg0 ( organization :name ( name :op1 &quot; )  )  :arg2 ( person :name ( name :op1 &quot; )  )  )  )
and :op1 accident :op2 security :op3 ( person :arg0-of ( personal :arg1 data )  :arg0-of ( clarify :arg1 conclusively )  :arg0-of ( drive :arg1 ( issue :arg0 liability )  )  )
and :op1 ( country :mod-of ( view :arg0 ( person :mod ( country :name ( name :op1 america )  :wiki united_states )  :op2-of ( or :op1 france )  )  :arg2 sceptically :example ( much :degree more )  :location driverles :location car :mod still )  :name ( name :op1 germany )  :wiki germany )
conclude :arg1 ( believe :arg0 ( country :name ( name :op1 germany )  :wiki germany )  :arg1 ( catch-up :arg1 ( vehicle :arg0-of ( estimate :arg1 ( take :arg1 ( percentage-entity :value 32 )  :polarity - )  :arg2 ( percentage-entity :mod ( only :op1 8 )  )  :op1-of ( and :op2 ( believe :arg0 ( percentage-entity :location ( temporal-quantity :quant 20 :unit year )  :value 31 )  )  )  )  :arg1-of drive )  :manner ( come :arg1 all :arg2 ( temporal-quantity :quant 10 :unit year )  )  )  :arg1-of ( present :arg0 ( organization :arg0-of survey :arg1-of ( commission :arg0 ( thing :arg1-of ( test :arg1-of organize )  :name ( name :op1 dekra )  )  )  :name ( name :op1 forsa :op2 institute )  )  :arg2 ( organization :name ( name :op1 iaa )  )  :time wednesday )  )
expect :arg0 ( and :op1 ( date-entity :year 2025 )  )  :arg1 ( see :arg0 ( percentage-entity :value 21 )  :arg1 ( car :arg1-of drive :mod ( country :name ( name :op1 usa )  :wiki united_states )  )  )  :arg1-of ( ask :arg0 ( percentage-entity :value 33 )  )  :location ( country :name ( name :op1 france )  :wiki france )
self :degree-of ( drive :arg0 anyway :arg1 ( car :arg1-of ( rely :arg2-of ( ready :arg1 ( person :arg0-of ( drive :location ( country :name ( name :op1 germany )  :wiki germany )  )  )  :polarity - :time yet )  )  )  :arg1-of complete )
say :arg0 ( survey :arg0 ( organization :arg0-of ( associate :mod digital )  :name ( name :op1 bitkom )  )  )  :arg1 ( agree :arg1 ( recommend :arg0 ( percentage-entity :mod ( only :op1 7 )  )  :arg1 ( hand-over :arg1 control :arg2 car :time ( journey :arg1 ( road :quant all )  :mod entire )  )  )  )
and :op1 ( traffic :arg1-of ( free :arg1-of flow )  :arg2-of ( happen :arg0 this :arg2-of ( imagine :arg0 ( percentage-entity :value 15 )  :arg1 ( percentage-entity :value 45 )  :arg1-of possible :manner nevertheles )  :location ( motorway :location ( traffic :arg1-of jam )  )  )  )
give :arg0 4 :arg1 ( control :arg1 approximately )  :arg2 car :manner ( circumstance :mod any )
and :location-of ( play :arg0 ( person :name ( name :op1 boll )  )  :arg1 team :location ( thing :name ( name :op1 european :op2 championship )  )  )  :op1 ( double :arg1 - )
plan :arg0 ( stand :arg0 4 :arg1 thing )  :arg1 ( play :arg0 ( thing :arg0-of ( play :arg1 ( country :name ( name :op1 dusseldorf )  )  )  :arg0-of ( run :arg1 9 :time ( date-entity :month 10 )  )  )  :arg1 ( single :arg1 ( compete :arg1 25 )  )  :mod only )
decide :arg1 ( 22 :quant-of 9 )  :mod final
team :op1 ( we :arg1-of ( major :arg0 it )  )
hear :arg0 lad :arg1 it :arg2 ( morning :mod this )  :op1-of about
contrast :arg1 ( we :arg0-of ( pick :arg1 title )  :arg0-of ( strong :arg1 enough )  )  :arg2 ( say :arg0 ( person :name ( name :op1 &quot; )  )  :arg1 ( thing :arg0-of ( train :arg2 ( country :name ( name :op1 &quot; )  )  )  :mod during :name ( name :op1 &quot; )  )  :arg2 ( person :arg0-of ( coach :arg1 ( person :name ( name :op1 &quot; )  )  )  :mod nation )  )
arrange :arg1 ( appointment :arg0 ( person :arg1-of ( flight :arg2 ( time :mod this )  )  :name ( name :op1 boll )  )  :arg1 ( country :name ( name :op1 china )  :wiki china )  :arg1-of sponsor :arg1-of long )
expect :arg1 ( champion :mod ( country :name ( name :op1 germany )  :wiki germany )  :mod 34 :mod old :mod ( temporal-quantity :unit year )  )  :arg2 friday :mod back
disadvantage :arg0 ( we :arg0-of ( clear :arg1 favourit )  )  :arg1 of :arg2 ( long :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  :arg2 ( individual :arg1-of ( declare :arg0 ( person :mod without :name ( name :op1 &quot; )  )  :arg2 ( person :mod champion :name ( name :op1 &quot; )  )  )  )  )  :polarity -
contrast :arg2 ( remember :arg0 ( thing :arg0-of ( play :arg1 ( country :name ( name :op1 hamelin )  )  )  )  :arg1 ( thing :name ( name :op1 european :op2 championship )  )  :arg4 ( country :location-of ( seed :mod top )  :name ( name :op1 ekaterinburg )  )  :location ( country :name ( name :op1 schwechat )  )  :mod also :time ( date-entity :year 2013 )  )
and :arg1-of ( champion :arg0 ( we :arg0-of ( do :arg1 timo :polarity - )  )  :arg2-of ( become :arg0 ( world-region :name ( name :op1 west )  :wiki western_world )  :arg1 ( continent :name ( name :op1 europe )  :wiki europe )  )  )  :op1 then :op2 either
declare :arg0 ( we :arg0-of ( need :arg1 ( focus :arg0 amr-unknown :arg1 number :arg2 5 :mod that )  )  )  :arg1 world
play :arg0 ( thing :arg0-of ( sustain :arg1 ( injure :arg1 ( leg :mod right )  :mod severe )  :arg2 ( country :name ( name :op1 manchester )  )  )  :mod nation )  :arg1 ( language :mod-of ( person :name ( name :op1 luke :op2 shaw )  )  :name ( name :op1 english )  :wiki english_language )  :arg2 football
and :op1 ( person :name ( name :op1 héctor :op2 moreno )  :op1 ( treat :arg1-of ( replace :arg0 ( defend :arg1 ( organization :name ( name :op1 psv :op2 eindhoven )  )  :arg1-of ( hit :arg2 ( tackle :arg1 ( game :mod ( thing :name ( name :op1 champions :op2 league )  )  )  )  )  )  :arg2 ( bout :arg1-of long )  :op1-of after )  )  )
indicate :arg0 ( diagnosi :arg1-of initial )  :arg1 ( break :arg0 ( 20 :arg1-of ( use :arg0 old :arg2 ( play :arg0 year :arg1 schweinsteig )  )  )  :arg1 tibia )
feel :arg0 ( person :name ( name :op1 gaultier )  )  :arg1 ( old :degree too )  :arg2 ( terrible :mod-of enfant )
exhibit :arg1 ( it :domain-of ( mixture :op1-of ( and :op2 ( show :arg1 fashion :mod huge )  :op3 ( chamber :consist-of horror :mod waxwork )  )  )  )  :arg1-of ( present :arg0 ( person :arg0-of ( design :arg1 63 )  :arg0-of ( work :location ( city :name ( name :op1 munich )  :wiki munich )  )  :name ( name :op1 jean :op2 paul :op3 gaultier )  )  :arg2 wednesday )
highlight :arg1 ( look :arg0 mannequin :arg1 ( thank :arg1 ( project :arg1 video )  :arg2 human :mod alarmingly )  )
and :op1 ( stage :mod-of outfit )  :op2 ( put :arg0 ( they :arg0-of ( wear :arg1 ( spectacular :mod-of creation )  )  :arg0-of ( design :arg1 france )  )  :arg1 star :arg1-of ( skirt :arg0 ( thing :arg1-of ( become :arg0 among :arg2 big :manner ( fashion :mod-of scene )  )  :mod other )  )  :arg2 madonna :mod also )  :op3 man
say :arg0 i :arg1 enfant :arg2 ( i :arg0-of ( cause :arg1 white :arg2 ( i :arg2-of ( long :arg0 ( couture :mod ( haute :mod ( of :mod terrible )  )  )  :arg1 hair :degree any )  )  :polarity - )  )  :time ca :time ( day :mod this :unit-of temporal-quantity )
say :arg0 real :arg1 gaulti :arg2-of ( use :arg1 it :arg1-of ( bleach :arg0 it :arg2 nowadays )  )
exhibit :arg0 ( person :arg0-of ( visit :arg1 sidewalk )  )  :arg1 ( see :arg0 ( he :arg0-of ( own :arg1 character )  :arg0-of ( show :arg1 ( change :arg1 it :manner ( fashion :arg1-of ( design :arg0 ( organization :name ( name :op1 for )  :poss-of 1 )  )  )  :time ( date-entity :month 9 )  )  )  :poss-of attitude :poss-of ( reluctant :mod initial )  )  :arg1 fortunate :arg1-of possible )
say :arg0 ( he :arg2-of ( resemble :arg1 bit )  :arg2-of ( sound :arg0 ( he :arg0-of ( cause :arg1 against )  )  :arg1 it :arg2-of ( exhibit :arg0 i :arg1 originally )  )  )  :arg1 die
put :arg0 ( you :arg1-of die )  :arg1 you :arg2 museum
and :op1 ( stage :arg1 ( collect :arg1-of ( remarkable :arg0 ( country :name ( name :op1 canada )  :wiki canada )  )  :mod this )  :arg2 ( city :name ( name :op1 paris )  :wiki paris )  :location ( city :name ( name :op1 montreal )  :wiki montreal )  :time already )
say :arg0 clothes :arg1 ( beautiful :arg0 lot :arg1 it :degree more )  :arg1-of ( have-org-role :arg0 about :arg2 director )
and :op1 ( tolerate :mod about )  :op2 ( vision :poss ( society :arg1-of ( open :arg0 ( accept :arg1 it )  )  )  )
fashion :consist ( history :arg1-of ( write :arg0 ( man :arg0-of ( work :arg1-of ( overlook :arg0 ( exhibit :arg0-of ( provide :arg1 insight )  )  :arg2-of hard )  )  )  :manner ( finish :arg1 educate :time ever )  )  )
contrast :arg1 ( construct :arg1 chronologically :arg1-of choreograph :arg1-of ( show :arg0 it )  :arg1-of brilliant :arg1-of ( work :arg0 ( art :arg0-of ( look :arg1 hair :arg1-of ( engage :arg0 stylist )  :mod especially :time ( after :mod-of mannequin )  )  :arg1-of complete :arg1-of ( involve :arg2 ( deal :arg1 ( effort :arg1-of mean )  :arg2 example :mod great )  )  :mod of )  )  :polarity - )
say :arg0 ( person :mod curator :name ( name :op1 thierry-maxime :op2 loriot )  :quant ( 14 :quant-of ( volume-quantity :unit tonne )  )  )  :arg1 ( cart :arg0 ( person :arg0-of create )  :arg1 material :arg2 ( city :name ( name :op1 munich )  :wiki munich )  )
lederhosen :mod-of ( outfit :arg0-of ( start :arg1 oktoberf :arg2 corset :op1-of ( before :op2 ( treat :arg1 store :arg1-of special :mod also )  :quant short )  )  )
meet :arg0 ( person :name ( name :op1 heidi )  )  :arg1 ( person :name ( name :op1 madonna )  )
say :arg0 ( he :arg0-of ( interest :arg1 clever :arg2 woman :time always )  :arg0-of ( strong :arg1 woman )  )  :arg1 ( and :op1 man :op2 person )  :arg2-of ( differ :arg0 little )
exhibit :arg1 ( show :arg0 even :arg1 ( teddy :mod old )  )
tentative :arg1-of ( step :arg0 ( he :arg0-of ( represent :arg1 fashion :arg1-of design )  )  )
bad :arg1 - :compared-to football :op2-of ( and :op1 ( pupil :domain he :mod good )  :op1-of ( and :arg0-of ( dress :arg1 teddy :arg2 child :location bra )  :op2 dress )  )
allow :arg0 ( person :arg0-of ( have-rel-role :arg1 he :arg2 parent )  )  :arg1 ( play :arg1 doll )  :polarity -
teach :arg0 ( he :arg0-of ( design :arg1 fashion )  )  :time late
tell :arg0 ( he :arg0-of ( steal :arg1 fashion )  )  :arg1 gaulti :arg2 other :location ( city :name ( name :op1 munich )  :wiki munich )  :op4-of ( and :op1 magazine :op2 scrutinise :op3 designer )  :time creation
buy :arg0 i :arg1 late
possible :arg1 ( pay :arg0 he :arg1 model :arg3 ( show :arg1 fashion )  )  :polarity -
contrast :arg1 ( get :arg0 ( they :arg0-of ( allow :arg1 ( keep :arg0 they :arg1 clothes )  )  )  :arg1 nothing )
instead-of :arg0 ( plauen :mod-of lace )  :arg1 of :arg2 curtain :manner ( fashion :mod-of niche )  :mod decoration
and :op1 ( use :arg1 ( machine :arg1-of long :mod embroidery )  )  :op2 ( around :op1 ( country :name ( name :op1 plauen )  )  )  :op3 ( many :quant-of metr )
and :op1 ( lace :arg0 customer :arg1 ( quantity :mod vast )  :op2-of ( and :op1 ( fabric :arg1-of ( embroider :arg0 example )  )  )  )  :op2 ( curtain :mod table )
explain :arg0 ( person :arg0-of ( have-org-role :arg1 ( organization :arg1-of manage :name ( name :op1 modespitze :op2 plauen )  )  :arg2 director )  :name ( name :op1 andreas :op2 reinhardt )  :time - )  :arg1 ( case :arg1-of long :domain this :time today )
important :degree ( more :degree once )  :domain ( fashion :arg1-of instead-of )
and :arg1-of ( rediscover :arg0 ( it :arg0-of ( replace :arg1 ( large :domain ( fashion :arg1-of ( play :arg0 lace )  )  :quant-of role )  :time then :time ( early :time-of ( temporal-quantity :unit day )  )  )  )  )  :location-of ( industry :mod textile :mod home )  :op1 now :op2 niche
and :op1 ( person :arg0-of ( give :arg1 ( example :quant few )  :arg2 ( decoration :location-of lace )  )  :name ( name :op1 reinhardt )  )  :op2 such :op3 bag :op4 ( costume :arg1 accessory :mod tradition )
cause :arg1 ( fashion :arg0-of ( produce :arg1 ( potential :arg1-of ( increase :manner ( general :arg1 past )  )  )  :arg3 order )  :arg1-of ( call :arg2 vintage )  :arg1-of ( base :arg2 ( era :mod style )  )  )
possible :arg1 ( serve :arg0 ( anyone :arg1-of ( long :polarity ( - :mod-of market )  )  :prep-in ( industry :mod textile )  )  :arg1 niche :arg2 ( country :name ( name :op1 germany )  :wiki germany )  )  :polarity -
half :mod already :poss ( we :poss-of ( contract :poss we :quant ( all :mod-of ( this :mod-of way )  )  )  )
have-org-role :arg0 9 :arg1 ( organization :arg1-of ( trade :arg0 together :arg1-of ( associate :arg2 ( organization :name ( name :op1 modespitze :op2 plauen )  )  :mod ( business :mod other )  )  )  :name ( name :op1 plauener :op2 spitze :op3 und :op4 stickereien )  )  :arg2 member
allow :arg0 only :arg1 ( bear :arg0 they :arg1 ( label :arg1-of protect )  )
sal :arg1-of ( fall :arg2 ( percentage-entity :op2-of ( around :op1 80 )  )  :time ( last :mod-of ( year :unit-of ( temporal-quantity :quant 15 )  )  )  )
or :op1 ( shop :mod hardly :mod ( any :mod now )  :mod ( speciality :arg1-of private )  )  :op2 wholesaler
reach :arg0 ( product :poss we )  :arg1 ( customer :time ( channel :mod this )  )  :time hardly
and :op1 ( manufacture :arg0 ( cheaply :degree ( more :degree much )  )  :arg1 ( good :arg1-of produce )  :location ( region :mod ( continent :name ( name :op1 asia )  :wiki asia )  )  )  :op2 ( sell :manner ( exclusive :mod almost )  :path ( chain :arg0 mass :arg1 nowadays )  )
weaken :arg2 slight :op3-of ( and :arg2-of ( export :arg0 furthermore )  :op1 ( country :name ( name :op1 russia )  :wiki russia )  :op2 ( country :name ( name :op1 usa )  :wiki united_states )  )  :time current
reason :beneficiary ( direction :mod new )  :domain this :quant enough
show :arg0 ( person :arg0-of ( try :arg1 consciousness :mod also )  :arg0-of explain :arg1-of ( score :arg2 environment )  :name ( name :op1 the )  :poss-of of )  :arg1 ( quality :arg1-of ( implement :arg0 we )  :arg1-of seal :arg1-of ( produce :arg0 we )  :arg1-of ( trade :arg1-of associate )  :mod that :mod ( this :mod-of ( year :unit-of temporal-quantity )  )  :op1-of ( and :op2 ecologically :op3 social :op4 compatible )  )
add :arg0 ( person :name ( name :op1 reinhardt )  )  :arg1 this :arg1-of ( apply :arg0 ( we :arg0-of ( use :arg1 material )  )  :mod also )
and :op1 ( branch :mod ( country :name ( name :op1 schneeberg )  )  :part-of ( organization :name ( name :op1 west :op2 saxony :op3 university )  :op2-of ( and :op1 ( design :arg0 ( person :arg0-of ( teach :arg1 faculty )  :name ( name :op1 ute :op2 schmidt )  )  :arg1 qualify :purpose ( apply :arg1 art )  )  :op3 ( country :name ( name :op1 zwickau )  )  :op4 specialis )  )  )  :op2 embroidery :op3 lace
innovate :arg1 ( product :arg1-of ( find :arg0 ( one :arg0-of ( face :arg1 ( compete :arg2 ( region :mod ( continent :name ( name :op1 asia )  :wiki asia )  )  )  )  )  :op1-of ( and :op2 ( quality :arg1-of high )  )  )  )
take :arg0 that :arg1 time :arg2 ( and :op1 courage )
say :arg1 ( and :op1 ( between :arg1-of ( tension :mod-of field )  :arg1-of designer )  :op2 ( idea :mod ( new :degree most )  :part business )  )  :arg2 schmidt :arg2-of ( think :arg1 ( term :arg1-of commerce )  :mod primary )
core :mod-of ( customer :arg1-of ( keep :purpose-of ( vary :arg1 ( design :arg1 this :arg1-of exist )  :degree slight :frequency often :mod only )  )  )
lace :arg1-of ( snowball :arg0 ( person :arg0-of ( design :arg1 textile )  :name ( name :op1 kati :op2 reuter )  )  :mod ( few :op1 ( temporal-quantity :unit year )  )  )  :mod history
embroider :arg0 ( machine :arg0-of ( select :arg1 place )  )  :arg1 ( bead :mod small )
goldsmith :mod ( master :mod-of ( person :arg0-of ( inspire :arg1 ( i :arg0-of ( use :arg1 ( tradition :mod-of lace )  :arg2 in :polarity - :time past )  )  :mod this )  :mod ( country :name ( name :op1 plauen )  )  :name ( name :op1 plauen )  )  )
use :arg0 she :arg1 ( lace :arg1-of snowball )  :arg2 jewellery :time now
use :arg1 ( process :arg1-of elaborate :arg2-of ( emboss :arg0 she :arg1 ( pattern :location silver )  )  )
say :arg0 old :arg1 ( and :op1 ( person :quant many )  :op2 ( identify :arg0 region :arg1 themselv )  :op3 lace :op4 young )
and :arg1-of ( want :arg0 ( she :arg0-of ( deliver :arg1 also )  )  )  :op1 area :op2 memento :op2-of ( and :arg1-of surround :op1 ( live :arg0 customer :arg1 forefather :op5-of ( and :op1 ( country :name ( name :op1 usa )  :wiki united_states )  :op2 ( country :name ( name :op1 australia )  :wiki australia )  :op3 ( country :name ( name :op1 finland )  :wiki finland )  :op4 primary )  )  )
cause :arg1 ( see :arg0 ( i :arg0-of ( have-org-role :arg1 ( lace :mod ( country :name ( name :op1 plauen )  )  )  :arg1-of modern :arg2 ambassador )  )  :arg1 jewellery )
plan :arg0 ( amusement-park :name ( name :op1 disney )  :wiki hong_kong_disneyland )  :arg1 film :arg2 ( person :mod new :name ( name :op1 disney )  )
contrast :arg1 ( dare :arg0 ( you :arg0-of ( interfere :arg1 legend )  :arg0-of ( recommend :arg1 film )  )  :arg1 ( person :mod classic :mod new :name ( name :op1 mary )  :op1-of ( poppin :mod anyway )  :wiki - )  :polarity - )  :op1-of ( amusement-park :name ( name :op1 disney )  :wiki hong_kong_disneyland )
contrast :arg2 ( say :arg0 it :arg1 ( thing :arg0-of ( remake :arg1 ( contrast :arg1 film :arg2 sequel )  :time ( after :time-of ( nanny :mod magical )  :time-of ( temporal-quantity :quant 20 :unit year )  :time-of sort )  )  :name ( name :op1 but )  :polarity - )  )
depression :poss ( country :arg0-of ( experience :arg1 ( nanny :poss ( it :poss-of about )  )  :arg2 ( family :poss-of bank :poss-of time )  )  :name ( name :op1 england )  :wiki england )
take :arg0 amr-unknown :arg1 ( role :poss ( person :example-of ( temporal-quantity :quant 50 :unit year )  :name ( name :op1 mary :op2 poppins )  )  )  :arg1-of ( play :arg0 ( person :name ( name :op1 julie :op2 andrews )  )  )  :arg2 ( yet :time-of ( certain :polarity - )  )
contrast :arg2 ( decide :arg0 ( company :name ( name :op1 marshall )  :wiki marshall_amplification )  :arg1 film :time ( recent :degree most :time-of ( thing :name ( name :op1 but )  )  )  :time ( have-org-role :arg2 director )  )
urge :arg0 ( person :name ( name :op1 xi )  :wiki xi_jinping )  :arg2 ( open :arg1 economy :arg1-of ( wide :arg2 world )  :arg0 person )
tell :arg0 ( person :arg0-of ( have-org-role :arg2 president )  :name ( name :op1 xi :op2 jinping )  :wiki xi_jinping )  :arg1 ( open :arg1 ( economy :arg1-of ( grow :mod ( fuel :arg1-of wide )  )  )  :arg3 ( world :mod outside )  )  :arg2 ( group :arg2-of ( task :arg1 ( steer :arg1 ( reform :arg1 tuesday )  )  )  )
say :arg0 ( he :arg0-of reform :arg0-of ( meet :arg1 of )  :arg0-of ( lead :arg1 group )  :arg0-of ( address :arg1 16th )  :arg0-of ( deepen :arg1 overall )  )  :arg1 ( and :op1 ( commit :arg1 foreign :arg1-of ( recommend :arg0 ( country :arg0-of attract :name ( name :op1 china )  :wiki china )  )  :op1-of ( and :op2 invest )  )  :op2 ( improve :arg1 ( policy :arg1-of ( open :arg0 expertise )  )  )  )
say :arg0 ( person :arg0-of ( promote :arg1 open :op1-of ( and :op2 ( impetus :mod new )  :op3 vitality :op4 ( provide :arg1 ( room :mod new :purpose ( grow :arg1 economy )  )  :op1-of ( and :arg1-of ( add :arg0 ( push :arg1 reform :direction forward )  )  )  )  )  )  :name ( name :op1 xi )  :wiki xi_jinping )
encourage :arg1 ( enterprise :arg1-of ( own :arg0 state )  :mod ( guideline :mod-of ( policy :arg1-of ( control :arg1-of border )  :arg1-of relax )  :quant ( series :arg1-of ( adopt :arg0 ( group :arg0-of lead )  )  )  )  )  :arg2 ( absorb :arg1 ( capital :arg1-of private )  :op2-of ( and :op1 ( regulate :arg0 ( list :mod negative )  :arg1 ( access :arg2 market )  )  :op3 ( overhaul :arg1 ( system :mod ( register :arg1-of reside )  )  )  )  )
state :arg0 ( and :arg0-of ( identify :arg1 sector :purpose-of draw )  :op1 ( business :arg1-of ( limit :arg2 off :arg3 invest )  )  )  :arg1 ( list :mod negative )  :arg1-of say
and :op1 ( test :arg1 system :manner gradual )  :op2 ( improve :arg1 program )
say :arg0 state :arg1 ( significant :arg1 move :concession ( give :arg1 ( role :mod big :purpose ( allocate :arg1 resource :op1-of ( and :op2 ( ensure :arg1 ( environment :arg1-of ( base :location law )  :mod business )  )  )  )  )  :arg2 market )  )  :arg2 ( open :arg1 market :degree more )
sure :arg1 ( decide :arg0 company :arg1 ( run :arg1 business :arg0 company )  )  :purpose-of ( loosen :arg0 ( government-organization :arg0-of govern )  :arg1 ( control :arg1 ( power :arg1-of ( delegate :arg2 company )  )  )  :mod also )
say :arg0 state :arg1 ( allow :arg0 ( country :name ( name :op1 china )  :wiki china )  :arg1 ( explore :arg0 ( area :arg1-of border )  :arg1 ( model :mod new :poss ( cooperate :arg0-of ( cross :arg1 border )  :arg2 economy :op1-of ( and :op2 ( mechanism :mod ( promote :arg1 ( grow :arg1 region )  )  :mod new )  )  )  )  )  )  :mod also
control :arg0 state :arg1 ( sector :arg1-of ( open :arg0 ( bid :arg0 ( area :arg1-of ( invest :arg1-of private )  :quant more )  )  )  )
state :arg0 ( government-organization :arg0-of ( change :arg1 it :arg2 toward :op1-of ( and :arg0-of ( protect :arg1 interest )  :op2 ( invest :arg0 foreign :arg2 lawful )  )  :polarity - )  :arg0-of ( govern :arg1 policy )  )  :arg1 ( and :op1 ( fund :arg0 of :arg1 foreign )  :op2 company :op3 ( provide :arg1 good :arg2 service )  )  :arg1-of ( say :arg0 they )
permit :arg0 ( reside :arg0 foreign :arg1 permanent )  :arg1 ( or :arg1-of ( process :arg1-of apply :op1-of ( and :arg1-of streamline )  )  :arg1-of require :arg1-of green :arg1-of ( make :arg0 ( it :arg0-of ( will :arg1 addition )  :arg1-of easy )  )  :arg1-of apply :arg1-of ( optimize :arg0 card )  )
and :op1 ( person :arg0-of ( prosecute :arg1 ( discuss :arg0 also :arg1 meet :arg1-of ( guarantee :arg2 lawyer )  :arg1-of ( practice :op1-of ( and :op2 ( nurture :arg1 professional )  )  )  :arg1-of judge )  )  :arg1-of right )
state :arg1 ( and :op1 ( person :arg0-of ( have-org-role :arg2 premier )  :name ( name :op1 li :op2 keqiang )  :op1-of ( and :arg0-of ( attend :arg1 meet :mod also )  :op2 ( person :arg0-of lead :mod senior )  )  )  :op2 ( person :name ( name :op1 liu :op2 yunshan )  )  :op3 ( person :name ( name :op1 zhang :op2 gaoli )  )  )  :arg1-of say :arg1-of ( release :time ( after :op1 meet )  )
want :arg0 ( organization :name ( name :op1 eu )  :wiki european_union )  :arg1 ( double :arg1 ( limit :arg1 ( fish :mod predatory )  :mod mercury )  :arg0 organization )
and :op1 ( want :arg0 ( commission :mod ( organization :name ( name :op1 eu )  :wiki european_union )  )  :arg1 ( double :arg1 ( limit :arg1 mercury )  )  )  :op2 ( fish :mod large )  :op3 ( possible :arg1 ( expect :arg0 ( person :arg0-of consume :arg1-of ( dose :arg1-of ( high :arg1-of significant )  :arg2 ( neurotoxin :mod this )  )  )  :arg1 predatory )  )
subject :arg1 ( paper :arg0-of ( effect :arg1-of ( appropriate :mod-of industry :polarity - )  :arg1-of pass :arg1-of ( critical :arg0 heavy )  :arg1-of ( risk :arg0 ( plan :arg1 of )  :arg2 ( politics :op1-of ( and :op2 ( force :mod full )  :op3 pregnant :op4 woman :op5 ( person :arg0-of ( declare :arg1 ( child :mod small )  )  :name ( name :op1 the )  )  )  :op2-of ( and :op1 environment )  )  :op1-of ( and :op2 side )  )  )  :arg1-of ( work :arg0 ( organization :name ( name :op1 eu )  :wiki european_union )  )  :arg1-of ( consume :arg1-of organize )  )  :arg2 available
say :arg1 ( or :arg0-of ( limit :arg1 ( large :mod-of fish )  )  :arg1-of ( shark :arg0 such )  :arg1-of ( of :arg0 ( food :mod-of chain )  :arg1-of end )  :op1 ( raise :arg0 1 :arg1 ( reason :arg1-of ( mass-quantity :mod mercury :unit kilogram )  :mod ( economy :mod fish )  )  :arg2 2 )  )
catch :arg1-of ( limit :arg1-of ( sell :arg1-of ( possible :arg0 large )  :polarity - )  :arg2-of ( base :arg0 ( mercury :arg2-of ( contaminate :arg0 today :arg1 fish :manner heavy )  )  :arg1 predatory )  :mod still :time current )  :quant ( percentage-entity :value ( 50 :op1-of some )  )
limit :arg1-of ( double :arg0 ( percentage-entity :mod only )  :time once )
say :arg0 mercury :arg1 ( want :arg0 ( organization :arg0-of ( return :arg1 0.5 :arg3 ( relax :arg1 0.1 :mod this )  )  :name ( name :op1 eu )  :wiki european_union )  :arg1 ( tighten :arg1 ( limit :arg0 ( mass-quantity :unit kilogram )  :arg1 ( fish :mod other )  )  :arg2 ( mg :time current )  )  )
contrast :arg1 ( trick :arg1-of ( general :time-of ( plan :arg1 maximum :time ( already :time-of comply )  :time today :time contaminate :time ( little :arg1-of ( cause :arg0 such )  )  :time level :time ( carp :arg0 example )  :time this )  )  :arg1-of cause :mod this :mod ( small :mod-of fish :mod-of prey )  )  :arg2 describe
diversionary :mod perfidiou :mod-of ( tactic :arg0-of ( help :arg1 ( economy :arg1-of declare :mod only )  :purpose-of ( reduce :arg1 ( fish :mod small )  )  )  )
predatory :mod-of ( fish :poss ( chain :arg1-of ( accumulate :arg0 ( metal :domain ( country :name ( name :op1 mercury )  )  :source ( heavy :mod ( toxic :degree high )  )  )  :arg2 large :path above :time ( being :mod ( human :mod-of all )  )  )  :consist-of food )  )
warn :arg0 ( government-organization :arg0-of ( low :arg1 level :arg2 ( child :arg0-of damage :arg1-of lead :arg1-of possible :arg1-of ( nervous :arg0 particular :mod-of system )  :mod unborn )  :mod even )  :arg0-of ( govern :arg1 ( country :name ( name :op1 germany )  :wiki germany )  )  :arg0-of ( issue :arg1 reason )  )  :arg1 this
maximum :mod-of ( level :mod ( that :arg1-of ( risk :arg0 ( he :arg0-of ( regard :arg1 page :arg2 environment :polarity - :time current )  :arg0-of ( declare :arg1 home )  :arg0-of ( have-org-role :arg1 ( country :name ( name :op1 germany )  :wiki germany )  :arg2 minister )  )  :arg1-of ( general :arg0 population )  :arg1-of anticipate :arg2 health )  )  )
release :arg1 ( country :name ( name :op1 mercury )  )  :arg2 environment :location primary :manner ( burn :arg1 coal )
say :arg0 ( information :arg1-of ( write :arg0 ( mercury :mod-of ( tonne :unit-of ( volume-quantity :quant 6 )  )  :quant ( more :quant-of year )  )  :manner ( environment :mod-of ( thing :name ( name :op1 german :op2 ministry )  )  )  )  )  :arg1 ( discharge :arg1 ( third :poss ( amount :arg1-of ( emit :arg0 ( country :name ( name :op1 germany )  :wiki germany )  )  :arg2-of total )  :quant 2 )  :purpose ( country :arg1-of ( have-org-role :arg0 ( person :name ( name :op1 annalena :op2 baerbock )  )  :arg2 member )  :name ( name :op1 green :op2 bundestag )  )  )  :mod ( plant :location ( country :mod-of coal :name ( name :op1 germany )  :wiki germany )  )
quote :arg0 ( newspaper :arg2-of ( long :arg1 term :arg1-of ( exceed :arg0 extensive :op3-of ( and :op1 ( concentrate :arg1 ( of :mod-of ( mercury :mod-of fish )  )  )  :op2 example )  )  )  )  :arg1 paper :arg2 spiegel :time ( date-entity :month 3 )
alert :arg0-of ( rate :arg1 fish :arg3 ( risk :arg1 ( rasff :mod ( system :arg0-of ( warn :arg1 ( organization :name ( name :op1 eu )  :wiki european_union )  )  )  )  :arg1-of ( report :arg1-of ( frequent :arg0 ( continent :name ( name :op1 europe )  :wiki europe )  :degree most )  )  :arg2 health )  :time ( year :mod past )  )  :arg1 mercury :arg1-of wide
call :purpose ( protest :arg0 ( person :arg0-of ( consume :arg1 ( plan :arg0 ( organization :name ( name :op1 eu )  :wiki european_union )  )  )  )  )
